;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

// not implemented
// The reason for having an empty file and not throwing is to allow
// untraditional implementation of this module.

},{}],2:[function(require,module,exports){
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
exports.readIEEE754 = function(buffer, offset, isBE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isBE ? 0 : (nBytes - 1),
      d = isBE ? 1 : -1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.writeIEEE754 = function(buffer, value, offset, isBE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isBE ? (nBytes - 1) : 0,
      d = isBE ? -1 : 1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],"q9TxCC":[function(require,module,exports){
var assert;
exports.Buffer = Buffer;
exports.SlowBuffer = Buffer;
Buffer.poolSize = 8192;
exports.INSPECT_MAX_BYTES = 50;

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function Buffer(subject, encoding, offset) {
  if(!assert) assert= require('assert');
  if (!(this instanceof Buffer)) {
    return new Buffer(subject, encoding, offset);
  }
  this.parent = this;
  this.offset = 0;

  // Work-around: node's base64 implementation
  // allows for non-padded strings while base64-js
  // does not..
  if (encoding == "base64" && typeof subject == "string") {
    subject = stringtrim(subject);
    while (subject.length % 4 != 0) {
      subject = subject + "="; 
    }
  }

  var type;

  // Are we slicing?
  if (typeof offset === 'number') {
    this.length = coerce(encoding);
    // slicing works, with limitations (no parent tracking/update)
    // check https://github.com/toots/buffer-browserify/issues/19
    for (var i = 0; i < this.length; i++) {
        this[i] = subject.get(i+offset);
    }
  } else {
    // Find the length
    switch (type = typeof subject) {
      case 'number':
        this.length = coerce(subject);
        break;

      case 'string':
        this.length = Buffer.byteLength(subject, encoding);
        break;

      case 'object': // Assume object is an array
        this.length = coerce(subject.length);
        break;

      default:
        throw new Error('First argument needs to be a number, ' +
                        'array or string.');
    }

    // Treat array-ish objects as a byte array.
    if (isArrayIsh(subject)) {
      for (var i = 0; i < this.length; i++) {
        if (subject instanceof Buffer) {
          this[i] = subject.readUInt8(i);
        }
        else {
          this[i] = subject[i];
        }
      }
    } else if (type == 'string') {
      // We are a string
      this.length = this.write(subject, 0, encoding);
    } else if (type === 'number') {
      for (var i = 0; i < this.length; i++) {
        this[i] = 0;
      }
    }
  }
}

Buffer.prototype.get = function get(i) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this[i];
};

Buffer.prototype.set = function set(i, v) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this[i] = v;
};

Buffer.byteLength = function (str, encoding) {
  switch (encoding || "utf8") {
    case 'hex':
      return str.length / 2;

    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(str).length;

    case 'ascii':
    case 'binary':
      return str.length;

    case 'base64':
      return base64ToBytes(str).length;

    default:
      throw new Error('Unknown encoding');
  }
};

Buffer.prototype.utf8Write = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten =  blitBuffer(utf8ToBytes(string), this, offset, length);
};

Buffer.prototype.asciiWrite = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten =  blitBuffer(asciiToBytes(string), this, offset, length);
};

Buffer.prototype.binaryWrite = Buffer.prototype.asciiWrite;

Buffer.prototype.base64Write = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten = blitBuffer(base64ToBytes(string), this, offset, length);
};

Buffer.prototype.base64Slice = function (start, end) {
  var bytes = Array.prototype.slice.apply(this, arguments)
  return require("base64-js").fromByteArray(bytes);
};

Buffer.prototype.utf8Slice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var res = "";
  var tmp = "";
  var i = 0;
  while (i < bytes.length) {
    if (bytes[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(bytes[i]);
      tmp = "";
    } else
      tmp += "%" + bytes[i].toString(16);

    i++;
  }

  return res + decodeUtf8Char(tmp);
}

Buffer.prototype.asciiSlice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var ret = "";
  for (var i = 0; i < bytes.length; i++)
    ret += String.fromCharCode(bytes[i]);
  return ret;
}

Buffer.prototype.binarySlice = Buffer.prototype.asciiSlice;

Buffer.prototype.inspect = function() {
  var out = [],
      len = this.length;
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }
  return '<Buffer ' + out.join(' ') + '>';
};


Buffer.prototype.hexSlice = function(start, end) {
  var len = this.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; i++) {
    out += toHex(this[i]);
  }
  return out;
};


Buffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();
  start = +start || 0;
  if (typeof end == 'undefined') end = this.length;

  // Fastpath empty strings
  if (+end == start) {
    return '';
  }

  switch (encoding) {
    case 'hex':
      return this.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.utf8Slice(start, end);

    case 'ascii':
      return this.asciiSlice(start, end);

    case 'binary':
      return this.binarySlice(start, end);

    case 'base64':
      return this.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


Buffer.prototype.hexWrite = function(string, offset, length) {
  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2) {
    throw new Error('Invalid hex string');
  }
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(byte)) throw new Error('Invalid hex string');
    this[offset + i] = byte;
  }
  Buffer._charsWritten = i * 2;
  return i;
};


Buffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  switch (encoding) {
    case 'hex':
      return this.hexWrite(string, offset, length);

    case 'utf8':
    case 'utf-8':
      return this.utf8Write(string, offset, length);

    case 'ascii':
      return this.asciiWrite(string, offset, length);

    case 'binary':
      return this.binaryWrite(string, offset, length);

    case 'base64':
      return this.base64Write(string, offset, length);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Write(string, offset, length);

    default:
      throw new Error('Unknown encoding');
  }
};

// slice(start, end)
function clamp(index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue;
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len;
  if (index >= 0) return index;
  index += len;
  if (index >= 0) return index;
  return 0;
}

Buffer.prototype.slice = function(start, end) {
  var len = this.length;
  start = clamp(start, len, 0);
  end = clamp(end, len, len);
  return new Buffer(this, end - start, +start);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function(target, target_start, start, end) {
  var source = this;
  start || (start = 0);
  if (end === undefined || isNaN(end)) {
    end = this.length;
  }
  target_start || (target_start = 0);

  if (end < start) throw new Error('sourceEnd < sourceStart');

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length == 0 || source.length == 0) return 0;

  if (target_start < 0 || target_start >= target.length) {
    throw new Error('targetStart out of bounds');
  }

  if (start < 0 || start >= source.length) {
    throw new Error('sourceStart out of bounds');
  }

  if (end < 0 || end > source.length) {
    throw new Error('sourceEnd out of bounds');
  }

  // Are we oob?
  if (end > this.length) {
    end = this.length;
  }

  if (target.length - target_start < end - start) {
    end = target.length - target_start + start;
  }

  var temp = [];
  for (var i=start; i<end; i++) {
    assert.ok(typeof this[i] !== 'undefined', "copying undefined buffer bytes!");
    temp.push(this[i]);
  }

  for (var i=target_start; i<target_start+temp.length; i++) {
    target[i] = temp[i-target_start];
  }
};

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill(value, start, end) {
  value || (value = 0);
  start || (start = 0);
  end || (end = this.length);

  if (typeof value === 'string') {
    value = value.charCodeAt(0);
  }
  if (!(typeof value === 'number') || isNaN(value)) {
    throw new Error('value is not a number');
  }

  if (end < start) throw new Error('end < start');

  // Fill 0 bytes; we're done
  if (end === start) return 0;
  if (this.length == 0) return 0;

  if (start < 0 || start >= this.length) {
    throw new Error('start out of bounds');
  }

  if (end < 0 || end > this.length) {
    throw new Error('end out of bounds');
  }

  for (var i = start; i < end; i++) {
    this[i] = value;
  }
}

// Static methods
Buffer.isBuffer = function isBuffer(b) {
  return b instanceof Buffer || b instanceof Buffer;
};

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) {
    throw new Error("Usage: Buffer.concat(list, [totalLength])\n \
      list should be an Array.");
  }

  if (list.length === 0) {
    return new Buffer(0);
  } else if (list.length === 1) {
    return list[0];
  }

  if (typeof totalLength !== 'number') {
    totalLength = 0;
    for (var i = 0; i < list.length; i++) {
      var buf = list[i];
      totalLength += buf.length;
    }
  }

  var buffer = new Buffer(totalLength);
  var pos = 0;
  for (var i = 0; i < list.length; i++) {
    var buf = list[i];
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

Buffer.isEncoding = function(encoding) {
  switch ((encoding + '').toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

// helpers

function coerce(length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length);
  return length < 0 ? 0 : length;
}

function isArray(subject) {
  return (Array.isArray ||
    function(subject){
      return {}.toString.apply(subject) == '[object Array]'
    })
    (subject)
}

function isArrayIsh(subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
         subject && typeof subject === 'object' &&
         typeof subject.length === 'number';
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; i++)
    if (str.charCodeAt(i) <= 0x7F)
      byteArray.push(str.charCodeAt(i));
    else {
      var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16));
    }

  return byteArray;
}

function asciiToBytes(str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++ )
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push( str.charCodeAt(i) & 0xFF );

  return byteArray;
}

function base64ToBytes(str) {
  return require("base64-js").toByteArray(str);
}

function blitBuffer(src, dst, offset, length) {
  var pos, i = 0;
  while (i < length) {
    if ((i+offset >= dst.length) || (i >= src.length))
      break;

    dst[i + offset] = src[i];
    i++;
  }
  return i;
}

function decodeUtf8Char(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
  }
}

// read/write bit-twiddling

Buffer.prototype.readUInt8 = function(offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return;

  return buffer[offset];
};

function readUInt16(buffer, offset, isBigEndian, noAssert) {
  var val = 0;


  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return 0;

  if (isBigEndian) {
    val = buffer[offset] << 8;
    if (offset + 1 < buffer.length) {
      val |= buffer[offset + 1];
    }
  } else {
    val = buffer[offset];
    if (offset + 1 < buffer.length) {
      val |= buffer[offset + 1] << 8;
    }
  }

  return val;
}

Buffer.prototype.readUInt16LE = function(offset, noAssert) {
  return readUInt16(this, offset, false, noAssert);
};

Buffer.prototype.readUInt16BE = function(offset, noAssert) {
  return readUInt16(this, offset, true, noAssert);
};

function readUInt32(buffer, offset, isBigEndian, noAssert) {
  var val = 0;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return 0;

  if (isBigEndian) {
    if (offset + 1 < buffer.length)
      val = buffer[offset + 1] << 16;
    if (offset + 2 < buffer.length)
      val |= buffer[offset + 2] << 8;
    if (offset + 3 < buffer.length)
      val |= buffer[offset + 3];
    val = val + (buffer[offset] << 24 >>> 0);
  } else {
    if (offset + 2 < buffer.length)
      val = buffer[offset + 2] << 16;
    if (offset + 1 < buffer.length)
      val |= buffer[offset + 1] << 8;
    val |= buffer[offset];
    if (offset + 3 < buffer.length)
      val = val + (buffer[offset + 3] << 24 >>> 0);
  }

  return val;
}

Buffer.prototype.readUInt32LE = function(offset, noAssert) {
  return readUInt32(this, offset, false, noAssert);
};

Buffer.prototype.readUInt32BE = function(offset, noAssert) {
  return readUInt32(this, offset, true, noAssert);
};


/*
 * Signed integer types, yay team! A reminder on how two's complement actually
 * works. The first bit is the signed bit, i.e. tells us whether or not the
 * number should be positive or negative. If the two's complement value is
 * positive, then we're done, as it's equivalent to the unsigned representation.
 *
 * Now if the number is positive, you're pretty much done, you can just leverage
 * the unsigned translations and return those. Unfortunately, negative numbers
 * aren't quite that straightforward.
 *
 * At first glance, one might be inclined to use the traditional formula to
 * translate binary numbers between the positive and negative values in two's
 * complement. (Though it doesn't quite work for the most negative value)
 * Mainly:
 *  - invert all the bits
 *  - add one to the result
 *
 * Of course, this doesn't quite work in Javascript. Take for example the value
 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
 * course, Javascript will do the following:
 *
 * > ~0xff80
 * -65409
 *
 * Whoh there, Javascript, that's not quite right. But wait, according to
 * Javascript that's perfectly correct. When Javascript ends up seeing the
 * constant 0xff80, it has no notion that it is actually a signed number. It
 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
 * binary negation, it casts it into a signed value, (positive 0xff80). Then
 * when you perform binary negation on that, it turns it into a negative number.
 *
 * Instead, we're going to have to use the following general formula, that works
 * in a rather Javascript friendly way. I'm glad we don't support this kind of
 * weird numbering scheme in the kernel.
 *
 * (BIT-MAX - (unsigned)val + 1) * -1
 *
 * The astute observer, may think that this doesn't make sense for 8-bit numbers
 * (really it isn't necessary for them). However, when you get 16-bit numbers,
 * you do. Let's go back to our prior example and see how this will look:
 *
 * (0xffff - 0xff80 + 1) * -1
 * (0x007f + 1) * -1
 * (0x0080) * -1
 */
Buffer.prototype.readInt8 = function(offset, noAssert) {
  var buffer = this;
  var neg;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return;

  neg = buffer[offset] & 0x80;
  if (!neg) {
    return (buffer[offset]);
  }

  return ((0xff - buffer[offset] + 1) * -1);
};

function readInt16(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt16(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x8000;
  if (!neg) {
    return val;
  }

  return (0xffff - val + 1) * -1;
}

Buffer.prototype.readInt16LE = function(offset, noAssert) {
  return readInt16(this, offset, false, noAssert);
};

Buffer.prototype.readInt16BE = function(offset, noAssert) {
  return readInt16(this, offset, true, noAssert);
};

function readInt32(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt32(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x80000000;
  if (!neg) {
    return (val);
  }

  return (0xffffffff - val + 1) * -1;
}

Buffer.prototype.readInt32LE = function(offset, noAssert) {
  return readInt32(this, offset, false, noAssert);
};

Buffer.prototype.readInt32BE = function(offset, noAssert) {
  return readInt32(this, offset, true, noAssert);
};

function readFloat(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.readFloatLE = function(offset, noAssert) {
  return readFloat(this, offset, false, noAssert);
};

Buffer.prototype.readFloatBE = function(offset, noAssert) {
  return readFloat(this, offset, true, noAssert);
};

function readDouble(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 7 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.readDoubleLE = function(offset, noAssert) {
  return readDouble(this, offset, false, noAssert);
};

Buffer.prototype.readDoubleBE = function(offset, noAssert) {
  return readDouble(this, offset, true, noAssert);
};


/*
 * We have to make sure that the value is a valid integer. This means that it is
 * non-negative. It has no fractional component and that it does not exceed the
 * maximum allowed value.
 *
 *      value           The number to check for validity
 *
 *      max             The maximum value
 */
function verifuint(value, max) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value >= 0,
      'specified a negative value for writing an unsigned value');

  assert.ok(value <= max, 'value is larger than maximum value for type');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xff);
  }

  if (offset < buffer.length) {
    buffer[offset] = value;
  }
};

function writeUInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffff);
  }

  for (var i = 0; i < Math.min(buffer.length - offset, 2); i++) {
    buffer[offset + i] =
        (value & (0xff << (8 * (isBigEndian ? 1 - i : i)))) >>>
            (isBigEndian ? 1 - i : i) * 8;
  }

}

Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, true, noAssert);
};

function writeUInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffffffff);
  }

  for (var i = 0; i < Math.min(buffer.length - offset, 4); i++) {
    buffer[offset + i] =
        (value >>> (isBigEndian ? 3 - i : i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, true, noAssert);
};


/*
 * We now move onto our friends in the signed number category. Unlike unsigned
 * numbers, we're going to have to worry a bit more about how we put values into
 * arrays. Since we are only worrying about signed 32-bit values, we're in
 * slightly better shape. Unfortunately, we really can't do our favorite binary
 * & in this system. It really seems to do the wrong thing. For example:
 *
 * > -32 & 0xff
 * 224
 *
 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
 * this aren't treated as a signed number. Ultimately a bad thing.
 *
 * What we're going to want to do is basically create the unsigned equivalent of
 * our representation and pass that off to the wuint* functions. To do that
 * we're going to do the following:
 *
 *  - if the value is positive
 *      we can pass it directly off to the equivalent wuint
 *  - if the value is negative
 *      we do the following computation:
 *         mb + val + 1, where
 *         mb   is the maximum unsigned value in that byte size
 *         val  is the Javascript negative integer
 *
 *
 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
 * you do out the computations:
 *
 * 0xffff - 128 + 1
 * 0xffff - 127
 * 0xff80
 *
 * You can then encode this value as the signed version. This is really rather
 * hacky, but it should work and get the job done which is our goal here.
 */

/*
 * A series of checks to make sure we actually have a signed 32-bit number
 */
function verifsint(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

function verifIEEE754(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');
}

Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7f, -0x80);
  }

  if (value >= 0) {
    buffer.writeUInt8(value, offset, noAssert);
  } else {
    buffer.writeUInt8(0xff + value + 1, offset, noAssert);
  }
};

function writeInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fff, -0x8000);
  }

  if (value >= 0) {
    writeUInt16(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt16(buffer, 0xffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, true, noAssert);
};

function writeInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fffffff, -0x80000000);
  }

  if (value >= 0) {
    writeUInt32(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt32(buffer, 0xffffffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, true, noAssert);
};

function writeFloat(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, false, noAssert);
};

Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, true, noAssert);
};

function writeDouble(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 7 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, false, noAssert);
};

Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, true, noAssert);
};

},{"./buffer_ieee754":1,"assert":6,"base64-js":4}],"buffer-browserify":[function(require,module,exports){
module.exports=require('q9TxCC');
},{}],4:[function(require,module,exports){
(function (exports) {
	'use strict';

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	function b64ToByteArray(b64) {
		var i, j, l, tmp, placeHolders, arr;
	
		if (b64.length % 4 > 0) {
			throw 'Invalid string. Length must be a multiple of 4';
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		placeHolders = b64.indexOf('=');
		placeHolders = placeHolders > 0 ? b64.length - placeHolders : 0;

		// base64 is 4/3 + up to two characters of the original data
		arr = [];//new Uint8Array(b64.length * 3 / 4 - placeHolders);

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length;

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (lookup.indexOf(b64[i]) << 18) | (lookup.indexOf(b64[i + 1]) << 12) | (lookup.indexOf(b64[i + 2]) << 6) | lookup.indexOf(b64[i + 3]);
			arr.push((tmp & 0xFF0000) >> 16);
			arr.push((tmp & 0xFF00) >> 8);
			arr.push(tmp & 0xFF);
		}

		if (placeHolders === 2) {
			tmp = (lookup.indexOf(b64[i]) << 2) | (lookup.indexOf(b64[i + 1]) >> 4);
			arr.push(tmp & 0xFF);
		} else if (placeHolders === 1) {
			tmp = (lookup.indexOf(b64[i]) << 10) | (lookup.indexOf(b64[i + 1]) << 4) | (lookup.indexOf(b64[i + 2]) >> 2);
			arr.push((tmp >> 8) & 0xFF);
			arr.push(tmp & 0xFF);
		}

		return arr;
	}

	function uint8ToBase64(uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length;

		function tripletToBase64 (num) {
			return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
		};

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
			output += tripletToBase64(temp);
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1];
				output += lookup[temp >> 2];
				output += lookup[(temp << 4) & 0x3F];
				output += '==';
				break;
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
				output += lookup[temp >> 10];
				output += lookup[(temp >> 4) & 0x3F];
				output += lookup[(temp << 2) & 0x3F];
				output += '=';
				break;
		}

		return output;
	}

	module.exports.toByteArray = b64ToByteArray;
	module.exports.fromByteArray = uint8ToBase64;
}());

},{}],5:[function(require,module,exports){


//
// The shims in this file are not fully implemented shims for the ES5
// features, but do work for the particular usecases there is in
// the other modules.
//

var toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

// Array.isArray is supported in IE9
function isArray(xs) {
  return toString.call(xs) === '[object Array]';
}
exports.isArray = typeof Array.isArray === 'function' ? Array.isArray : isArray;

// Array.prototype.indexOf is supported in IE9
exports.indexOf = function indexOf(xs, x) {
  if (xs.indexOf) return xs.indexOf(x);
  for (var i = 0; i < xs.length; i++) {
    if (x === xs[i]) return i;
  }
  return -1;
};

// Array.prototype.filter is supported in IE9
exports.filter = function filter(xs, fn) {
  if (xs.filter) return xs.filter(fn);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (fn(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
};

// Array.prototype.forEach is supported in IE9
exports.forEach = function forEach(xs, fn, self) {
  if (xs.forEach) return xs.forEach(fn, self);
  for (var i = 0; i < xs.length; i++) {
    fn.call(self, xs[i], i, xs);
  }
};

// Array.prototype.map is supported in IE9
exports.map = function map(xs, fn) {
  if (xs.map) return xs.map(fn);
  var out = new Array(xs.length);
  for (var i = 0; i < xs.length; i++) {
    out[i] = fn(xs[i], i, xs);
  }
  return out;
};

// Array.prototype.reduce is supported in IE9
exports.reduce = function reduce(array, callback, opt_initialValue) {
  if (array.reduce) return array.reduce(callback, opt_initialValue);
  var value, isValueSet = false;

  if (2 < arguments.length) {
    value = opt_initialValue;
    isValueSet = true;
  }
  for (var i = 0, l = array.length; l > i; ++i) {
    if (array.hasOwnProperty(i)) {
      if (isValueSet) {
        value = callback(value, array[i], i, array);
      }
      else {
        value = array[i];
        isValueSet = true;
      }
    }
  }

  return value;
};

// String.prototype.substr - negative index don't work in IE8
if ('ab'.substr(-1) !== 'b') {
  exports.substr = function (str, start, length) {
    // did we get a negative start, calculate how much it is from the beginning of the string
    if (start < 0) start = str.length + start;

    // call the original function
    return str.substr(start, length);
  };
} else {
  exports.substr = function (str, start, length) {
    return str.substr(start, length);
  };
}

// String.prototype.trim is supported in IE9
exports.trim = function (str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
};

// Function.prototype.bind is supported in IE9
exports.bind = function () {
  var args = Array.prototype.slice.call(arguments);
  var fn = args.shift();
  if (fn.bind) return fn.bind.apply(fn, args);
  var self = args.shift();
  return function () {
    fn.apply(self, args.concat([Array.prototype.slice.call(arguments)]));
  };
};

// Object.create is supported in IE9
function create(prototype, properties) {
  var object;
  if (prototype === null) {
    object = { '__proto__' : null };
  }
  else {
    if (typeof prototype !== 'object') {
      throw new TypeError(
        'typeof prototype[' + (typeof prototype) + '] != \'object\''
      );
    }
    var Type = function () {};
    Type.prototype = prototype;
    object = new Type();
    object.__proto__ = prototype;
  }
  if (typeof properties !== 'undefined' && Object.defineProperties) {
    Object.defineProperties(object, properties);
  }
  return object;
}
exports.create = typeof Object.create === 'function' ? Object.create : create;

// Object.keys and Object.getOwnPropertyNames is supported in IE9 however
// they do show a description and number property on Error objects
function notObject(object) {
  return ((typeof object != "object" && typeof object != "function") || object === null);
}

function keysShim(object) {
  if (notObject(object)) {
    throw new TypeError("Object.keys called on a non-object");
  }

  var result = [];
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result.push(name);
    }
  }
  return result;
}

// getOwnPropertyNames is almost the same as Object.keys one key feature
//  is that it returns hidden properties, since that can't be implemented,
//  this feature gets reduced so it just shows the length property on arrays
function propertyShim(object) {
  if (notObject(object)) {
    throw new TypeError("Object.getOwnPropertyNames called on a non-object");
  }

  var result = keysShim(object);
  if (exports.isArray(object) && exports.indexOf(object, 'length') === -1) {
    result.push('length');
  }
  return result;
}

var keys = typeof Object.keys === 'function' ? Object.keys : keysShim;
var getOwnPropertyNames = typeof Object.getOwnPropertyNames === 'function' ?
  Object.getOwnPropertyNames : propertyShim;

if (new Error().hasOwnProperty('description')) {
  var ERROR_PROPERTY_FILTER = function (obj, array) {
    if (toString.call(obj) === '[object Error]') {
      array = exports.filter(array, function (name) {
        return name !== 'description' && name !== 'number' && name !== 'message';
      });
    }
    return array;
  };

  exports.keys = function (object) {
    return ERROR_PROPERTY_FILTER(object, keys(object));
  };
  exports.getOwnPropertyNames = function (object) {
    return ERROR_PROPERTY_FILTER(object, getOwnPropertyNames(object));
  };
} else {
  exports.keys = keys;
  exports.getOwnPropertyNames = getOwnPropertyNames;
}

// Object.getOwnPropertyDescriptor - supported in IE8 but only on dom elements
function valueObject(value, key) {
  return { value: value[key] };
}

if (typeof Object.getOwnPropertyDescriptor === 'function') {
  try {
    Object.getOwnPropertyDescriptor({'a': 1}, 'a');
    exports.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  } catch (e) {
    // IE8 dom element issue - use a try catch and default to valueObject
    exports.getOwnPropertyDescriptor = function (value, key) {
      try {
        return Object.getOwnPropertyDescriptor(value, key);
      } catch (e) {
        return valueObject(value, key);
      }
    };
  }
} else {
  exports.getOwnPropertyDescriptor = valueObject;
}

},{}],6:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// UTILITY
var util = require('util');
var shims = require('_shims');
var pSlice = Array.prototype.slice;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  this.message = options.message || getMessage(this);
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = shims.keys(a),
        kb = shims.keys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};
},{"_shims":5,"util":7}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var shims = require('_shims');

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  shims.forEach(array, function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = shims.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = shims.getOwnPropertyNames(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }

  shims.forEach(keys, function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = shims.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (shims.indexOf(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = shims.reduce(output, function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return shims.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) && objectToString(e) === '[object Error]';
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return arg instanceof Buffer;
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = shims.create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = shims.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

},{"_shims":5}]},{},[])
;;module.exports=require("buffer-browserify")

},{}],3:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],4:[function(require,module,exports){
var global=typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};/**
 * @license
 * Lo-Dash 2.4.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var objectProto = Object.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          forOwn(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
      descriptor.value = null;
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;
        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
        }
        }
      }
      return result
    };

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index];
        }
        }
      }
      return result
    };

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? forEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        var props = keys(collection);
        length = props.length;
        forOwn(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(collection[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * https://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.2';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

},{}],5:[function(require,module,exports){

function BodyScroll(){
}

BodyScroll.prototype.isLocked = function() {
  return !!this.initialState;
};

BodyScroll.prototype.lock = function() {
  if (this.initialState) {
    this.initialState.lockCount++;
    return;
  }
  var html = document.getElementsByTagName('html')[0];
  var body = document.body;
  this.initialState = {
    htmlOverflow: html.style.overflow,
    bodyOverflow: body.style.overflow,
    lockCount: 1
  };
  html.style.overflow = 'hidden';
  body.style.overflow = 'hidden';
};

BodyScroll.prototype.unlock = function(force) {
  if (!this.initialState) {
    return;
  }
  if (this.initialState.lockCount > 1 && !force) {
    this.initialState.lockCount--;
    return;
  }
  var initial = this.initialState;
  var html = document.getElementsByTagName('html')[0];
  var body = document.body;
  html.style.overflow = initial.htmlOverflow;
  body.style.overflow = initial.bodyOverflow;
  this.initialState = null;
};

module.exports = new BodyScroll();

},{}],6:[function(require,module,exports){
(function() {
  var throttle = function(fn, threshhold, scope) {
    threshhold || (threshhold = 250);
    var last,
      deferTimer;
    return function() {
      var context = scope || this;

      var now = +new Date,
        args = arguments;
      if (last && now < last + threshhold) {
        // hold on to it
        clearTimeout(deferTimer);
        deferTimer = setTimeout(function() {
          last = now;
          fn.apply(context, args);
        }, threshhold);
      } else {
        last = now;
        fn.apply(context, args);
      }
    };
  };

  try {
    if (typeof angular !== 'undefined' && angular.module('shopbeamShared')) {
      angular.module('shopbeamShared').value('throttle', throttle)
    }
  } catch (err) {
    //probably either no angular or no "shopbeamShared" module - it's k!
    // console.warn('error caught while trying to register angular component: ', err)
  }

  module.exports = throttle
}());

},{}],7:[function(require,module,exports){
(function(service) {

  var pmrpc = require('../../lib/izuzak/pmrpc')
    , q = require('../../lib/kriskowal/q')
//    , $ = require('../../../widget/app/loader/build')
    , crossDomain = false
    ;

  if (window !== window.top) {
    try {
      // on iframes, document.referrer is initially the url of the parent document
      if (document.referrer && document.referrer.indexOf(document.location.origin) !== 0) {
        crossDomain = true;
      } else {
        window.top.location.href.toString();
      }
    } catch (err) {
      // couldn't access top window, this must be a cross-domain iframe
      crossDomain = true;
    }
  }

  if (!crossDomain) {
    service.hash = function(hash) {
      return deferredFactory(function(deferred) {
        return function() {
          if (hash !== null && hash !== undefined) {
            if (hash !== '') hash = '#' + hash;
            window.top.history.replaceState(null, '',
                window.top.location.href
                  .replace(window.top.location.hash, '') + hash
            )
          }

          deferred.resolve(window.top.location.hash);
        }
      }, true)
    };

    service.href = function() {
      return deferredFactory(function(deferred) {
        return function() {
          deferred.resolve(window.top.location.href);
        }
      }, true)
    };

    service.location = function() {
      return deferredFactory(function(deferred) {
        return function() {
          var keys = ['hash', 'href', 'host', 'hostname', 'origin', 'pathname', 'port', 'protocol']
            , locationData = {};

          keys.forEach(function(key) {
            locationData[key] = window.top.location[key]
          });

          deferred.resolve(locationData);
        }
      }, true)
    };

    service.document = function() {
      return deferredFactory(function(deferred) {
        return function() {
          deferred.resolve(window.top.document);
        }
      }, true)
    };

    service.window = function() {
      return deferredFactory(function(deferred) {
        return function() {
          deferred.resolve(window.top);
        }
      }, true)
    };


  } else {
    //TODO: CROSS DOMAIN NOT WORKING YET LOOK AT TODO BELOW!!!
    service.hash = function(hash) {
      return deferredFactory(function(deferred) {
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'hash',
          params             : [hash],
          onSuccess          : function(returnObj) {
            deferred.resolve(returnObj.returnValue);
          }
        })
      })
    };

    service.location = function() {
      return deferredFactory(function(deferred) {
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'location',
          onSuccess          : function(returnObj) {
            deferred.resolve(returnObj.returnValue);
          }
        })
      })
    };

    service.href = function() {
      return deferredFactory(function(deferred) {
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'href',
          onSuccess          : function(returnObj) {
            deferred.resolve(returnObj.returnValue);
          }
        })
      })
    };

    service.window = function() {
      return deferredFactory(function(deferred) {
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'window',
          onSuccess          : function(returnObj) {
            deferred.resolve(returnObj.returnValue)
          }
        })
      })
    }

//    service.document = function() {
//      return deferredFactory(function(deferred) {
//        pmrpc.call({
//          destination        : 'publish',
//          publicProcedureName: 'document',
//          onSuccess          : function(returnObj) {
//            deferred.resolve(returnObj.returnValue);
//          }
//        })
//      })
//    };
  }

  try {
    if (typeof angular !== 'undefined' && angular.module('shopbeamShared')) {
        angular.module('shopbeamShared').service('topWindowService', [
          function() {
            angular.copy(service, this);
          }
        ]);
    }
  } catch (err) {
    //probably either no angular or no "shopbeamShared" module - it's k!
    //console.warn('error caught while trying to register angular component: ', err)
  }


  //Only register rpc functions if you're the top window
  if (window === window.top) {
    pmrpc.register({
      publicProcedureName: 'hash',
      procedure          : function(hash) {
        try {
          return service.hash(hash);
        } catch (err) {
          console.error(err);
        }
      }
    });

    // TODO: make the rest of these async using `location` as a model
    pmrpc.register({
      publicProcedureName: 'location',
      isAsynchronous     : true,
      procedure          : function(onSuccess) {
        try {
          service.location().then(function(location) {
            onSuccess(location);
          });
        } catch (err) {
          console.error(err);
        }
      }
    });

    pmrpc.register({
      publicProcedureName: 'window',
      procedure          : function() {
        try {
//          return $.extend([window, {top: null, window: null}]);
          //TODO: write my own PostMessage RPC library and get rid of this useless pmrpc shit!
          return {
            document: {
              referrer: window.document.referrer
            },
            location: window.location,
            Shopbeam: {
              HOST: window.Shopbeam.HOST
            }
          };
//          return service.window();
        } catch (err) {
          console.error(err);
        }
      }
    })
  }

  function deferredFactory(fn, shouldSetTimeout) {
    var deferred = q.defer();
    if (shouldSetTimeout) {
      setTimeout(fn(deferred), 0);
    } else {
      fn(deferred);
    }
    return deferred.promise;
  }
}(exports));

},{"../../lib/izuzak/pmrpc":15,"../../lib/kriskowal/q":16}],8:[function(require,module,exports){
/*
* Client-side configurations
*
*/
module.exports = {

  // base configuration for all environments
  base: {
    analytics: {
      console: true,
    }
  },

  // environmental overrides
  local: {
    analytics: {
      // un-comment to enable GA locally (using staging account)
      /*ga: {
        trackingId: 'UA-49015918-2'
      }*/
    }
  },
  staging: {
    analytics: {
      ga: {
        trackingId: 'UA-49015918-2'
      }
    }
  },
  production: {
    analytics: {
      console: false,
      ga: {
        trackingId: 'UA-49015918-1'
      }
    }
  }

};

},{}],9:[function(require,module,exports){

var hostnameRegex = /https?\:\/\/([^\/]+)/i;

var envSubdomains = [
  'staging',
  'beta',
  'dev',
  'local'
];

var isCrossDomainIFrameCached = null;

function isCrossDomainIFrame() {
  if (typeof isCrossDomainIFrameCached !== null) {
    return isCrossDomainIFrameCached;
  }
  var crossDomain = false;
  if (window !== window.parent) {
    try {
      // on iframes, document.referrer is initially the url of the parent document
      if (document.referrer && document.referrer.indexOf(document.location.origin) !== 0) {
        crossDomain = true;
      } else {
        window.parent.location.href.toString();
      }
    } catch (err) {
      // couldn't access parent window, this must be a cross-domain iframe
      crossDomain = true;
    }
  }
  return (isCrossDomainIFrameCached = crossDomain);
}

function isSameDomainIFrame() {
  return window !== window.parent && !isCrossDomainIFrame();
}

function detectSourceHost() {
  var scriptTag;
  try {
    scriptTag = document.querySelector('script.shopbeam-script,script[src*="js/widget.loader.js"]');
    if (!scriptTag && isSameDomainIFrame()) {
      scriptTag = window.parent.document.querySelector('script.shopbeam-script,script[src*="js/widget.loader.js"]');
    }
  } catch(err) {
    scriptTag = null;
  }
  if (scriptTag) {
    var match = hostnameRegex.exec(scriptTag.src);
    if (match) {
      return match[1].toLowerCase();
    }
  }
  return document.location.host.toLowerCase();
}

function detectEnvironment() {
  var hostParts = detectSourceHost().split('.').reverse();
  if (hostParts[0] === 'com' && hostParts[1] === 'shopbeam') {
    // this is a shopbeam page, use page main subdomain
    if (envSubdomains.indexOf(hostParts[2]) >= 0) {
      return hostParts[2];
    }
    return 'production';
  }
  if (/^localhost\:/i.test(hostParts[0])) {
    return 'local';
  }
  return 'production';
}

exports.isCrossDomainIFrame = isCrossDomainIFrame;
exports.isSameDomainIFrame = isSameDomainIFrame;
exports.detect = detectEnvironment;

},{}],10:[function(require,module,exports){

var environment = require('./environment');
var all = require('./all');

function isObject(value) {
  return !(typeof value !== 'object' ||
    value instanceof Array ||
    value instanceof Date);
}

function deepMerge(target) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    for (var memberName in source) {
      if (source.hasOwnProperty(memberName)) {
        var value = source[memberName];
        var currentValue = target[memberName];
        if (isObject(value) && isObject(currentValue)) {
          deepMerge(currentValue, value);
        } else {
          target[memberName] = value;
        }
      }
    }
  }
  return target;
}

function current() {
  var environmentName = environment.detect();
  var config = deepMerge({}, all.base, all[environmentName]);
  config.environment = environmentName;
  return config;
}

exports.current = current;

},{"./all":8,"./environment":9}],11:[function(require,module,exports){
/*!
 * Adaptation of the $(document).ready() function from jQuery
 * library for use in simple JavaScript scenarios.
 *
 * --------------------------------------------------------------------- 
 * jQuery JavaScript Library v1.4.3
 * http://jquery.com/ 
 *
 * Copyright (c) 2010 John Resig, http://jquery.com/
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ----------------------------------------------------------------------
 */

var w3c = !!document.addEventListener,
  loaded = false,
  toplevel = false,
  fns = [];

if (w3c) {
  document.addEventListener("DOMContentLoaded", contentLoaded, true);
  window.addEventListener("load", ready, false);
}
else {
  document.attachEvent("onreadystatechange", contentLoaded);
  window.attachEvent("onload", ready);

  try {
    toplevel = window.frameElement === null;
  } catch (e) {
  }
  if (document.documentElement.doScroll && toplevel) {
    scrollCheck();
  }
}

function contentLoaded() {
  (w3c) ?
    document.removeEventListener("DOMContentLoaded", contentLoaded, true) :
    document.readyState === "complete" &&
      document.detachEvent("onreadystatechange", contentLoaded);
  ready();
}

// If IE is used, use the trick by Diego Perini
// http://javascript.nwbox.com/IEContentLoaded/
function scrollCheck() {
  if (loaded) {
    return;
  }

  try {
    document.documentElement.doScroll("left");
  }
  catch (e) {
    window.setTimeout(arguments.callee, 15);
    return;
  }
  ready();
}

function ready() {
  if (loaded) {
    return;
  }
  loaded = true;

  var len = fns.length,
    i = 0;

  for (; i < len; i++) {
    fns[i].call(document);
  }
}

module.exports = function(fn) {
  // if the DOM is already ready,
  // execute the function
  return (loaded) ?
    fn.call(document) :
    fns.push(fn);
};

},{}],12:[function(require,module,exports){
/*!
 * EventEmitter v4.2.3 - git.io/ee
 * Oliver Caldwell
 * MIT license
 * @preserve
 */

(function () {
	'use strict';

	/**
	 * Class for managing events.
	 * Can be extended to provide event functionality in other classes.
	 *
	 * @class EventEmitter Manages event registering and emitting.
	 */
	function EventEmitter() {}

	// Shortcuts to improve speed and size

	// Easy access to the prototype
	var proto = EventEmitter.prototype;

	/**
	 * Finds the index of the listener for the event in it's storage array.
	 *
	 * @param {Function[]} listeners Array of listeners to search through.
	 * @param {Function} listener Method to look for.
	 * @return {Number} Index of the specified listener, -1 if not found
	 * @api private
	 */
	function indexOfListener(listeners, listener) {
		var i = listeners.length;
		while (i--) {
			if (listeners[i].listener === listener) {
				return i;
			}
		}

		return -1;
	}

	/**
	 * Alias a method while keeping the context correct, to allow for overwriting of target method.
	 *
	 * @param {String} name The name of the target method.
	 * @return {Function} The aliased method
	 * @api private
	 */
	function alias(name) {
		return function aliasClosure() {
			return this[name].apply(this, arguments);
		};
	}

	/**
	 * Returns the listener array for the specified event.
	 * Will initialise the event object and listener arrays if required.
	 * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	 * Each property in the object response is an array of listener functions.
	 *
	 * @param {String|RegExp} evt Name of the event to return the listeners from.
	 * @return {Function[]|Object} All listener functions for the event.
	 */
	proto.getListeners = function getListeners(evt) {
		var events = this._getEvents();
		var response;
		var key;

		// Return a concatenated array of all matching events if
		// the selector is a regular expression.
		if (typeof evt === 'object') {
			response = {};
			for (key in events) {
				if (events.hasOwnProperty(key) && evt.test(key)) {
					response[key] = events[key];
				}
			}
		}
		else {
			response = events[evt] || (events[evt] = []);
		}

		return response;
	};

	/**
	 * Takes a list of listener objects and flattens it into a list of listener functions.
	 *
	 * @param {Object[]} listeners Raw listener objects.
	 * @return {Function[]} Just the listener functions.
	 */
	proto.flattenListeners = function flattenListeners(listeners) {
		var flatListeners = [];
		var i;

		for (i = 0; i < listeners.length; i += 1) {
			flatListeners.push(listeners[i].listener);
		}

		return flatListeners;
	};

	/**
	 * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	 *
	 * @param {String|RegExp} evt Name of the event to return the listeners from.
	 * @return {Object} All listener functions for an event in an object.
	 */
	proto.getListenersAsObject = function getListenersAsObject(evt) {
		var listeners = this.getListeners(evt);
		var response;

		if (listeners instanceof Array) {
			response = {};
			response[evt] = listeners;
		}

		return response || listeners;
	};

	/**
	 * Adds a listener function to the specified event.
	 * The listener will not be added if it is a duplicate.
	 * If the listener returns true then it will be removed after it is called.
	 * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to attach the listener to.
	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addListener = function addListener(evt, listener) {
		var listeners = this.getListenersAsObject(evt);
		var listenerIsWrapped = typeof listener === 'object';
		var key;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
				listeners[key].push(listenerIsWrapped ? listener : {
					listener: listener,
					once: false
				});
			}
		}

		return this;
	};

	/**
	 * Alias of addListener
	 */
	proto.on = alias('addListener');

	/**
	 * Semi-alias of addListener. It will add a listener that will be
	 * automatically removed after it's first execution.
	 *
	 * @param {String|RegExp} evt Name of the event to attach the listener to.
	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addOnceListener = function addOnceListener(evt, listener) {
		return this.addListener(evt, {
			listener: listener,
			once: true
		});
	};

	/**
	 * Alias of addOnceListener.
	 */
	proto.once = alias('addOnceListener');

	/**
	 * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	 * You need to tell it what event names should be matched by a regex.
	 *
	 * @param {String} evt Name of the event to create.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.defineEvent = function defineEvent(evt) {
		this.getListeners(evt);
		return this;
	};

	/**
	 * Uses defineEvent to define multiple events.
	 *
	 * @param {String[]} evts An array of event names to define.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.defineEvents = function defineEvents(evts) {
		for (var i = 0; i < evts.length; i += 1) {
			this.defineEvent(evts[i]);
		}
		return this;
	};

	/**
	 * Removes a listener function from the specified event.
	 * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to remove the listener from.
	 * @param {Function} listener Method to remove from the event.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeListener = function removeListener(evt, listener) {
		var listeners = this.getListenersAsObject(evt);
		var index;
		var key;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key)) {
				index = indexOfListener(listeners[key], listener);

				if (index !== -1) {
					listeners[key].splice(index, 1);
				}
			}
		}

		return this;
	};

	/**
	 * Alias of removeListener
	 */
	proto.off = alias('removeListener');

	/**
	 * Adds listeners in bulk using the manipulateListeners method.
	 * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	 * You can also pass it a regular expression to add the array of listeners to all events that match it.
	 * Yeah, this function does quite a bit. That's probably a bad thing.
	 *
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to add.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addListeners = function addListeners(evt, listeners) {
		// Pass through to manipulateListeners
		return this.manipulateListeners(false, evt, listeners);
	};

	/**
	 * Removes listeners in bulk using the manipulateListeners method.
	 * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	 * You can also pass it an event name and an array of listeners to be removed.
	 * You can also pass it a regular expression to remove the listeners from all events that match it.
	 *
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to remove.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeListeners = function removeListeners(evt, listeners) {
		// Pass through to manipulateListeners
		return this.manipulateListeners(true, evt, listeners);
	};

	/**
	 * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	 * The first argument will determine if the listeners are removed (true) or added (false).
	 * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	 * You can also pass it an event name and an array of listeners to be added/removed.
	 * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	 *
	 * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
		var i;
		var value;
		var single = remove ? this.removeListener : this.addListener;
		var multiple = remove ? this.removeListeners : this.addListeners;

		// If evt is an object then pass each of it's properties to this method
		if (typeof evt === 'object' && !(evt instanceof RegExp)) {
			for (i in evt) {
				if (evt.hasOwnProperty(i) && (value = evt[i])) {
					// Pass the single listener straight through to the singular method
					if (typeof value === 'function') {
						single.call(this, i, value);
					}
					else {
						// Otherwise pass back to the multiple function
						multiple.call(this, i, value);
					}
				}
			}
		}
		else {
			// So evt must be a string
			// And listeners must be an array of listeners
			// Loop over it and pass each one to the multiple method
			i = listeners.length;
			while (i--) {
				single.call(this, evt, listeners[i]);
			}
		}

		return this;
	};

	/**
	 * Removes all listeners from a specified event.
	 * If you do not specify an event then all listeners will be removed.
	 * That means every event will be emptied.
	 * You can also pass a regex to remove all events that match it.
	 *
	 * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeEvent = function removeEvent(evt) {
		var type = typeof evt;
		var events = this._getEvents();
		var key;

		// Remove different things depending on the state of evt
		if (type === 'string') {
			// Remove all listeners for the specified event
			delete events[evt];
		}
		else if (type === 'object') {
			// Remove all events matching the regex.
			for (key in events) {
				if (events.hasOwnProperty(key) && evt.test(key)) {
					delete events[key];
				}
			}
		}
		else {
			// Remove all listeners in all events
			delete this._events;
		}

		return this;
	};

	/**
	 * Emits an event of your choice.
	 * When emitted, every listener attached to that event will be executed.
	 * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	 * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	 * So they will not arrive within the array on the other side, they will be separate.
	 * You can also pass a regular expression to emit to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	 * @param {Array} [args] Optional array of arguments to be passed to each listener.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.emitEvent = function emitEvent(evt, args) {
		var listeners = this.getListenersAsObject(evt);
		var listener;
		var i;
		var key;
		var response;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key)) {
				i = listeners[key].length;

				while (i--) {
					// If the listener returns true then it shall be removed from the event
					// The function is executed either with a basic call or an apply if there is an args array
					listener = listeners[key][i];

					if (listener.once === true) {
						this.removeListener(evt, listener.listener);
					}

					response = listener.listener.apply(this, args || []);

					if (response === this._getOnceReturnValue()) {
						this.removeListener(evt, listener.listener);
					}
				}
			}
		}

		return this;
	};

	/**
	 * Alias of emitEvent
	 */
	proto.trigger = alias('emitEvent');

	/**
	 * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	 * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	 * @param {...*} Optional additional arguments to be passed to each listener.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.emit = function emit(evt) {
		var args = Array.prototype.slice.call(arguments, 1);
		return this.emitEvent(evt, args);
	};

	/**
	 * Sets the current value to check against when executing listeners. If a
	 * listeners return value matches the one set here then it will be removed
	 * after execution. This value defaults to true.
	 *
	 * @param {*} value The new value to check for when executing listeners.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.setOnceReturnValue = function setOnceReturnValue(value) {
		this._onceReturnValue = value;
		return this;
	};

	/**
	 * Fetches the current value to check against when executing listeners. If
	 * the listeners return value matches this one then it should be removed
	 * automatically. It will return true by default.
	 *
	 * @return {*|Boolean} The current value to check for or the default, true.
	 * @api private
	 */
	proto._getOnceReturnValue = function _getOnceReturnValue() {
		if (this.hasOwnProperty('_onceReturnValue')) {
			return this._onceReturnValue;
		}
		else {
			return true;
		}
	};

	/**
	 * Fetches the events object and creates one if required.
	 *
	 * @return {Object} The events storage object.
	 * @api private
	 */
	proto._getEvents = function _getEvents() {
		return this._events || (this._events = {});
	};

	// Expose the class either via AMD, CommonJS or the global object
	if (typeof define === 'function' && define.amd) {
		define(function () {
			return EventEmitter;
		});
	}
	else if (typeof module === 'object' && module.exports){
		module.exports = EventEmitter;
	}
	else {
		this.EventEmitter = EventEmitter;
	}
}.call(this));

},{}],13:[function(require,module,exports){
/*!
 * eventie v1.0.3
 * event binding helper
 *   eventie.bind( elem, 'click', myFn )
 *   eventie.unbind( elem, 'click', myFn )
 */

/*jshint browser: true, undef: true, unused: true */
/*global define: false */

(function(window) {

  'use strict';

  var docElem = document.documentElement;

  var bind = function() {
  };

  if (docElem.addEventListener) {
    bind = function(obj, type, fn) {
      obj.addEventListener(type, fn, false);
    };
  } else if (docElem.attachEvent) {
    bind = function(obj, type, fn) {
      obj[ type + fn ] = fn.handleEvent ?
        function() {
          var event = window.event;
          // add event.target
          event.target = event.target || event.srcElement;
          fn.handleEvent.call(fn, event);
        } :
        function() {
          var event = window.event;
          // add event.target
          event.target = event.target || event.srcElement;
          fn.call(obj, event);
        };
      obj.attachEvent("on" + type, obj[ type + fn ]);
    };
  }

  var unbind = function() {
  };

  if (docElem.removeEventListener) {
    unbind = function(obj, type, fn) {
      obj.removeEventListener(type, fn, false);
    };
  } else if (docElem.detachEvent) {
    unbind = function(obj, type, fn) {
      obj.detachEvent("on" + type, obj[ type + fn ]);
      try {
        delete obj[ type + fn ];
      } catch (err) {
        // can't delete window object properties
        obj[ type + fn ] = undefined;
      }
    };
  }

  var eventie = {
    bind  : bind,
    unbind: unbind
  };

// transport
  if (typeof define === 'function' && define.amd) {
    // AMD
    define(eventie);

  } else if (typeof module === 'object' && module.exports) {
    module.exports = eventie;
  } else {
    // browser global
    window.eventie = eventie;
  }

})(this);

},{}],14:[function(require,module,exports){
/*!
 * imagesLoaded v3.0.4
 * JavaScript is all like "You images are done yet or what?"
 */

(function(window) {

  'use strict';

  var $ //= window.jQuery;
  var console = window.console;
  var hasConsole = typeof console !== 'undefined';

// -------------------------- helpers -------------------------- //

// extend objects
  function extend(a, b) {
    for (var prop in b) {
      a[ prop ] = b[ prop ];
    }
    return a;
  }

  var objToString = Object.prototype.toString;

  function isArray(obj) {
    return objToString.call(obj) === '[object Array]';
  }

// turn element or nodeList into an array
  function makeArray(obj) {
    var ary = [];
    if (isArray(obj)) {
      // use object if already an array
      ary = obj;
    } else if (typeof obj.length === 'number') {
      // convert nodeList to array
      for (var i = 0, len = obj.length; i < len; i++) {
        ary.push(obj[i]);
      }
    } else {
      // array of single index
      ary.push(obj);
    }
    return ary;
  }

// --------------------------  -------------------------- //

  function defineImagesLoaded(EventEmitter, eventie) {

    /**
     * @param {Array, Element, NodeList, String} elem
     * @param {Object or Function} options - if function, use as callback
     * @param {Function} onAlways - callback function
     */
    function ImagesLoaded(elem, options, onAlways) {
      // coerce ImagesLoaded() without new, to be new ImagesLoaded()
      if (!( this instanceof ImagesLoaded )) {
        return new ImagesLoaded(elem, options);
      }
      // use elem as selector string
      if (typeof elem === 'string') {
        elem = document.querySelectorAll(elem);
      }

      this.elements = makeArray(elem);
      this.options = extend({}, this.options);

      if (typeof options === 'function') {
        onAlways = options;
      } else {
        extend(this.options, options);
      }

      if (onAlways) {
        this.on('always', onAlways);
      }

      this.getImages();

      if ($) {
        // add jQuery Deferred object
        this.jqDeferred = new $.Deferred();
      }

      // HACK check async to allow time to bind listeners
      var _this = this;
      setTimeout(function() {
        _this.check();
      });
    }

    ImagesLoaded.prototype = new EventEmitter();

    ImagesLoaded.prototype.options = {};

    ImagesLoaded.prototype.getImages = function() {
      this.images = [];

      // filter & find items if we have an item selector
      for (var i = 0, len = this.elements.length; i < len; i++) {
        var elem = this.elements[i];
        // filter siblings
        if (elem.nodeName === 'IMG') {
          this.addImage(elem);
        }
        // find children
        var childElems = elem.querySelectorAll('img');
        // concat childElems to filterFound array
        for (var j = 0, jLen = childElems.length; j < jLen; j++) {
          var img = childElems[j];
          this.addImage(img);
        }
      }
    };

    /**
     * @param {Image} img
     */
    ImagesLoaded.prototype.addImage = function(img) {
      var loadingImage = new LoadingImage(img);
      this.images.push(loadingImage);
    };

    ImagesLoaded.prototype.check = function() {
      var _this = this;
      var checkedCount = 0;
      var length = this.images.length;
      this.hasAnyBroken = false;
      // complete if no images
      if (!length) {
        this.complete();
        return;
      }

      function onConfirm(image, message) {
        if (_this.options.debug && hasConsole) {
          console.log('confirm', image, message);
        }

        _this.progress(image);
        checkedCount++;
        if (checkedCount === length) {
          _this.complete();
        }
        return true; // bind once
      }

      for (var i = 0; i < length; i++) {
        var loadingImage = this.images[i];
        loadingImage.on('confirm', onConfirm);
        loadingImage.check();
      }
    };

    ImagesLoaded.prototype.progress = function(image) {
      this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
      // HACK - Chrome triggers event before object properties have changed. #83
      var _this = this;
      setTimeout(function() {
        _this.emit('progress', _this, image);
        if (_this.jqDeferred) {
          _this.jqDeferred.notify(_this, image);
        }
      });
    };

    ImagesLoaded.prototype.complete = function() {
      var eventName = this.hasAnyBroken ? 'fail' : 'done';
      this.isComplete = true;
      var _this = this;
      // HACK - another setTimeout so that confirm happens after progress
      setTimeout(function() {
        _this.emit(eventName, _this);
        _this.emit('always', _this);
        if (_this.jqDeferred) {
          var jqMethod = _this.hasAnyBroken ? 'reject' : 'resolve';
          _this.jqDeferred[ jqMethod ](_this);
        }
      });
    };

    // -------------------------- jquery -------------------------- //

    if ($) {
      $.fn.imagesLoaded = function(options, callback) {
        var instance = new ImagesLoaded(this, options, callback);
        return instance.jqDeferred.promise($(this));
      };
    }


    // --------------------------  -------------------------- //

    var cache = {};

    function LoadingImage(img) {
      this.img = img;
    }

    LoadingImage.prototype = new EventEmitter();

    LoadingImage.prototype.check = function() {
      // first check cached any previous images that have same src
      var cached = cache[ this.img.src ];
      if (cached) {
        this.useCached(cached);
        return;
      }
      // add this to cache
      cache[ this.img.src ] = this;

      // If complete is true and browser supports natural sizes,
      // try to check for image status manually.
      if (this.img.complete && this.img.naturalWidth !== undefined) {
        // report based on naturalWidth
        this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
        return;
      }

      // If none of the checks above matched, simulate loading on detached element.
      var proxyImage = this.proxyImage = new Image();
      eventie.bind(proxyImage, 'load', this);
      eventie.bind(proxyImage, 'error', this);
      proxyImage.src = this.img.src;
    };

    LoadingImage.prototype.useCached = function(cached) {
      if (cached.isConfirmed) {
        this.confirm(cached.isLoaded, 'cached was confirmed');
      } else {
        var _this = this;
        cached.on('confirm', function(image) {
          _this.confirm(image.isLoaded, 'cache emitted confirmed');
          return true; // bind once
        });
      }
    };

    LoadingImage.prototype.confirm = function(isLoaded, message) {
      this.isConfirmed = true;
      this.isLoaded = isLoaded;
      this.emit('confirm', this, message);
    };

    // trigger specified handler for event type
    LoadingImage.prototype.handleEvent = function(event) {
      var method = 'on' + event.type;
      if (this[ method ]) {
        this[ method ](event);
      }
    };

    LoadingImage.prototype.onload = function() {
      this.confirm(true, 'onload');
      this.unbindProxyEvents();
    };

    LoadingImage.prototype.onerror = function() {
      this.confirm(false, 'onerror');
      this.unbindProxyEvents();
    };

    LoadingImage.prototype.unbindProxyEvents = function() {
      eventie.unbind(this.proxyImage, 'load', this);
      eventie.unbind(this.proxyImage, 'error', this);
    };

    // -----  ----- //

    return ImagesLoaded;
  }

// -------------------------- transport -------------------------- //

  if (typeof define === 'function' && define.amd) {
    // AMD
    define([
      '../../../bower_components/eventEmitter/EventEmitter',
      'eventie/eventie'
    ],
      defineImagesLoaded);
  } else if (typeof module !== 'undefined' && module.exports) {
    var EventEmitter = require('./EventEmitter')
      , eventie = require('./eventie')
      ;

    module.exports = defineImagesLoaded(
      EventEmitter,
      eventie
    );
  } else {
    // browser global
    window.imagesLoaded = defineImagesLoaded(
      window.EventEmitter,
      window.eventie
    );
  }

})(window);

},{"./EventEmitter":12,"./eventie":13}],15:[function(require,module,exports){
/*
 * pmrpc 0.7.1 - Inter-widget remote procedure call library based on HTML5
 *               postMessage API and JSON-RPC. https://github.com/izuzak/pmrpc
 *
 * Copyright 2012 Ivan Zuzak, Marko Ivankovic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var pmrpc;
module.exports = pmrpc = self.pmrpc =  function() {
  // check if JSON library is available
  if (typeof JSON === "undefined" || typeof JSON.stringify === "undefined" ||
    typeof JSON.parse === "undefined") {
    throw "pmrpc requires the JSON library";
  }

  // TODO: make "contextType" private variable
  // check if postMessage APIs are available
  if (typeof this.postMessage === "undefined" &&  // window or worker
    typeof this.onconnect === "undefined") {  // shared worker
    throw "pmrpc requires the HTML5 cross-document messaging and worker APIs";
  }

  // Generates a version 4 UUID
  function generateUUID() {
    var uuid = [], nineteen = "89AB", hex = "0123456789ABCDEF";
    for (var i=0; i<36; i++) {
      uuid[i] = hex[Math.floor(Math.random() * 16)];
    }
    uuid[14] = '4';
    uuid[19] = nineteen[Math.floor(Math.random() * 4)];
    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
    return uuid.join('');
  }

  // Checks whether a domain satisfies the access control list. The access
  // control list has a whitelist and a blacklist. In order to satisfy the acl,
  // the domain must be on the whitelist, and must not be on the blacklist.
  function checkACL(accessControlList, origin) {
    var aclWhitelist = accessControlList.whitelist;
    var aclBlacklist = accessControlList.blacklist;

    var isWhitelisted = false;
    var isBlacklisted = false;

    for (var i=0; i<aclWhitelist.length; ++i) {
      if(origin.match(new RegExp(aclWhitelist[i]))) {
        isWhitelisted = true;
        break;
      }
    }

    for (var j=0; j<aclBlacklist.length; ++j) {
      if(origin.match(new RegExp(aclBlacklist[j]))) {
        isBlacklisted = true;
        break;
      }
    }

    return isWhitelisted && !isBlacklisted;
  }

  // Calls a function with either positional or named parameters
  // In either case, additionalParams will be appended to the end
  function invokeProcedure(fn, self, params, additionalParams) {
    if (!(params instanceof Array)) {
      // get string representation of function
      var fnDef = fn.toString();

      // parse the string representation and retrieve order of parameters
      var argNames = fnDef.substring(fnDef.indexOf("(")+1, fnDef.indexOf(")"));
      argNames = (argNames === "") ? [] : argNames.split(", ");

      var argIndexes = {};
      for (var i=0; i<argNames.length; i++) {
        argIndexes[argNames[i]] = i;
      }

      // construct an array of arguments from a dictionary
      var callParameters = [];
      for (var paramName in params) {
        if (typeof argIndexes[paramName] !== "undefined") {
          callParameters[argIndexes[paramName]] = params[paramName];
        } else {
          throw "No such param: " + paramName;
        }
      }

      params = callParameters;
    }

    // append additional parameters
    if (typeof additionalParams !== "undefined") {
      params = params.concat(additionalParams);
    }

    // invoke function with specified context and arguments array
    return fn.apply(self, params);
  }

  // JSON encode an object into pmrpc message
  function encode(obj) {
    return "pmrpc." + JSON.stringify(obj);
  }

  // JSON decode a pmrpc message
  function decode(str) {
    return JSON.parse(str.substring("pmrpc.".length));
  }

  // Creates a base JSON-RPC object, usable for both request and response.
  // As of JSON-RPC 2.0 it only contains one field "jsonrpc" with value "2.0"
  function createJSONRpcBaseObject() {
    var call = {};
    call.jsonrpc = "2.0";
    return call;
  }

  // Creates a JSON-RPC request object for the given method and parameters
  function createJSONRpcRequestObject(procedureName, parameters, id) {
    var call = createJSONRpcBaseObject();
    call.method = procedureName;
    call.params = parameters;
    if (typeof id !== "undefined") {
      call.id = id;
    }
    return call;
  }

  // Creates a JSON-RPC error object complete with message and error code
  function createJSONRpcErrorObject(errorcode, message, data) {
    var error = {};
    error.code = errorcode;
    error.message = message;
    error.data = data;
    return error;
  }

  // Creates a JSON-RPC response object.
  function createJSONRpcResponseObject(error, result, id) {
    var response = createJSONRpcBaseObject();
    response.id = id;

    if (typeof error === "undefined" || error === null) {
      response.result = (result === "undefined") ? null : result;
    } else {
      response.error = error;
    }

    return response;
  }

  // dictionary of services registered for remote calls
  var registeredServices = {};
  // dictionary of requests being processed on the client side
  var callQueue = {};

  var reservedProcedureNames = {};
  // register a service available for remote calls
  // if no acl is given, assume that it is available to everyone
  function register(config) {
    if (config.publicProcedureName in reservedProcedureNames) {
      return false;
    } else {
      registeredServices[config.publicProcedureName] = {
        "publicProcedureName" : config.publicProcedureName,
        "procedure" : config.procedure,
        "context" : config.procedure.context,
        "isAsync" : typeof config.isAsynchronous !== "undefined" ?
          config.isAsynchronous : false,
        "acl" : typeof config.acl !== "undefined" ?
          config.acl : {whitelist: ["(.*)"], blacklist: []}};
      return true;
    }
  }

  // unregister a previously registered procedure
  function unregister(publicProcedureName) {
    if (publicProcedureName in reservedProcedureNames) {
      return false;
    } else {
      delete registeredServices[publicProcedureName];
      return true;
    }
  }

  // retreive service for a specific procedure name
  function fetchRegisteredService(publicProcedureName){
    return registeredServices[publicProcedureName];
  }

  // receive and execute a pmrpc call which may be a request or a response
  function processPmrpcMessage(eventParams) {
    var serviceCallEvent = eventParams.event;
    var eventSource = eventParams.source;
    var isWorkerComm = typeof eventSource !== "undefined" && eventSource !== null;

    // if the message is not for pmrpc, ignore it.
    if (serviceCallEvent.data.indexOf("pmrpc.") !== 0) {
      return;
    } else {
      var message = decode(serviceCallEvent.data);

      if (typeof message.method !== "undefined") {
        // this is a request

        var newServiceCallEvent = {
          data : serviceCallEvent.data,
          source : isWorkerComm ? eventSource : serviceCallEvent.source,
          origin : isWorkerComm ? "*" : serviceCallEvent.origin,
          shouldCheckACL : !isWorkerComm
        };

        var response = processJSONRpcRequest(message, newServiceCallEvent);

        // return the response
        if (response !== null) {
          sendPmrpcMessage(
            newServiceCallEvent.source, response, newServiceCallEvent.origin);
        }
      } else {
        // this is a response
        processJSONRpcResponse(message);
      }
    }
  }

  // Process a single JSON-RPC Request
  function processJSONRpcRequest(request, serviceCallEvent, shouldCheckACL) {
    if (request.jsonrpc !== "2.0") {
      // Invalid JSON-RPC request
      return createJSONRpcResponseObject(
        createJSONRpcErrorObject(-32600, "Invalid request.",
          "The recived JSON is not a valid JSON-RPC 2.0 request."),
        null,
        null);
    }

    var id = request.id;
    var service = fetchRegisteredService(request.method);

    if (typeof service !== "undefined") {
      // check the acl rights
      if (!serviceCallEvent.shouldCheckACL ||
        checkACL(service.acl, serviceCallEvent.origin)) {
        try {
          if (service.isAsync) {
            // if the service is async, create a callback which the service
            // must call in order to send a response back
            var cb = function (returnValue) {
              sendPmrpcMessage(
                serviceCallEvent.source,
                createJSONRpcResponseObject(null, returnValue, id),
                serviceCallEvent.origin);
            };
            // create a errorback which the service
            // must call in order to send an error back
            var eb = function (errorValue) {
              sendPmrpcMessage(
                serviceCallEvent.source,
                createJSONRpcResponseObject(
                  createJSONRpcErrorObject(
                    -1, "Application error.",errorValue.message),
                  null, id),
                serviceCallEvent.origin);
            };
            invokeProcedure(
              service.procedure, service.context, request.params, [cb, eb, serviceCallEvent]);
            return null;
          } else {
            // if the service is not async, just call it and return the value
            var returnValue = invokeProcedure(
              service.procedure,
              service.context,
              request.params, [serviceCallEvent]);
            return (typeof id === "undefined") ? null :
              createJSONRpcResponseObject(null, returnValue, id);
          }
        } catch (error) {
          if (typeof id === "undefined") {
            // it was a notification nobody cares if it fails
            return null;
          }

          if (error.match("^(No such param)")) {
            return createJSONRpcResponseObject(
              createJSONRpcErrorObject(
                -32602, "Invalid params.", error.message),
              null,
              id);
          }

          // the -1 value is "application defined"
          return createJSONRpcResponseObject(
            createJSONRpcErrorObject(
              -1, "Application error.", error.message),
            null,
            id);
        }
      } else {
        // access denied
        return (typeof id === "undefined") ? null : createJSONRpcResponseObject(
          createJSONRpcErrorObject(
            -2, "Application error.", "Access denied on server."),
          null,
          id);
      }
    } else {
      // No such method
      return (typeof id === "undefined") ? null : createJSONRpcResponseObject(
        createJSONRpcErrorObject(
          -32601,
          "Method not found.",
          "The requestd remote procedure does not exist or is not available."),
        null,
        id);
    }
  }

  // internal rpc service that receives responses for rpc calls
  function processJSONRpcResponse(response) {
    var id = response.id;
    var callObj = callQueue[id];
    if (typeof callObj === "undefined" || callObj === null) {
      return;
    } else {
      delete callQueue[id];
    }

    // check if the call was sucessful or not
    if (typeof response.error === "undefined") {
      callObj.onSuccess( {
        "destination" : callObj.destination,
        "publicProcedureName" : callObj.publicProcedureName,
        "params" : callObj.params,
        "status" : "success",
        "returnValue" : response.result} );
    } else {
      callObj.onError( {
        "destination" : callObj.destination,
        "publicProcedureName" : callObj.publicProcedureName,
        "params" : callObj.params,
        "status" : "error",
        "message" : response.error.message + " " + response.error.data} );
    }
  }

  // call remote procedure
  function call(config) {
    // check that number of retries is not -1, that is a special internal value
    if (config.retries && config.retries < 0) {
      throw new Exception("number of retries must be 0 or higher");
    }

    var destContexts = [];

    if (typeof config.destination === "undefined" || config.destination === null || config.destination === "workerParent") {
      destContexts = [{context : null, type : "workerParent"}];
    } else if (config.destination === "publish") {
      destContexts = findAllReachableContexts();
    } else if (config.destination instanceof Array) {
      for (var i=0; i<config.destination.length; i++) {
        if (config.destination[i] === "workerParent") {
          destContexts.push({context : null, type : "workerParent"});
        } else if (typeof config.destination[i].frames !== "undefined") {
          destContexts.push({context : config.destination[i], type : "window"});
        } else {
          destContexts.push({context : config.destination[i], type : "worker"});
        }
      }
    } else {
      if (typeof config.destination.frames !== "undefined") {
        destContexts.push({context : config.destination, type : "window"});
      } else {
        destContexts.push({context : config.destination, type : "worker"});
      }
    }

    for (var i=0; i<destContexts.length; i++) {
      var callObj = {
        destination : destContexts[i].context,
        destinationDomain : typeof config.destinationDomain === "undefined" ? ["*"] : (typeof config.destinationDomain === "string" ? [config.destinationDomain] : config.destinationDomain),
        publicProcedureName : config.publicProcedureName,
        onSuccess : typeof config.onSuccess !== "undefined" ?
          config.onSuccess : function (){},
        onError : typeof config.onError !== "undefined" ?
          config.onError : function (){},
        retries : typeof config.retries !== "undefined" ? config.retries : 5,
        timeout : typeof config.timeout !== "undefined" ? config.timeout : 500,
        status : "requestNotSent"
      };

      isNotification = typeof config.onError === "undefined" && typeof config.onSuccess === "undefined";
      params = (typeof config.params !== "undefined") ? config.params : [];
      callId = generateUUID();
      callQueue[callId] = callObj;

      if (isNotification) {
        callObj.message = createJSONRpcRequestObject(
          config.publicProcedureName, params);
      } else {
        callObj.message = createJSONRpcRequestObject(
          config.publicProcedureName, params, callId);
      }

      waitAndSendRequest(callId);
    }
  }

  // Use the postMessage API to send a pmrpc message to a destination
  function sendPmrpcMessage(destination, message, acl) {
    if (typeof destination === "undefined" || destination === null) {
      self.postMessage(encode(message));
    } else if (typeof destination.frames !== "undefined") {
      return destination.postMessage(encode(message), acl);
    } else {
      destination.postMessage(encode(message));
    }
  }

  // Execute a remote call by first pinging the destination and afterwards
  // sending the request
  function waitAndSendRequest(callId) {
    var callObj = callQueue[callId];
    if (typeof callObj === "undefined") {
      return;
    } else if (callObj.retries <= -1) {
      processJSONRpcResponse(
        createJSONRpcResponseObject(
          createJSONRpcErrorObject(
            -4, "Application error.", "Destination unavailable."),
          null,
          callId));
    } else if (callObj.status === "requestSent") {
      return;
    } else if (callObj.retries === 0 || callObj.status === "available") {
      callObj.status = "requestSent";
      callObj.retries = -1;
      callQueue[callId] = callObj;
      for (var i=0; i<callObj.destinationDomain.length; i++) {
        sendPmrpcMessage(
          callObj.destination, callObj.message, callObj.destinationDomain[i], callObj);
        self.setTimeout(function() { waitAndSendRequest(callId); }, callObj.timeout);
      }
    } else {
      // if we can ping some more - send a new ping request
      callObj.status = "pinging";
      var retries = callObj.retries;
      callObj.retries = retries - 1;

      call({
        "destination" : callObj.destination,
        "publicProcedureName" : "receivePingRequest",
        "onSuccess" : function (callResult) {
          if (callResult.returnValue === true &&
            typeof callQueue[callId] !== 'undefined') {
            callQueue[callId].status = "available";
            waitAndSendRequest(callId);
          }
        },
        "params" : [callObj.publicProcedureName],
        "retries" : 0,
        "destinationDomain" : callObj.destinationDomain});
      callQueue[callId] = callObj;
      self.setTimeout(function() {
        if (callQueue[callId] && callQueue[callId].status === "pinging") {
          waitAndSendRequest(callId);
        }
      }, callObj.timeout / retries);
    }
  }

  // attach the pmrpc event listener
  function addCrossBrowserEventListerner(obj, eventName, handler, bubble) {
    if ("addEventListener" in obj) {
      // FF
      obj.addEventListener(eventName, handler, bubble);
    } else {
      // IE
      obj.attachEvent("on" + eventName, handler);
    }
  }

  function createHandler(method, source, destinationType) {
    return function(event) {
      var params = {event : event, source : source, destinationType : destinationType};
      method(params);
    };
  }

  if ('window' in this) {
    // window object - window-to-window comm
    var handler = createHandler(processPmrpcMessage, null, "window");
    addCrossBrowserEventListerner(this, "message", handler, false);
  } else if ('onmessage' in this) {
    // dedicated worker - parent X to worker comm
    var handler = createHandler(processPmrpcMessage, this, "worker");
    addCrossBrowserEventListerner(this, "message", handler, false);
  } else if ('onconnect' in this) {
    // shared worker - parent X to shared-worker comm
    var connectHandler = function(e) {
      //this.sendPort = e.ports[0];
      var handler = createHandler(processPmrpcMessage, e.ports[0], "sharedWorker");
      addCrossBrowserEventListerner(e.ports[0], "message", handler, false);
      e.ports[0].start();
    };
    addCrossBrowserEventListerner(this, "connect", connectHandler, false);
  } else {
    throw "Pmrpc must be loaded within a browser window or web worker.";
  }

  // Override Worker and SharedWorker constructors so that pmrpc may relay
  // messages. For each message received from the worker, call pmrpc processing
  // method. This is child worker to parent communication.

  var createDedicatedWorker = this.Worker;
  this.nonPmrpcWorker = createDedicatedWorker;
  var createSharedWorker = this.SharedWorker;
  this.nonPmrpcSharedWorker = createSharedWorker;

  var allWorkers = [];

  this.Worker = function(scriptUri) {
    var newWorker = new createDedicatedWorker(scriptUri);
    allWorkers.push({context : newWorker, type : 'worker'});
    var handler = createHandler(processPmrpcMessage, newWorker, "worker");
    addCrossBrowserEventListerner(newWorker, "message", handler, false);
    return newWorker;
  };

  this.SharedWorker = function(scriptUri, workerName) {
    var newWorker = new createSharedWorker(scriptUri, workerName);
    allWorkers.push({context : newWorker, type : 'sharedWorker'});
    var handler = createHandler(processPmrpcMessage, newWorker.port, "sharedWorker");
    addCrossBrowserEventListerner(newWorker.port, "message", handler, false);
    newWorker.postMessage = function (msg, portArray) {
      return newWorker.port.postMessage(msg, portArray);
    };
    newWorker.port.start();
    return newWorker;
  };

  // function that receives pings for methods and returns responses
  function receivePingRequest(publicProcedureName) {
    return typeof fetchRegisteredService(publicProcedureName) !== "undefined";
  }

  function subscribe(params) {
    return register(params);
  }

  function unsubscribe(params) {
    return unregister(params);
  }

  function findAllWindows() {
    var allWindowContexts = [];

    if (typeof window !== 'undefined') {
      allWindowContexts.push( { context : window.top, type : 'window' } );

      // walk through all iframes, starting with window.top
      for (var i=0; typeof allWindowContexts[i] !== 'undefined'; i++) {
        var currentWindow = allWindowContexts[i];
        for (var j=0; j<currentWindow.context.frames.length; j++) {
          allWindowContexts.push({
            context : currentWindow.context.frames[j],
            type : 'window'
          });
        }
      }
    } else {
      allWindowContexts.push( {context : this, type : 'workerParent'} );
    }

    return allWindowContexts;
  }

  function findAllWorkers() {
    return allWorkers;
  }

  function findAllReachableContexts() {
    var allWindows = findAllWindows();
    var allWorkers = findAllWorkers();
    var allContexts = allWindows.concat(allWorkers);

    return allContexts;
  }

  // register method for receiving and returning pings
  register({
    "publicProcedureName" : "receivePingRequest",
    "procedure" : receivePingRequest});

  function getRegisteredProcedures() {
    var regSvcs = [];
    var origin = typeof this.frames !== "undefined" ? (window.location.protocol + "//" + window.location.host + (window.location.port !== "" ? ":" + window.location.port : "")) : "";
    for (var publicProcedureName in registeredServices) {
      if (publicProcedureName in reservedProcedureNames) {
        continue;
      } else {
        regSvcs.push( {
          "publicProcedureName" : registeredServices[publicProcedureName].publicProcedureName,
          "acl" : registeredServices[publicProcedureName].acl,
          "origin" : origin
        } );
      }
    }
    return regSvcs;
  }

  // register method for returning registered procedures
  register({
    "publicProcedureName" : "getRegisteredProcedures",
    "procedure" : getRegisteredProcedures});

  function discover(params) {
    var windowsForDiscovery = null;

    if (typeof params.destination === "undefined") {
      windowsForDiscovery = findAllReachableContexts();
      for (var i=0; i<windowsForDiscovery.length; i++) {
        windowsForDiscovery[i] = windowsForDiscovery[i].context;
      }
    } else {
      windowsForDiscovery = params.destination;
    }
    var originRegex = typeof params.originRegex === "undefined" ?
      "(.*)" : params.originRegex;
    var nameRegex = typeof params.nameRegex === "undefined" ?
      "(.*)" : params.nameRegex;

    var counter = windowsForDiscovery.length;

    var discoveredMethods = [];
    function addToDiscoveredMethods(methods, destination) {
      for (var i=0; i<methods.length; i++) {
        if (methods[i].origin.match(new RegExp(originRegex)) &&
          methods[i].publicProcedureName.match(new RegExp(nameRegex))) {
          discoveredMethods.push({
            publicProcedureName : methods[i].publicProcedureName,
            destination : destination,
            procedureACL : methods[i].acl,
            destinationOrigin : methods[i].origin
          });
        }
      }
    }

    pmrpc.call({
      destination : windowsForDiscovery,
      destinationDomain : "*",
      publicProcedureName : "getRegisteredProcedures",
      onSuccess : function (callResult) {
        counter--;
        addToDiscoveredMethods(callResult.returnValue, callResult.destination);
        if (counter === 0) {
          params.callback(discoveredMethods);
        }
      },
      onError : function (callResult) {
        counter--;
        if (counter === 0) {
          params.callback(discoveredMethods);
        }
      }
    });
  }

  reservedProcedureNames = {"getRegisteredProcedures" : null, "receivePingRequest" : null};

  // return public methods
  return {
    register : register,
    unregister : unregister,
    call : call,
    discover : discover
  };
}();

//AMD suppport
if (typeof define == 'function' && define.amd) {
  define(pmrpc);
}

},{}],16:[function(require,module,exports){
var process=require("__browserify_process");// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;

    function flush() {
        /* jshint loopfunc: true */

        while (head.next) {
            head = head.next;
            var task = head.task;
            head.task = void 0;
            var domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }

            try {
                task();

            } catch (e) {
                if (isNodeJS) {
                    // In node, uncaught exceptions are considered fatal errors.
                    // Re-throw them synchronously to interrupt flushing!

                    // Ensure continuation if the uncaught exception is suppressed
                    // listening "uncaughtException" events (as domains does).
                    // Continue in next event to avoid tick recursion.
                    if (domain) {
                        domain.exit();
                    }
                    setTimeout(flush, 0);
                    if (domain) {
                        domain.enter();
                    }

                    throw e;

                } else {
                    // In browsers, uncaught exceptions are not fatal.
                    // Re-throw them asynchronously to avoid slow-downs.
                    setTimeout(function() {
                       throw e;
                    }, 0);
                }
            }

            if (domain) {
                domain.exit();
            }
        }

        flushing = false;
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process !== "undefined" && process.nextTick) {
        // Node.js before 0.9. Note that some fake-Node environments, like the
        // Mocha test runner, introduce a `process` global without a `nextTick`.
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }

    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this does have the nice side-effect of reducing the size
// of the code by reducing x.call() to merely x(), eliminating many
// hard-to-minify characters.
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

function isObject(value) {
    return value === Object(value);
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (isPromise(value)) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = deprecate(function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    }, "valueOf", "inspect");

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become fulfilled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be fulfilled
 */
Q.race = race;
function race(answerPs) {
    return promise(function(resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function(answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = deprecate(function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        });
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return isObject(object) &&
        typeof object.promiseDispatch === "function" &&
        typeof object.inspect === "function";
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var unhandledReasonsDisplayed = false;
var trackUnhandledRejections = true;
function displayUnhandledReasons() {
    if (
        !unhandledReasonsDisplayed &&
        typeof window !== "undefined" &&
        !window.Touch &&
        window.console
    ) {
        console.warn("[Q] Unhandled rejection reasons (should be empty):",
                     unhandledReasons);
    }

    unhandledReasonsDisplayed = true;
}

function logUnhandledReasons() {
    for (var i = 0; i < unhandledReasons.length; i++) {
        var reason = unhandledReasons[i];
        console.warn("Unhandled rejection reason:", reason);
    }
}

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;
    unhandledReasonsDisplayed = false;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;

        // Show unhandled rejection reasons if Node exits without handling an
        // outstanding rejection.  (Note that Browserify presently produces a
        // `process` global without the `EventEmitter` `on` method.)
        if (typeof process !== "undefined" && process.on) {
            process.on("exit", logUnhandledReasons);
        }
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
    displayUnhandledReasons();
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    if (typeof process !== "undefined" && process.on) {
        process.removeListener("exit", logUnhandledReasons);
    }
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;
            try {
                result = generator[verb](arg);
            } catch (exception) {
                return reject(exception);
            }
            if (result.done) {
                return result.value;
            } else {
                return when(result.value, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var countDown = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++countDown;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--countDown === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (countDown === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {String} custom error message (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, message) {
    return Q(object).timeout(ms, message);
};

Promise.prototype.timeout = function (ms, message) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        deferred.reject(new Error(message || "Timed out after " + ms + " ms"));
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

module.exports = Q;

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

},{"__browserify_process":3}],17:[function(require,module,exports){
var global=typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash -o ./dist/lodash.compat.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used internally to indicate various things */
  var indicatorObject = {};

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

      // line terminators
    '\n\r\u2028\u2029' +

      // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Error', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to fix the JScript [[DontEnum]] bug */
  var shadowedProps = [
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
    'toLocaleString', 'toString', 'valueOf'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      errorClass = '[object Error]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
    cloneableClasses[boolClass] = cloneableClasses[dateClass] =
      cloneableClasses[numberClass] = cloneableClasses[objectClass] =
        cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used as the data object for `iteratorTemplate` */
  var iteratorData = {
    'args': '',
    'array': null,
    'bottom': '',
    'firstArg': '',
    'init': '',
    'keys': null,
    'loop': '',
    'shadowedProps': null,
    'support': null,
    'top': '',
    'useHas': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
      mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
        'array': null,
        'cache': null,
        'criteria': null,
        'false': false,
        'index': 0,
        'null': false,
        'number': null,
        'object': null,
        'push': null,
        'string': null,
        'true': false,
        'undefined': false,
        'value': null
      };
  }

  /**
   * Checks if `value` is a DOM node in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if the `value` is a DOM node, else `false`.
   */
  function isNode(value) {
    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
    // methods that are `typeof` "string" and still can coerce nodes to strings
    return typeof value.toString != 'function' && typeof (value + '') == 'string';
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var errorProto = Error.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /** Used to avoid iterating non-enumerable properties in IE < 9 */
    var nonEnumProps = {};
    nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
    nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
    nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
    nonEnumProps[objectClass] = { 'constructor': true };

    (function() {
      var length = shadowedProps.length;
      while (length--) {
        var key = shadowedProps[length];
        for (var className in nonEnumProps) {
          if (hasOwnProperty.call(nonEnumProps, className) && !hasOwnProperty.call(nonEnumProps[className], key)) {
            nonEnumProps[className][key] = false;
          }
        }
      }
    }());

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
        ? value
        : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    (function() {
      var ctor = function() { this.x = 1; },
          object = { '0': 1, 'length': 1 },
          props = [];

      ctor.prototype = { 'valueOf': 1, 'y': 1 };
      for (var key in new ctor) { props.push(key); }
      for (key in arguments) { }

      /**
       * Detect if an `arguments` object's [[Class]] is resolvable (all but Firefox < 4, IE < 9).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.argsClass = toString.call(arguments) == argsClass;

      /**
       * Detect if `arguments` objects are `Object` objects (all but Narwhal and Opera < 10.5).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.argsObject = arguments.constructor == Object && !(arguments instanceof Array);

      /**
       * Detect if `name` or `message` properties of `Error.prototype` are
       * enumerable by default. (IE < 9, Safari < 5.1)
       *
       * @memberOf _.support
       * @type boolean
       */
      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

      /**
       * Detect if `prototype` properties are enumerable by default.
       *
       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
       * (if the prototype or a property on the prototype has been set)
       * incorrectly sets a function's `prototype` property [[Enumerable]]
       * value to `true`.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

      /**
       * Detect if functions can be decompiled by `Function#toString`
       * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

      /**
       * Detect if `Function#name` is supported (all but IE).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcNames = typeof Function.name == 'string';

      /**
       * Detect if `arguments` object indexes are non-enumerable
       * (Firefox < 4, IE < 9, PhantomJS, Safari < 5.1).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.nonEnumArgs = key != 0;

      /**
       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
       *
       * In IE < 9 an objects own properties, shadowing non-enumerable ones, are
       * made non-enumerable as well (a.k.a the JScript [[DontEnum]] bug).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.nonEnumShadows = !/valueOf/.test(props);

      /**
       * Detect if own properties are iterated after inherited properties (all but IE < 9).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.ownLast = props[0] != 'x';

      /**
       * Detect if `Array#shift` and `Array#splice` augment array-like objects correctly.
       *
       * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`
       * and `splice()` functions that fail to remove the last element, `value[0]`,
       * of array-like objects even though the `length` property is set to `0`.
       * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`
       * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);

      /**
       * Detect lack of support for accessing string characters by index.
       *
       * IE < 8 can't access characters by index and IE 8 can only access
       * characters by index on string literals.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';

      /**
       * Detect if a DOM node's [[Class]] is resolvable (all but IE < 9)
       * and that the JS engine errors when attempting to coerce an object to
       * a string without a `toString` function.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.nodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
      } catch(e) {
        support.nodeClass = true;
      }
    }(1));

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The template used to create iterator functions.
     *
     * @private
     * @param {Object} data The data object used to populate the text.
     * @returns {string} Returns the interpolated text.
     */
    var iteratorTemplate = function(obj) {

      var __p = 'var index, iterable = ' +
        (obj.firstArg) +
        ', result = ' +
        (obj.init) +
        ';\nif (!iterable) return result;\n' +
        (obj.top) +
        ';';
      if (obj.array) {
        __p += '\nvar length = iterable.length; index = -1;\nif (' +
          (obj.array) +
          ') {  ';
        if (support.unindexedChars) {
          __p += '\n  if (isString(iterable)) {\n    iterable = iterable.split(\'\')\n  }  ';
        }
        __p += '\n  while (++index < length) {\n    ' +
          (obj.loop) +
          ';\n  }\n}\nelse {  ';
      } else if (support.nonEnumArgs) {
        __p += '\n  var length = iterable.length; index = -1;\n  if (length && isArguments(iterable)) {\n    while (++index < length) {\n      index += \'\';\n      ' +
          (obj.loop) +
          ';\n    }\n  } else {  ';
      }

      if (support.enumPrototypes) {
        __p += '\n  var skipProto = typeof iterable == \'function\';\n  ';
      }

      if (support.enumErrorProps) {
        __p += '\n  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\n  ';
      }

      var conditions = [];    if (support.enumPrototypes) { conditions.push('!(skipProto && index == "prototype")'); }    if (support.enumErrorProps)  { conditions.push('!(skipErrorProps && (index == "message" || index == "name"))'); }

      if (obj.useHas && obj.keys) {
        __p += '\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] && keys(iterable),\n      length = ownProps ? ownProps.length : 0;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n';
        if (conditions.length) {
          __p += '    if (' +
            (conditions.join(' && ')) +
            ') {\n  ';
        }
        __p +=
          (obj.loop) +
          ';    ';
        if (conditions.length) {
          __p += '\n    }';
        }
        __p += '\n  }  ';
      } else {
        __p += '\n  for (index in iterable) {\n';
        if (obj.useHas) { conditions.push("hasOwnProperty.call(iterable, index)"); }    if (conditions.length) {
          __p += '    if (' +
            (conditions.join(' && ')) +
            ') {\n  ';
        }
        __p +=
          (obj.loop) +
          ';    ';
        if (conditions.length) {
          __p += '\n    }';
        }
        __p += '\n  }    ';
        if (support.nonEnumShadows) {
          __p += '\n\n  if (iterable !== objectProto) {\n    var ctor = iterable.constructor,\n        isProto = iterable === (ctor && ctor.prototype),\n        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\n        nonEnum = nonEnumProps[className];\n      ';
          for (k = 0; k < 7; k++) {
            __p += '\n    index = \'' +
              (obj.shadowedProps[k]) +
              '\';\n    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))';
            if (!obj.useHas) {
              __p += ' || (!nonEnum[index] && iterable[index] !== objectProto[index])';
            }
            __p += ') {\n      ' +
              (obj.loop) +
              ';\n    }      ';
          }
          __p += '\n  }    ';
        }

      }

      if (obj.array || support.nonEnumArgs) {
        __p += '\n}';
      }
      __p +=
        (obj.bottom) +
        ';\nreturn result';

      return __p
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className] || (!support.nodeClass && isNode(value))) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? baseEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
          && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
        !(a && objectTypes[type]) &&
        !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
            ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
          !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
          ('constructor' in a && 'constructor' in b)
        ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
            ? !index || seen[seen.length - 1] !== computed
            : indexOf(seen, computed) < 0
        ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Creates compiled iteration functions.
     *
     * @private
     * @param {...Object} [options] The compile options object(s).
     * @param {string} [options.array] Code to determine if the iterable is an array or array-like.
     * @param {boolean} [options.useHas] Specify using `hasOwnProperty` checks in the object loop.
     * @param {Function} [options.keys] A reference to `_.keys` for use in own property iteration.
     * @param {string} [options.args] A comma separated string of iteration function arguments.
     * @param {string} [options.top] Code to execute before the iteration branches.
     * @param {string} [options.loop] Code to execute in the object loop.
     * @param {string} [options.bottom] Code to execute after the iteration branches.
     * @returns {Function} Returns the compiled function.
     */
    function createIterator() {
      // data properties
      iteratorData.shadowedProps = shadowedProps;

      // iterator options
      iteratorData.array = iteratorData.bottom = iteratorData.loop = iteratorData.top = '';
      iteratorData.init = 'iterable';
      iteratorData.useHas = true;

      // merge options into a template data object
      for (var object, index = 0; object = arguments[index]; index++) {
        for (var key in object) {
          iteratorData[key] = object[key];
        }
      }
      var args = iteratorData.args;
      iteratorData.firstArg = /^[^,]+/.exec(args)[0];

      // create the function factory
      var factory = Function(
        'baseCreateCallback, errorClass, errorProto, hasOwnProperty, ' +
        'indicatorObject, isArguments, isArray, isString, keys, objectProto, ' +
        'objectTypes, nonEnumProps, stringClass, stringProto, toString',
        'return function(' + args + ') {\n' + iteratorTemplate(iteratorData) + '\n}'
      );

      // return the compiled function
      return factory(
        baseCreateCallback, errorClass, errorProto, hasOwnProperty,
        indicatorObject, isArguments, isArray, isString, iteratorData.keys, objectProto,
        objectTypes, nonEnumProps, stringClass, stringProto, toString
      );
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
        (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor)) ||
        (!support.argsClass && isArguments(value)) ||
        (!support.nodeClass && isNode(value))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      if (support.ownLast) {
        forIn(value, function(value, key, object) {
          result = hasOwnProperty.call(object, key);
          return false;
        });
        return result !== false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }
    // fallback for browsers that can't detect `arguments` objects by [[Class]]
    if (!support.argsClass) {
      isArguments = function(value) {
        return value && typeof value == 'object' && typeof value.length == 'number' &&
          hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee') || false;
      };
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
        return value && typeof value == 'object' && typeof value.length == 'number' &&
          toString.call(value) == arrayClass || false;
      };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = createIterator({
      'args': 'object',
      'init': '[]',
      'top': 'if (!(objectTypes[typeof object])) return result',
      'loop': 'result.push(index)'
    });

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      if ((support.enumPrototypes && typeof object == 'function') ||
        (support.nonEnumArgs && object.length && isArguments(object))) {
        return shimKeys(object);
      }
      return nativeKeys(object);
    };

    /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */
    var eachIteratorOptions = {
      'args': 'collection, callback, thisArg',
      'top': "callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3)",
      'array': "typeof length == 'number'",
      'keys': keys,
      'loop': 'if (callback(iterable[index], index, collection) === false) return result'
    };

    /** Reusable iterator options for `assign` and `defaults` */
    var defaultsIteratorOptions = {
      'args': 'object, source, guard',
      'top':
      'var args = arguments,\n' +
      '    argsIndex = 0,\n' +
      "    argsLength = typeof guard == 'number' ? 2 : args.length;\n" +
      'while (++argsIndex < argsLength) {\n' +
      '  iterable = args[argsIndex];\n' +
      '  if (iterable && objectTypes[typeof iterable]) {',
      'keys': keys,
      'loop': "if (typeof result[index] == 'undefined') result[index] = iterable[index]",
      'bottom': '  }\n}'
    };

    /** Reusable iterator options for `forIn` and `forOwn` */
    var forOwnIteratorOptions = {
      'top': 'if (!objectTypes[typeof iterable]) return result;\n' + eachIteratorOptions.top,
      'array': false
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /**
     * A function compiled to iterate `arguments` objects, arrays, objects, and
     * strings consistenly across environments, executing the callback for each
     * element in the collection. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index|key, collection). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @private
     * @type Function
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createIterator(eachIteratorOptions);

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = createIterator(defaultsIteratorOptions, {
      'top':
        defaultsIteratorOptions.top.replace(';',
          ';\n' +
          "if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n" +
          '  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n' +
          "} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n" +
          '  callback = args[--argsLength];\n' +
          '}'
        ),
      'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'
    });

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = createIterator(defaultsIteratorOptions);

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {
      'useHas': false
    });

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass ||
        (support.argsClass ? className == argsClass : isArguments(value))) ||
        (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }
    // fallback for older versions of Chrome and Safari
    if (isFunction(/x/)) {
      isFunction = function(value) {
        return typeof value == 'function' && toString.call(value) == funcClass;
      };
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass) || (!support.argsClass && isArguments(value))) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && objectTypes[typeof value] && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? baseEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      if (support.unindexedChars && isString(collection)) {
        collection = collection.split('');
      }
      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        baseEach(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        baseEach(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      if (callback && typeof thisArg == 'undefined' && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        baseEach(collection, callback, thisArg);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var iterable = collection,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (isArray(collection)) {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        if (typeof length != 'number') {
          var props = keys(collection);
          length = props.length;
        } else if (support.unindexedChars && isString(collection)) {
          iterable = collection.split('');
        }
        baseEach(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(iterable[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      callback = lodash.createCallback(callback, thisArg, 3);
      if (isArray(collection)) {
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        baseEach(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        baseEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        baseEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      } else if (support.unindexedChars && isString(collection)) {
        collection = collection.split('');
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return (support.unindexedChars && isString(collection))
          ? collection.split('')
          : slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
        while (++index < length) {
          var cache = caches[0];
          value = array[index];

          if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
            argsIndex = argsLength;
            (cache || seen).push(value);
            while (--argsIndex) {
              cache = caches[argsIndex];
              if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
                continue outer;
              }
            }
            result.push(value);
          }
        }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
        return new Date().getTime();
      };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
        , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
            ? ', __j = Array.prototype.join;\n' +
          "function print() { __p += __j.call(arguments, '') }\n"
            : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    baseEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    baseEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    baseEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    // avoid array-like object bugs with `Array#shift` and `Array#splice`
    // in IE < 9, Firefox < 10, Narwhal, and RingoJS
    if (!support.spliceObjects) {
      baseEach(['pop', 'shift', 'splice'], function(methodName) {
        var func = arrayRef[methodName],
            isSplice = methodName == 'splice';

        lodash.prototype[methodName] = function() {
          var chainAll = this.__chain__,
              value = this.__wrapped__,
              result = func.apply(value, arguments);

          if (value.length === 0) {
            delete value[0];
          }
          return (chainAll || isSplice)
            ? new lodashWrapper(result, chainAll)
            : result;
        };
      });
    }

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

},{}],18:[function(require,module,exports){
(function (window, undefined) {
  var overrideFields = {
        product: {
          productName: 'name',
          brandName  : 'brandName',
          partnerName: 'partnerName'
        },
        variant: {
          color : 'color',
          size  : 'size',
          images: 'images'
        }
      }
    , superSetItem   = window.localStorage.setItem
    ;
  window.localStorage.setItem = function (key, value) {
    var event = new CustomEvent('syntheticStorage', {
      detail: {
        key     : key,
        oldValue: window.localStorage.getItem(key),
        newValue: value
      }
    });

    window.dispatchEvent(event);
    superSetItem.apply(this, arguments)
  };

  var pmrpc  = require('../izuzak/pmrpc')
    , filter = require('../../../widget/app/loader/filter')('filter')
    ;

  window.addEventListener('syntheticStorage', function (event) {
    if (/shopbeam_add-to-cart_.+/.test(event.detail.key)) {

      var items      = JSON.parse(event.detail.newValue)
        , variantIds = items.map(function (item) {
            return item.id;
          })
        , request    = new XMLHttpRequest()
        , data
        ;

      request.onload = function () {

        try {
          items.forEach(function (item) {
            var data    = JSON.parse(request.responseText)
              , product = filter(data, {variants: {id: item.id}})[0]
              , variant = filter(product.variants, {id: item.id})[0]
              ;

            Object.keys(overrideFields.product).forEach(function (key) {
              var value = overrideFields.product[key];
              product[value] = item[overrideFields.product[key]];
            });

            Object.keys(overrideFields.variant).forEach(function (key) {
              var value = overrideFields.variant[key];
              variant[value] = item[overrideFields.variant[key]];
            });

            pmrpc.call({
              destination        : 'publish',
              publicProcedureName: 'addToCart',
              params             : [{
                product  : product,
                variant  : variant,
                quantity : item.quantity,
                sourceObj: {
                  sourceUrl: window.location.href,
                  widgetId : item.widgetUuid,
                  apiKey   : item.apiKey,
                  dataUrl  : '/v2/products?id=' + item.id
                }
              }],
            })
          });
          window.localStorage.removeItem(event.detail.key);
          setTimeout(function () {
            pmrpc.call({
              destination        : 'publish',
              publicProcedureName: 'flashCart'
            });
          }, 200);
        } catch (e) {
          console.error('We were unable to add your items to the cart. Error follows:');
          console.error(e);
        }
      };

      request.open('get', Shopbeam.HOST + '/v2/products?id=' + variantIds.join(','));
      request.send();
    }
  })
}(window));
},{"../../../widget/app/loader/filter":24,"../izuzak/pmrpc":15}],19:[function(require,module,exports){
var q = require('../../../shared/lib/kriskowal/q.js');
module.exports = ElementDecorator;

/**
 * `Element` decorator class
 * @param {Element} element Browser DOM Element to decorate.
 * @return {ElementDecorator} `this` ElementDecorator instance
 * @constructor
 */
function ElementDecorator(element) {
  var self = this
    , animationQueue = []
    ;
  this.element = element;

  //Delegate select methods directly to `this.element`
  ['remove']
    .forEach(function(functionName) {
      self[functionName] = function() {
        params = Array.prototype.slice.apply(arguments);
        self.element[functionName].apply(self.element, params)
      }
    });

  /**
   * Delegates to setAttrs
   * @param {object} attrs i.e. {id: 'element-id', src: 'http://..'}
   * @return {ElementDecorator} `this` ElementDecorator instance
   */
  this.attr = function(attrs) {
    setAttrs(attrs, this.element);
    return this;
  };
  
  this.attrs = this.attr;

  /**
   * Delegates to setCss or getCss depending on argument type
   * @param {object|array} css i.e. {border: '1px solid red', padding: '10px'}
   * @return {ElementDecorator|object} `this` ElementDecorator instance
   */
  this.css = function(css) {
    if (css instanceof Array) {
      return getComputedCss(css, this.element)
    }
    setCss(css, this.element);
    return this;
  };

  /**
   * Insert/move passed `element` after `this.element` as a sibling
   * @param {Element} element Browser DOM Element
   * @return {ElementDecorator} `this` ElementDecorator instance
   */
//  this.after = function(element) {
//    var element = element instanceof(ElementDecorator)
//        ? element.element
//        : element
//      ;
//    
//  }

  /**
   * Insert `this.element` before passed `target` Element
   *    (or ElementDecorator's element)
   * @param {Element|ElementDecorator} target Element to put `this.element` before
   * @return {ElementDecorator} `this` ElementDecorator instance
   */
  this.insertBefore = function(target) {
    target = target instanceof ElementDecorator
      ? target.element
      : target
    ;
    target.parentNode.insertBefore(this.element, target);
    return this;
  };

  /**
   * Append the passed Element or ElementDecorator to `this.element`
   * @param {Element|ElementDecorator} element HTML DOM Element or
   *    ElementDecorator instance
   * @return {ElementDecorator} `this` ElementDecorator instance
   */
  this.append = function(element) {
    element = element instanceof ElementDecorator
      ? element.element
      : element
    ;
    this.element.appendChild(element);
    return this;
  };

  /**
   * Append the `this.element` to passed Element or ElementDecorator
   * @param {Element|ElementDecorator} element HTML DOM Element or
   *    ElementDecorator instance
   * @return {ElementDecorator} `this` ElementDecorator instance
   */
  this.appendTo = function(element) {
    element = element instanceof ElementDecorator
      ? element.element
      : element
    ;
    element.appendChild(this.element);
    return this;
  };


  this.animate = function(properties, duration) {
    duration = duration || '200ms';
    var lastInQueue = animationQueue[animationQueue.length - 1];

    return lastInQueue
      ? lastInQueue.then(animate)
      : animate()
      ;

    //TODO: make this work with decimal durations!! e.g. `1.15s`
    function animate() {
      var originalTransition = self.element.style.getPropertyValue('transition') || ''
        , transitions = originalTransition.split(', ')
        , deferred = q.defer()
        , promise = deferred.promise
        , durationMatch = duration.match(/(\d+)(m)?s/)
        ;

      animationQueue.push(promise);

      //`transition` property tested and working on:
      //  Chrome 30.0.1599.101
      //  Firefox 24.0
      //  Safari 7.0 (9537.71)
      //  (no need for -moz-transition, etc.)
      Object.keys(properties).forEach(function(property) {
        if (transitions[0] !== '') {
          var included = transitions.some(function(transition) {
            var transitionProperty = transition.split(' ')[0];
            return transitionProperty === property
          });
          if (!included) transitions.push(property + ' ' + duration);
        } else {
          transitions.shift();
          transitions.push(property + ' ' + duration)
        }

      });
//      self.element.style.transition = transitions.join(', ');
      self.css({transition: transitions.join(', ')});
      self.css(properties);

      setTimeout(function() {
//        self.element.style.transition = originalTransition;
        self.css({transition: originalTransition});
        deferred.resolve(true);
        var oldPromise = animationQueue.splice(animationQueue.lastIndexOf(promise), 1)[0];
        if (oldPromise !== promise && !oldPromise.isPending()) {
          throw new Error('promises didn\'t match or oldPromise is still pending!')
        }
      }, durationMatch[2] ? parseInt(durationMatch[1], 10) : (parseInt(durationMatch[1], 10) * 1000));

      return promise;
    }
  };

  /**
   * Set a css transition on opacity (unless it exists already)
   *    with a duration (with measurement i.e. 'ms' or 's') equal
   *    to the argument (or 200ms by default). Then set visibility to
   *    visible and opacity to 1. Wait the duration and finally,
   *    remove the transition (unless it was pre-existing).
   *
   *    NOTE: this does not prevent the element from taking up /
   *    blocking out space.
   * @param {string} duration Duration to put on CSS transition
   */
  this.fadeIn = function(duration) {
//    this.element.style.visibility = 'visible';
    this.css({visibility: 'visible'});
    return this.animate({opacity: 1}, duration)
  };

  /**
   * Set a css transition on opacity (unless it exists already)
   *    with a duration (with measurement i.e. 'ms' or 's') equal
   *    to the argument (or 200ms by default). Then set opacity to 0.
   *    Wait the duration and finally, remove the transition (unless
   *    it was pre-existing) and set visibility to hidden.
   *
   *    NOTE: this does not prevent the element from taking up /
   *    blocking out space.
   * @param {string} duration Duration to put on CSS transition
   */
  this.fadeOut = function(duration) {
    return this.animate({opacity: 0}, duration)
      .then(function() {
//        self.element.style.visibility = 'hidden'
        self.css({visibility: 'hidden'})
      })
  };
}

/**
 * Set element attributes
 * @param {object} attrs i.e. {id: 'element-id', src: 'http://..'}
 */
function setAttrs(attrs, element) {
  Object.keys(attrs).forEach(function(attrName) {
    element[attrName] = attrs[attrName];
  });
}

/**
 * Set element css properties (via style attr)
 * @param {object} css i.e. {border: '1px solid red', padding: '10px'}
 * @param {Element} element HTML DOM Element
 */
function setCss(css, element) {
  Object.keys(css).forEach(function(attrName) {
    element.style.setProperty(attrName, css[attrName]);
  });
}

/**
 * Get computed css property values for the passed property names array
 * @param {array} propertyNames Array of css property names
 * @param {Element} element HTML Dom Element on which the properties
 *   are to be retrieved
 * @return {object} Object of css property names and values
 *   (usable with .css function for setting to the retrieved values)
 */
function getComputedCss(propertyNames, element) {
  var properties = {};
  var computedProperties = window.getComputedStyle(element);

  propertyNames.forEach(function(propertyName) {
//    properties[propertyName] = computedProperties[propertyName] || '';
    properties[propertyName] = computedProperties.getPropertyValue(propertyName);// || '';
  });
  return properties;
}

},{"../../../shared/lib/kriskowal/q.js":16}],20:[function(require,module,exports){
var _ = require('lodash')
  , ElementDecorator = require('./ElementDecorator')
  , filter = require('./filter')
  ;
module.exports = decorate;

/**
 * Factory method for ElementDecorator
 * @param {string|Element} tagNameOrElement Element instance to decorate
 *    or name of HTML tag to create and decorate.
 * @return {ElementDecorator} New ElementDecorator instance
 */
function decorate(tagNameOrElement) {
  var element = tagNameOrElement instanceof(Element)
      ? tagNameOrElement
      : document.createElement(tagNameOrElement)
    ;
  return new ElementDecorator(element);
}

/**
 * Adds the properties of the passed array elements or object to
 * the passed object
 * @param {object|array} extendee object to extend
 * @param {array|object|undefined} extender objects to extend extendee with
 * @return {object} extended object
 */
decorate.extend = function(extendee, extender) {
  if (!extender) {
    extender = extendee;
    extendee = {};
  }

  if (extender instanceof Array) {
    extender.forEach(function(extender) {
      decorate.copy(extendee, extender)
    });
    return extendee
  } else {
    return decorate.copy(extendee, extender)
  }
};

/**
 * If 2 args: Adds properties fo the second object to the first
 *   object and returns the first object.
 * If 1 arg: Adds properties fo the argument object to a new
 *  object and returns that object.
 * @param {object} extendee object to be extended
 * @param {object|undefined} extender object to extend extendee with
 * @return {object} extended object
 */
decorate.copy = function(extendee, extender) {
  if (!extender) {
    extender = extendee;
    extendee = {};
  }

  Object.keys(extender).forEach(function(property) {
    extendee[property] = extender[property]
  });
  return extendee
};

decorate.filter = filter;
decorate.compact = _.compact;
decorate.merge = _.merge;

},{"./ElementDecorator":19,"./filter":24,"lodash":4}],21:[function(require,module,exports){
/**
 * CART BUILDER
 */

var $ = require('./build')
  , pmrpc = require('../../../shared/lib/izuzak/pmrpc')
  , throttle = require('../../../shared/app/services/throttle')
  ;

exports.build = function() {
  var theme = document.querySelector('script.shopbeam-script').getAttribute('data-shopbeam-theme')
    , theme_parameter = ((typeof theme !== 'undefined' && theme) ? theme : '');

  function closeCart() {
    resizeCart('CLOSED')
  }

  function openCart() {
    resizeCart('VISIBLE')
  }

  if (Shopbeam.TOP_WINDOW) {
    var mobileThreshold = 768
      , $cart = $('iframe')
        .attr({
          id : 'shopbeam-cart',
          src: 'https://localhost:4000/app/cart?theme=' + theme_parameter
        })
      , cssFor = function(state) {
        return Shopbeam['CART_' + state + '_CSS']
      }

    //-- initialize cartState to 'HIDDEN'
      , cartState = 'HIDDEN'
      , resizeCart = function(state) {
        if (state) cartState = state;
        $cart.css($.extend([cssFor('DEFAULT'), cssFor(cartState)]));
      }
      ;

    Shopbeam.DOCUMENT_BODY.then(function(body) {
      $cart.appendTo(body);

      //-- initial sizing
      resizeCart();
    });

    pmrpc.register({
      publicProcedureName: 'resizeCart',
      procedure          : function() {
        try {
          resizeCart();
        } catch (err) {
          console.error(err);
        }
      }
    })

    pmrpc.register({
      publicProcedureName: 'openCart',
      procedure          : function() {
        try {
          openCart();
        } catch (err) {
          console.error(err);
        }
      }
    });

    pmrpc.register({
      publicProcedureName: 'closeCart',
      procedure          : function(state) {
        try {
          closeCart(state);
        } catch (err) {
          console.error(err);
        }
      }
    });

    pmrpc.register({
      publicProcedureName: 'flashCart',
      procedure          : function() {
        try {
          openCart();
          // keep the cart open for 9 seconds
          setTimeout(function() {
            closeCart()
          }, 4500)
        } catch (err) {
          console.error(err);
        }
      }
    });

    pmrpc.register({
      publicProcedureName: 'hideCart',
      procedure          : function() {
        try {
          resizeCart('HIDDEN')
        } catch (err) {
          console.error(err);
        }
      }
    });
  }
};

},{"../../../shared/app/services/throttle":6,"../../../shared/lib/izuzak/pmrpc":15,"./build":20}],22:[function(require,module,exports){
/**
 * CHECKOUT BUILDER
 */

var $ = require('./build')
  , pmrpc = require('../../../shared/lib/izuzak/pmrpc')
  , zoom = require('./zoom')
  , bodyScroll = require('../../../shared/app/browser/body-scroll');
  ;

exports.build = function() {

  var theme = document.querySelector('script.shopbeam-script').getAttribute('data-shopbeam-theme')
    , theme_parameter = ((typeof theme !== 'undefined' && theme) ? theme : '');

  if (Shopbeam.TOP_WINDOW) {
    var $checkout = $('iframe')
        .css($.extend([
          Shopbeam.CHECKOUT_DEFAULT_CSS,
          Shopbeam.CHECKOUT_HIDDEN_CSS
        ]))
        .attr({
          src: 'https://localhost:4000/app/checkout?theme=' + theme_parameter + '#/review?mode=copper',
          id : 'shopbeam-checkout'
        })
      , $checkoutContainer = $('div')
        .css($.extend([
          Shopbeam.CHECKOUT_BACKDROP_DEFAULT_CSS,
          Shopbeam.CHECKOUT_BACKDROP_HIDDEN_CSS
        ]))
        .attr({id: 'shopbeam-checkout-backdrop'})
      ;

    Shopbeam.DOCUMENT_BODY.then(function(body) {
      $checkoutContainer.appendTo(body);
      $checkout.appendTo(body);
    });

    pmrpc.register({
      publicProcedureName: 'openCheckout',
      procedure          : function() {
        try {
          zoom.disable();
          $checkoutContainer.animate(Shopbeam.CHECKOUT_BACKDROP_VISIBLE_CSS, '1150ms');
          $checkout.animate(Shopbeam.CHECKOUT_VISIBLE_CSS, '1s');
          bodyScroll.lock();
        } catch (err) {
          console.error(err);
        }
      }
    });

    pmrpc.register({
      publicProcedureName: 'closeCheckout',
      procedure          : function() {
        try {
          zoom.reset();
          $checkout.animate(Shopbeam.CHECKOUT_HIDDEN_CSS, '1s');
          $checkoutContainer.animate(Shopbeam.CHECKOUT_BACKDROP_HIDDEN_CSS, '1150ms');
          bodyScroll.unlock();
        } catch (err) {
          console.error(err);
        }
      }
    });
  }
};

},{"../../../shared/app/browser/body-scroll":5,"../../../shared/lib/izuzak/pmrpc":15,"./build":20,"./zoom":32}],23:[function(require,module,exports){
var dataOverrideParser = {}
  , _                  = require('lodash')
  , filter             = require('./filter')('filter')
  ;

module.exports = dataOverrideParser;

dataOverrideParser.parse = function parse(dataElements) {
  if (typeof(dataElements) === 'undefined' || dataElements.length < 1) return;
  if (!(dataElements instanceof Array)) {
    switch (true) {
      case /variants/.test(dataElements.className):
        return [].slice.apply(dataElements.children).map(function (element) {
          return _.merge(
            {id: window.parseInt(element.className.match(/id-(\d+)/)[1], 10)},
            dataOverrideParser.parse(element)
          );
        });
      case /images/.test(dataElements.className):
        return [].slice.apply(dataElements.children).map(function (element) {
          return {
            id : null,
            url: element.innerHTML
          }
        });
      default:
        dataElements = [dataElements];
    }
  }

  dataNodes = dataElements.reduce(function (prev, current) {
    prev.concat([].slice.apply(current.children));
    return prev
  }, [].slice.apply(dataElements[0].children));

  return _.zipObject(dataNodes.map(function (element) {
    if (element && element.className) {
      switch (true) {
        case /variants/.test(element.className):
          var variants = dataOverrideParser.parse(element);
          return ['variants', variants];
        case /images/.test(element.className):
          var images = dataOverrideParser.parse(element);
          return ['images', images];
        default:
          return [element.className, element.innerHTML];
      }
    }
  }));
};

dataOverrideParser.override = function (original, parsed) {
  if (parsed) {
    if (typeof(parsed.variants) !== 'undefined') {
      original.variants = _.compact(original.variants.map(function (originalVariant) {
        var parsedVariant = filter(parsed.variants, {id: originalVariant.id})[0];
        if (parsedVariant) {
          if (typeof(parsedVariant.images) !== 'undefined') {
            originalVariant.images = parsedVariant.images;
            // variant images already merged, don't merge again
            delete parsedVariant.images;
          }
          // don't accidentally override variant id in case of bugs
          delete parsedVariant.id;
          return _.merge(originalVariant, parsedVariant)
        } else return originalVariant;
      }));

      // variant data already merged, don't merge again
      delete parsed.variants
    }

    return _.merge({}, original, parsed);
  } else {
    return original;
  }
};

dataOverrideParser.parseAndMerge = function (originalData, dataElements) {
  //TODO: this is where we can allow for widgets with data overrides to still open
  // the lightbox even when out of stock!!!
  if (originalData) {
    return this.override(originalData, this.parse(dataElements))
  }
};

},{"./filter":24,"lodash":4}],24:[function(require,module,exports){
module.exports = function filter(name) {
  return {
    unique: uniqueFilter,
    filter: dynamicFilter
  }[name];
};

/**
 * Filter an array by a function or by a map object
 * @param {array} array Array to be filtered
 * @param {function|object} filterBy If a function, it's passed
 *    to Array.prorotype.filter; if an object, elements which have
 *    matching key/value pairs are included in the return array.
 * @return {array} Filtered array
 */
function dynamicFilter(array, filterBy) {
  if (typeof(filterBy) === 'function') {
    return array.filter(filterBy);
  } else if (typeof(filterBy) === 'object') {
    return array.filter(function(element) {
      return Object.keys(filterBy).every(function(key, index) {
        if (element[key] instanceof Array) {
          return !!dynamicFilter(element[key], filterBy[key])[0]
        } else {
          if (typeof filterBy[key] === 'object' && typeof(element[key]) !== 'undefined') {
            return !!dynamicFilter([element[key]], filterBy[key])[0]
          } else {
            return element[key] === filterBy[key];
          }
        }
      })
    })
  }
}

function uniqueFilter(array, targetProperty) {
  var result = [];
  array.forEach(function(element) {
    var test = result.some(function(testElement) {
      return testElement[targetProperty] === element[targetProperty];
    });

    if (!test) {
      result.push(element);
    }
  });
  return result;
}

},{}],25:[function(require,module,exports){
/**
 * IMAGE WIDGET CLASS
 */

module.exports = ImageWidget;

var $ = require('./build')
  , q = require('../../../shared/lib/kriskowal/q')
  , Widget = require('./widget')
  ;

function ImageWidget(initialImage) {
  //the id attribute that will be set on the $widget iframe element
  var widgetTagId = initialImage.id.replace(Shopbeam.WIDGET_TAG_ID_EXCLUDE_REGEX, '')
  //the uuid-only of this widget; used for uniqueness between multiple widgets
    , widgetUuid = widgetTagId.match(Shopbeam.WIDGET_UUID_REGEX)[1]
  //products resourece url with query-string params for this particular widget
    , dataUrl
  //hoverAction: describes hover behavior of widget
    , hoverAction
    ;

  if (initialImage.dataset) {
    dataUrl = Shopbeam.HOST + initialImage.dataset.shopbeamUrl;
    hoverAction = initialImage.dataset.shopbeamHoverAction;
  } else {
    dataUrl = Shopbeam.HOST + initialImage.attributes['data-shopbeam-url'].value;
    var hoverAttribute = initialImage.attributes['data-shopbeam-hover-action'];
    if (hoverAttribute) hoverAction = hoverAttribute.value;
  }

  this.dataUrl = dataUrl;

  var imageWidth = initialImage.width
    , imageHeight = initialImage.height
    , $initialImage = $(initialImage)

  //copy all computed borders, paddings, and margins from $initialImage to be applied to
  //  the container that will take it's place and "eat" it
    , copiedBorders = $initialImage.css(['border-left', 'border-right', 'border-top', 'border-bottom'])
    , copiedMargins = $initialImage.css(['margin-left', 'margin-right', 'margin-top', 'margin-bottom'])
    , copiedPaddings = $initialImage.css(['padding-left', 'padding-right', 'padding-top', 'padding-bottom'])

  //merge width and height with the copied borders, paddings, and margins
    , copiedCss = $.extend($initialImage.css(['width', 'height', 'float', 'z-index']), [
      copiedBorders, copiedMargins,
      copiedPaddings
    ])

  //create $widgetContainer div, set it's css
    , $widgetContainer = $('div')
      //inline-block to not force line-break; relative position because of
      //  absolutely positioned child element(s)
      .css({
        display : 'inline-block',
        position: 'relative'
      })

  //create $widget iframe; set it's css to the default plus $initialImage's width
  //  and height. also set its id attribute
    , $widget = $('iframe')
      .css($.extend([
        Shopbeam.WIDGET_DEFAULT_CSS,
        Shopbeam.WIDGET_HIDDEN_CSS,
        {
          width : imageWidth + 'px',
          height: imageHeight + 'px'
        }
      ])).attr(Shopbeam.WIDGET_ATTRS)
      .attr({id: widgetTagId})

  //create deferred and promise for products resource request.
  //  anything that depends on products data to be loaded will .then on JSONPromise
    , deferredJSON = q.defer()
    , JSONPromise = deferredJSON.promise
    ;

    this.dataCallback = function() {
      var options = {
          widgetId          : widgetUuid,
          hoverAction       : hoverAction,
          width             : imageWidth,
          productsUrl       : dataUrl,
          initialImageSource: initialImage.src
        }
        , data = JSON.parse(this.responseText)
        ;
      deferredJSON.resolve({data: data, options: options});
    };


  this.build = function() {
    //Insert $widgetContainer just before the image it will contain and then replace
    $widgetContainer.insertBefore($initialImage);

    //move borders, paddings & margins from $initialImage to $widgetContainer
    //  and move $initialImage & $widget to be children of $widgtContainer.
    //  Also absolutely position $initialImage so when $widget fades in over it,
    //  they're directly over-top one another (no DOM weirdness or elements bouncing).
    $initialImage.css({border: 'none', padding: 0, margin: 0, position: 'absolute', top: 0, left: 0});
    $widgetContainer.css(copiedCss)
      .append($initialImage)
      .append($widget);

    //after $widget has been added to DOM, we can interact with it's `contentWindow` and `contentDocument`
    //write the widget index markup to $widget's document
    var widgetWindow = $widget.element.contentWindow
      , widgetDocument = widgetWindow.document
      ;

    /**
     * NOTE: .open MUST be called BEFORE assigning any properties on the iframe window.
     *    IE seems to either create a new window after .open is called or delete properties
     *    set on it.
     */
    widgetDocument.open();
    widgetWindow.ShopbeamWidget = this;
    widgetDocument.write(appIndexes.widget(Shopbeam));
    widgetDocument.close();
  };

  /**
   * Fade widget in, over-top of its respective initialImage;
   *    then, when fading is complete, remove $initialImage from the DOM.
   */
  this.render = function() {
    return $widget.fadeIn('1s').then($initialImage.remove);
  };

  this.uuid = widgetUuid;
  this.JSONPromise = JSONPromise;

  //Inherit from Widget Class
  Widget.apply(this, arguments);
    //For stats
  this.trackWidgetLoad(dataUrl,'image');
}

},{"../../../shared/lib/kriskowal/q":16,"./build":20,"./widget":31}],26:[function(require,module,exports){
/**
 * IMAGE WIDGET CLASS
 */

module.exports = InFrameImageWidget;

var $ = require('./build')
  , q = require('../../../shared/lib/kriskowal/q')
  , Widget = require('./widget')
  , _ = require('../../../shared/lib/lodash/lodash')
  ;

function InFrameImageWidget(initialImage) {
  //the id attribute that will be set on the $widget iframe element
  var widgetTagId = initialImage.id.replace(Shopbeam.WIDGET_TAG_ID_EXCLUDE_REGEX, '')
  //the uuid-only of this widget; used for uniqueness between multiple widgets
    , widgetUuid = widgetTagId.match(Shopbeam.WIDGET_UUID_REGEX)[1]
  //products resourece url with query-string params for this particular widget
    , dataUrl
  //hoverAction: describes hover behavior of widget
    , hoverAction
    ;

  if (initialImage.dataset) {
    dataUrl = Shopbeam.HOST + initialImage.dataset.shopbeamUrl;
    hoverAction = initialImage.dataset.shopbeamHoverAction;
  } else {
    dataUrl = Shopbeam.HOST + initialImage.attributes['data-shopbeam-url'].value;
    var hoverAttribute = initialImage.attributes['data-shopbeam-hover-action'];
    if (hoverAttribute) hoverAction = hoverAttribute.value;
  }

  this.dataUrl = dataUrl;

  var imageWidth = initialImage.width
    , imageHeight = initialImage.height
    , $initialImage = $(initialImage)

  //copy all computed borders, paddings, and margins from $initialImage to be applied to
  //  the container that will take it's place and "eat" it
    , copiedBorders = $initialImage.css(['border-left', 'border-right', 'border-top', 'border-bottom'])
    , copiedMargins = $initialImage.css(['margin-left', 'margin-right', 'margin-top', 'margin-bottom'])
    , copiedPaddings = $initialImage.css(['padding-left', 'padding-right', 'padding-top', 'padding-bottom'])

  //merge width and height with the copied borders, paddings, and margins
    , copiedCss = $.extend($initialImage.css(['width', 'height', 'float', 'z-index']), [
      copiedBorders, copiedMargins,
      copiedPaddings
    ])

  //create $widgetContainer div, set it's css
    , $widgetContainer = $('div')
      //inline-block to not force line-break; relative position because of
      //  absolutely positioned child element(s)
      .css({
        display : 'inline-block',
        position: 'relative'
      })

  //create $widget iframe; set it's css to the default plus $initialImage's width
  //  and height. also set its id attribute
    , $widget = $('iframe')
      .css($.extend([
        Shopbeam.WIDGET_DEFAULT_CSS,
        Shopbeam.WIDGET_HIDDEN_CSS,
        {
          width : imageWidth + 'px',
          height: imageHeight + 'px'
        }
      ])).attr(Shopbeam.WIDGET_ATTRS)
      .attr({id: widgetTagId})

  //create $secureCheckoutFrame iframe and make it's dimensions 0 but allow it to render;
  // only used for pmrpc api
    , $secureCheckoutFrame = $('frame')
        .css({
          height : 0,
          width  : 0,
          opacity: 0,
          display: 'block'
        })
        .attr({
          src: 'https://localhost:4000/app/secureCheckoutFrame',
          id : 'shopbeam-secure-checkout-frame'
        })

  //create deferred and promise for products resource request.
  //  anything that depends on products data to be loaded will .then on JSONPromise
    , deferredJSON = q.defer()
    , JSONPromise = deferredJSON.promise
    ;

    this.dataCallback = function() {
      var options = {
          widgetId          : widgetUuid,
          hoverAction       : hoverAction,
          width             : imageWidth,
          productsUrl       : dataUrl,
          initialImageSource: initialImage.src
        },
        data = JSON.parse(this.responseText)
        ;
      deferredJSON.resolve({data: data, options: options});
    };


  this.build = function() {
    //Insert $widgetContainer just before the image it will contain and then replace
    $widgetContainer.insertBefore($initialImage);

    //move borders, paddings & margins from $initialImage to $widgetContainer
    //  and move $initialImage & $widget to be children of $widgtContainer.
    //  Also absolutely position $initialImage so when $widget fades in over it,
    //  they're directly over-top one another (no DOM weirdness or elements bouncing).
    $initialImage.css({border: 'none', padding: 0, margin: 0, position: 'absolute', top: 0, left: 0});
    $widgetContainer.css(copiedCss)
      .append($initialImage)
      .append($widget)
      .append($secureCheckoutFrame)
    ;

    //after $widget has been added to DOM, we can interact with it's `contentWindow` and `contentDocument`
    //write the widget index markup to $widget's document
    var widgetWindow = $widget.element.contentWindow
      , widgetDocument = widgetWindow.document
      ;

    var theme = document.querySelector('script.shopbeam-script').getAttribute('data-shopbeam-theme');

    /**
     * NOTE: .open MUST be called BEFORE assigning any properties on the iframe window.
     *    IE seems to either create a new window after .open is called or delete properties
     *    set on it.
     */
    widgetDocument.open();
    widgetWindow.ShopbeamWidget = this;

    var defaultPath = 'inFrameWidget/index'
      , themedPath  = 'inFrameWidget/' + theme
      , matchedPath = (theme !== null && typeof(appIndexes[themedPath]) !== 'undefined') ?
          themedPath : defaultPath;

    widgetDocument.write(appIndexes[matchedPath](Shopbeam));
    widgetDocument.close();
  };

  /**
   * Fade widget in, over-top of its respective initialImage;
   *    then, when fading is complete, remove $initialImage from the DOM.
   */
  this.render = function() {
    return $widget.fadeIn('1s').then($initialImage.remove);
  };

  this.uuid = widgetUuid;
  this.JSONPromise = JSONPromise;

  //Inherit from Widget Class
  Widget.apply(this, arguments);
    //For stats
  this.trackWidgetLoad(dataUrl,'image');
}

},{"../../../shared/lib/kriskowal/q":16,"../../../shared/lib/lodash/lodash":17,"./build":20,"./widget":31}],27:[function(require,module,exports){
var global=typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},Buffer=require("__browserify_Buffer").Buffer;!function(e){var jade = e();if("object"==typeof ecksports&&"undefined"!=typeof moduwel)module.exports=jade; var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.jade=jade}(function(){var module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/*!
 * Jade - runtime
 * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */

/**
 * Lame Array.isArray() polyfill for now.
 */

if (!Array.isArray) {
  Array.isArray = function(arr){
    return '[object Array]' == Object.prototype.toString.call(arr);
  };
}

/**
 * Lame Object.keys() polyfill for now.
 */

if (!Object.keys) {
  Object.keys = function(obj){
    var arr = [];
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        arr.push(key);
      }
    }
    return arr;
  }
}

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = function merge(a, b) {
  var ac = a['class'];
  var bc = b['class'];

  if (ac || bc) {
    ac = ac || [];
    bc = bc || [];
    if (!Array.isArray(ac)) ac = [ac];
    if (!Array.isArray(bc)) bc = [bc];
    a['class'] = ac.concat(bc).filter(nulls);
  }

  for (var key in b) {
    if (key != 'class') {
      a[key] = b[key];
    }
  }

  return a;
};

/**
 * Filter null `val`s.
 *
 * @param {*} val
 * @return {Boolean}
 * @api private
 */

function nulls(val) {
  return val != null && val !== '';
}

/**
 * join array as classes.
 *
 * @param {*} val
 * @return {String}
 * @api private
 */

function joinClasses(val) {
  return Array.isArray(val) ? val.map(joinClasses).filter(nulls).join(' ') : val;
}

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} escaped
 * @return {String}
 * @api private
 */

exports.attrs = function attrs(obj, escaped){
  var buf = []
    , terse = obj.terse;

  delete obj.terse;
  var keys = Object.keys(obj)
    , len = keys.length;

  if (len) {
    buf.push('');
    for (var i = 0; i < len; ++i) {
      var key = keys[i]
        , val = obj[key];

      if ('boolean' == typeof val || null == val) {
        if (val) {
          terse
            ? buf.push(key)
            : buf.push(key + '="' + key + '"');
        }
      } else if (0 == key.indexOf('data') && 'string' != typeof val) {
        buf.push(key + "='" + JSON.stringify(val) + "'");
      } else if ('class' == key) {
        if (escaped && escaped[key]){
          if (val = exports.escape(joinClasses(val))) {
            buf.push(key + '="' + val + '"');
          }
        } else {
          if (val = joinClasses(val)) {
            buf.push(key + '="' + val + '"');
          }
        }
      } else if (escaped && escaped[key]) {
        buf.push(key + '="' + exports.escape(val) + '"');
      } else {
        buf.push(key + '="' + val + '"');
      }
    }
  }

  return buf.join(' ');
};

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

exports.escape = function escape(html){
  return String(html)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
};

/**
 * Re-throw the given `err` in context to the
 * the jade in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @api private
 */

exports.rethrow = function rethrow(err, filename, lineno, str){
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  try {
    str =  str || require('fs').readFileSync(filename, 'utf8')
  } catch (ex) {
    rethrow(err, null, lineno)
  }
  var context = 3
    , lines = str.split('\n')
    , start = Math.max(lineno - context, 0)
    , end = Math.min(lines.length, lineno + context);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? '  > ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'Jade') + ':' + lineno
    + '\n' + context + '\n\n' + err.message;
  throw err;
};

},{"fs":2}],2:[function(require,module,exports){

},{}]},{},[1])(1)
});
(function(){ 
var assets = { 
    assets: {
      "/js/widget/templates.js":"https://localhost:4000/js/widget/templates-55159074c394efafdd0f43e93dbf7c4b.js",
      "/js/inFrameWidget/templates.js":"https://localhost:4000/js/inFrameWidget/templates-a9fa34653d01cbe1485a279468bd70ad.js",
      "/js/lightbox/templates.js":"https://localhost:4000/js/lightbox/templates-ce6f03c3042dbc5feb7cd022723b18bf.js",
      "/js/shared/templates.js":"https://localhost:4000/js/shared/templates-49e688ea7fcca514ca1e59c7678d9f5a.js",
      "/crossdomain.xml":"https://localhost:4000/crossdomain.xml",
      "/empty.txt":"https://localhost:4000/empty.txt",
      "/css/bootstrap-responsive.css":"https://localhost:4000/css/bootstrap-responsive-e26f2c71fa69ffa8c5d35703337c2e88.css",
      "/css/bootstrap.css":"https://localhost:4000/css/bootstrap-4b6cf9d982da64f10922c30891901941.css",
      "/css/icomoon.styl":"https://localhost:4000/css/icomoon-55ab20a16fdcdf3b9ab857c17e97cb54.styl",
      "/css/jquery.nouislider.css":"https://localhost:4000/css/jquery.nouislider-940f04c000021c15910815bb06776f53.css",
      "/js/friendly.iframe.loader.js":"https://localhost:4000/js/friendly.iframe.loader.js",
      "/img/ajax-loader-green.gif":"https://localhost:4000/img/ajax-loader-green-43fca1115902dd17058777d0c4c55080.gif",
      "/img/ajax-loader-red.gif":"https://localhost:4000/img/ajax-loader-red-fb134020eac5a368036b69bb302580d5.gif",
      "/img/alex.png":"https://localhost:4000/img/alex-f346cde3eaabdb3d42ae18bf356edb33.png",
      "/img/baby_dark.svg":"https://localhost:4000/img/baby_dark-539b8121ab431eef781d1773fdd41610.svg",
      "/img/baby_grey.svg":"https://localhost:4000/img/baby_grey-a241d03efe519fba2bd785286b6e45ff.svg",
      "/img/bag-grey.png":"https://localhost:4000/img/bag-grey-ad72325f822a37ee01efd49c9d290551.png",
      "/img/bag-logo-grey.png":"https://localhost:4000/img/bag-logo-grey-84589d56eb6a0272666beaaa2fb9ab49.png",
      "/img/bag-logo-white.png":"https://localhost:4000/img/bag-logo-white-91ed410cb84340f73fc08693127e921a.png",
      "/img/bag-white.png":"https://localhost:4000/img/bag-white-a694ffbc6dab16650b04c59ad5e97f72.png",
      "/img/beauty_dark.svg":"https://localhost:4000/img/beauty_dark-da8b92429e692a995573d91114fdb509.svg",
      "/img/beauty_grey.svg":"https://localhost:4000/img/beauty_grey-22d8d4de9d474324e869d6354cb93a4c.svg",
      "/img/blank.png":"https://localhost:4000/img/blank-d38f55160e6943108951275bf91d6d0f.png",
      "/img/boris.png":"https://localhost:4000/img/boris-659afbc0680e357bbdc4438f40479058.png",
      "/img/broken-heel.jpg":"https://localhost:4000/img/broken-heel-25c19b85bcb1f902f1047f656838bead.jpg",
      "/img/bryan.png":"https://localhost:4000/img/bryan-317391343a52d1cbf8a71f72896efc26.png",
      "/img/credit-card-logos.gif":"https://localhost:4000/img/credit-card-logos-76201f024128cf486cd26403dad77a39.gif",
      "/img/cvv-infographic.gif":"https://localhost:4000/img/cvv-infographic-cdf39cb93e7ea25aa84ba94bc6ba0ebd.gif",
      "/img/dan.png":"https://localhost:4000/img/dan-63bb6aa41bfd95d392d449fde7018767.png",
      "/img/facebook_share.png":"https://localhost:4000/img/facebook_share-bd92117d805a65b76ade36d335e85793.png",
      "/img/fashion_dark.svg":"https://localhost:4000/img/fashion_dark-44dfa4871800b78f5b43352ffd671c15.svg",
      "/img/fashion_grey.svg":"https://localhost:4000/img/fashion_grey-28c88ad64f09ff86d86e4cdb97de763a.svg",
      "/img/favicon.ico":"https://localhost:4000/img/favicon-701b76a421488df9eb58e1db2bc677ed.ico",
      "/img/filter-bar-closer-button-open.jpg":"https://localhost:4000/img/filter-bar-closer-button-open-42d21c1f2f9af60ed2dc5d0d04ba3ff9.jpg",
      "/img/filter-bar-closer-button.jpg":"https://localhost:4000/img/filter-bar-closer-button-6aad2169beca4fe5881f994cda620537.jpg",
      "/img/footer-social.png":"https://localhost:4000/img/footer-social-f4556ec70fe3899ff3a2307e7d96066c.png",
      "/img/georgie.png":"https://localhost:4000/img/georgie-ed2a063eb747830f06bc926a78377096.png",
      "/img/glyphicons-halflings-white.png":"https://localhost:4000/img/glyphicons-halflings-white-9bbc6e9602998a385c2ea13df56470fd.png",
      "/img/glyphicons-halflings.png":"https://localhost:4000/img/glyphicons-halflings-2516339970d710819585f90773aebe0a.png",
      "/img/hanger.jpg":"https://localhost:4000/img/hanger-c99ccd8ea7d6b073a21ba57aeb1f416a.jpg",
      "/img/home_dark.svg":"https://localhost:4000/img/home_dark-bbf7d276874e4a7ea51e30eab22b24aa.svg",
      "/img/home_grey.svg":"https://localhost:4000/img/home_grey-3b973fde189d2faa5590efedf9d33f37.svg",
      "/img/ico-add.png":"https://localhost:4000/img/ico-add-ff0760825656aebb21a282726ffa9d6e.png",
      "/img/ico-address.png":"https://localhost:4000/img/ico-address-dbe92587897d92ae2fa825e9b8787de9.png",
      "/img/ico-arrow.png":"https://localhost:4000/img/ico-arrow-2e9c97c08bfd4b58e8b9b756d20d69d0.png",
      "/img/ico-book.png":"https://localhost:4000/img/ico-book-ad1407790c8504a31bf20209327b91e7.png",
      "/img/ico-call.png":"https://localhost:4000/img/ico-call-d77c32aee535bc74fb21419df45d1c35.png",
      "/img/ico-cross-white.png":"https://localhost:4000/img/ico-cross-white-f9e55919cd404f63be2914654b11b7f1.png",
      "/img/ico-email.png":"https://localhost:4000/img/ico-email-6a27d837341c7ee810d56481000b88ed.png",
      "/img/ico-gift.png":"https://localhost:4000/img/ico-gift-137df8c106e67b416ab5660723c9c679.png",
      "/img/ico-love.png":"https://localhost:4000/img/ico-love-83fe08c746b4163bdd6f2e87bc139c17.png",
      "/img/ico-open-close.png":"https://localhost:4000/img/ico-open-close-4e02e92772ec4c078e041043626a5744.png",
      "/img/ico-tag.png":"https://localhost:4000/img/ico-tag-444cbc630487008ff7bc435442dae1e6.png",
      "/img/ico-tick.png":"https://localhost:4000/img/ico-tick-ef1735578a655d53ae78d12193cfaf4e.png",
      "/img/ico-triangle.png":"https://localhost:4000/img/ico-triangle-174ff60bd7a6fb41ad0a0dff2a5eb908.png",
      "/img/ipad-frame.png":"https://localhost:4000/img/ipad-frame-1e09d6ec07bdc412121a76bc91097478.png",
      "/img/jacklyn.png":"https://localhost:4000/img/jacklyn-ca2e2fb2b318a40092df6e575782f9cf.png",
      "/img/jak.png":"https://localhost:4000/img/jak-744ee9d63aa9d8c1d57305f70f6a4189.png",
      "/img/jesse.png":"https://localhost:4000/img/jesse-a50b172b12cbc72975766c49df97faae.png",
      "/img/jimmy.png":"https://localhost:4000/img/jimmy-437712a26804c729cc13941b086d0ac0.png",
      "/img/landing_hero.jpg":"https://localhost:4000/img/landing_hero-ccc17216e569c19174339ef634bfba21.jpg",
      "/img/list-works.png":"https://localhost:4000/img/list-works-4e608a316b4323e4747fdb31549fc43e.png",
      "/img/loading_more_products.gif":"https://localhost:4000/img/loading_more_products-236bf3bf4224e51040296e92137c5cf7.gif",
      "/img/logo-black.png":"https://localhost:4000/img/logo-black-e695f0745345bfcf4aaf6274861d4a04.png",
      "/img/logo-white.png":"https://localhost:4000/img/logo-white-4b9a4fc83ed675665d3cba17ccda65ab.png",
      "/img/norton-black.png":"https://localhost:4000/img/norton-black-c5c8760d7493408b22fd284bda0c99ed.png",
      "/img/people-don-draper.jpg":"https://localhost:4000/img/people-don-draper-af48537320ed1a0e9eeb70389e1e18c8.jpg",
      "/img/people-lnk-in.png":"https://localhost:4000/img/people-lnk-in-889b32d801ff73a8c7fe41fb23528f26.png",
      "/img/pinterest_share.png":"https://localhost:4000/img/pinterest_share-17f4915b822d2981bb8bf095e7c9006b.png",
      "/img/richard.png":"https://localhost:4000/img/richard-277d4d6f6e392cd6e4f817d27c88ce8f.png",
      "/img/sam.png":"https://localhost:4000/img/sam-ceffdf0bf7153144a5c1509b5d5f52bb.png",
      "/img/search.svg":"https://localhost:4000/img/search-37b2d87389ee0a057487c666c62b9255.svg",
      "/img/shopbeam-circles-hires.png":"https://localhost:4000/img/shopbeam-circles-hires-e6b6e235aff3128ba0e3b47b21b7cebb.png",
      "/img/shopbeam-circles.png":"https://localhost:4000/img/shopbeam-circles-f6d4524e1236098206ad8389d8408805.png",
      "/img/shopbeam-logo-black-large.png":"https://localhost:4000/img/shopbeam-logo-black-large-ad7ffe71b4d75ce6a8b15187180badfc.png",
      "/img/shopbeam-logo-notext.svg":"https://localhost:4000/img/shopbeam-logo-notext-5ac9709107f577925655fb38509429d8.svg",
      "/img/shopbeam-logo-old.svg":"https://localhost:4000/img/shopbeam-logo-old-0713fa43580696ba8f0fe9e6ec5cf80c.svg",
      "/img/shopbeam-logo-white.svg":"https://localhost:4000/img/shopbeam-logo-white-43e3560a438aca0e1d071848782f2b2a.svg",
      "/img/shopbeam-logo.svg":"https://localhost:4000/img/shopbeam-logo-0a37562f0b64442094caf7c9a6ad942e.svg",
      "/img/shopbeam-text-grey.png":"https://localhost:4000/img/shopbeam-text-grey-86af74d7a412e3dc01888230a3582afe.png",
      "/img/shopbeam-text-white.png":"https://localhost:4000/img/shopbeam-text-white-2a2c9836318751cfffbb4628534a0fec.png",
      "/img/slider-hint.png":"https://localhost:4000/img/slider-hint-a2a7989aeedd00d7083a4f406099b2cf.png",
      "/img/step-1.png":"https://localhost:4000/img/step-1-f6d4524e1236098206ad8389d8408805.png",
      "/img/step-2.png":"https://localhost:4000/img/step-2-a2e575e6c0aa3bfc73194988ffe122ed.png",
      "/img/step-3.png":"https://localhost:4000/img/step-3-1f06b0a3c695f71433694fa175ea99e2.png",
      "/img/step-4.png":"https://localhost:4000/img/step-4-8384e56d93373b5884a458fb08282aa2.png",
      "/img/steps-arrow-b.png":"https://localhost:4000/img/steps-arrow-b-4772d6415b7f7c5a7dbb6269f0f3287b.png",
      "/img/steps-arrow-bl.png":"https://localhost:4000/img/steps-arrow-bl-4f1945828fd61fe8194a4265d8320183.png",
      "/img/steps-arrow-r.png":"https://localhost:4000/img/steps-arrow-r-1482b88262c03d694c9d815c2ff70c01.png",
      "/img/visual.jpg":"https://localhost:4000/img/visual-fa33ee728ad372f1f49223be5a781cc7.jpg",
      "/img/zoomin.svg":"https://localhost:4000/img/zoomin-3d35a7d719982246d6ae3621d8c6798f.svg",
      "/css/angular/angular-csp.css":"https://localhost:4000/css/angular/angular-csp-de6110463ed5001dd95aa3bbbc7c129c.css",
      "/css/angular/angular-material.css":"https://localhost:4000/css/angular/angular-material-bb45d62e2c0cdd168e17a897bbc3c044.css",
      "/css/angular/angular-material.min.css":"https://localhost:4000/css/angular/angular-material.min-3fa0730f3823462ee25927fd4740ad16.css",
      "/css/angular/default-theme.css":"https://localhost:4000/css/angular/default-theme-9ad3d396b8f1e35b1e0334157a407c15.css",
      "/css/fonts/icomoon.dev.svg":"https://localhost:4000/css/fonts/icomoon.dev-06cfd3489ba2233a5cef760b437398c3.svg",
      "/css/fonts/icomoon.eot":"https://localhost:4000/css/fonts/icomoon-d751bce460b8e7b5f0c0c82849b3674c.eot",
      "/css/fonts/icomoon.svg":"https://localhost:4000/css/fonts/icomoon-07d93e0fceb61c0a35aae79bdcb7e760.svg",
      "/css/fonts/icomoon.ttf":"https://localhost:4000/css/fonts/icomoon-ec3fb701df3503accc91772d55674c9c.ttf",
      "/css/fonts/icomoon.woff":"https://localhost:4000/css/fonts/icomoon-4e4f6f0656aeb57f1102cab0d091f106.woff",
      "/css/icomoon/selection.json":"https://localhost:4000/css/icomoon/selection-738ed1580307222718064fc1aa060e76.json",
      "/css/icomoon/style.css":"https://localhost:4000/css/icomoon/style-c1fd7d134db869e80f0bfb53b3f50f75.css",
      "/css/mailer/main.styl":"https://localhost:4000/css/mailer/main-ee16acb64bd220f55200b725821405f4.styl",
      "/css/select2/select2-spinner.gif":"https://localhost:4000/css/select2/select2-spinner-7b9776076d5fceef4993b55c9383dedd.gif",
      "/css/select2/select2.css":"https://localhost:4000/css/select2/select2-2b182656c5d778023d3ae8e185299b3e.css",
      "/css/select2/select2.png":"https://localhost:4000/css/select2/select2-2ca61b76e22053571dd8611e5aac4900.png",
      "/css/select2/select2x2.png":"https://localhost:4000/css/select2/select2x2-49e3f006018662f60f1db2aec0b2cca9.png",
      "/css/silviomoreto/bootstrap-select.css":"https://localhost:4000/css/silviomoreto/bootstrap-select-aecd71d1b70f8392548ef08f1b6bb17d.css",
      "/swf/swfobject/expressInstall.swf":"https://localhost:4000/swf/swfobject/expressInstall.swf",
      "/swf/widgets/single-variant.swf":"https://localhost:4000/swf/widgets/single-variant.swf",
      "/swf/widgets/textLayout_1.0.0.595.swz":"https://localhost:4000/swf/widgets/textLayout_1.0.0.595.swz",
      "/img/email/facebook.png":"https://localhost:4000/img/email/facebook-64a74eb7271156a35db44b59ae2108d0.png",
      "/img/email/header-shopbeam.png":"https://localhost:4000/img/email/header-shopbeam-c5b4046a627782e8995259775454b959.png",
      "/img/email/header-thank-you-white.png":"https://localhost:4000/img/email/header-thank-you-white-239d84fbaf20c462ae0435130561cee5.png",
      "/img/email/pinterest.png":"https://localhost:4000/img/email/pinterest-7b635c63c82a6254bfce8abe99b43977.png",
      "/img/email/sample1.png":"https://localhost:4000/img/email/sample1-120d5a41568dd336bd1d892615b687d7.png",
      "/img/email/sample2.png":"https://localhost:4000/img/email/sample2-16b74865804972897d1b85cbcb89a564.png",
      "/img/email/shop-seamlessly.png":"https://localhost:4000/img/email/shop-seamlessly-f631fb1fd0aa37aa4c64462e8532cad4.png",
      "/img/email/shopbeam.png":"https://localhost:4000/img/email/shopbeam-98db4d1ea65130617440e32c7d4090df.png",
      "/img/email/thank-you-black.png":"https://localhost:4000/img/email/thank-you-black-eb54dcf2f501ad67cf9741006f32a6c4.png",
      "/img/email/twitter.png":"https://localhost:4000/img/email/twitter-41dbb0e4a5498906de038e6908090c9e.png",
      "/img/email/vimeo.png":"https://localhost:4000/img/email/vimeo-b8acb7d988715e9984e3ff32002b24a5.png",
      "/css/icomoon/fonts/shopbeam-set.eot":"https://localhost:4000/css/icomoon/fonts/shopbeam-set-0d8aefb71e10272b4279e1e114002305.eot",
      "/css/icomoon/fonts/shopbeam-set.svg":"https://localhost:4000/css/icomoon/fonts/shopbeam-set-6634fa83c4663949077cbb24a5453184.svg",
      "/css/icomoon/fonts/shopbeam-set.ttf":"https://localhost:4000/css/icomoon/fonts/shopbeam-set-43915948e04825d23ed5c2b0e20b180f.ttf",
      "/css/icomoon/fonts/shopbeam-set.woff":"https://localhost:4000/css/icomoon/fonts/shopbeam-set-f5feb4270630d25a02d2c56e654a4e00.woff",
      "/css/landing/fancybox/blank.gif":"https://localhost:4000/css/landing/fancybox/blank-325472601571f31e1bf00674c368d335.gif",
      "/css/landing/fancybox/fancybox_loading.gif":"https://localhost:4000/css/landing/fancybox/fancybox_loading-328cc0f6c78211485058d460e80f4fa8.gif",
      "/css/landing/fancybox/fancybox_loading@2x.gif":"https://localhost:4000/css/landing/fancybox/fancybox_loading@2x-f92938639fa894a0e8ded1c3368abe98.gif",
      "/css/landing/fancybox/fancybox_overlay.png":"https://localhost:4000/css/landing/fancybox/fancybox_overlay-77aeaa52715b898b73c74d68c630330e.png",
      "/css/landing/fancybox/fancybox_sprite.png":"https://localhost:4000/css/landing/fancybox/fancybox_sprite-783d4031fe50c3d83c960911e1fbc705.png",
      "/css/landing/fancybox/fancybox_sprite@2x.png":"https://localhost:4000/css/landing/fancybox/fancybox_sprite@2x-ed9970ce22242421e66ff150aa97fe5f.png",
      "/css/landing/fonts/Read-Me.txt":"https://localhost:4000/css/landing/fonts/Read-Me-164abd673d0c1bba160c8cffba4f445c.txt",
      "/css/landing/fonts/icomoon.dev.svg":"https://localhost:4000/css/landing/fonts/icomoon.dev-c938a6c6c5e2485fbc8ca24ef082ce2a.svg",
      "/css/landing/fonts/icomoon.eot":"https://localhost:4000/css/landing/fonts/icomoon-f1c94a8700b613877cd52b7fd10e60f0.eot",
      "/css/landing/fonts/icomoon.svg":"https://localhost:4000/css/landing/fonts/icomoon-31fa7da6a9555d33cb8ce6233334591f.svg",
      "/css/landing/fonts/icomoon.ttf":"https://localhost:4000/css/landing/fonts/icomoon-e00afd8908904a9faa952930deffb621.ttf",
      "/css/landing/fonts/icomoon.woff":"https://localhost:4000/css/landing/fonts/icomoon-d562f199e14be053d67f11a54889a0c6.woff",
      "/css/landing/fonts/index.html":"https://localhost:4000/css/landing/fonts/index-5d45e21b21473d7ff7d4d89924b6bf5a.html",
      "/js/lib/agrublev/angularLocalStorage.js":"https://localhost:4000/js/lib/agrublev/angularLocalStorage-43e16e1dd174efbf95592feebc4dfc3d.js",
      "/js/lib/angular/angular-1.2.3-custom.js":"https://localhost:4000/js/lib/angular/angular-1.2.3-custom-62584633182c0072fcbd3426c2d93df2.js",
      "/js/lib/angular/angular-1.2.3-custom.min.js":"https://localhost:4000/js/lib/angular/angular-1.2.3-custom.min-014bca6e2ac7cb0588fe85281b14e5f1.js",
      "/js/lib/angular/angular-1.3.13.js":"https://localhost:4000/js/lib/angular/angular-1.3.13-2ed1a89b7727b49a1b99de5ddc1f0b64.js",
      "/js/lib/angular/angular-1.3.13.min.js":"https://localhost:4000/js/lib/angular/angular-1.3.13.min-4a031ce4bccd9c5c405b40567255bbe4.js",
      "/js/lib/angular/angular-animate.js":"https://localhost:4000/js/lib/angular/angular-animate-48303ff03791b2f05fd3c265bc58c6cc.js",
      "/js/lib/angular/angular-animate.min.js":"https://localhost:4000/js/lib/angular/angular-animate.min-e189ef3baf12391fa509b23cfbd05309.js",
      "/js/lib/angular/angular-aria.js":"https://localhost:4000/js/lib/angular/angular-aria-ba5b20785e9a8b978c6848a74b233fac.js",
      "/js/lib/angular/angular-aria.min.js":"https://localhost:4000/js/lib/angular/angular-aria.min-a3703349f01db9f72de78d408874bcea.js",
      "/js/lib/angular/angular-cookies.js":"https://localhost:4000/js/lib/angular/angular-cookies-65b5ba6c1c58fd057a2f95e0e36aadf2.js",
      "/js/lib/angular/angular-material.js":"https://localhost:4000/js/lib/angular/angular-material-00aae982fc323e86bf8db05abdf021a6.js",
      "/js/lib/angular/angular-material.min.js":"https://localhost:4000/js/lib/angular/angular-material.min-b07f7b477d31033530c2ff295ddcf5e6.js",
      "/js/lib/angular/angular-mocks.js":"https://localhost:4000/js/lib/angular/angular-mocks-5a8c6771bdf382b7a65ab8fded7cc8f6.js",
      "/js/lib/angular/angular-resource.js":"https://localhost:4000/js/lib/angular/angular-resource-4c4ecf6f36404aec3467c6f0bc17282a.js",
      "/js/lib/angular/angular-route.js":"https://localhost:4000/js/lib/angular/angular-route-ad0c2404a31486fce1cef3dd3f95bbe2.js",
      "/js/lib/angular/angular-route.min.js":"https://localhost:4000/js/lib/angular/angular-route.min-f21f3938dfce3f8029c14e3a02e536a8.js",
      "/js/lib/angular/angular.js":"https://localhost:4000/js/lib/angular/angular-c60bfec8460ca1d0c7f65e3445f917ce.js",
      "/js/lib/angular/angular.min.js":"https://localhost:4000/js/lib/angular/angular.min-b9552a1e945130ef5dad4524858e1e4f.js",
      "/js/lib/bootstrap/bootstrap.js":"https://localhost:4000/js/lib/bootstrap/bootstrap-cbbf80e1733d43795c2beb41dff8068a.js",
      "/js/lib/easyXDM/MIT-license.txt":"https://localhost:4000/js/lib/easyXDM/MIT-license.txt",
      "/js/lib/easyXDM/easyXDM.Widgets.debug.js":"https://localhost:4000/js/lib/easyXDM/easyXDM.Widgets.debug.js",
      "/js/lib/easyXDM/easyXDM.Widgets.js":"https://localhost:4000/js/lib/easyXDM/easyXDM.Widgets.js",
      "/js/lib/easyXDM/easyXDM.Widgets.min.js":"https://localhost:4000/js/lib/easyXDM/easyXDM.Widgets.min.js",
      "/js/lib/easyXDM/easyXDM.debug.js":"https://localhost:4000/js/lib/easyXDM/easyXDM.debug.js",
      "/js/lib/easyXDM/easyXDM.js":"https://localhost:4000/js/lib/easyXDM/easyXDM.js",
      "/js/lib/easyXDM/easyXDM.min.js":"https://localhost:4000/js/lib/easyXDM/easyXDM.min.js",
      "/js/lib/easyXDM/easyxdm.swf":"https://localhost:4000/js/lib/easyXDM/easyxdm.swf",
      "/js/lib/easyXDM/json2.js":"https://localhost:4000/js/lib/easyXDM/json2.js",
      "/js/lib/easyXDM/name.html":"https://localhost:4000/js/lib/easyXDM/name.html",
      "/js/lib/jesseClipboard/copy.swf":"https://localhost:4000/js/lib/jesseClipboard/copy.swf",
      "/js/lib/jquery/jquery-1.10.2.js":"https://localhost:4000/js/lib/jquery/jquery-1.10.2-91515770ce8c55de23b306444d8ea998.js",
      "/js/lib/jquery/jquery-1.10.2.min.js":"https://localhost:4000/js/lib/jquery/jquery-1.10.2.min-628072e7212db1e8cdacb22b21752cda.js",
      "/js/lib/jquery/jquery.auto-numeric.js":"https://localhost:4000/js/lib/jquery/jquery.auto-numeric-517cbfb58e4d00faf9cf0d21887795fa.js",
      "/js/lib/jquery/jquery.nouislider.js":"https://localhost:4000/js/lib/jquery/jquery.nouislider-ba9a804820425ba45b853459f99cf34b.js",
      "/js/lib/jquery/jquery.number.js":"https://localhost:4000/js/lib/jquery/jquery.number-2f23ba7e021e5d5a14ad768d893f9125.js",
      "/js/lib/select2/select2.js":"https://localhost:4000/js/lib/select2/select2-a561a2cd08feb9aba10c2548c07c48e6.js",
      "/js/lib/shiv/DOMParser.js":"https://localhost:4000/js/lib/shiv/DOMParser-0029c51ab27207194e449673c0e40a9d.js",
      "/js/lib/shiv/customEvents.js":"https://localhost:4000/js/lib/shiv/customEvents-740478d8bedc9f65d5997498b058159e.js",
      "/js/lib/shiv/filter.js":"https://localhost:4000/js/lib/shiv/filter-05f10b38c53f9d14b6bd9db93ec04d0c.js",
      "/js/lib/shiv/map.js":"https://localhost:4000/js/lib/shiv/map-b03893bbc107ff30ee8f583f90c61aa8.js",
      "/js/lib/shiv/some.js":"https://localhost:4000/js/lib/shiv/some-87d3a623948a88cbea18bf96afd2ff43.js",
      "/js/lib/shiv/string.js":"https://localhost:4000/js/lib/shiv/string-9f85bc778b97e07dd0e193465361faf2.js",
      "/js/lib/silviomoreto/bootstrap-select.js":"https://localhost:4000/js/lib/silviomoreto/bootstrap-select-471ad8370ef66f63e13167a06ff357f2.js",
      "/js/lib/zeroclipboard/ZeroClipboard.js":"https://localhost:4000/js/lib/zeroclipboard/ZeroClipboard-a6d00e96d1da52b57df38b300df288e7.js",
      "/js/lib/zeroclipboard/ZeroClipboard.swf":"https://localhost:4000/js/lib/zeroclipboard/ZeroClipboard.swf",
      "/js/lib/easyXDM/cors/index.html":"https://localhost:4000/js/lib/easyXDM/cors/index.html",
      "/js/lib/easyXDM/example/blank.html":"https://localhost:4000/js/lib/easyXDM/example/blank.html",
      "/js/lib/easyXDM/example/bookmark.html":"https://localhost:4000/js/lib/easyXDM/example/bookmark.html",
      "/js/lib/easyXDM/example/bookmark.js":"https://localhost:4000/js/lib/easyXDM/example/bookmark.js",
      "/js/lib/easyXDM/example/bridge.html":"https://localhost:4000/js/lib/easyXDM/example/bridge.html",
      "/js/lib/easyXDM/example/data.html":"https://localhost:4000/js/lib/easyXDM/example/data.html",
      "/js/lib/easyXDM/example/glossary.aspx":"https://localhost:4000/js/lib/easyXDM/example/glossary.aspx",
      "/js/lib/easyXDM/example/index.html":"https://localhost:4000/js/lib/easyXDM/example/index.html",
      "/js/lib/easyXDM/example/methods.html":"https://localhost:4000/js/lib/easyXDM/example/methods.html",
      "/js/lib/easyXDM/example/remote.html":"https://localhost:4000/js/lib/easyXDM/example/remote.html",
      "/js/lib/easyXDM/example/remoteapp.html":"https://localhost:4000/js/lib/easyXDM/example/remoteapp.html",
      "/js/lib/easyXDM/example/remotedata.html":"https://localhost:4000/js/lib/easyXDM/example/remotedata.html",
      "/js/lib/easyXDM/example/remotemethods.html":"https://localhost:4000/js/lib/easyXDM/example/remotemethods.html",
      "/js/lib/easyXDM/example/remoterpcbackend.html":"https://localhost:4000/js/lib/easyXDM/example/remoterpcbackend.html",
      "/js/lib/easyXDM/example/remotetransport.html":"https://localhost:4000/js/lib/easyXDM/example/remotetransport.html",
      "/js/lib/easyXDM/example/resize_iframe.html":"https://localhost:4000/js/lib/easyXDM/example/resize_iframe.html",
      "/js/lib/easyXDM/example/resize_intermediate.html":"https://localhost:4000/js/lib/easyXDM/example/resize_intermediate.html",
      "/js/lib/easyXDM/example/resized_iframe_1.html":"https://localhost:4000/js/lib/easyXDM/example/resized_iframe_1.html",
      "/js/lib/easyXDM/example/resized_iframe_2.html":"https://localhost:4000/js/lib/easyXDM/example/resized_iframe_2.html",
      "/js/lib/easyXDM/example/transport.html":"https://localhost:4000/js/lib/easyXDM/example/transport.html",
      "/js/lib/easyXDM/example/upload.html":"https://localhost:4000/js/lib/easyXDM/example/upload.html",
      "/js/lib/easyXDM/example/upload_handler.aspx":"https://localhost:4000/js/lib/easyXDM/example/upload_handler.aspx",
      "/js/lib/easyXDM/example/upload_rpc.html":"https://localhost:4000/js/lib/easyXDM/example/upload_rpc.html",
      "/js/lib/easyXDM/example/widget.html":"https://localhost:4000/js/lib/easyXDM/example/widget.html",
      "/js/lib/easyXDM/example/widgets.html":"https://localhost:4000/js/lib/easyXDM/example/widgets.html",
      "/js/lib/easyXDM/example/xhr.html":"https://localhost:4000/js/lib/easyXDM/example/xhr.html",
      "/js/lib/easyXDM/tests/easyTest.css":"https://localhost:4000/js/lib/easyXDM/tests/easyTest.css",
      "/js/lib/easyXDM/tests/easyTest.js":"https://localhost:4000/js/lib/easyXDM/tests/easyTest.js",
      "/js/lib/easyXDM/tests/easyXDM.debug.js":"https://localhost:4000/js/lib/easyXDM/tests/easyXDM.debug.js",
      "/js/lib/easyXDM/tests/index.html":"https://localhost:4000/js/lib/easyXDM/tests/index.html",
      "/js/lib/easyXDM/tests/test_namespace.html":"https://localhost:4000/js/lib/easyXDM/tests/test_namespace.html",
      "/js/lib/easyXDM/tests/test_rpc.html":"https://localhost:4000/js/lib/easyXDM/tests/test_rpc.html",
      "/js/lib/easyXDM/tests/test_transport.html":"https://localhost:4000/js/lib/easyXDM/tests/test_transport.html",
      "/js/lib/easyXDM/tests/tests.js":"https://localhost:4000/js/lib/easyXDM/tests/tests.js",
      "/js/register.bundle.js":"https://localhost:4000/js/register.bundle-f67cdfde91c701301987292ecaae9932.js",
      "/js/landing.bundle.js":"https://localhost:4000/js/landing.bundle-4eb3bb5a92c061fa0a3e3058417ca653.js",
      "/js/dashboard.bundle.js":"https://localhost:4000/js/dashboard.bundle-72ef1fdbdc36ad2cd2a631e87432a4f5.js",
      "/js/widget.bundle.js":"https://localhost:4000/js/widget.bundle-a5f85042fd3d755521dc66d8e6e18a32.js",
      "/js/inFrameWidget.bundle.js":"https://localhost:4000/js/inFrameWidget.bundle-3ac20da05d0ea925ceaf2b8064fd20b4.js",
      "/js/lightbox.bundle.js":"https://localhost:4000/js/lightbox.bundle-d5b355e2781c804016b43821733931dd.js",
      "/js/cart.bundle.js":"https://localhost:4000/js/cart.bundle-fbcc47d635818bc85f51980436f1ccfb.js",
      "/js/checkout.bundle.js":"https://localhost:4000/js/checkout.bundle-1f810206578a1c0ed3801414106ac084.js",
      "/js/secureCheckoutFrame.bundle.js":"https://localhost:4000/js/secureCheckoutFrame.bundle-fafb2b7164c6794b1f47164ce11859c2.js",
      "/css/dashboard.css":"https://localhost:4000/css/dashboard-a2d1125282116e7b2fa6669878698747.css",
      "/css/widget.css":"https://localhost:4000/css/widget-b42b5efa7f4a809d93bca9619d0d3a9b.css",
      "/css/widget-healthy-essentials.css":"https://localhost:4000/css/widget-healthy-essentials-b42b5efa7f4a809d93bca9619d0d3a9b.css",
      "/css/widget-rogaine.css":"https://localhost:4000/css/widget-rogaine-b42b5efa7f4a809d93bca9619d0d3a9b.css",
      "/css/inFrameWidget.css":"https://localhost:4000/css/inFrameWidget-97f109096e5f3bb3398273347c04c93b.css",
      "/css/inFrameWidget-rogaine.css":"https://localhost:4000/css/inFrameWidget-rogaine-a5d70553c3766c580618d55869be6ef7.css",
      "/css/lightbox.css":"https://localhost:4000/css/lightbox-01bc5aacb12f55925c5f0acbd4f373c9.css",
      "/css/lightbox-healthy-essentials.css":"https://localhost:4000/css/lightbox-healthy-essentials-24f77dc91c88d04ad4ed7b2ce81e139a.css",
      "/css/lightbox-rogaine.css":"https://localhost:4000/css/lightbox-rogaine-4d49c14216ca60ebd57a14af1f1800aa.css",
      "/css/lightbox-rogaine-ad-men.css":"https://localhost:4000/css/lightbox-rogaine-ad-men-4f6750d891f021ad3f488231d9e1bf0c.css",
      "/css/cart-default.css":"https://localhost:4000/css/cart-default-53a134f10dbbeb7b6fc70afa0700c522.css",
      "/css/cart-rogaine.css":"https://localhost:4000/css/cart-rogaine-53a134f10dbbeb7b6fc70afa0700c522.css",
      "/css/cart-healthy-essentials.css":"https://localhost:4000/css/cart-healthy-essentials-5dafb5ae15721dab023ebac5b8ec48bd.css",
      "/css/checkout-default.css":"https://localhost:4000/css/checkout-default-44041495143040d65e21ac3b7415e8d5.css",
      "/css/checkout-healthy-essentials.css":"https://localhost:4000/css/checkout-healthy-essentials-015301b520d10211d9cbd28869ec74a4.css",
      "/css/checkout-rogaine.css":"https://localhost:4000/css/checkout-rogaine-227abff73f5680dbce93605c4c900252.css",
      "/css/checkout-lacoste.css":"https://localhost:4000/css/checkout-lacoste-dfa9b4744181a876580d74b03da9b321.css",
      "/css/landing.css":"https://localhost:4000/css/landing-8b34604295f81b45a2e5acab972a5f1c.css",
      "/css/register.css":"https://localhost:4000/css/register-b9cf3f656fc80d4ff5b75cea5fe3c29f.css"
    },
    url: function (url) {
          return this.assets[url];
        }
};window.appIndexes = {
'cart/healthy-essentials': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Cart</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/cart-healthy-essentials.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" syle=\"background: transparent; margin: 0; padding: 0;\" ng-class=\"{'open': cartOpen, 'closed': !cartOpen}\" class=\"bootstrap-button-override\"><div class=\"full-height\"><div id=\"checkout-button\" ng-click=\"goToCheckout()\"><div class=\"bag-container z4\"><div class=\"icon-bag-outline\"><div class=\"item-count\">{{cart.itemCount}}</div></div></div><div class=\"z2\"><div class=\"title-bar items-in-cart\"><h4 ng-class=\"{active: cartOpen}\" ng-pluralize count=\"cart.itemCount\" when=\"{'one': 'Item in my cart', 'other': 'Items in my cart'}\" class=\"safari-font-weight-override\"></h4></div></div><div cart-items-he sidebar recent class=\"cart-items z0 scroll-shadow-outer full-height\"></div><div class=\"z1 vertical-align-middle norton-container\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script></div><div class=\"tagline-container\"><h4>Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"http://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h4><h4 class=\"uppercase italic\">shop seamlessly</h4></div></div><div class=\"title-bar checkout z3\"><button class=\"btn btn-primary no-pointer-events view-bag z0 active\"><h3 class=\"safari-font-weight-override\">Checkout</h3></button></div></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/cart.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'cart/index': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets,theme = locals_.theme;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Cart</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/cart-default.css')) + "") }, {"rel":true,"href":true})) + ">");
if (assets.url('/css/cart-' + theme + '.css'))
{
buf.push("<link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/cart-' + theme + '.css')) + "") }, {"rel":true,"href":true})) + ">");
}
buf.push("<!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" syle=\"background: transparent; margin: 0; padding: 0;\" ng-class=\"{'open': cartOpen, 'closed': !cartOpen}\" class=\"bootstrap-button-override\"><div class=\"full-height\"><div id=\"checkout-button\" ng-click=\"goToCheckout()\"><div class=\"bag-container z4\"><div class=\"icon-bag-outline\"><div class=\"item-count\">{{cart.itemCount}}</div></div></div><div class=\"z2\"><div class=\"title-bar items-in-cart\"><h4 ng-class=\"{active: cartOpen}\" ng-pluralize count=\"cart.itemCount\" when=\"{'one': 'Item in my cart', 'other': 'Items in my cart'}\" class=\"safari-font-weight-override\"></h4></div></div><div cart-items sidebar recent class=\"cart-items z0 scroll-shadow-outer full-height\"></div><div class=\"z1 vertical-align-middle norton-container\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script></div><div class=\"tagline-container\"><h4>Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"http://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h4><h4 class=\"uppercase italic\">shop seamlessly</h4></div></div><div class=\"title-bar checkout z3\"><button class=\"btn btn-primary no-pointer-events view-bag z0 active\"><h3 class=\"safari-font-weight-override\">Checkout</h3></button></div></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/cart.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'cart/rogaine-ad-men': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Cart</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/cart-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" syle=\"background: transparent; margin: 0; padding: 0;\" ng-class=\"{'open': cartOpen, 'closed': !cartOpen}\" class=\"bootstrap-button-override\"><div class=\"full-height\"><div id=\"checkout-button\" ng-click=\"goToCheckout()\"><div class=\"bag-container z4\"><div class=\"icon-bag-outline\"><div class=\"item-count\">{{cart.itemCount}}</div></div></div><div class=\"z2\"><div class=\"title-bar items-in-cart\"><h4 ng-class=\"{active: cartOpen}\" ng-pluralize count=\"cart.itemCount\" when=\"{'one': 'Item in my cart', 'other': 'Items in my cart'}\" class=\"safari-font-weight-override\"></h4></div></div><div cart-items-rogaine sidebar recent class=\"cart-items z0 scroll-shadow-outer full-height\"></div><div class=\"z1 vertical-align-middle norton-container\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script></div><div class=\"tagline-container\"><h4>Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"http://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h4><h4 class=\"uppercase italic\">shop seamlessly</h4></div></div><div class=\"title-bar checkout z3\"><button class=\"btn btn-primary no-pointer-events view-bag z0 active\"><h3 class=\"safari-font-weight-override\">Checkout</h3></button></div></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/cart.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'cart/rogaine-men': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Cart</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/cart-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" syle=\"background: transparent; margin: 0; padding: 0;\" ng-class=\"{'open': cartOpen, 'closed': !cartOpen}\" class=\"bootstrap-button-override\"><div class=\"full-height\"><div id=\"checkout-button\" ng-click=\"goToCheckout()\"><div class=\"bag-container z4\"><div class=\"icon-bag-outline\"><div class=\"item-count\">{{cart.itemCount}}</div></div></div><div class=\"z2\"><div class=\"title-bar items-in-cart\"><h4 ng-class=\"{active: cartOpen}\" ng-pluralize count=\"cart.itemCount\" when=\"{'one': 'Item in my cart', 'other': 'Items in my cart'}\" class=\"safari-font-weight-override\"></h4></div></div><div cart-items-rogaine sidebar recent class=\"cart-items z0 scroll-shadow-outer full-height\"></div><div class=\"z1 vertical-align-middle norton-container\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script></div><div class=\"tagline-container\"><h4>Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"http://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h4><h4 class=\"uppercase italic\">shop seamlessly</h4></div></div><div class=\"title-bar checkout z3\"><button class=\"btn btn-primary no-pointer-events view-bag z0 active\"><h3 class=\"safari-font-weight-override\">Checkout</h3></button></div></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/cart.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'cart/rogaine-women': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Cart</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/cart-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" syle=\"background: transparent; margin: 0; padding: 0;\" ng-class=\"{'open': cartOpen, 'closed': !cartOpen}\" class=\"bootstrap-button-override\"><div class=\"full-height\"><div id=\"checkout-button\" ng-click=\"goToCheckout()\"><div class=\"bag-container z4\"><div class=\"icon-bag-outline\"><div class=\"item-count\">{{cart.itemCount}}</div></div></div><div class=\"z2\"><div class=\"title-bar items-in-cart\"><h4 ng-class=\"{active: cartOpen}\" ng-pluralize count=\"cart.itemCount\" when=\"{'one': 'Item in my cart', 'other': 'Items in my cart'}\" class=\"safari-font-weight-override\"></h4></div></div><div cart-items-rogaine sidebar recent class=\"cart-items z0 scroll-shadow-outer full-height\"></div><div class=\"z1 vertical-align-middle norton-container\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script></div><div class=\"tagline-container\"><h4>Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"http://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h4><h4 class=\"uppercase italic\">shop seamlessly</h4></div></div><div class=\"title-bar checkout z3\"><button class=\"btn btn-primary no-pointer-events view-bag z0 active\"><h3 class=\"safari-font-weight-override\">Checkout</h3></button></div></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/cart.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'checkout/healthy-essentials': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,assets = locals_.assets,HOST = locals_.HOST;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Checkout</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0 user-scalable=no\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<script type=\"text/javascript\" src=\"//use.typekit.net/qqm5aag.js\"></script><script type=\"text/javascript\">try{Typekit.load();}catch(e){}\n</script><link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/checkout-healthy-essentials.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" style=\"width: 100%; height: 100%; background: transparent; margin: 0; padding: 0;\" ng-init=\"loadTheme('healthy-essentials')\" class=\"bootstrap-button-override\"><div class=\"container-fluid\"><div class=\"row-fluid ssl-secured-connection z2\"><h4><div class=\"icon-locked\"></div>SSL Secured Connection</h4><h4 ng-click=\"goToReferrer()\" class=\"close-checkout pull-right\"><!--| Close--><div class=\"icon-close\"></div></h4></div><div class=\"row-fluid header scroll-header z1\"><div class=\"title-bar\"><h2 class=\"text-center uppercase\">Checkout</h2></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;)\" class=\"row-fluid min-height-container z0\"><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;span12&quot;, &quot;span8 left&quot;) + &quot; &quot; + getStep()\" class=\"main\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"steps section z1 text-center\"><div sb-checkout-steps-arrow=\"getStep()\" class=\"down-arrow\"></div><a ng-click=\"goToStep(&quot;review&quot;)\" ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;review&quot;, &quot;badge-info&quot;)\" class=\"badge\">1</div><div ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" class=\"step\">Review<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;shipping-billing&quot;)\" ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;badge-info&quot;)\" class=\"badge\">2</div><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" class=\"step\">Shipping & Payment<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;order-summary&quot;)\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;badge-info&quot;)\" class=\"badge\">3</div><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" class=\"step\">Order Summary</div></h3></a></div><div sb-custom-scrollbar scroll-shadow class=\"scrollable-content\"><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid section z1 hidden-phone\"><h3 tooltip=\"Here's how shipping calculations work...\" placement=\"bottom\" class=\"span12 label1\">Estimated Tax & Shipping<!--.icon-info-2--></h3></div><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid state section z2\"><div class=\"span2 text-left\"><h4>Province</h4></div><div class=\"span5\"><div class=\"row-fluid\"><select id=\"shipping-state\" ng-if=\"activeStep(&quot;review&quot;)\" ng-model=\"user.shipping.state\" ng-options=\"state.name for state in states track by state.abbreviation\" ng-change=\"shippingStateChanged('#shipping-state')\" class=\"span12 solo selectpicker\"><option value=\"\" disabled selected>(select)</option></select></div></div><h5 class=\"span5\">Items in your shopping bag are not reserved and may sell out.</h5></div><div ng-view class=\"z0 scroll-shadow-outer\"></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid desktop-footer hidden-phone z1\">       <div class=\"row-fluid text-center\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\">//.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")</script></div><div class=\"footer-main-button\"><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm|review&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button></div><div class=\"row-fluid title-bar pull-left\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5>" + (jade.escape(null == (jade.interp = ' ' ) ? "" : jade.interp)) + "<h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div><div style=\"padding-bottom: 10px\" class=\"row-fluid\"><h5 class=\"legal-info\">Well.ca is a registered trademark owned by Well.ca Inc. The Well.ca ecommerce services are subject to the  terms and conditions of use of Well.ca Inc. and can be reviewed <a href=\"https://well.ca/terms.html\" target=\"_blank\">here</a><span>. Johnson & Johnson Inc. (JJI) is providing information from your product purchase request to the Well.ca site for the purchase of JJI products and is not affiliated with Well.ca Inc.; nor is JJI responsible for the sale or delivery of  JJI products that you select for purchase from the Well.ca site.</span></h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Well.ca Pharmacy Accreditation as of November 11th 2015</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">OPC Certificate Accreditation #304222</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Your Pharmacist is Philip Rosenberg</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Central Fill Solutions Inc. 346 Millway Ave. Vaughan, ON L4K 3W1</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Call Well.ca Toll Free: 1-866-640-3800</h5></div><div style=\"padding: 10px 0px\" class=\"row-fluid\"><h5 class=\"legal-info pull-left\">** Free Economy Shipping offered by Well.ca as of November 11th 2015 on orders of $29 or more (before taxes and shipping) in Canada excluding remote and difficult to serve locations. Subject to change at the discretion of Well.ca. Based on<a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping and Returns policy.</a></h5></div></div></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar text-center\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5><h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div></div></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;, &quot;&quot;)\" class=\"span4 summary\"><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;full-height&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"summary-container\"><div class=\"row-fluid section\"><h3 class=\"label1 large inline-block\">Summary</h3><h4 ng-pluralize count=\"cart.itemCount\" when=\"{&quot;one&quot;: &quot;({} Item)&quot;, &quot;other&quot;: &quot;({} Items)&quot;}\"></h4></div><div ng-hide=\"activeStep(&quot;review&quot;)\" class=\"span12 cart-items-container hidden-phone\"><div cart-items-he sidebar class=\"cart-items scroll-shadow-outer section no-pad full-height\"></div></div><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;scroll-footer&quot;)\" class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large subtotal\">Subtotal</h4><h4 class=\"span6 large money\">{{cart.subtotal / 100 | currency}}</h4><h3 class=\"label1 large float-pad\">Tax & Shipping *<!--.icon-info-2.hidden-phone--></h3></div><div class=\"clear-large\"></div></div><div class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large\">Tax</h4><h4 class=\"span6 large money\">{{{null: '--'}[tax] || (tax / 100 | currency)}}</h4></div><div class=\"row-fluid\"><h4 class=\"span6 large\">Shipping</h4><h4 class=\"span6 large money\">{{{0:'FREE **', null: '--'}[shipping] || (shipping / 100 | currency)}}</h4></div><div ng-show=\"discount\" class=\"row-fluid\"><h4 class=\"span6 large\">Discount</h4><h4 class=\"span6 large money\">{{(discount / 100 | currency)}}</h4></div></div><div class=\"row-fluid section total\"><div class=\"row-fluid\"><h3 class=\"span6 label1 large\">Total</h3><h4 class=\"span6 label1 large money\">{{total / 100 | currency}}</h4></div><div class=\"row-fluid\"><h5 class=\"estimated-costs\">* Estimated taxes & shipping</h5></div></div></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid footer\"><div class=\"row-fluid visible-phone\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"norton pull-left\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script><!--.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")--></div><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large pull-right\">{{formSubmitValue()}} ></button></div><div class=\"row-fluid text-center\"><h5 class=\"text-center\">Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"https://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h5></div><div class=\"row-fluid tagline text-center\"><h5 class=\"italic uppercase\">shop seamlessly</h5></div><div class=\"row-fluid text-center\"><h6 class=\"uppercase\"><a href=\"mailto:customercare@shopbeam.com\" target=\"_blank\" ng-click=\"trackNeedAssistanceClick()\">customercare@shopbeam.com</a></h6>" + (jade.escape(null == (jade.interp = ' | '  ) ? "" : jade.interp)) + "<h6 class=\"uppercase\"> <a href=\"tel:8004903216\" target=\"_blank\">Phone: (800) 490-3216</a></h6></div><div style=\"margin-top: 10px\" class=\"row-fluid text-center\"><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" class=\"btn btn-large\">{{formSubmitValue()}}</button></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar text-center\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5><h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div></div></div></div></div></div></body><div id=\"error-modal\" class=\"bootstrap-modal-override modal fade hide\"><div class=\"modal-header\"><h3>Oh Noes!!</h3></div><div class=\"modal-body\"><p>Something went wrong. We're tracking this issue with the ID shown below and our team has been notified. We're very sorry for the inconvenience.</p><pre id=\"error-modal-errorId\"></pre></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-primary\">Dismiss</button></div></div><div class=\"bootstrap-modal-override modal hide fade remove-dialog\"><div class=\"modal-header\"><button type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"close\">&times;</button><h2>Remove Items</h2></div><div class=\"modal-body\"><p ng-pluralize count=\"selectedItem.quantity\" when=\"{&quot;1&quot;: &quot;Are you sure you want to remove {{selectedItem.name}}?&quot;, &quot;2&quot;: &quot;You have 2 of {{selectedItem.name}} in your cart. Are you sure you want to remove them both?&quot;, &quot;other&quot;: &quot;You have {} of {{selectedItem.name}} in your cart. Are you sure you want to remove all {}?&quot;}\" class=\"lead\"></p></div><div class=\"modal-footer\"><a ng-click=\"removeCancel()\" class=\"btn\">No, keep it</a><a ng-click=\"removeConfirm()\" class=\"btn btn-success\">Yes, remove it</a></div></div><div class=\"please-wait\"><div class=\"box\"><div class=\"img-container\"></div><p>Please Wait...</p></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/bootstrap/bootstrap.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/checkout.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></html>");;return buf.join("");
})(locals)
},'checkout/index': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,assets = locals_.assets,theme = locals_.theme,HOST = locals_.HOST;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Checkout</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0 user-scalable=no\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<script type=\"text/javascript\" src=\"//use.typekit.net/qqm5aag.js\"></script><script type=\"text/javascript\">try{Typekit.load();}catch(e){}\n</script><link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/checkout-default.css')) + "") }, {"rel":true,"href":true})) + ">");
if (assets.url('/css/cart-' + theme + '.css'))
{
buf.push("<link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/checkout-' + theme + '.css')) + "") }, {"rel":true,"href":true})) + ">");
}
buf.push("<!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" style=\"width: 100%; height: 100%; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div class=\"container-fluid\"><div class=\"row-fluid ssl-secured-connection z2\"><h4><div class=\"icon-locked\"></div>SSL Secured Connection</h4><h4 ng-click=\"goToReferrer()\" class=\"close-checkout pull-right\"><!--| Close--><div class=\"icon-close\"></div></h4></div><div class=\"row-fluid header scroll-header z1\"><div class=\"title-bar\"><h2 class=\"text-center uppercase\">Checkout</h2></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;)\" class=\"row-fluid min-height-container z0\"><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;span12&quot;, &quot;span8 left&quot;) + &quot; &quot; + getStep()\" class=\"main\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"steps section z1 text-center\"><div sb-checkout-steps-arrow=\"getStep()\" class=\"down-arrow\"></div><a ng-click=\"goToStep(&quot;review&quot;)\" ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;review&quot;, &quot;badge-info&quot;)\" class=\"badge\">1</div><div ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" class=\"step\">Review<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;shipping-billing&quot;)\" ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;badge-info&quot;)\" class=\"badge\">2</div><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" class=\"step\">Shipping & Payment<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;order-summary&quot;)\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;badge-info&quot;)\" class=\"badge\">3</div><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" class=\"step\">Order Summary</div></h3></a></div><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid section z1 hidden-phone\"><h3 tooltip=\"Here's how shipping calculations work...\" placement=\"bottom\" class=\"span12 label1\">Estimated Tax & Shipping<!--.icon-info-2--></h3></div><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid state section z2\"><div class=\"span2 text-left\"><h4>State</h4></div><div class=\"span5\"><div class=\"row-fluid\"><select id=\"shipping-state\" ng-if=\"activeStep(&quot;review&quot;)\" ng-model=\"user.shipping.state\" ng-options=\"state.name for state in states track by state.abbreviation\" ng-change=\"shippingStateChanged('#shipping-state')\" class=\"span12 solo selectpicker\"><option value=\"\" disabled selected>(select)</option></select></div></div><h5 class=\"span5\">Items in your shopping bag are not reserved and may sell out.</h5></div><div ng-view class=\"z0 scroll-shadow-outer\"></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;, &quot;&quot;)\" class=\"span4 summary\"><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;full-height&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"summary-container\"><div class=\"row-fluid section\"><h3 class=\"label1 large inline-block\">Summary</h3><h4 ng-pluralize count=\"cart.itemCount\" when=\"{&quot;one&quot;: &quot;({} Item)&quot;, &quot;other&quot;: &quot;({} Items)&quot;}\"></h4></div><div ng-hide=\"activeStep(&quot;review&quot;)\" class=\"span12 cart-items-container hidden-phone\"><div cart-items sidebar class=\"cart-items scroll-shadow-outer section no-pad full-height\"></div></div><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;scroll-footer&quot;)\" class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large subtotal\">Subtotal</h4><h4 class=\"span6 large money\">{{cart.subtotal / 100 | currency}}</h4><h3 class=\"label1 large float-pad\">Tax & Shipping<!--.icon-info-2.hidden-phone--></h3></div><div class=\"clear-large\"></div></div><div class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large\">Tax</h4><h4 class=\"span6 large money\">{{{null: '--'}[tax] || (tax / 100 | currency)}}</h4></div><div class=\"row-fluid\"><h4 class=\"span6 large\">Shipping</h4><h4 class=\"span6 large money\">{{{0:'FREE', null: '--'}[shipping] || (shipping / 100 | currency)}}</h4></div><div ng-show=\"discount\" class=\"row-fluid\"><h4 class=\"span6 large\">Discount</h4><h4 class=\"span6 large money\">{{(discount / 100 | currency)}}</h4></div></div><div class=\"row-fluid section total\"><div class=\"row-fluid\"><h3 class=\"span6 label1 large\">Total</h3><h4 class=\"span6 label1 large money\">{{total / 100 | currency}}</h4></div></div></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid footer\"><div class=\"row-fluid visible-phone\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"norton pull-left\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script><!--.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")--></div><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large btn-secondary back pull-left\">{{activeStep('review', 'Close', 'Back')}}</button><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large pull-right\">{{formSubmitValue()}} ></button></div><div class=\"row-fluid text-right\"><h4 class=\"text-center\">Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"https://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h4></div><div class=\"row-fluid tagline text-right\"><h4 class=\"italic uppercase\">shop seamlessly</h4></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar\"><h5 class=\"block large label1 text-center\">Need assistance?</h5><h5 class=\"block large text-center\">Email customer care at&nbsp;<a href=\"mailto:customercare@shopbeam.com?Subject=Order%20Checkout\" target=\"_blank\" ng-click=\"trackNeedAssistanceClick()\">customercare@shopbeam.com</a></h5></div></div></div></div></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid desktop-footer hidden-phone z1\"><div class=\"span8 text-center\"><div class=\"norton pull-left\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script><!--.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")--></div><div class=\"footer-main-button\"><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm|review&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button></div><div class=\"row-fluid title-bar\"><h5 class=\"large label1\">Need assistance?</h5><h5 class=\"large\"><a href=\"mailto:customercare@shopbeam.com?Subject=Order%20Checkout\" target=\"_blank\" ng-click=\"trackNeedAssistanceClick()\">customercare@shopbeam.com</a><span> or</span><a href=\"tel:8004903216\" target=\"_blank\"> (800) 490-3216</a></h5></div></div><div class=\"span4 text-center summary\"><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" class=\"btn btn-large\">{{formSubmitValue()}}</button></div></div></div></body><div id=\"error-modal\" class=\"bootstrap-modal-override modal fade hide\"><div class=\"modal-header\"><h3>Oh Noes!!</h3></div><div class=\"modal-body\"><p>Something went wrong. We're tracking this issue with the ID shown below and our team has been notified. We're very sorry for the inconvenience.</p><pre id=\"error-modal-errorId\"></pre></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-primary\">Dismiss</button></div></div><div class=\"bootstrap-modal-override modal hide fade remove-dialog\"><div class=\"modal-header\"><button type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"close\">&times;</button><h2>Remove Items</h2></div><div class=\"modal-body\"><p ng-pluralize count=\"selectedItem.quantity\" when=\"{&quot;1&quot;: &quot;Are you sure you want to remove {{selectedItem.name}}?&quot;, &quot;2&quot;: &quot;You have 2 of {{selectedItem.name}} in your cart. Are you sure you want to remove them both?&quot;, &quot;other&quot;: &quot;You have {} of {{selectedItem.name}} in your cart. Are you sure you want to remove all {}?&quot;}\" class=\"lead\"></p></div><div class=\"modal-footer\"><a ng-click=\"removeCancel()\" class=\"btn\">No, keep it</a><a ng-click=\"removeConfirm()\" class=\"btn btn-success\">Yes, remove it</a></div></div><div class=\"please-wait\"><div class=\"box\"><div class=\"img-container\"></div><p>Please Wait...</p></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/bootstrap/bootstrap.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/checkout.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></html>");;return buf.join("");
})(locals)
},'checkout/lacoste': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,assets = locals_.assets,HOST = locals_.HOST;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Checkout</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0 user-scalable=no\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<script type=\"text/javascript\" src=\"//use.typekit.net/qqm5aag.js\"></script><script type=\"text/javascript\">try{Typekit.load();}catch(e){}\n</script><link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/checkout-lacoste.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" style=\"width: 100%; height: 100%; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div class=\"container-fluid\"><div class=\"row-fluid ssl-secured-connection z2\"><h4><div class=\"icon-locked\"></div>SSL Secured Connection</h4><h4 ng-click=\"goToReferrer()\" class=\"close-checkout pull-right\"><!--| Close--><div class=\"icon-close\"></div></h4></div><div class=\"row-fluid header scroll-header z1\"><div class=\"title-bar\"><h2 class=\"text-center uppercase\">Checkout</h2></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;)\" class=\"row-fluid min-height-container z0\"><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;span12&quot;, &quot;span8 left&quot;) + &quot; &quot; + getStep()\" class=\"main\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"steps section z1 text-center\"><div sb-checkout-steps-arrow=\"getStep()\" class=\"down-arrow\"></div><a ng-click=\"goToStep(&quot;review&quot;)\" ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;review&quot;, &quot;badge-info&quot;)\" class=\"badge\">1</div><div ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" class=\"step\">Review<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;shipping-billing&quot;)\" ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;badge-info&quot;)\" class=\"badge\">2</div><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" class=\"step\">Shipping & Payment<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;order-summary&quot;)\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;badge-info&quot;)\" class=\"badge\">3</div><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" class=\"step\">Order Summary</div></h3></a></div><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid section z1 hidden-phone\"><h3 tooltip=\"Here's how shipping calculations work...\" placement=\"bottom\" class=\"span12 label1\">Estimated Tax & Shipping<!--.icon-info-2--></h3></div><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid state section z2\"><div class=\"span2 text-left\"><h4>State</h4></div><div class=\"span5\"><div class=\"row-fluid\"><select id=\"shipping-state\" ng-if=\"activeStep(&quot;review&quot;)\" ng-model=\"user.shipping.state\" ng-options=\"state.name for state in states track by state.abbreviation\" ng-change=\"shippingStateChanged('#shipping-state')\" class=\"span12 solo selectpicker\"><option value=\"\" disabled selected>(select)</option></select></div></div><h5 class=\"span5\">Items in your shopping bag are not reserved and may sell out.</h5></div><div ng-view class=\"z0 scroll-shadow-outer\"></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;, &quot;&quot;)\" class=\"span4 summary\"><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;full-height&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"summary-container\"><div class=\"row-fluid section\"><h3 class=\"label1 large inline-block\">Summary</h3><h4 ng-pluralize count=\"cart.itemCount\" when=\"{&quot;one&quot;: &quot;({} Item)&quot;, &quot;other&quot;: &quot;({} Items)&quot;}\"></h4></div><div ng-hide=\"activeStep(&quot;review&quot;)\" class=\"span12 cart-items-container hidden-phone\"><div cart-items sidebar class=\"cart-items scroll-shadow-outer section no-pad full-height\"></div></div><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;scroll-footer&quot;)\" class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large subtotal\">Subtotal</h4><h4 class=\"span6 large money\">{{cart.subtotal / 100 | currency}}</h4><h3 class=\"label1 large float-pad\">Tax & Shipping *<!--.icon-info-2.hidden-phone--></h3></div><div class=\"clear-large\"></div></div><div class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large\">Tax</h4><h4 class=\"span6 large money\">{{{null: '--'}[tax] || (tax / 100 | currency)}}</h4></div><div class=\"row-fluid\"><h4 class=\"span6 large\">Shipping</h4><h4 class=\"span6 large money\">{{{0:'FREE', null: '--'}[shipping] || (shipping / 100 | currency)}}</h4></div><div ng-show=\"discount\" class=\"row-fluid\"><h4 class=\"span6 large\">Discount</h4><h4 class=\"span6 large money\">{{(discount / 100 | currency)}}</h4></div></div><div class=\"row-fluid section total\"><div class=\"row-fluid\"><h3 class=\"span6 label1 large\">Total</h3><h4 class=\"span6 label1 large money\">{{total / 100 | currency}}</h4></div><div class=\"row-fluid\"><h5 class=\"estimated-costs\">* Estimated taxes & shipping</h5></div></div></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid footer\"><div class=\"row-fluid visible-phone\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"norton pull-left\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script><!--.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")--></div><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large pull-right\">{{formSubmitValue()}} ></button></div><div class=\"row-fluid text-right\"><h4 class=\"text-center\">Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"https://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h4></div><div class=\"row-fluid tagline text-right\"><h4 class=\"italic uppercase\">shop seamlessly</h4></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar\"><h5 class=\"block large label1 text-center\">Need assistance?</h5><h5 class=\"block large text-center\">Email customer care at&nbsp;<a href=\"mailto:customercare@shopbeam.com?Subject=Order%20Checkout\" target=\"_blank\" ng-click=\"trackNeedAssistanceClick()\">customercare@shopbeam.com</a></h5></div></div></div></div></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid desktop-footer hidden-phone z1\"><div class=\"span2\"><div class=\"norton pull-left\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script><!--.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")--></div></div><div class=\"span10\"><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm|review&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" class=\"btn btn-large pull-right\">{{formSubmitValue()}}</button><div class=\"row-fluid title-bar\"><h5 class=\"large label1\">Need assistance?</h5><h5 class=\"large\"><a href=\"mailto:customercare@shopbeam.com?Subject=Order%20Checkout\" target=\"_blank\" ng-click=\"trackNeedAssistanceClick()\">customercare@shopbeam.com</a><span> or</span><a href=\"tel:8004903216\" target=\"_blank\"> (800) 490-3216</a></h5></div></div></div></div></body><div id=\"error-modal\" class=\"bootstrap-modal-override modal fade hide\"><div class=\"modal-header\"><h3>Oh Noes!!</h3></div><div class=\"modal-body\"><p>Something went wrong. We're tracking this issue with the ID shown below and our team has been notified. We're very sorry for the inconvenience.</p><pre id=\"error-modal-errorId\"></pre></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-primary\">Dismiss</button></div></div><div class=\"bootstrap-modal-override modal hide fade remove-dialog\"><div class=\"modal-header\"><button type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"close\">&times;</button><h2>Remove Items</h2></div><div class=\"modal-body\"><p ng-pluralize count=\"selectedItem.quantity\" when=\"{&quot;1&quot;: &quot;Are you sure you want to remove {{selectedItem.name}}?&quot;, &quot;2&quot;: &quot;You have 2 of {{selectedItem.name}} in your cart. Are you sure you want to remove them both?&quot;, &quot;other&quot;: &quot;You have {} of {{selectedItem.name}} in your cart. Are you sure you want to remove all {}?&quot;}\" class=\"lead\"></p></div><div class=\"modal-footer\"><a ng-click=\"removeCancel()\" class=\"btn\">No, keep it</a><a ng-click=\"removeConfirm()\" class=\"btn btn-success\">Yes, remove it</a></div></div><div class=\"please-wait\"><div class=\"box\"><div class=\"img-container\"><img" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/img/ajax-loader2.gif')) + "") }, {"src":true})) + "></div><p>Please Wait...</p></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/bootstrap/bootstrap.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/checkout.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></html>");;return buf.join("");
})(locals)
},'checkout/rogaine-ad-men': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,assets = locals_.assets,HOST = locals_.HOST;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Checkout</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0 user-scalable=no\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<script type=\"text/javascript\" src=\"//use.typekit.net/qqm5aag.js\"></script><script type=\"text/javascript\">try{Typekit.load();}catch(e){}\n</script><link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/checkout-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" style=\"width: 100%; height: 100%; background: transparent; margin: 0; padding: 0;\" ng-init=\"loadTheme('rogaine-men')\" class=\"bootstrap-button-override\"><div class=\"container-fluid\"><div class=\"row-fluid ssl-secured-connection z2\"><h4><div class=\"icon-locked\"></div>SSL Secured Connection</h4><h4 ng-click=\"goToReferrer()\" class=\"close-checkout pull-right\"><!--| Close--><div class=\"icon-close\"></div></h4></div><div class=\"row-fluid header scroll-header z1\"><div class=\"title-bar\"><h2 class=\"text-center uppercase\">Checkout</h2></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;)\" class=\"row-fluid min-height-container z0\"><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;span12&quot;, &quot;span8 left&quot;) + &quot; &quot; + getStep()\" class=\"main\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"steps section z1 text-center\"><div sb-checkout-steps-arrow=\"getStep()\" class=\"down-arrow\"></div><a ng-click=\"goToStep(&quot;review&quot;)\" ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;review&quot;, &quot;badge-info&quot;)\" class=\"badge\">1</div><div ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" class=\"step\">Review<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;shipping-billing&quot;)\" ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;badge-info&quot;)\" class=\"badge\">2</div><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" class=\"step\">Shipping & Payment<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;order-summary&quot;)\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;badge-info&quot;)\" class=\"badge\">3</div><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" class=\"step\">Order Summary</div></h3></a></div><div sb-custom-scrollbar scroll-shadow class=\"scrollable-content\"><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid section z1 hidden-phone\"><h3 tooltip=\"Here's how shipping calculations work...\" placement=\"bottom\" class=\"span12 label1\">Estimated Tax & Shipping<!--.icon-info-2--></h3></div><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid state section z2\"><div class=\"span2 text-left\"><h4>Province</h4></div><div class=\"span5\"><div class=\"row-fluid\"><select id=\"shipping-state\" ng-if=\"activeStep(&quot;review&quot;)\" ng-model=\"user.shipping.state\" ng-options=\"state.name for state in states track by state.abbreviation\" ng-change=\"shippingStateChanged('#shipping-state')\" class=\"span12 solo selectpicker\"><option value=\"\" disabled selected>(select)</option></select></div></div><h5 class=\"span5\">Items in your shopping bag are not reserved and may sell out.</h5></div><div ng-view class=\"z0 scroll-shadow-outer\"></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid desktop-footer hidden-phone z1\">       <div class=\"row-fluid text-center\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\">//.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")</script></div><div class=\"footer-main-button\"><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm|review&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button></div><div class=\"row-fluid title-bar pull-left\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5>" + (jade.escape(null == (jade.interp = ' ' ) ? "" : jade.interp)) + "<h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div><div style=\"padding-bottom: 10px\" class=\"row-fluid\"><h5 class=\"legal-info\">Well.ca is a registered trademark owned by Well.ca Inc. The Well.ca ecommerce services are subject to the  terms and conditions of use of Well.ca Inc. and can be reviewed <a href=\"https://well.ca/terms.html\" target=\"_blank\">here</a><span>. Johnson & Johnson Inc. (JJI) is providing information from your product purchase request to the Well.ca site for the purchase of JJI products and is not affiliated with Well.ca Inc.; nor is JJI responsible for the sale or delivery of  JJI products that you select for purchase from the Well.ca site.</span></h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Well.ca Pharmacy Accreditation as of November 11th 2015</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">OPC Certificate Accreditation #304222</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Your Pharmacist is Philip Rosenberg</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Central Fill Solutions Inc. 346 Millway Ave. Vaughan, ON L4K 3W1</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Call Well.ca Toll Free: 1-866-640-3800</h5></div><div style=\"padding: 10px 0px\" class=\"row-fluid\"><h5 class=\"legal-info pull-left\">** Free Economy Shipping offered by Well.ca as of November 11th 2015 on orders of $29 or more (before taxes and shipping) in Canada excluding remote and difficult to serve locations. Subject to change at the discretion of Well.ca. Based on<a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping and Returns policy.</a></h5></div></div></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar text-center\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5><h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div></div></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;, &quot;&quot;)\" class=\"span4 summary\"><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;full-height&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"summary-container\"><div class=\"row-fluid section\"><h3 class=\"label1 large inline-block\">Summary</h3><h4 ng-pluralize count=\"cart.itemCount\" when=\"{&quot;one&quot;: &quot;({} Item)&quot;, &quot;other&quot;: &quot;({} Items)&quot;}\"></h4></div><div ng-hide=\"activeStep(&quot;review&quot;)\" class=\"span12 cart-items-container hidden-phone\"><div cart-items-rogaine sidebar class=\"cart-items scroll-shadow-outer section no-pad full-height\"></div></div><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;scroll-footer&quot;)\" class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large subtotal\">Subtotal</h4><h4 class=\"span6 large money\">{{cart.subtotal / 100 | currency}}</h4><h3 class=\"label1 large float-pad\">Tax & Shipping *<!--.icon-info-2.hidden-phone--></h3></div><div class=\"clear-large\"></div></div><div class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large\">Tax</h4><h4 class=\"span6 large money\">{{{null: '--'}[tax] || (tax / 100 | currency)}}</h4></div><div class=\"row-fluid\"><h4 class=\"span6 large\">Shipping</h4><h4 class=\"span6 large money\">{{{0:'FREE **', null: '--'}[shipping] || (shipping / 100 | currency)}}</h4></div><div ng-show=\"discount\" class=\"row-fluid\"><h4 class=\"span6 large\">Discount</h4><h4 class=\"span6 large money\">{{(discount / 100 | currency)}}</h4></div></div><div class=\"row-fluid section total\"><div class=\"row-fluid\"><h3 class=\"span6 label1 large\">Total</h3><h4 class=\"span6 label1 large money\">{{total / 100 | currency}}</h4></div><div class=\"row-fluid\"><h5 class=\"estimated-costs\">* Estimated taxes & shipping</h5></div></div></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid footer\"><div class=\"row-fluid visible-phone\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"norton pull-left\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script><!--.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")--></div><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large pull-right\">{{formSubmitValue()}} ></button></div><div class=\"row-fluid text-center\"><h5 class=\"text-center\">Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"https://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h5></div><div class=\"row-fluid tagline text-center\"><h5 class=\"italic uppercase\">shop seamlessly</h5></div><div class=\"row-fluid text-center\"><h6 class=\"uppercase\"><a href=\"mailto:customercare@shopbeam.com\" target=\"_blank\" ng-click=\"trackNeedAssistanceClick()\">customercare@shopbeam.com</a></h6>" + (jade.escape(null == (jade.interp = ' | '  ) ? "" : jade.interp)) + "<h6 class=\"uppercase\"> <a href=\"tel:8004903216\" target=\"_blank\">Phone: (800) 490-3216</a></h6></div><div style=\"margin-top: 10px\" class=\"row-fluid text-center\"><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" class=\"btn btn-large\">{{formSubmitValue()}}</button></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar text-center\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5><h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div></div></div></div></div></div></body><div id=\"error-modal\" class=\"bootstrap-modal-override modal fade hide\"><div class=\"modal-header\"><h3>Oh Noes!!</h3></div><div class=\"modal-body\"><p>Something went wrong. We're tracking this issue with the ID shown below and our team has been notified. We're very sorry for the inconvenience.</p><pre id=\"error-modal-errorId\"></pre></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-primary\">Dismiss</button></div></div><div class=\"bootstrap-modal-override modal hide fade remove-dialog\"><div class=\"modal-header\"><button type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"close\">&times;</button><h2>Remove Items</h2></div><div class=\"modal-body\"><p ng-pluralize count=\"selectedItem.quantity\" when=\"{&quot;1&quot;: &quot;Are you sure you want to remove {{selectedItem.name}}?&quot;, &quot;2&quot;: &quot;You have 2 of {{selectedItem.name}} in your cart. Are you sure you want to remove them both?&quot;, &quot;other&quot;: &quot;You have {} of {{selectedItem.name}} in your cart. Are you sure you want to remove all {}?&quot;}\" class=\"lead\"></p></div><div class=\"modal-footer\"><a ng-click=\"removeCancel()\" class=\"btn\">No, keep it</a><a ng-click=\"removeConfirm()\" class=\"btn btn-success\">Yes, remove it</a></div></div><div class=\"please-wait\"><div class=\"box\"><div class=\"img-container\"></div><p>Please Wait...</p></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/bootstrap/bootstrap.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/checkout.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></html>");;return buf.join("");
})(locals)
},'checkout/rogaine-men': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,assets = locals_.assets,HOST = locals_.HOST;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Checkout</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0 user-scalable=no\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<script type=\"text/javascript\" src=\"//use.typekit.net/qqm5aag.js\"></script><script type=\"text/javascript\">try{Typekit.load();}catch(e){}\n</script><link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/checkout-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" style=\"width: 100%; height: 100%; background: transparent; margin: 0; padding: 0;\" ng-init=\"loadTheme('rogaine-men')\" class=\"bootstrap-button-override\"><div class=\"container-fluid\"><div class=\"row-fluid ssl-secured-connection z2\"><h4><div class=\"icon-locked\"></div>SSL Secured Connection</h4><h4 ng-click=\"goToReferrer()\" class=\"close-checkout pull-right\"><!--| Close--><div class=\"icon-close\"></div></h4></div><div class=\"row-fluid header scroll-header z1\"><div class=\"title-bar\"><h2 class=\"text-center uppercase\">Checkout</h2></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;)\" class=\"row-fluid min-height-container z0\"><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;span12&quot;, &quot;span8 left&quot;) + &quot; &quot; + getStep()\" class=\"main\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"steps section z1 text-center\"><div sb-checkout-steps-arrow=\"getStep()\" class=\"down-arrow\"></div><a ng-click=\"goToStep(&quot;review&quot;)\" ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;review&quot;, &quot;badge-info&quot;)\" class=\"badge\">1</div><div ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" class=\"step\">Review<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;shipping-billing&quot;)\" ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;badge-info&quot;)\" class=\"badge\">2</div><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" class=\"step\">Shipping & Payment<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;order-summary&quot;)\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;badge-info&quot;)\" class=\"badge\">3</div><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" class=\"step\">Order Summary</div></h3></a></div><div sb-custom-scrollbar scroll-shadow class=\"scrollable-content\"><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid section z1 hidden-phone\"><h3 tooltip=\"Here's how shipping calculations work...\" placement=\"bottom\" class=\"span12 label1\">Estimated Tax & Shipping<!--.icon-info-2--></h3></div><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid state section z2\"><div class=\"span2 text-left\"><h4>Province</h4></div><div class=\"span5\"><div class=\"row-fluid\"><select id=\"shipping-state\" ng-if=\"activeStep(&quot;review&quot;)\" ng-model=\"user.shipping.state\" ng-options=\"state.name for state in states track by state.abbreviation\" ng-change=\"shippingStateChanged('#shipping-state')\" class=\"span12 solo selectpicker\"><option value=\"\" disabled selected>(select)</option></select></div></div><h5 class=\"span5\">Items in your shopping bag are not reserved and may sell out.</h5></div><div ng-view class=\"z0 scroll-shadow-outer\"></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid desktop-footer hidden-phone z1\">       <div class=\"row-fluid text-center\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\">//.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")</script></div><div class=\"footer-main-button\"><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm|review&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button></div><div class=\"row-fluid title-bar pull-left\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5>" + (jade.escape(null == (jade.interp = ' ' ) ? "" : jade.interp)) + "<h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div><div style=\"padding-bottom: 10px\" class=\"row-fluid\"><h5 class=\"legal-info\">Well.ca is a registered trademark owned by Well.ca Inc. The Well.ca ecommerce services are subject to the  terms and conditions of use of Well.ca Inc. and can be reviewed <a href=\"https://well.ca/terms.html\" target=\"_blank\">here</a><span>. Johnson & Johnson Inc. (JJI) is providing information from your product purchase request to the Well.ca site for the purchase of JJI products and is not affiliated with Well.ca Inc.; nor is JJI responsible for the sale or delivery of  JJI products that you select for purchase from the Well.ca site.</span></h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Well.ca Pharmacy Accreditation as of November 11th 2015</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">OPC Certificate Accreditation #304222</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Your Pharmacist is Philip Rosenberg</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Central Fill Solutions Inc. 346 Millway Ave. Vaughan, ON L4K 3W1</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Call Well.ca Toll Free: 1-866-640-3800</h5></div><div style=\"padding: 10px 0px\" class=\"row-fluid\"><h5 class=\"legal-info pull-left\">** Free Economy Shipping offered by Well.ca as of November 11th 2015 on orders of $29 or more (before taxes and shipping) in Canada excluding remote and difficult to serve locations. Subject to change at the discretion of Well.ca. Based on<a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping and Returns policy.</a></h5></div></div></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar text-center\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5><h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div></div></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;, &quot;&quot;)\" class=\"span4 summary\"><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;full-height&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"summary-container\"><div class=\"row-fluid section\"><h3 class=\"label1 large inline-block\">Summary</h3><h4 ng-pluralize count=\"cart.itemCount\" when=\"{&quot;one&quot;: &quot;({} Item)&quot;, &quot;other&quot;: &quot;({} Items)&quot;}\"></h4></div><div ng-hide=\"activeStep(&quot;review&quot;)\" class=\"span12 cart-items-container hidden-phone\"><div cart-items-rogaine sidebar class=\"cart-items scroll-shadow-outer section no-pad full-height\"></div></div><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;scroll-footer&quot;)\" class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large subtotal\">Subtotal</h4><h4 class=\"span6 large money\">{{cart.subtotal / 100 | currency}}</h4><h3 class=\"label1 large float-pad\">Tax & Shipping *<!--.icon-info-2.hidden-phone--></h3></div><div class=\"clear-large\"></div></div><div class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large\">Tax</h4><h4 class=\"span6 large money\">{{{null: '--'}[tax] || (tax / 100 | currency)}}</h4></div><div class=\"row-fluid\"><h4 class=\"span6 large\">Shipping</h4><h4 class=\"span6 large money\">{{{0:'FREE **', null: '--'}[shipping] || (shipping / 100 | currency)}}</h4></div><div ng-show=\"discount\" class=\"row-fluid\"><h4 class=\"span6 large\">Discount</h4><h4 class=\"span6 large money\">{{(discount / 100 | currency)}}</h4></div></div><div class=\"row-fluid section total\"><div class=\"row-fluid\"><h3 class=\"span6 label1 large\">Total</h3><h4 class=\"span6 label1 large money\">{{total / 100 | currency}}</h4></div><div class=\"row-fluid\"><h5 class=\"estimated-costs\">* Estimated taxes & shipping</h5></div></div></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid footer\"><div class=\"row-fluid visible-phone\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"norton pull-left\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script><!--.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")--></div><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large pull-right\">{{formSubmitValue()}} ></button></div><div class=\"row-fluid text-center\"><h5 class=\"text-center\">Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"https://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h5></div><div class=\"row-fluid tagline text-center\"><h5 class=\"italic uppercase\">shop seamlessly</h5></div><div class=\"row-fluid text-center\"><h6 class=\"uppercase\"><a href=\"mailto:customercare@shopbeam.com\" target=\"_blank\" ng-click=\"trackNeedAssistanceClick()\">customercare@shopbeam.com</a></h6>" + (jade.escape(null == (jade.interp = ' | '  ) ? "" : jade.interp)) + "<h6 class=\"uppercase\"> <a href=\"tel:8004903216\" target=\"_blank\">Phone: (800) 490-3216</a></h6></div><div style=\"margin-top: 10px\" class=\"row-fluid text-center\"><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" class=\"btn btn-large\">{{formSubmitValue()}}</button></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar text-center\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5><h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div></div></div></div></div></div></body><div id=\"error-modal\" class=\"bootstrap-modal-override modal fade hide\"><div class=\"modal-header\"><h3>Oh Noes!!</h3></div><div class=\"modal-body\"><p>Something went wrong. We're tracking this issue with the ID shown below and our team has been notified. We're very sorry for the inconvenience.</p><pre id=\"error-modal-errorId\"></pre></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-primary\">Dismiss</button></div></div><div class=\"bootstrap-modal-override modal hide fade remove-dialog\"><div class=\"modal-header\"><button type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"close\">&times;</button><h2>Remove Items</h2></div><div class=\"modal-body\"><p ng-pluralize count=\"selectedItem.quantity\" when=\"{&quot;1&quot;: &quot;Are you sure you want to remove {{selectedItem.name}}?&quot;, &quot;2&quot;: &quot;You have 2 of {{selectedItem.name}} in your cart. Are you sure you want to remove them both?&quot;, &quot;other&quot;: &quot;You have {} of {{selectedItem.name}} in your cart. Are you sure you want to remove all {}?&quot;}\" class=\"lead\"></p></div><div class=\"modal-footer\"><a ng-click=\"removeCancel()\" class=\"btn\">No, keep it</a><a ng-click=\"removeConfirm()\" class=\"btn btn-success\">Yes, remove it</a></div></div><div class=\"please-wait\"><div class=\"box\"><div class=\"img-container\"></div><p>Please Wait...</p></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/bootstrap/bootstrap.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/checkout.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></html>");;return buf.join("");
})(locals)
},'checkout/rogaine-women': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,assets = locals_.assets,HOST = locals_.HOST;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Checkout</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0 user-scalable=no\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<script type=\"text/javascript\" src=\"//use.typekit.net/qqm5aag.js\"></script><script type=\"text/javascript\">try{Typekit.load();}catch(e){}\n</script><link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/checkout-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body ng-controller=\"MainCtrl\" style=\"width: 100%; height: 100%; background: transparent; margin: 0; padding: 0;\" ng-init=\"loadTheme('rogaine-women')\" class=\"bootstrap-button-override\"><div class=\"container-fluid\"><div class=\"row-fluid ssl-secured-connection z2\"><h4><div class=\"icon-locked\"></div>SSL Secured Connection</h4><h4 ng-click=\"goToReferrer()\" class=\"close-checkout pull-right\"><!--| Close--><div class=\"icon-close\"></div></h4></div><div class=\"row-fluid header scroll-header z1\"><div class=\"title-bar\"><h2 class=\"text-center uppercase\">Checkout</h2></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;)\" class=\"row-fluid min-height-container z0\"><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;span12&quot;, &quot;span8 left&quot;) + &quot; &quot; + getStep()\" class=\"main\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"steps section z1 text-center\"><div sb-checkout-steps-arrow=\"getStep()\" class=\"down-arrow\"></div><a ng-click=\"goToStep(&quot;review&quot;)\" ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;review&quot;, &quot;badge-info&quot;)\" class=\"badge\">1</div><div ng-class=\"activeStep(&quot;review&quot;, &quot;active&quot;)\" class=\"step\">Review<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;shipping-billing&quot;)\" ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;badge-info&quot;)\" class=\"badge\">2</div><div ng-class=\"activeStep(&quot;shipping-billing&quot;, &quot;active&quot;)\" class=\"step\">Shipping & Payment<div class=\"divider\">></div></div></h3></a><a ng-click=\"goToStep(&quot;order-summary&quot;)\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" href=\"javascript:void(0)\"><h3><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;badge-info&quot;)\" class=\"badge\">3</div><div ng-class=\"activeStep(&quot;order-summary&quot;, &quot;active&quot;)\" class=\"step\">Order Summary</div></h3></a></div><div sb-custom-scrollbar scroll-shadow class=\"scrollable-content\"><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid section z1 hidden-phone\"><h3 tooltip=\"Here's how shipping calculations work...\" placement=\"bottom\" class=\"span12 label1\">Estimated Tax & Shipping<!--.icon-info-2--></h3></div><div ng-show=\"activeStep(&quot;review&quot;)\" class=\"row-fluid state section z2\"><div class=\"span2 text-left\"><h4>Province</h4></div><div class=\"span5\"><div class=\"row-fluid\"><select id=\"shipping-state\" ng-if=\"activeStep(&quot;review&quot;)\" ng-model=\"user.shipping.state\" ng-options=\"state.name for state in states track by state.abbreviation\" ng-change=\"shippingStateChanged('#shipping-state')\" class=\"span12 solo selectpicker\"><option value=\"\" disabled selected>(select)</option></select></div></div><h5 class=\"span5\">Items in your shopping bag are not reserved and may sell out.</h5></div><div ng-view class=\"z0 scroll-shadow-outer\"></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid desktop-footer hidden-phone z1\">       <div class=\"row-fluid text-center\"><div class=\"norton\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\">//.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")</script></div><div class=\"footer-main-button\"><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm|review&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button></div><div class=\"row-fluid title-bar pull-left\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5>" + (jade.escape(null == (jade.interp = ' ' ) ? "" : jade.interp)) + "<h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div><div style=\"padding-bottom: 10px\" class=\"row-fluid\"><h5 class=\"legal-info\">Well.ca is a registered trademark owned by Well.ca Inc. The Well.ca ecommerce services are subject to the  terms and conditions of use of Well.ca Inc. and can be reviewed <a href=\"https://well.ca/terms.html\" target=\"_blank\">here</a><span>. Johnson & Johnson Inc. (JJI) is providing information from your product purchase request to the Well.ca site for the purchase of JJI products and is not affiliated with Well.ca Inc.; nor is JJI responsible for the sale or delivery of  JJI products that you select for purchase from the Well.ca site.</span></h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Well.ca Pharmacy Accreditation as of November 11th 2015</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">OPC Certificate Accreditation #304222</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Your Pharmacist is Philip Rosenberg</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Central Fill Solutions Inc. 346 Millway Ave. Vaughan, ON L4K 3W1</h5></div><div class=\"row-fluid\"><h5 class=\"legal-info pull-left\">Call Well.ca Toll Free: 1-866-640-3800</h5></div><div style=\"padding: 10px 0px\" class=\"row-fluid\"><h5 class=\"legal-info pull-left\">** Free Economy Shipping offered by Well.ca as of November 11th 2015 on orders of $29 or more (before taxes and shipping) in Canada excluding remote and difficult to serve locations. Subject to change at the discretion of Well.ca. Based on<a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping and Returns policy.</a></h5></div></div></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar text-center\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5><h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div></div></div></div><div ng-class=\"activeStep(&quot;confirm&quot;, &quot;confirm&quot;, &quot;&quot;)\" class=\"span4 summary\"><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;full-height&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"summary-container\"><div class=\"row-fluid section\"><h3 class=\"label1 large inline-block\">Summary</h3><h4 ng-pluralize count=\"cart.itemCount\" when=\"{&quot;one&quot;: &quot;({} Item)&quot;, &quot;other&quot;: &quot;({} Items)&quot;}\"></h4></div><div ng-hide=\"activeStep(&quot;review&quot;)\" class=\"span12 cart-items-container hidden-phone\"><div cart-items-rogaine sidebar class=\"cart-items scroll-shadow-outer section no-pad full-height\"></div></div><div ng-class=\"activeStep(&quot;review&quot;, &quot;&quot;, &quot;scroll-footer&quot;)\" class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large subtotal\">Subtotal</h4><h4 class=\"span6 large money\">{{cart.subtotal / 100 | currency}}</h4><h3 class=\"label1 large float-pad\">Tax & Shipping *<!--.icon-info-2.hidden-phone--></h3></div><div class=\"clear-large\"></div></div><div class=\"row-fluid section\"><div class=\"row-fluid\"><h4 class=\"span6 large\">Tax</h4><h4 class=\"span6 large money\">{{{null: '--'}[tax] || (tax / 100 | currency)}}</h4></div><div class=\"row-fluid\"><h4 class=\"span6 large\">Shipping</h4><h4 class=\"span6 large money\">{{{0:'FREE **', null: '--'}[shipping] || (shipping / 100 | currency)}}</h4></div><div ng-show=\"discount\" class=\"row-fluid\"><h4 class=\"span6 large\">Discount</h4><h4 class=\"span6 large money\">{{(discount / 100 | currency)}}</h4></div></div><div class=\"row-fluid section total\"><div class=\"row-fluid\"><h3 class=\"span6 label1 large\">Total</h3><h4 class=\"span6 label1 large money\">{{total / 100 | currency}}</h4></div><div class=\"row-fluid\"><h5 class=\"estimated-costs\">* Estimated taxes & shipping</h5></div></div></div><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"row-fluid footer\"><div class=\"row-fluid visible-phone\"><div ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"norton pull-left\"><script type=\"text/javascript\" src=\"https://seal.verisign.com/getseal?host_name=www.shopbeam.com&amp;amp;size=XS&amp;amp;use_flash=NO&amp;amp;use_transparent=YES&amp;amp;lang=en\"></script><!--.test-verisign(style=\"width: 80px; height: 40px; background-color: #FDBB30;\")--></div><button ng-click=\"previousStep()\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large btn-secondary back\">{{activeStep('review', 'Close', 'Back')}}</button><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" ng-hide=\"activeStep(&quot;confirm&quot;)\" class=\"btn btn-large pull-right\">{{formSubmitValue()}} ></button></div><div class=\"row-fluid text-center\"><h5 class=\"text-center\">Powered by" + (jade.escape(null == (jade.interp = ' ') ? "" : jade.interp)) + "<a href=\"https://www.shopbeam.com\" target=\"_blank\" class=\"bold\">Shopbeam</a></h5></div><div class=\"row-fluid tagline text-center\"><h5 class=\"italic uppercase\">shop seamlessly</h5></div><div class=\"row-fluid text-center\"><h6 class=\"uppercase\"><a href=\"mailto:customercare@shopbeam.com\" target=\"_blank\" ng-click=\"trackNeedAssistanceClick()\">customercare@shopbeam.com</a></h6>" + (jade.escape(null == (jade.interp = ' | '  ) ? "" : jade.interp)) + "<h6 class=\"uppercase\"> <a href=\"tel:8004903216\" target=\"_blank\">Phone: (800) 490-3216</a></h6></div><div style=\"margin-top: 10px\" class=\"row-fluid text-center\"><button ng-click=\"nextStep()\" ng-class=\"activeStep(&quot;order-summary&quot;, &quot;checkout btn-success&quot;, &quot;next btn-primary&quot;)\" class=\"btn btn-large\">{{formSubmitValue()}}</button></div><div class=\"row-fluid visible-phone\"><div class=\"title-bar text-center\"><h5 class=\"footer-title\">Sold and Shipped to you by</h5><h5 class=\"label1\">Well.ca</h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/privacy.html\" target=\"_blank\">Well.ca Privacy Notice</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/terms.html\" target=\"_blank\">Well.ca Terms & Conditions</a></h5>" + (jade.escape(null == (jade.interp = ' | ' ) ? "" : jade.interp)) + "<h5 class=\"footer-title\"><a href=\"https://well.ca/shipping-and-returns\" target=\"_blank\">Well.ca Shipping & Returns</a></h5></div></div></div></div></div></div></body><div id=\"error-modal\" class=\"bootstrap-modal-override modal fade hide\"><div class=\"modal-header\"><h3>Oh Noes!!</h3></div><div class=\"modal-body\"><p>Something went wrong. We're tracking this issue with the ID shown below and our team has been notified. We're very sorry for the inconvenience.</p><pre id=\"error-modal-errorId\"></pre></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-primary\">Dismiss</button></div></div><div class=\"bootstrap-modal-override modal hide fade remove-dialog\"><div class=\"modal-header\"><button type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\" class=\"close\">&times;</button><h2>Remove Items</h2></div><div class=\"modal-body\"><p ng-pluralize count=\"selectedItem.quantity\" when=\"{&quot;1&quot;: &quot;Are you sure you want to remove {{selectedItem.name}}?&quot;, &quot;2&quot;: &quot;You have 2 of {{selectedItem.name}} in your cart. Are you sure you want to remove them both?&quot;, &quot;other&quot;: &quot;You have {} of {{selectedItem.name}} in your cart. Are you sure you want to remove all {}?&quot;}\" class=\"lead\"></p></div><div class=\"modal-footer\"><a ng-click=\"removeCancel()\" class=\"btn\">No, keep it</a><a ng-click=\"removeConfirm()\" class=\"btn btn-success\">Yes, remove it</a></div></div><div class=\"please-wait\"><div class=\"box\"><div class=\"img-container\"></div><p>Please Wait...</p></div></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/bootstrap/bootstrap.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/checkout.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></html>");;return buf.join("");
})(locals)
},'inFrameWidget/index': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Widget</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/inFrameWidget.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.3.13.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><!--TODO: remove!!!--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-mocks.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/widget/views/main-default.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/inFrameWidget.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'inFrameWidget/rogaine-ad-men': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Widget</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/inFrameWidget-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.3.13.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><!--TODO: remove!!!--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-mocks.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/widget/views/main-rogaine-men.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/inFrameWidget.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'inFrameWidget/rogaine-men': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Widget</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/inFrameWidget-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.3.13.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><!--TODO: remove!!!--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-mocks.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/widget/views/main-rogaine-men.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/inFrameWidget.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'inFrameWidget/rogaine-women': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),rollbarEnabled = locals_.rollbarEnabled,rollbarClientAccessToken = locals_.rollbarClientAccessToken,HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Widget</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
if ( rollbarEnabled)
{
buf.push("<!-- Rollbar --><script>var _rollbarConfig = {\n  accessToken: '" + (jade.escape((jade.interp = rollbarClientAccessToken) == null ? '' : jade.interp)) + "',\n  captureUncaught: true,\n  payload: {\n    environment: \"production\"\n  }\n};\n!function(a,b){function c(b){this.shimId=++h,this.notifier=null,this.parentShim=b,this.logger=function(){},a.console&&void 0===a.console.shimId&&(this.logger=a.console.log)}function d(b,c,d){!d[4]&&a._rollbarWrappedError&&(d[4]=a._rollbarWrappedError,a._rollbarWrappedError=null),b.uncaughtError.apply(b,d),c&&c.apply(a,d)}function e(b){var d=c;return g(function(){if(this.notifier)return this.notifier[b].apply(this.notifier,arguments);var c=this,e=\"scope\"===b;e&&(c=new d(this));var f=Array.prototype.slice.call(arguments,0),g={shim:c,method:b,args:f,ts:new Date};return a._rollbarShimQueue.push(g),e?c:void 0})}function f(a,b){if(b.hasOwnProperty&&b.hasOwnProperty(\"addEventListener\")){var c=b.addEventListener;b.addEventListener=function(b,d,e){c.call(this,b,a.wrap(d),e)};var d=b.removeEventListener;b.removeEventListener=function(a,b,c){d.call(this,a,b&&b._wrapped?b._wrapped:b,c)}}}function g(a,b){return b=b||this.logger,function(){try{return a.apply(this,arguments)}catch(c){b(\"Rollbar internal error:\",c)}}}var h=0;c.init=function(a,b){var e=b.globalAlias||\"Rollbar\";if(\"object\"==typeof a[e])return a[e];a._rollbarShimQueue=[],a._rollbarWrappedError=null,b=b||{};var h=new c;return g(function(){if(h.configure(b),b.captureUncaught){var c=a.onerror;a.onerror=function(){var a=Array.prototype.slice.call(arguments,0);d(h,c,a)};var g,i,j=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"];for(g=0;g<j.length;++g)i=j[g],a[i]&&a[i].prototype&&f(h,a[i].prototype)}return a[e]=h,h},h.logger)()},c.prototype.loadFull=function(a,b,c,d){var e=g(function(){var a=b.createElement(\"script\"),e=b.getElementsByTagName(\"script\")[0];a.src=d.rollbarJsUrl,a.async=!c,a.onload=f,e.parentNode.insertBefore(a,e)},this.logger),f=g(function(){if(void 0===a._rollbarPayloadQueue)for(var b,c,d,e,f=new Error(\"rollbar.js did not load\");b=a._rollbarShimQueue.shift();)for(d=b.args,e=0;e<d.length;++e)if(c=d[e],\"function\"==typeof c){c(f);break}},this.logger);g(function(){c?e():a.addEventListener?a.addEventListener(\"load\",e,!1):a.attachEvent(\"onload\",e)},this.logger)()},c.prototype.wrap=function(b){try{if(\"function\"!=typeof b)return b;if(b._isWrap)return b;if(!b._wrapped){b._wrapped=function(){try{return b.apply(this,arguments)}catch(c){throw a._rollbarWrappedError=c,c}},b._wrapped._isWrap=!0;for(var c in b)b.hasOwnProperty(c)&&(b._wrapped[c]=b[c])}return b._wrapped}catch(d){return b}};for(var i=\"log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError\".split(\",\"),j=0;j<i.length;++j)c.prototype[i[j]]=e(i[j]);var k=\"//d37gvrvc0wt4s1.cloudfront.net/js/v1.1/rollbar.min.js\";_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||k;var l=c.init(a,_rollbarConfig);l.loadFull(a,b,!1,_rollbarConfig)}(window,document);</script>");
}
buf.push("<meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/inFrameWidget-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.3.13.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><!--TODO: remove!!!--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-mocks.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/widget/views/main-rogaine-women.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/inFrameWidget.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'lightbox/healthy-essentials': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Lightbox</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/lightbox-healthy-essentials.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; width: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/lightbox/views/main-healthy-essentials.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lightbox.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'lightbox/index': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Lightbox</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/lightbox.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; width: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/lightbox/views/main-default.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lightbox.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'lightbox/rogaine-ad-men': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Lightbox</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/lightbox-rogaine-ad-men.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; width: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/lightbox/views/main-rogaine-ad-men.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lightbox.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'lightbox/rogaine-men': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Lightbox</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/lightbox-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; width: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/lightbox/views/main-rogaine.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lightbox.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'lightbox/rogaine-women': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Lightbox</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':('stylesheet'), 'href':("" + (assets.url('/css/lightbox-rogaine.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; width: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0;\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/lightbox/views/main-rogaine.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lightbox.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'secureCheckoutFrame': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Secure Checkout Frame</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.3.13.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><!--TODO: remove!!!--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-mocks.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></head><body ng-controller=\"MainCtrl\" style=\"width: 0; height: 0; opacity: 0; display: block;\"><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/secureCheckoutFrame.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
},'widget': function(locals) {
    locals = locals || {};
    locals['assets'] = assets;
    return (function anonymous(locals) {
var buf = [];
var locals_ = (locals || {}),HOST = locals_.HOST,assets = locals_.assets;buf.push("<!DOCTYPE html><html lang=\"en\"><head><title>Shopbeam Widget</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta property=\"og:title\" content=\"{{selectedProduct.brandName}} - {{selectedProduct.name}}\"><meta property=\"og:image\" content=\"{{initialImage.url}}\"><meta property=\"og:description\" content=\"{{selectedProduct.description}}\">");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<link" + (jade.attrs({ terse: true, 'rel':("stylesheet"), 'href':("" + (assets.url('/css/widget.css')) + "") }, {"rel":true,"href":true})) + "><!--[if lt IE 10]>");
if (typeof(HOST) === 'undefined') { HOST = '' }
buf.push("<script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/customEvents.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/filter.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/map.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/some.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/shiv/string.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><![endif]--><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/jquery/jquery-1.10.2.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-1.2.3-custom.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/lib/angular/angular-route.min.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script><script type=\"text/javascript\">(function() {\n  function QueueFacade(members) {\n    this._queue = [];\n    this._define(members);\n  }\n  var proto = QueueFacade.prototype;\n  \n  proto._define = function(members) {\n    if (!members) { return this; }\n    var self = this;\n    function addMember(name) {\n      if (!name) { return; }\n      self[name] = function() {\n        this._queue.push([ name, Array.prototype.slice.apply(arguments) ]);\n      };\n    }\n    var names = members instanceof Array ? Array.prototype.slice.apply(members) : members.split(/ *, */g);\n    while (names.length) {\n      addMember(names.shift());\n    }\n    return this;\n  };\n  \n  proto.push = function() {\n    this._queue.push(Array.prototype.slice.apply(args));\n  };\n  \n  proto._dequeue = function(target) {\n    while (this._queue.length) {\n      var message = this._queue.shift();\n      try {\n        target[message[0]].apply(target, message[1]);\n      } catch(err) {\n        if (typeof console !== 'undefined' && console && console.error) {\n          console.error(err);\n        }\n      }\n    }\n    return target;\n  };\n  \n  // queue facades\n  window.analytics = new QueueFacade('identify,track,page,alias,on,once,removeListener,emit,ready,setParameterDefaultValue');\n})();</script></head><body style=\"height: 100%; overflow: hidden; background: transparent; margin: 0; padding: 0\" ng-controller=\"MainCtrl\" class=\"bootstrap-button-override\"><div ng-include=\"&quot;/widget/views/main.html&quot;\"></div><script" + (jade.attrs({ terse: true, 'src':("" + (assets.url('/js/widget.bundle.js')) + ""), 'crossorigin':("anonymous") }, {"src":true,"crossorigin":true})) + "></script></body></html>");;return buf.join("");
})(locals)
}};})();
;

'use strict';

(function (window, undefined) {
  if (!window.Shopbeam) {
    var
    //NOTE: we're using values higher than are allowed by the spec but only because other ppl are too...
    /** @const */ Z_10           = +2147483640,
    /** @const */ Z_9            = +2147483630,
    /** @const */ Z_8            = +2147483620,
    /** @const */ Z_7            = +2147483610,
    /** @const */ Z_6            = +2147483600,
    /** @const */ Z_5            = +2147483590,
    /** @const */ JQUERY_VERSION = '1.10.2'
      ;

    var config = require('../../../shared/config').current();

    var q                     = require('../../../shared/lib/kriskowal/q')
      , pmrpc                 = require('../../../shared/lib/izuzak/pmrpc')
      , $                     = require('./build')
      , deferredBody          = q.defer()
      , deferredLightboxReady = q.defer()
      , bodyPromise           = deferredBody.promise
      , base                  = {
          transition: 'width 500ms ease, height 500ms ease',
          position  : 'fixed',
          bottom    : 0,
          right     : 0,
          border    : 0,
          margin    : 0,
          padding   : 0,
          'z-index' : Z_7
        }
      ;

    window.Shopbeam = {
      /** @const */ swfOpenLightbox: function (uuid, productIndex) {
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'widgetOpenLightbox' + uuid,
          params             : [productIndex]
        });
        return true;
      },
      swfTrackMouseOver            : function (uuid, productIndex) {
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'widgetTrackMouseOver' + uuid,
          params             : [productIndex]
        });
        return true;
      },
      config                       : config,

      /** @const */ JQUERY_VERSION        : JQUERY_VERSION,
      /** @const */ JQUERY_HREF           : '//ajax.googleapis.com/ajax/libs/jquery/' + JQUERY_VERSION + '/jquery.min.js',
      /** @const */ SWF_IFRAME_SELECTOR   : 'iframe.shopbeam-flash-frame',
      /** @const */ HOST                  : document.querySelector('script.shopbeam-script').src.match(/(^.*)\/js\/widget.loader.js$/)[1],
      /** @const */ DOCUMENT_ROOT         : document.querySelector('head') || document.querySelector('body'),
      /** @const */ DOCUMENT_HEAD         : document.querySelector('head'),
      /** @const */ DOCUMENT_BODY         : bodyPromise, //document.querySelector('body'),
      /** @const */ LIGHTBOX_IFRAME_CSS   : {
        position    : 'absolute',
        top         : 0,
        left        : 0,
        bottom      : 0,
        right       : 0,
        border      : 0,
        margin      : 0,
        padding     : 0,
        width       : '100%',
        'max-width' : '100%',
        height      : '100%',
        'max-height': '100%',
        'z-index'   : Z_8
      },
      /** @const */ LIGHTBOX_CONTAINER_CSS: {
        '-webkit-overflow-scrolling': 'touch',
        overflow                    : 'hidden',
        position                    : 'fixed',
        top                         : 0,
        left                        : 0,
        bottom                      : 0,
        right                       : 0,
        border                      : 0,
        margin                      : 0,
        padding                     : 0,
        width                       : '100%',
        'max-width'                 : '100%',
        height                      : '100%',
        'max-height'                : '100%',
        'z-index'                   : Z_8
      },
      /** @const */ LIGHTBOX_HIDDEN_CSS   : {visibility: 'hidden', opacity: 0, display: 'none'},
      /** @const */ WIDGET_DEFAULT_CSS    : {position: 'absolute', top: 0, left: 0, border: 0, margin: 0, padding: 0, 'min-width': '100%', 'min-height': '100%'},
      /** @const */ WIDGET_HIDDEN_CSS     : {visibility: 'hidden', opacity: 0},

      /** @const */ CART_DEFAULT_CSS: base,
      /** @const */ CART_VISIBLE_CSS: {height: '600px', width: '340px'},
      /** @const */ CART_HIDDEN_CSS : {height: '50px', width: '0px'},
      /** @const */ CART_CLOSED_CSS : {height: '50px', width: '180px'},

      /** @const */ CHECKOUT_DEFAULT_CSS         : {
        position    : 'fixed',
        bottom      : 0,
        left        : 0,
        right       : 0,
        border      : 0,
        margin      : 0,
        padding     : 0,
        'z-index'   : Z_10,
        height      : '100%',
        width       : '100%',
        'max-width' : '100%',
        'max-height': '100%'
      },
      /** @const */ CHECKOUT_VISIBLE_CSS         : {top: 0, opacity: 1, visibility: 'visible'},//, height: '100px'},
      /** @const */ CHECKOUT_HIDDEN_CSS          : {top: '-100%', opacity: 0, visibility: 'hidden'}, //, height: '100px'},
      /** @const */ CHECKOUT_BACKDROP_DEFAULT_CSS: {
        'background-color': 'rgb(49, 49, 49)',
        position          : 'fixed',
        top               : 0,
        bottom            : 0,
        left              : 0,
        right             : 0,
        border            : 0,
        margin            : 0,
        padding           : 0,
        'z-index'         : Z_9,
        height            : '100%',
        width             : '100%',
        'max-width'       : '100%',
        'max-height'      : '100%'
      },
      /** @const */ CHECKOUT_BACKDROP_VISIBLE_CSS: {opacity: 0.60, visibility: 'visible'},//, height: '100px'},
      /** @const */ CHECKOUT_BACKDROP_HIDDEN_CSS : {opacity: 0, visibility: 'hidden'}, //, height: '100px'},
      /** @const */ WIDGET_ATTRS                 : {allowtransparency: 'true'},
      /** @const */ WIDGET_TAG_ID_EXCLUDE_REGEX  : /(?:-placeholder|-link|-unbootstrapped)/,
      // TODO: factor this out to work with WIDGET_COLLECTION_MAP pattern; i.e. build on-the-fly
      /** @const */ WIDGET_UUID_REGEX            : /shopbeam-(?:in-frame-)?widget-(?:image-|text-|swf-)(.+)$/,
      /** @const */ WIDGET_HASH_REGEX            : /shopbeam-open-widget-(.+)$/,
      /** @const */ CLOUDINARY_BASE_URL          : 'https://cloudinary-a.akamaihd.net/shopbeam/image/fetch/',
      /** @const */ TOP_WINDOW                   : window === window.top,

      /** @const */ lightboxReadyPromise: deferredLightboxReady.promise,
      /** @const */ APIKEY_SELECTOR     : /[&?]apiKey=([^&]+)/i
    };

    // Compile and append `global.styl` stylesheet to document body
    
    var globalCss = Buffer("W2lkKj0nc2hvcGJlYW0td2lkZ2V0LWRhdGEtb3ZlcnJpZGUtJ10gewogIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKICB3aWR0aDogMCAhaW1wb3J0YW50OwogIGhlaWdodDogMCAhaW1wb3J0YW50OwogIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50Owp9Cg==","base64")
      , globalStyleElement = document.createElement('style');
    globalStyleElement.innerText = globalCss;
    window.Shopbeam.DOCUMENT_BODY.then(function(body){
      body.appendChild(globalStyleElement);
    });


    require('../../../shared/app/services/topWindowService');
    require('../../../shared/lib/shopbeam/cartSync');

    var ImageWidget           = require('./imageWidget')
      , InFrameImageWidget    = require('./inFrameImageWidget')
      , TextWidget            = require('./textWidget')
      , SwfWidget             = require('./swfWidget')
      , lightbox              = require('./lightbox')
      , cart                  = require('./cart')
      , checkout              = require('./checkout')
      , imagesLoaded          = require('../../../shared/lib/desandro/imagesloaded')
      , domready              = require('../../../shared/lib/cms/domready')
      , widgetQueue           = {}

        //global (window) functions
      , encodeURIComponent    = window.encodeURIComponent
      , _forEach              = Array.prototype.forEach
      , getDataElements = function (widgetId) {
          return $.compact(
            Object.keys(widgetQueue).map(function (elementId) {
              return (new RegExp('^shopbeam-widget-data-override-' + widgetId.slice(-36) + '$')).test(elementId) ?
                widgetQueue[elementId].widget : null
            })
          );
        }

      , WIDGET_COLLECTION_MAP = [
          //NOTE: widget-data-override must come first
          {
            klass        : null,
            identifyingAttribute: 'className',
            selector     : '[class*="shopbeam-widget-data-override"]',
            queueCallback: function (queueObj, element) {
              queueObj.queued = true;
              element.remove();
            }
          },
          {
            klass        : ImageWidget,
            selector     : 'img[id*="shopbeam-widget-image-placeholder"]',
            queueCallback: function (queueObj, widget) {
              var self = this;
              imagesLoaded(widget).on('done', function (instance) {
                queueObj.queued = true;

                var dataElements   = getDataElements(widget.id)
                  , widgetInstance = queueObj.instance = new ImageWidget(instance.images[0].img, dataElements);
                widgetInstance.build();
              })
            }
          },
          {
            klass        : InFrameImageWidget,
            selector     : 'img[id*="shopbeam-in-frame-widget-image-placeholder"]',
            queueCallback: function (queueObj, widget) {
              var self = this;
              imagesLoaded(widget).on('done', function (instance) {
                queueObj.queued = true;

                var dataElements   = getDataElements(widget.id)
                  , widgetInstance = queueObj.instance = new InFrameImageWidget(instance.images[0].img, dataElements);
                widgetInstance.build();
              })
            }
          },
          {
            klass   : TextWidget,
            selector: 'a[id*="shopbeam-widget-text-link"]',
          },
          {
            klass   : SwfWidget,
            selector: 'object[id*="shopbeam-widget-swf"]',
          }
        ]
      ;


    /**
     * CREATE WIDGETS AND KICK-OFF BOOTSRTAPPING
     */
    var checkForBody     = function () {
      var body = document.querySelector('body');
      if (body instanceof Element) {
        clearInterval(bodyReadyIntervalId);
        deferredBody.resolve(body);
      }
    }

      , bootstrapWidgets = function () {

      WIDGET_COLLECTION_MAP.forEach(function (collection) {
        var widgetElements  = document.querySelectorAll(collection.selector)
          , identifier = collection.identifyingAttribute || 'id'
          , defaultCallback = function (queueObj, widget) {
              queueObj.queued = true;

              var dataElements = getDataElements(widget[identifier]);

              queueObj.instance = new collection.klass(widget, dataElements);

            }
          , queueCallback   = collection.queueCallback || defaultCallback;
        queueWidgets(widgetElements, queueCallback, identifier)
      });

      function queueWidgets(widgets, fn, identifier) {
        _forEach.call(widgets, function (widget) {
          if (!widgetQueue[widget.id]) {
            if (widget.getAttribute('data-shopbeam-initialized') === 'true') {
              // widget already bootstrapped
              return;
            }
            widget.setAttribute('data-shopbeam-initialized', 'true');
            var queueObj = widgetQueue[widget[identifier]] = {
              widget: widget, queued: false
            };
            fn(queueObj, widget);
          }
        });
      }
    };

    var domReadyIntervalId  = setInterval(bootstrapWidgets, 250)
      , bodyReadyIntervalId = setInterval(checkForBody, 250);

    domready(function () {
      bootstrapWidgets();
      clearInterval(domReadyIntervalId);
    });

    // allow scanning for new widgets added after dom ready
    Shopbeam.scan = function () {
      bootstrapWidgets();
    };

    // register additional products inside a swf widget, returns the new product index
    Shopbeam.swfWidgetRegisterProduct = function (widgetUuid, productInfo) {
      for (var id in widgetQueue) {
        var instance = widgetQueue[id].instance;
        if (instance && instance.uuid === widgetUuid) {
          return instance.registerProduct(productInfo);
        }
      }
      throw new Error('widget not found:', widgetUuid);
    };

    /**
     * CREATE LIGHTBOX
     */
    lightbox.build();

    /**
     * CREATE CART
     */
    cart.build();

    /**
     * CREATE CHECKOUT
     */
    checkout.build();

    pmrpc.register({
      publicProcedureName: 'lightboxReady',
      procedure          : function () {
        try {
          setTimeout(function () {
            deferredLightboxReady.resolve();
          })
        } catch (err) {
          console.error(err);
        }
      }
    })

  }
})(window);

},{"../../../shared/app/services/topWindowService":7,"../../../shared/config":10,"../../../shared/lib/cms/domready":11,"../../../shared/lib/desandro/imagesloaded":14,"../../../shared/lib/izuzak/pmrpc":15,"../../../shared/lib/kriskowal/q":16,"../../../shared/lib/shopbeam/cartSync":18,"./build":20,"./cart":21,"./checkout":22,"./imageWidget":25,"./inFrameImageWidget":26,"./lightbox":28,"./swfWidget":29,"./textWidget":30,"__browserify_Buffer":2,"fs":1}],28:[function(require,module,exports){
/**
 * LIGHTBOX BUILDER
 */

var $ = require('./build')
  , pmrpc = require('../../../shared/lib/izuzak/pmrpc')
  , zoom = require('./zoom')
  , bodyScroll = require('../../../shared/app/browser/body-scroll')
  , _ = require('../../../shared/lib/lodash/lodash');

exports.build = function() {

  var theme = document.querySelector('script.shopbeam-script').getAttribute('data-shopbeam-theme');

  if (Shopbeam.TOP_WINDOW) {
    var $lightbox = $('iframe')
        .attr({
          id: 'shopbeam-lightbox'
        })
        .css(
          Shopbeam.LIGHTBOX_IFRAME_CSS
        )
      , $lightboxContainer = $('div')
        .css($.extend([
          Shopbeam.LIGHTBOX_CONTAINER_CSS,
          Shopbeam.LIGHTBOX_HIDDEN_CSS
        ]))
        .append($lightbox)
      , lightboxDocument
      ;

    Shopbeam.DOCUMENT_BODY.then(function(body) {
      $lightboxContainer.appendTo(body);
      lightboxDocument = $lightbox.element.contentWindow.document;

      lightboxDocument.open();
      try {
        var defaultPath = 'lightbox/index'
          , themedPath  = 'lightbox/' + theme
          , matchedPath = (theme !== null && typeof(appIndexes[themedPath]) !== 'undefined') ?
              themedPath : defaultPath;

        lightboxDocument.write(appIndexes[matchedPath](Shopbeam));
      } catch(err) {
        console.log('error loading lightbox: ' + err.message);
        console.error(err);
      }
      lightboxDocument.close();
    });

    pmrpc.register({
      publicProcedureName: 'showLightbox',
      procedure          : function() {
        try {
          zoom.disable();
          $lightboxContainer
            .css({display: 'block'});

          bodyScroll.lock();

          setTimeout(function() {
            $lightboxContainer.fadeIn('500ms')
          }, 100)
        } catch (err) {
          console.error(err);
        }
      }
    });

    pmrpc.register({
      publicProcedureName: 'hideLightbox',
      procedure          : function() {
        try {
          zoom.reset();
          $lightboxContainer.fadeOut('500ms')
            .then(function() {
              $lightboxContainer.css({display: 'none'})
            });
          bodyScroll.unlock();
        } catch (err) {
          console.error(err);
        }
      }
    });
  }
};

},{"../../../shared/app/browser/body-scroll":5,"../../../shared/lib/izuzak/pmrpc":15,"../../../shared/lib/lodash/lodash":17,"./build":20,"./zoom":32}],29:[function(require,module,exports){
/**
 * SWF WIDGET CLASS
 */

module.exports = SwfWidget;

var $ = require('./build')
  , q = require('../../../shared/lib/kriskowal/q')
  , pmrpc = require('../../../shared/lib/izuzak/pmrpc')
  , Widget = require('./widget')
  ;

function SwfWidget(element) {

  this.element = function(){
    return element;
  };
  var self = this;
  //the id attribute that will be set on the $widget iframe element
  var widgetTagId = element.id.replace(Shopbeam.WIDGET_TAG_ID_EXCLUDE_REGEX, '');
  //the uuid-only of this widget; used for uniqueness between multiple widgets
  var widgetUuid = this.uuid = widgetTagId.match(Shopbeam.WIDGET_UUID_REGEX)[1];
  //products resourece url with query-string params for this particular widget
  var urls = (element.dataset ? element.dataset.shopbeamUrl :
    element.attributes['data-shopbeam-url'].value);

  urls = (urls) ? urls.split(/[ ,]+/g) : [];

  var imageUrls = (element.dataset ? element.dataset.imageSrc :
    element.attributes.imageSrc.value);

  imageUrls = (imageUrls) ? imageUrls.split(/[ ,]+/g) : [];

  $(element).attr({id: widgetTagId});

  this.dataUrl = Shopbeam.HOST + urls[0];

  //Inherit from Widget Class
  Widget.apply(this, arguments);

  if (this.apiKey) {
    //For stats
    this.trackWidgetLoad(Shopbeam.HOST+'?apiKey='+this.apiKey, 'swf');
  }

  this.products = [];
  while (urls.length) {
    var url = urls.shift();
    var imageUrl = imageUrls.length ? imageUrls.shift() : '';
    if (url) {
      var product = {
        url: url,
        imageUrl: imageUrl
      };
      this.registerProduct(product);
    }
  }

  this.uuid = widgetUuid;

  function openLightbox(productIndex) {
    var product = self.products[productIndex || 0];
    product.getData.then(self.buildConfig(function(config) {
      if (!config.outOfStock) {
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'openLightbox',
          params             : [config, self]
        });
      }
    }));
  }

  pmrpc.register({
    publicProcedureName: 'widgetOpenLightbox' + String(this.uuid),
    procedure          : function(productIndex) {
      try {
        openLightbox(productIndex);
      } catch (err) {
        console.error(err);
      }
    }
  });


  function trackMouseOver(productIndex) {
    var product = self.products[productIndex || 0];
    product.getData.then(self.buildConfig(function(config) {

      if (!config.outOfStock) {
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'trackProductMouseOver',
          params             : [config, self]
        });
      }
    }));
  }

  pmrpc.register({
    publicProcedureName: 'widgetTrackMouseOver' + String(this.uuid),
    procedure          : function(productIndex) {
      try {
        trackMouseOver(productIndex);
      } catch (err) {
        console.error(err);
      }
    }
  });

}

SwfWidget.prototype.registerProduct = function(productInfo) {
  var self = this;
  var product;
  if (typeof productInfo === 'string') {
    product = {
      url: productInfo
    };
  } else {
    product = productInfo;
  }
  if (!product.url) {
    throw new Error('product.url is required');
  }
  this.products.push(product);
  product.index = this.products.length - 1;
  var getDataDefer = q.defer();
  var getData = product.getData = getDataDefer.promise;

  this.dataCallback = function () {
    var options = {
      widgetId          : self.uuid,
      productsUrl       : product.url,
      initialImageSource: product.imageUrl
    };
    var data = JSON.parse(this.responseText);
    getDataDefer.resolve({data: data, options: options});
  };

  getData.then(self.buildConfig(function(config){
    try {
        self.element().setWidgetData(JSON.stringify(config), JSON.stringify(product));
    } catch (err) {
        //console.warn('error sending product data to swf object', err);
    }
  }));

  if (!this.apiKey) {
    this.apiKey = (product.url.match(Shopbeam.APIKEY_SELECTOR)||[])[1];

    //For stats
    this.trackWidgetLoad(Shopbeam.HOST+'?apiKey='+this.apiKey, 'swf');
  }
  return product.index;
};

},{"../../../shared/lib/izuzak/pmrpc":15,"../../../shared/lib/kriskowal/q":16,"./build":20,"./widget":31}],30:[function(require,module,exports){
/**
 * TEXT WIDGET CLASS
 */

module.exports = TextWidget;

var $ = require('./build')
  , q = require('../../../shared/lib/kriskowal/q')
  , pmrpc = require('../../../shared/lib/izuzak/pmrpc')
  , topWindowService = require('../../../shared/app/services/topWindowService')
  , Widget = require('./widget')
  ;

function TextWidget(link) {
  var self = this
  //the id attribute that will be set on the $widget iframe element
    , widgetTagId = link.id.replace(Shopbeam.WIDGET_TAG_ID_EXCLUDE_REGEX, '')
  //the uuid-only of this widget; used for uniqueness between multiple widgets
    , widgetUuid = widgetTagId.match(Shopbeam.WIDGET_UUID_REGEX)[1]
  //products resourece url with query-string params for this particular widget
    , dataUrl
    ;

  if (link.dataset) {
    dataUrl = Shopbeam.HOST + link.dataset.shopbeamUrl
  } else {
    dataUrl = Shopbeam.HOST + link.attributes['data-shopbeam-url'].value
  }

  this.dataUrl = dataUrl;

  //create deferred and promise for products resource request.
  //  anything that depends on products data to be loaded will .then on JSONPromise
  var deferredJSON = q.defer()
    , JSONPromise = deferredJSON.promise
    ;

  this.dataCallback = function() {
    var options = {
        widgetId   : widgetUuid,
        productsUrl: dataUrl
      },
      data = JSON.parse(this.responseText);
    deferredJSON.resolve({data: data, options: options});
  };

  $(link).attr({id: widgetTagId});


  this.uuid = widgetUuid;
  this.JSONPromise = JSONPromise;

  pmrpc.register({
    publicProcedureName: 'widgetOpenLightbox' + String(this.uuid),
    procedure          : function() {
      try {
        JSONPromise.then(self.buildConfig(function(config) {
          pmrpc.call({
            destination        : 'publish',
            publicProcedureName: 'openLightbox',
            params             : [config, self]
          })
        }))
      } catch (err) {
        console.error(err);
      }
    }
  });

  //Inherit from Widget Class
  Widget.apply(this, arguments);


  //For stats
  this.trackWidgetLoad(dataUrl, 'text');

  //`#buildConfig` is defined by super so this must follow `Widget.apply(...)`
  JSONPromise.then(this.buildConfig(function(config) {
    link.addEventListener('mouseover', function(event) {

      if (!window.analytics)
        return;

      window.analytics.track('Text Widget Mouseover', {
        widgetUuid  : self.uuid,
        apiKey      : self.apiKey,
        dataUrl     : self.dataUrl
      });
    });

    link.addEventListener('click', function(event) {
      event.preventDefault();
      if (!config.outOfStock) {
        topWindowService.hash('shopbeam-open-widget-' + widgetUuid);
        pmrpc.call({
          destination        : 'publish',
          publicProcedureName: 'openLightbox',
          params             : [config, self]
        })
      }
    })
  }));
}

},{"../../../shared/app/services/topWindowService":7,"../../../shared/lib/izuzak/pmrpc":15,"../../../shared/lib/kriskowal/q":16,"./build":20,"./widget":31}],31:[function(require,module,exports){
 /**
 * WIDGET CLASS
 */

        module.exports = Widget;

 var $                  = require('./build')
   , pmrpc              = require('../../../shared/lib/izuzak/pmrpc')
   , topWindowService   = require('../../../shared/app/services/topWindowService')
   , dataOverrideParser = require('./dataOverrideParser')
   ;

function Widget(widgetElement, dataMarkup) {

  var self = this;

  // remove irrelevant params from from product url to improve cacheability
  var productApiUrl = this.dataUrl.replace(/&(apiKey|image)=[a-z0-9\-]+/gi, '');

  //pre-load products resource JSON
  var request = new XMLHttpRequest();
  request.onload = this.dataCallback;
  request.open('get', productApiUrl, true);
  request.send();

  var routeParams = mapParams(self.dataUrl);
  //NOTE: old embeds use `apikey` instead of `apiKey` - this is for backwards compatibility!
  routeParams.apiKey = routeParams.apiKey || routeParams.apikey;

  this.apiKey = routeParams.apiKey;

  this.openLightbox = function (uuid) {
    pmrpc.call({
      destination: 'publish',
      publicProcedureName: 'widgetOpenLightbox' + String(uuid)
    })
  };

  topWindowService.hash().then(function (hash) {
    if (hash && hash.match(Shopbeam.WIDGET_HASH_REGEX)[1] === self.uuid) {
      Shopbeam.lightboxReadyPromise.then(function () {
        self.openLightbox(self.uuid);
      })
    }
  });
  this.trackWidgetLoad = function (dataUrl, type) {
    return true; // not using /empty.txt while we use ga's built in sampling
    var urlData = dataUrl.slice(dataUrl.indexOf('?') + 1).split('&');
    var urlVars = [];
    for (var i = 0; i < urlData.length; i++)
    {
      hash = urlData[i].split('=');
      urlVars[hash[0]] = hash[1];
    }
    var requestStats = new XMLHttpRequest();
    requestStats.open('get', "https://localhost:4000/empty.txt?" + urlVars['apiKey'], true);
    requestStats.send();
    return true;
  };
  this.buildConfig = function (widgetConfigCallback) {
    /**
     *
     * @param {object} resolution Object passed to `deferredJSON.resolve`
     *    i.e. {data: <xhr response data>, options: <options as defined in `dataCallback`>}
     */
    return function (resolution) {
      try {
        var data         = [dataOverrideParser.parseAndMerge(resolution.data[0], dataMarkup)]
          , options      = resolution.options
          ;

        if (routeParams.google_conversion_id) {
          options.remarketing = {
            conversionId: routeParams.google_conversion_id,
            campaign: routeParams.campaign
          }
        }

        //Get an angular-$routeParams-like object - map of query-strings and their values
        var imageSource = options.initialImageSource
                , initialProduct = data[0]
                , initialVariant
                , initialImageObj
                , embedImage
                , colors
                ;

        //Make sure there's at least one product
        if (initialProduct) {
          //If the embedded variant is in stock, set it to initialVariant,
          //  otherwise, use the first in-stock variant.
          initialVariant = initialProduct.variants.filter(function (variant) {
            return window.parseInt(variant.id, 10) === window.parseInt(routeParams.id, 10)
          })[0] || initialProduct.variants[0];

          //initialImageObj example:
          //  {id: <image-id>, url: '<image-url>'}
          initialImageObj = initialVariant.images[(routeParams.image - 1) || 0];

          //Colors example:
          /**
           * [
           *   {
           *     name    : '<unique-color-name-1>',
           *     imageUrl: '<first-variant-image-of-color-url>',
           *     variants: [
           *       {<variant>}[, ...]
           *     ]
           *   }[, ...]
           * ]
           */
          colors = $.filter('unique')(initialProduct.variants, 'color').map(function (variant) {
            var uniquelyColoredVariants = $.filter('filter')(initialProduct.variants, {color: variant.color});
            return {name: variant.color, imageUrl: variant.images[0].url, variants: uniquelyColoredVariants};
          })
        } else {
          //The array of products is empty. This either means that the product is out of
          //  stock or it does not exist; we assume it's out of stock.
          //The following sets up some safe values to be passed into the widget so it shows
          //  as out of stock and doesn't have any errors
          initialProduct = {
            brandName: 'You picked a best seller!',
            name: 'This product is sold out!'
          };
          initialImageObj = {};
          if (imageSource)
            initialImageObj.url = imageSource;
        }
        embedImage = {url: imageSource};

        var theme = document.querySelector('script.shopbeam-script').getAttribute('data-shopbeam-theme');

        //Call widget app's callback, passing config object into angular app
        widgetConfigCallback({
          outOfStock: !data[0],
          initialProduct: initialProduct,
          initialVariant: initialVariant,
          initialImage: initialImageObj,
          embedImage: embedImage,
          colors: colors,
          apiKey: routeParams.apikey || routeParams.apiKey,
          options: options,
          theme: theme
        })
      } catch (err) {
        console.log('error while building widget config: ', err);
        console.log(err.stack);
      }
    }
  }


}

/**
 * Turn a resource url's query string params into a map object
 * @param {string} queryString The url/url-part which contains the query string
 * @return {object} Given: `/v2/products?id=1234&image=4&apikey=blah`,
 *    returns: `{id: 1234, image: 4, apikey: 'blah'}`
 */
function mapParams(queryString) {
  queryString = queryString.split('?')[1];
  var pairs = (queryString) ? queryString.split('&') : []
          , params = {};

  pairs.forEach(function (pair) {
    pair = pair.split('=');
    params[pair[0]] = pair[1];
  });

  return params;
}

},{"../../../shared/app/services/topWindowService":7,"../../../shared/lib/izuzak/pmrpc":15,"./build":20,"./dataOverrideParser":23}],32:[function(require,module,exports){
/*
 * PREVENT ZOOMING ON MOBILE
 */


(function() {
  //-- IE10 POLYFILL
  if (!Element.prototype.remove) {
    Element.prototype.remove = function() {
      this.parentElement.removeChild(this);
    };
  }
  //-- END POLYFILL


  var build = require('./build')
    , backdropStyle = "@media(max-width: 640px) {" +
      ".mobileCheckoutBackdrop {" +
      "position: absolute; top: -100%; left: -100%; height: 300%; width: 300%; background-color: white;" +
      "}" +
      "}"
    , backdropStyleTag = build('style').attr({type: 'text/css'}).element
    , noZoomMetaTag = build('meta').attr({name: 'viewport', content: 'width=device-width,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no'}).element
    //, mobileCheckoutBackdrop = build('div').element
    , originalMetaTag
    , newDefaultMetaTag = build('meta').attr({name: 'viewport', content: ('width=' + document.width + ',user-scalable=yes')}).element
    ;

  backdropStyleTag.innerText = backdropStyle;
  //Shopbeam.DOCUMENT_HEAD.appendChild(backdropStyleTag);
  //mobileCheckoutBackdrop.classList.add('mobileCheckoutBackdrop');

  module.exports = {

    reset: function() {
      noZoomMetaTag.remove();
      //mobileCheckoutBackdrop.remove();
      if (originalMetaTag) {
        Shopbeam.DOCUMENT_HEAD.appendChild(originalMetaTag);
      }
    },

    disable: function() {
      originalMetaTag = document.querySelector('meta[name="viewport"]') || newDefaultMetaTag;
      if (originalMetaTag) {
        originalMetaTag.remove();
      }
      Shopbeam.DOCUMENT_HEAD.appendChild(noZoomMetaTag);
      //Shopbeam.DOCUMENT_BODY.then(function(body) {
      //  body.appendChild(mobileCheckoutBackdrop)
      //})
    }
  };
}());

},{"./build":20}]},{},[27])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay9ub2RlX21vZHVsZXMvYXNzZXQtcmFjay9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1idWlsdGlucy9idWlsdGluL2ZzLmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL25vZGVfbW9kdWxlcy9hc3NldC1yYWNrL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbnNlcnQtbW9kdWxlLWdsb2JhbHMvYnVmZmVyLmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL25vZGVfbW9kdWxlcy9hc3NldC1yYWNrL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbnNlcnQtbW9kdWxlLWdsb2JhbHMvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay9ub2RlX21vZHVsZXMvbG9kYXNoL2Rpc3QvbG9kYXNoLmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3NoYXJlZC9hcHAvYnJvd3Nlci9ib2R5LXNjcm9sbC5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay9zaGFyZWQvYXBwL3NlcnZpY2VzL3Rocm90dGxlLmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3NoYXJlZC9hcHAvc2VydmljZXMvdG9wV2luZG93U2VydmljZS5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay9zaGFyZWQvY29uZmlnL2FsbC5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay9zaGFyZWQvY29uZmlnL2Vudmlyb25tZW50LmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3NoYXJlZC9jb25maWcvaW5kZXguanMiLCIvaG9tZS93d3cvc2hvcGJlYW0vc3BvY2svc2hhcmVkL2xpYi9jbXMvZG9tcmVhZHkuanMiLCIvaG9tZS93d3cvc2hvcGJlYW0vc3BvY2svc2hhcmVkL2xpYi9kZXNhbmRyby9FdmVudEVtaXR0ZXIuanMiLCIvaG9tZS93d3cvc2hvcGJlYW0vc3BvY2svc2hhcmVkL2xpYi9kZXNhbmRyby9ldmVudGllLmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3NoYXJlZC9saWIvZGVzYW5kcm8vaW1hZ2VzbG9hZGVkLmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3NoYXJlZC9saWIvaXp1emFrL3BtcnBjLmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3NoYXJlZC9saWIva3Jpc2tvd2FsL3EuanMiLCIvaG9tZS93d3cvc2hvcGJlYW0vc3BvY2svc2hhcmVkL2xpYi9sb2Rhc2gvbG9kYXNoLmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3NoYXJlZC9saWIvc2hvcGJlYW0vY2FydFN5bmMuanMiLCIvaG9tZS93d3cvc2hvcGJlYW0vc3BvY2svd2lkZ2V0L2FwcC9sb2FkZXIvRWxlbWVudERlY29yYXRvci5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay93aWRnZXQvYXBwL2xvYWRlci9idWlsZC5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay93aWRnZXQvYXBwL2xvYWRlci9jYXJ0LmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3dpZGdldC9hcHAvbG9hZGVyL2NoZWNrb3V0LmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3dpZGdldC9hcHAvbG9hZGVyL2RhdGFPdmVycmlkZVBhcnNlci5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay93aWRnZXQvYXBwL2xvYWRlci9maWx0ZXIuanMiLCIvaG9tZS93d3cvc2hvcGJlYW0vc3BvY2svd2lkZ2V0L2FwcC9sb2FkZXIvaW1hZ2VXaWRnZXQuanMiLCIvaG9tZS93d3cvc2hvcGJlYW0vc3BvY2svd2lkZ2V0L2FwcC9sb2FkZXIvaW5GcmFtZUltYWdlV2lkZ2V0LmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3dpZGdldC9hcHAvbG9hZGVyL2luZGV4LmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3dpZGdldC9hcHAvbG9hZGVyL2xpZ2h0Ym94LmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3dpZGdldC9hcHAvbG9hZGVyL3N3ZldpZGdldC5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay93aWRnZXQvYXBwL2xvYWRlci90ZXh0V2lkZ2V0LmpzIiwiL2hvbWUvd3d3L3Nob3BiZWFtL3Nwb2NrL3dpZGdldC9hcHAvbG9hZGVyL3dpZGdldC5qcyIsIi9ob21lL3d3dy9zaG9wYmVhbS9zcG9jay93aWRnZXQvYXBwL2xvYWRlci96b29tLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxMEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbG9OQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4eERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyL05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbjBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBub3QgaW1wbGVtZW50ZWRcbi8vIFRoZSByZWFzb24gZm9yIGhhdmluZyBhbiBlbXB0eSBmaWxlIGFuZCBub3QgdGhyb3dpbmcgaXMgdG8gYWxsb3dcbi8vIHVudHJhZGl0aW9uYWwgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtb2R1bGUuXG4iLCJyZXF1aXJlPShmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmV4cG9ydHMucmVhZElFRUU3NTQgPSBmdW5jdGlvbihidWZmZXIsIG9mZnNldCwgaXNCRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLFxuICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcbiAgICAgIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEsXG4gICAgICBlQmlhcyA9IGVNYXggPj4gMSxcbiAgICAgIG5CaXRzID0gLTcsXG4gICAgICBpID0gaXNCRSA/IDAgOiAobkJ5dGVzIC0gMSksXG4gICAgICBkID0gaXNCRSA/IDEgOiAtMSxcbiAgICAgIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV07XG5cbiAgaSArPSBkO1xuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpO1xuICBzID4+PSAoLW5CaXRzKTtcbiAgbkJpdHMgKz0gZUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCk7XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XG4gIGUgPj49ICgtbkJpdHMpO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KTtcblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbik7XG59O1xuXG5leHBvcnRzLndyaXRlSUVFRTc1NCA9IGZ1bmN0aW9uKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNCRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjLFxuICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcbiAgICAgIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEsXG4gICAgICBlQmlhcyA9IGVNYXggPj4gMSxcbiAgICAgIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKSxcbiAgICAgIGkgPSBpc0JFID8gKG5CeXRlcyAtIDEpIDogMCxcbiAgICAgIGQgPSBpc0JFID8gLTEgOiAxLFxuICAgICAgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMDtcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKTtcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcbn07XG5cbn0se31dLFwicTlUeENDXCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGFzc2VydDtcbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyO1xuZXhwb3J0cy5TbG93QnVmZmVyID0gQnVmZmVyO1xuQnVmZmVyLnBvb2xTaXplID0gODE5MjtcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MDtcblxuZnVuY3Rpb24gc3RyaW5ndHJpbShzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKTtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIEJ1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgb2Zmc2V0KSB7XG4gIGlmKCFhc3NlcnQpIGFzc2VydD0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcsIG9mZnNldCk7XG4gIH1cbiAgdGhpcy5wYXJlbnQgPSB0aGlzO1xuICB0aGlzLm9mZnNldCA9IDA7XG5cbiAgLy8gV29yay1hcm91bmQ6IG5vZGUncyBiYXNlNjQgaW1wbGVtZW50YXRpb25cbiAgLy8gYWxsb3dzIGZvciBub24tcGFkZGVkIHN0cmluZ3Mgd2hpbGUgYmFzZTY0LWpzXG4gIC8vIGRvZXMgbm90Li5cbiAgaWYgKGVuY29kaW5nID09IFwiYmFzZTY0XCIgJiYgdHlwZW9mIHN1YmplY3QgPT0gXCJzdHJpbmdcIikge1xuICAgIHN1YmplY3QgPSBzdHJpbmd0cmltKHN1YmplY3QpO1xuICAgIHdoaWxlIChzdWJqZWN0Lmxlbmd0aCAlIDQgIT0gMCkge1xuICAgICAgc3ViamVjdCA9IHN1YmplY3QgKyBcIj1cIjsgXG4gICAgfVxuICB9XG5cbiAgdmFyIHR5cGU7XG5cbiAgLy8gQXJlIHdlIHNsaWNpbmc/XG4gIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgIHRoaXMubGVuZ3RoID0gY29lcmNlKGVuY29kaW5nKTtcbiAgICAvLyBzbGljaW5nIHdvcmtzLCB3aXRoIGxpbWl0YXRpb25zIChubyBwYXJlbnQgdHJhY2tpbmcvdXBkYXRlKVxuICAgIC8vIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS90b290cy9idWZmZXItYnJvd3NlcmlmeS9pc3N1ZXMvMTlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpc1tpXSA9IHN1YmplY3QuZ2V0KGkrb2Zmc2V0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRmluZCB0aGUgbGVuZ3RoXG4gICAgc3dpdGNoICh0eXBlID0gdHlwZW9mIHN1YmplY3QpIHtcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIHRoaXMubGVuZ3RoID0gY29lcmNlKHN1YmplY3QpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgdGhpcy5sZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChzdWJqZWN0LCBlbmNvZGluZyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOiAvLyBBc3N1bWUgb2JqZWN0IGlzIGFuIGFycmF5XG4gICAgICAgIHRoaXMubGVuZ3RoID0gY29lcmNlKHN1YmplY3QubGVuZ3RoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgbmVlZHMgdG8gYmUgYSBudW1iZXIsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FycmF5IG9yIHN0cmluZy4nKTtcbiAgICB9XG5cbiAgICAvLyBUcmVhdCBhcnJheS1pc2ggb2JqZWN0cyBhcyBhIGJ5dGUgYXJyYXkuXG4gICAgaWYgKGlzQXJyYXlJc2goc3ViamVjdCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc3ViamVjdCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgIHRoaXNbaV0gPSBzdWJqZWN0LnJlYWRVSW50OChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzW2ldID0gc3ViamVjdFtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnc3RyaW5nJykge1xuICAgICAgLy8gV2UgYXJlIGEgc3RyaW5nXG4gICAgICB0aGlzLmxlbmd0aCA9IHRoaXMud3JpdGUoc3ViamVjdCwgMCwgZW5jb2RpbmcpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQoaSkge1xuICBpZiAoaSA8IDAgfHwgaSA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdvb2InKTtcbiAgcmV0dXJuIHRoaXNbaV07XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldChpLCB2KSB7XG4gIGlmIChpIDwgMCB8fCBpID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ29vYicpO1xuICByZXR1cm4gdGhpc1tpXSA9IHY7XG59O1xuXG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIChzdHIsIGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoZW5jb2RpbmcgfHwgXCJ1dGY4XCIpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0dXJuIHN0ci5sZW5ndGggLyAyO1xuXG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cikubGVuZ3RoO1xuXG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXR1cm4gc3RyLmxlbmd0aDtcblxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHIpLmxlbmd0aDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKTtcbiAgfVxufTtcblxuQnVmZmVyLnByb3RvdHlwZS51dGY4V3JpdGUgPSBmdW5jdGlvbiAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgYnl0ZXMsIHBvcztcbiAgcmV0dXJuIEJ1ZmZlci5fY2hhcnNXcml0dGVuID0gIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nKSwgdGhpcywgb2Zmc2V0LCBsZW5ndGgpO1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS5hc2NpaVdyaXRlID0gZnVuY3Rpb24gKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGJ5dGVzLCBwb3M7XG4gIHJldHVybiBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9ICBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCB0aGlzLCBvZmZzZXQsIGxlbmd0aCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLmJpbmFyeVdyaXRlID0gQnVmZmVyLnByb3RvdHlwZS5hc2NpaVdyaXRlO1xuXG5CdWZmZXIucHJvdG90eXBlLmJhc2U2NFdyaXRlID0gZnVuY3Rpb24gKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGJ5dGVzLCBwb3M7XG4gIHJldHVybiBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCB0aGlzLCBvZmZzZXQsIGxlbmd0aCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLmJhc2U2NFNsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgcmV0dXJuIHJlcXVpcmUoXCJiYXNlNjQtanNcIikuZnJvbUJ5dGVBcnJheShieXRlcyk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnV0ZjhTbGljZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJ5dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHZhciByZXMgPSBcIlwiO1xuICB2YXIgdG1wID0gXCJcIjtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoaSA8IGJ5dGVzLmxlbmd0aCkge1xuICAgIGlmIChieXRlc1tpXSA8PSAweDdGKSB7XG4gICAgICByZXMgKz0gZGVjb2RlVXRmOENoYXIodG1wKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICAgICAgdG1wID0gXCJcIjtcbiAgICB9IGVsc2VcbiAgICAgIHRtcCArPSBcIiVcIiArIGJ5dGVzW2ldLnRvU3RyaW5nKDE2KTtcblxuICAgIGkrKztcbiAgfVxuXG4gIHJldHVybiByZXMgKyBkZWNvZGVVdGY4Q2hhcih0bXApO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmFzY2lpU2xpY2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBieXRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB2YXIgcmV0ID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKylcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7XG4gIHJldHVybiByZXQ7XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuYmluYXJ5U2xpY2UgPSBCdWZmZXIucHJvdG90eXBlLmFzY2lpU2xpY2U7XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgb3V0ID0gW10sXG4gICAgICBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dFtpXSA9IHRvSGV4KHRoaXNbaV0pO1xuICAgIGlmIChpID09IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMpIHtcbiAgICAgIG91dFtpICsgMV0gPSAnLi4uJztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIG91dC5qb2luKCcgJykgKyAnPic7XG59O1xuXG5cbkJ1ZmZlci5wcm90b3R5cGUuaGV4U2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwO1xuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuO1xuXG4gIHZhciBvdXQgPSAnJztcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBvdXQgKz0gdG9IZXgodGhpc1tpXSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKTtcbiAgc3RhcnQgPSArc3RhcnQgfHwgMDtcbiAgaWYgKHR5cGVvZiBlbmQgPT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGVuZ3RoO1xuXG4gIC8vIEZhc3RwYXRoIGVtcHR5IHN0cmluZ3NcbiAgaWYgKCtlbmQgPT0gc3RhcnQpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldHVybiB0aGlzLmhleFNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0dXJuIHRoaXMudXRmOFNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0dXJuIHRoaXMuYXNjaWlTbGljZShzdGFydCwgZW5kKTtcblxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXR1cm4gdGhpcy5iaW5hcnlTbGljZShzdGFydCwgZW5kKTtcblxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXR1cm4gdGhpcy5iYXNlNjRTbGljZShzdGFydCwgZW5kKTtcblxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIHJldHVybiB0aGlzLnVjczJTbGljZShzdGFydCwgZW5kKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKTtcbiAgfVxufTtcblxuXG5CdWZmZXIucHJvdG90eXBlLmhleFdyaXRlID0gZnVuY3Rpb24oc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSArb2Zmc2V0IHx8IDA7XG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmc7XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gK2xlbmd0aDtcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmc7XG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGg7XG4gIGlmIChzdHJMZW4gJSAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKTtcbiAgfVxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDI7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBieXRlID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KTtcbiAgICBpZiAoaXNOYU4oYnl0ZSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJyk7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9IGJ5dGU7XG4gIH1cbiAgQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPSBpICogMjtcbiAgcmV0dXJuIGk7XG59O1xuXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBTdXBwb3J0IGJvdGggKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKVxuICAvLyBhbmQgdGhlIGxlZ2FjeSAoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpXG4gIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgaWYgKCFpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aDtcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7ICAvLyBsZWdhY3lcbiAgICB2YXIgc3dhcCA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gb2Zmc2V0O1xuICAgIG9mZnNldCA9IGxlbmd0aDtcbiAgICBsZW5ndGggPSBzd2FwO1xuICB9XG5cbiAgb2Zmc2V0ID0gK29mZnNldCB8fCAwO1xuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXQ7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nO1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9ICtsZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nO1xuICAgIH1cbiAgfVxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgc3dpdGNoIChlbmNvZGluZykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXR1cm4gdGhpcy5oZXhXcml0ZShzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKTtcblxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldHVybiB0aGlzLnV0ZjhXcml0ZShzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKTtcblxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIHJldHVybiB0aGlzLmFzY2lpV3JpdGUoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG5cbiAgICBjYXNlICdiaW5hcnknOlxuICAgICAgcmV0dXJuIHRoaXMuYmluYXJ5V3JpdGUoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG5cbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0dXJuIHRoaXMuYmFzZTY0V3JpdGUoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG5cbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgICByZXR1cm4gdGhpcy51Y3MyV3JpdGUoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nJyk7XG4gIH1cbn07XG5cbi8vIHNsaWNlKHN0YXJ0LCBlbmQpXG5mdW5jdGlvbiBjbGFtcChpbmRleCwgbGVuLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIGluZGV4ID0gfn5pbmRleDsgIC8vIENvZXJjZSB0byBpbnRlZ2VyLlxuICBpZiAoaW5kZXggPj0gbGVuKSByZXR1cm4gbGVuO1xuICBpZiAoaW5kZXggPj0gMCkgcmV0dXJuIGluZGV4O1xuICBpbmRleCArPSBsZW47XG4gIGlmIChpbmRleCA+PSAwKSByZXR1cm4gaW5kZXg7XG4gIHJldHVybiAwO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7XG4gIHN0YXJ0ID0gY2xhbXAoc3RhcnQsIGxlbiwgMCk7XG4gIGVuZCA9IGNsYW1wKGVuZCwgbGVuLCBsZW4pO1xuICByZXR1cm4gbmV3IEJ1ZmZlcih0aGlzLCBlbmQgLSBzdGFydCwgK3N0YXJ0KTtcbn07XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0X3N0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuICBzdGFydCB8fCAoc3RhcnQgPSAwKTtcbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGlzTmFOKGVuZCkpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgfVxuICB0YXJnZXRfc3RhcnQgfHwgKHRhcmdldF9zdGFydCA9IDApO1xuXG4gIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IEVycm9yKCdzb3VyY2VFbmQgPCBzb3VyY2VTdGFydCcpO1xuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDA7XG4gIGlmICh0YXJnZXQubGVuZ3RoID09IDAgfHwgc291cmNlLmxlbmd0aCA9PSAwKSByZXR1cm4gMDtcblxuICBpZiAodGFyZ2V0X3N0YXJ0IDwgMCB8fCB0YXJnZXRfc3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpO1xuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSBzb3VyY2UubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJyk7XG4gIH1cblxuICBpZiAoZW5kIDwgMCB8fCBlbmQgPiBzb3VyY2UubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpO1xuICB9XG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGg7XG4gIH1cblxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCArIHN0YXJ0O1xuICB9XG5cbiAgdmFyIHRlbXAgPSBbXTtcbiAgZm9yICh2YXIgaT1zdGFydDsgaTxlbmQ7IGkrKykge1xuICAgIGFzc2VydC5vayh0eXBlb2YgdGhpc1tpXSAhPT0gJ3VuZGVmaW5lZCcsIFwiY29weWluZyB1bmRlZmluZWQgYnVmZmVyIGJ5dGVzIVwiKTtcbiAgICB0ZW1wLnB1c2godGhpc1tpXSk7XG4gIH1cblxuICBmb3IgKHZhciBpPXRhcmdldF9zdGFydDsgaTx0YXJnZXRfc3RhcnQrdGVtcC5sZW5ndGg7IGkrKykge1xuICAgIHRhcmdldFtpXSA9IHRlbXBbaS10YXJnZXRfc3RhcnRdO1xuICB9XG59O1xuXG4vLyBmaWxsKHZhbHVlLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgdmFsdWUgfHwgKHZhbHVlID0gMCk7XG4gIHN0YXJ0IHx8IChzdGFydCA9IDApO1xuICBlbmQgfHwgKGVuZCA9IHRoaXMubGVuZ3RoKTtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gdmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgfVxuICBpZiAoISh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB8fCBpc05hTih2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIGlzIG5vdCBhIG51bWJlcicpO1xuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSB0aHJvdyBuZXcgRXJyb3IoJ2VuZCA8IHN0YXJ0Jyk7XG5cbiAgLy8gRmlsbCAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMDtcbiAgaWYgKHRoaXMubGVuZ3RoID09IDApIHJldHVybiAwO1xuXG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXJ0IG91dCBvZiBib3VuZHMnKTtcbiAgfVxuXG4gIGlmIChlbmQgPCAwIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdlbmQgb3V0IG9mIGJvdW5kcycpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICB0aGlzW2ldID0gdmFsdWU7XG4gIH1cbn1cblxuLy8gU3RhdGljIG1ldGhvZHNcbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgcmV0dXJuIGIgaW5zdGFuY2VvZiBCdWZmZXIgfHwgYiBpbnN0YW5jZW9mIEJ1ZmZlcjtcbn07XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiAobGlzdCwgdG90YWxMZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVXNhZ2U6IEJ1ZmZlci5jb25jYXQobGlzdCwgW3RvdGFsTGVuZ3RoXSlcXG4gXFxcbiAgICAgIGxpc3Qgc2hvdWxkIGJlIGFuIEFycmF5LlwiKTtcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKDApO1xuICB9IGVsc2UgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGxpc3RbMF07XG4gIH1cblxuICBpZiAodHlwZW9mIHRvdGFsTGVuZ3RoICE9PSAnbnVtYmVyJykge1xuICAgIHRvdGFsTGVuZ3RoID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBidWYgPSBsaXN0W2ldO1xuICAgICAgdG90YWxMZW5ndGggKz0gYnVmLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcih0b3RhbExlbmd0aCk7XG4gIHZhciBwb3MgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXTtcbiAgICBidWYuY29weShidWZmZXIsIHBvcyk7XG4gICAgcG9zICs9IGJ1Zi5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgc3dpdGNoICgoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICBjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbmZ1bmN0aW9uIGNvZXJjZShsZW5ndGgpIHtcbiAgLy8gQ29lcmNlIGxlbmd0aCB0byBhIG51bWJlciAocG9zc2libHkgTmFOKSwgcm91bmQgdXBcbiAgLy8gaW4gY2FzZSBpdCdzIGZyYWN0aW9uYWwgKGUuZy4gMTIzLjQ1NikgdGhlbiBkbyBhXG4gIC8vIGRvdWJsZSBuZWdhdGUgdG8gY29lcmNlIGEgTmFOIHRvIDAuIEVhc3ksIHJpZ2h0P1xuICBsZW5ndGggPSB+fk1hdGguY2VpbCgrbGVuZ3RoKTtcbiAgcmV0dXJuIGxlbmd0aCA8IDAgPyAwIDogbGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KHN1YmplY3QpIHtcbiAgcmV0dXJuIChBcnJheS5pc0FycmF5IHx8XG4gICAgZnVuY3Rpb24oc3ViamVjdCl7XG4gICAgICByZXR1cm4ge30udG9TdHJpbmcuYXBwbHkoc3ViamVjdCkgPT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgIH0pXG4gICAgKHN1YmplY3QpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlJc2goc3ViamVjdCkge1xuICByZXR1cm4gaXNBcnJheShzdWJqZWN0KSB8fCBCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkgfHxcbiAgICAgICAgIHN1YmplY3QgJiYgdHlwZW9mIHN1YmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICAgICB0eXBlb2Ygc3ViamVjdC5sZW5ndGggPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiB0b0hleChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyhzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKylcbiAgICBpZiAoc3RyLmNoYXJDb2RlQXQoaSkgPD0gMHg3RilcbiAgICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgICBlbHNlIHtcbiAgICAgIHZhciBoID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0ci5jaGFyQXQoaSkpLnN1YnN0cigxKS5zcGxpdCgnJScpO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoLmxlbmd0aDsgaisrKVxuICAgICAgICBieXRlQXJyYXkucHVzaChwYXJzZUludChoW2pdLCAxNikpO1xuICAgIH1cblxuICByZXR1cm4gYnl0ZUFycmF5O1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKyApXG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goIHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRiApO1xuXG4gIHJldHVybiBieXRlQXJyYXk7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMoc3RyKSB7XG4gIHJldHVybiByZXF1aXJlKFwiYmFzZTY0LWpzXCIpLnRvQnl0ZUFycmF5KHN0cik7XG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBwb3MsIGkgPSAwO1xuICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgIGlmICgoaStvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpXG4gICAgICBicmVhaztcblxuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXTtcbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZVV0ZjhDaGFyKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKTsgLy8gVVRGIDggaW52YWxpZCBjaGFyXG4gIH1cbn1cblxuLy8gcmVhZC93cml0ZSBiaXQtdHdpZGRsaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24ob2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YXIgYnVmZmVyID0gdGhpcztcblxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0Lm9rKG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCxcbiAgICAgICAgJ21pc3Npbmcgb2Zmc2V0Jyk7XG5cbiAgICBhc3NlcnQub2sob2Zmc2V0IDwgYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gIH1cblxuICBpZiAob2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHJldHVybjtcblxuICByZXR1cm4gYnVmZmVyW29mZnNldF07XG59O1xuXG5mdW5jdGlvbiByZWFkVUludDE2KGJ1ZmZlciwgb2Zmc2V0LCBpc0JpZ0VuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFyIHZhbCA9IDA7XG5cblxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0Lm9rKHR5cGVvZiAoaXNCaWdFbmRpYW4pID09PSAnYm9vbGVhbicsXG4gICAgICAgICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG5cbiAgICBhc3NlcnQub2sob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyBvZmZzZXQnKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgKyAxIDwgYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gIH1cblxuICBpZiAob2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHJldHVybiAwO1xuXG4gIGlmIChpc0JpZ0VuZGlhbikge1xuICAgIHZhbCA9IGJ1ZmZlcltvZmZzZXRdIDw8IDg7XG4gICAgaWYgKG9mZnNldCArIDEgPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICB2YWwgfD0gYnVmZmVyW29mZnNldCArIDFdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWwgPSBidWZmZXJbb2Zmc2V0XTtcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHZhbCB8PSBidWZmZXJbb2Zmc2V0ICsgMV0gPDwgODtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHJlYWRVSW50MTYodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbihvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiByZWFkVUludDE2KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gcmVhZFVJbnQzMihidWZmZXIsIG9mZnNldCwgaXNCaWdFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhciB2YWwgPSAwO1xuXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQub2sodHlwZW9mIChpc0JpZ0VuZGlhbikgPT09ICdib29sZWFuJyxcbiAgICAgICAgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCArIDMgPCBidWZmZXIubGVuZ3RoLFxuICAgICAgICAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkgcmV0dXJuIDA7XG5cbiAgaWYgKGlzQmlnRW5kaWFuKSB7XG4gICAgaWYgKG9mZnNldCArIDEgPCBidWZmZXIubGVuZ3RoKVxuICAgICAgdmFsID0gYnVmZmVyW29mZnNldCArIDFdIDw8IDE2O1xuICAgIGlmIChvZmZzZXQgKyAyIDwgYnVmZmVyLmxlbmd0aClcbiAgICAgIHZhbCB8PSBidWZmZXJbb2Zmc2V0ICsgMl0gPDwgODtcbiAgICBpZiAob2Zmc2V0ICsgMyA8IGJ1ZmZlci5sZW5ndGgpXG4gICAgICB2YWwgfD0gYnVmZmVyW29mZnNldCArIDNdO1xuICAgIHZhbCA9IHZhbCArIChidWZmZXJbb2Zmc2V0XSA8PCAyNCA+Pj4gMCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG9mZnNldCArIDIgPCBidWZmZXIubGVuZ3RoKVxuICAgICAgdmFsID0gYnVmZmVyW29mZnNldCArIDJdIDw8IDE2O1xuICAgIGlmIChvZmZzZXQgKyAxIDwgYnVmZmVyLmxlbmd0aClcbiAgICAgIHZhbCB8PSBidWZmZXJbb2Zmc2V0ICsgMV0gPDwgODtcbiAgICB2YWwgfD0gYnVmZmVyW29mZnNldF07XG4gICAgaWYgKG9mZnNldCArIDMgPCBidWZmZXIubGVuZ3RoKVxuICAgICAgdmFsID0gdmFsICsgKGJ1ZmZlcltvZmZzZXQgKyAzXSA8PCAyNCA+Pj4gMCk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHJlYWRVSW50MzIodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbihvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiByZWFkVUludDMyKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuXG4vKlxuICogU2lnbmVkIGludGVnZXIgdHlwZXMsIHlheSB0ZWFtISBBIHJlbWluZGVyIG9uIGhvdyB0d28ncyBjb21wbGVtZW50IGFjdHVhbGx5XG4gKiB3b3Jrcy4gVGhlIGZpcnN0IGJpdCBpcyB0aGUgc2lnbmVkIGJpdCwgaS5lLiB0ZWxscyB1cyB3aGV0aGVyIG9yIG5vdCB0aGVcbiAqIG51bWJlciBzaG91bGQgYmUgcG9zaXRpdmUgb3IgbmVnYXRpdmUuIElmIHRoZSB0d28ncyBjb21wbGVtZW50IHZhbHVlIGlzXG4gKiBwb3NpdGl2ZSwgdGhlbiB3ZSdyZSBkb25lLCBhcyBpdCdzIGVxdWl2YWxlbnQgdG8gdGhlIHVuc2lnbmVkIHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIE5vdyBpZiB0aGUgbnVtYmVyIGlzIHBvc2l0aXZlLCB5b3UncmUgcHJldHR5IG11Y2ggZG9uZSwgeW91IGNhbiBqdXN0IGxldmVyYWdlXG4gKiB0aGUgdW5zaWduZWQgdHJhbnNsYXRpb25zIGFuZCByZXR1cm4gdGhvc2UuIFVuZm9ydHVuYXRlbHksIG5lZ2F0aXZlIG51bWJlcnNcbiAqIGFyZW4ndCBxdWl0ZSB0aGF0IHN0cmFpZ2h0Zm9yd2FyZC5cbiAqXG4gKiBBdCBmaXJzdCBnbGFuY2UsIG9uZSBtaWdodCBiZSBpbmNsaW5lZCB0byB1c2UgdGhlIHRyYWRpdGlvbmFsIGZvcm11bGEgdG9cbiAqIHRyYW5zbGF0ZSBiaW5hcnkgbnVtYmVycyBiZXR3ZWVuIHRoZSBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzIGluIHR3bydzXG4gKiBjb21wbGVtZW50LiAoVGhvdWdoIGl0IGRvZXNuJ3QgcXVpdGUgd29yayBmb3IgdGhlIG1vc3QgbmVnYXRpdmUgdmFsdWUpXG4gKiBNYWlubHk6XG4gKiAgLSBpbnZlcnQgYWxsIHRoZSBiaXRzXG4gKiAgLSBhZGQgb25lIHRvIHRoZSByZXN1bHRcbiAqXG4gKiBPZiBjb3Vyc2UsIHRoaXMgZG9lc24ndCBxdWl0ZSB3b3JrIGluIEphdmFzY3JpcHQuIFRha2UgZm9yIGV4YW1wbGUgdGhlIHZhbHVlXG4gKiBvZiAtMTI4LiBUaGlzIGNvdWxkIGJlIHJlcHJlc2VudGVkIGluIDE2IGJpdHMgKGJpZy1lbmRpYW4pIGFzIDB4ZmY4MC4gQnV0IG9mXG4gKiBjb3Vyc2UsIEphdmFzY3JpcHQgd2lsbCBkbyB0aGUgZm9sbG93aW5nOlxuICpcbiAqID4gfjB4ZmY4MFxuICogLTY1NDA5XG4gKlxuICogV2hvaCB0aGVyZSwgSmF2YXNjcmlwdCwgdGhhdCdzIG5vdCBxdWl0ZSByaWdodC4gQnV0IHdhaXQsIGFjY29yZGluZyB0b1xuICogSmF2YXNjcmlwdCB0aGF0J3MgcGVyZmVjdGx5IGNvcnJlY3QuIFdoZW4gSmF2YXNjcmlwdCBlbmRzIHVwIHNlZWluZyB0aGVcbiAqIGNvbnN0YW50IDB4ZmY4MCwgaXQgaGFzIG5vIG5vdGlvbiB0aGF0IGl0IGlzIGFjdHVhbGx5IGEgc2lnbmVkIG51bWJlci4gSXRcbiAqIGFzc3VtZXMgdGhhdCB3ZSd2ZSBpbnB1dCB0aGUgdW5zaWduZWQgdmFsdWUgMHhmZjgwLiBUaHVzLCB3aGVuIGl0IGRvZXMgdGhlXG4gKiBiaW5hcnkgbmVnYXRpb24sIGl0IGNhc3RzIGl0IGludG8gYSBzaWduZWQgdmFsdWUsIChwb3NpdGl2ZSAweGZmODApLiBUaGVuXG4gKiB3aGVuIHlvdSBwZXJmb3JtIGJpbmFyeSBuZWdhdGlvbiBvbiB0aGF0LCBpdCB0dXJucyBpdCBpbnRvIGEgbmVnYXRpdmUgbnVtYmVyLlxuICpcbiAqIEluc3RlYWQsIHdlJ3JlIGdvaW5nIHRvIGhhdmUgdG8gdXNlIHRoZSBmb2xsb3dpbmcgZ2VuZXJhbCBmb3JtdWxhLCB0aGF0IHdvcmtzXG4gKiBpbiBhIHJhdGhlciBKYXZhc2NyaXB0IGZyaWVuZGx5IHdheS4gSSdtIGdsYWQgd2UgZG9uJ3Qgc3VwcG9ydCB0aGlzIGtpbmQgb2ZcbiAqIHdlaXJkIG51bWJlcmluZyBzY2hlbWUgaW4gdGhlIGtlcm5lbC5cbiAqXG4gKiAoQklULU1BWCAtICh1bnNpZ25lZCl2YWwgKyAxKSAqIC0xXG4gKlxuICogVGhlIGFzdHV0ZSBvYnNlcnZlciwgbWF5IHRoaW5rIHRoYXQgdGhpcyBkb2Vzbid0IG1ha2Ugc2Vuc2UgZm9yIDgtYml0IG51bWJlcnNcbiAqIChyZWFsbHkgaXQgaXNuJ3QgbmVjZXNzYXJ5IGZvciB0aGVtKS4gSG93ZXZlciwgd2hlbiB5b3UgZ2V0IDE2LWJpdCBudW1iZXJzLFxuICogeW91IGRvLiBMZXQncyBnbyBiYWNrIHRvIG91ciBwcmlvciBleGFtcGxlIGFuZCBzZWUgaG93IHRoaXMgd2lsbCBsb29rOlxuICpcbiAqICgweGZmZmYgLSAweGZmODAgKyAxKSAqIC0xXG4gKiAoMHgwMDdmICsgMSkgKiAtMVxuICogKDB4MDA4MCkgKiAtMVxuICovXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24ob2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YXIgYnVmZmVyID0gdGhpcztcbiAgdmFyIG5lZztcblxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0Lm9rKG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCxcbiAgICAgICAgJ21pc3Npbmcgb2Zmc2V0Jyk7XG5cbiAgICBhc3NlcnQub2sob2Zmc2V0IDwgYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gIH1cblxuICBpZiAob2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHJldHVybjtcblxuICBuZWcgPSBidWZmZXJbb2Zmc2V0XSAmIDB4ODA7XG4gIGlmICghbmVnKSB7XG4gICAgcmV0dXJuIChidWZmZXJbb2Zmc2V0XSk7XG4gIH1cblxuICByZXR1cm4gKCgweGZmIC0gYnVmZmVyW29mZnNldF0gKyAxKSAqIC0xKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRJbnQxNihidWZmZXIsIG9mZnNldCwgaXNCaWdFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhciBuZWcsIHZhbDtcblxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0Lm9rKHR5cGVvZiAoaXNCaWdFbmRpYW4pID09PSAnYm9vbGVhbicsXG4gICAgICAgICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG5cbiAgICBhc3NlcnQub2sob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyBvZmZzZXQnKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgKyAxIDwgYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG4gIH1cblxuICB2YWwgPSByZWFkVUludDE2KGJ1ZmZlciwgb2Zmc2V0LCBpc0JpZ0VuZGlhbiwgbm9Bc3NlcnQpO1xuICBuZWcgPSB2YWwgJiAweDgwMDA7XG4gIGlmICghbmVnKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIHJldHVybiAoMHhmZmZmIC0gdmFsICsgMSkgKiAtMTtcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHJlYWRJbnQxNih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24ob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gcmVhZEludDE2KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gcmVhZEludDMyKGJ1ZmZlciwgb2Zmc2V0LCBpc0JpZ0VuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFyIG5lZywgdmFsO1xuXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQub2sodHlwZW9mIChpc0JpZ0VuZGlhbikgPT09ICdib29sZWFuJyxcbiAgICAgICAgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCArIDMgPCBidWZmZXIubGVuZ3RoLFxuICAgICAgICAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgfVxuXG4gIHZhbCA9IHJlYWRVSW50MzIoYnVmZmVyLCBvZmZzZXQsIGlzQmlnRW5kaWFuLCBub0Fzc2VydCk7XG4gIG5lZyA9IHZhbCAmIDB4ODAwMDAwMDA7XG4gIGlmICghbmVnKSB7XG4gICAgcmV0dXJuICh2YWwpO1xuICB9XG5cbiAgcmV0dXJuICgweGZmZmZmZmZmIC0gdmFsICsgMSkgKiAtMTtcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHJlYWRJbnQzMih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24ob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gcmVhZEludDMyKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gcmVhZEZsb2F0KGJ1ZmZlciwgb2Zmc2V0LCBpc0JpZ0VuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydC5vayh0eXBlb2YgKGlzQmlnRW5kaWFuKSA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgICAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCArIDMgPCBidWZmZXIubGVuZ3RoLFxuICAgICAgICAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgfVxuXG4gIHJldHVybiByZXF1aXJlKCcuL2J1ZmZlcl9pZWVlNzU0JykucmVhZElFRUU3NTQoYnVmZmVyLCBvZmZzZXQsIGlzQmlnRW5kaWFuLFxuICAgICAgMjMsIDQpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24ob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gcmVhZEZsb2F0KHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbihvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiByZWFkRmxvYXQodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG59O1xuXG5mdW5jdGlvbiByZWFkRG91YmxlKGJ1ZmZlciwgb2Zmc2V0LCBpc0JpZ0VuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydC5vayh0eXBlb2YgKGlzQmlnRW5kaWFuKSA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgICAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCArIDcgPCBidWZmZXIubGVuZ3RoLFxuICAgICAgICAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcbiAgfVxuXG4gIHJldHVybiByZXF1aXJlKCcuL2J1ZmZlcl9pZWVlNzU0JykucmVhZElFRUU3NTQoYnVmZmVyLCBvZmZzZXQsIGlzQmlnRW5kaWFuLFxuICAgICAgNTIsIDgpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHJlYWREb3VibGUodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xufTtcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbihvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiByZWFkRG91YmxlKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuXG4vKlxuICogV2UgaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYSB2YWxpZCBpbnRlZ2VyLiBUaGlzIG1lYW5zIHRoYXQgaXQgaXNcbiAqIG5vbi1uZWdhdGl2ZS4gSXQgaGFzIG5vIGZyYWN0aW9uYWwgY29tcG9uZW50IGFuZCB0aGF0IGl0IGRvZXMgbm90IGV4Y2VlZCB0aGVcbiAqIG1heGltdW0gYWxsb3dlZCB2YWx1ZS5cbiAqXG4gKiAgICAgIHZhbHVlICAgICAgICAgICBUaGUgbnVtYmVyIHRvIGNoZWNrIGZvciB2YWxpZGl0eVxuICpcbiAqICAgICAgbWF4ICAgICAgICAgICAgIFRoZSBtYXhpbXVtIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHZlcmlmdWludCh2YWx1ZSwgbWF4KSB7XG4gIGFzc2VydC5vayh0eXBlb2YgKHZhbHVlKSA9PSAnbnVtYmVyJyxcbiAgICAgICdjYW5ub3Qgd3JpdGUgYSBub24tbnVtYmVyIGFzIGEgbnVtYmVyJyk7XG5cbiAgYXNzZXJ0Lm9rKHZhbHVlID49IDAsXG4gICAgICAnc3BlY2lmaWVkIGEgbmVnYXRpdmUgdmFsdWUgZm9yIHdyaXRpbmcgYW4gdW5zaWduZWQgdmFsdWUnKTtcblxuICBhc3NlcnQub2sodmFsdWUgPD0gbWF4LCAndmFsdWUgaXMgbGFyZ2VyIHRoYW4gbWF4aW11bSB2YWx1ZSBmb3IgdHlwZScpO1xuXG4gIGFzc2VydC5vayhNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUsICd2YWx1ZSBoYXMgYSBmcmFjdGlvbmFsIGNvbXBvbmVudCcpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YXIgYnVmZmVyID0gdGhpcztcblxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0Lm9rKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIHZhbHVlJyk7XG5cbiAgICBhc3NlcnQub2sob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyBvZmZzZXQnKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgPCBidWZmZXIubGVuZ3RoLFxuICAgICAgICAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG5cbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmYpO1xuICB9XG5cbiAgaWYgKG9mZnNldCA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBidWZmZXJbb2Zmc2V0XSA9IHZhbHVlO1xuICB9XG59O1xuXG5mdW5jdGlvbiB3cml0ZVVJbnQxNihidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzQmlnRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0Lm9rKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIHZhbHVlJyk7XG5cbiAgICBhc3NlcnQub2sodHlwZW9mIChpc0JpZ0VuZGlhbikgPT09ICdib29sZWFuJyxcbiAgICAgICAgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCArIDEgPCBidWZmZXIubGVuZ3RoLFxuICAgICAgICAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG5cbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmZmZik7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IE1hdGgubWluKGJ1ZmZlci5sZW5ndGggLSBvZmZzZXQsIDIpOyBpKyspIHtcbiAgICBidWZmZXJbb2Zmc2V0ICsgaV0gPVxuICAgICAgICAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChpc0JpZ0VuZGlhbiA/IDEgLSBpIDogaSkpKSkgPj4+XG4gICAgICAgICAgICAoaXNCaWdFbmRpYW4gPyAxIC0gaSA6IGkpICogODtcbiAgfVxuXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB3cml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVVJbnQzMihidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzQmlnRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0Lm9rKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIHZhbHVlJyk7XG5cbiAgICBhc3NlcnQub2sodHlwZW9mIChpc0JpZ0VuZGlhbikgPT09ICdib29sZWFuJyxcbiAgICAgICAgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCArIDMgPCBidWZmZXIubGVuZ3RoLFxuICAgICAgICAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG5cbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmZmZmZmZmYpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLm1pbihidWZmZXIubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSsrKSB7XG4gICAgYnVmZmVyW29mZnNldCArIGldID1cbiAgICAgICAgKHZhbHVlID4+PiAoaXNCaWdFbmRpYW4gPyAzIC0gaSA6IGkpICogOCkgJiAweGZmO1xuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB3cml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG59O1xuXG5cbi8qXG4gKiBXZSBub3cgbW92ZSBvbnRvIG91ciBmcmllbmRzIGluIHRoZSBzaWduZWQgbnVtYmVyIGNhdGVnb3J5LiBVbmxpa2UgdW5zaWduZWRcbiAqIG51bWJlcnMsIHdlJ3JlIGdvaW5nIHRvIGhhdmUgdG8gd29ycnkgYSBiaXQgbW9yZSBhYm91dCBob3cgd2UgcHV0IHZhbHVlcyBpbnRvXG4gKiBhcnJheXMuIFNpbmNlIHdlIGFyZSBvbmx5IHdvcnJ5aW5nIGFib3V0IHNpZ25lZCAzMi1iaXQgdmFsdWVzLCB3ZSdyZSBpblxuICogc2xpZ2h0bHkgYmV0dGVyIHNoYXBlLiBVbmZvcnR1bmF0ZWx5LCB3ZSByZWFsbHkgY2FuJ3QgZG8gb3VyIGZhdm9yaXRlIGJpbmFyeVxuICogJiBpbiB0aGlzIHN5c3RlbS4gSXQgcmVhbGx5IHNlZW1zIHRvIGRvIHRoZSB3cm9uZyB0aGluZy4gRm9yIGV4YW1wbGU6XG4gKlxuICogPiAtMzIgJiAweGZmXG4gKiAyMjRcbiAqXG4gKiBXaGF0J3MgaGFwcGVuaW5nIGFib3ZlIGlzIHJlYWxseTogMHhlMCAmIDB4ZmYgPSAweGUwLiBIb3dldmVyLCB0aGUgcmVzdWx0cyBvZlxuICogdGhpcyBhcmVuJ3QgdHJlYXRlZCBhcyBhIHNpZ25lZCBudW1iZXIuIFVsdGltYXRlbHkgYSBiYWQgdGhpbmcuXG4gKlxuICogV2hhdCB3ZSdyZSBnb2luZyB0byB3YW50IHRvIGRvIGlzIGJhc2ljYWxseSBjcmVhdGUgdGhlIHVuc2lnbmVkIGVxdWl2YWxlbnQgb2ZcbiAqIG91ciByZXByZXNlbnRhdGlvbiBhbmQgcGFzcyB0aGF0IG9mZiB0byB0aGUgd3VpbnQqIGZ1bmN0aW9ucy4gVG8gZG8gdGhhdFxuICogd2UncmUgZ29pbmcgdG8gZG8gdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAgLSBpZiB0aGUgdmFsdWUgaXMgcG9zaXRpdmVcbiAqICAgICAgd2UgY2FuIHBhc3MgaXQgZGlyZWN0bHkgb2ZmIHRvIHRoZSBlcXVpdmFsZW50IHd1aW50XG4gKiAgLSBpZiB0aGUgdmFsdWUgaXMgbmVnYXRpdmVcbiAqICAgICAgd2UgZG8gdGhlIGZvbGxvd2luZyBjb21wdXRhdGlvbjpcbiAqICAgICAgICAgbWIgKyB2YWwgKyAxLCB3aGVyZVxuICogICAgICAgICBtYiAgIGlzIHRoZSBtYXhpbXVtIHVuc2lnbmVkIHZhbHVlIGluIHRoYXQgYnl0ZSBzaXplXG4gKiAgICAgICAgIHZhbCAgaXMgdGhlIEphdmFzY3JpcHQgbmVnYXRpdmUgaW50ZWdlclxuICpcbiAqXG4gKiBBcyBhIGNvbmNyZXRlIHZhbHVlLCB0YWtlIC0xMjguIEluIHNpZ25lZCAxNiBiaXRzIHRoaXMgd291bGQgYmUgMHhmZjgwLiBJZlxuICogeW91IGRvIG91dCB0aGUgY29tcHV0YXRpb25zOlxuICpcbiAqIDB4ZmZmZiAtIDEyOCArIDFcbiAqIDB4ZmZmZiAtIDEyN1xuICogMHhmZjgwXG4gKlxuICogWW91IGNhbiB0aGVuIGVuY29kZSB0aGlzIHZhbHVlIGFzIHRoZSBzaWduZWQgdmVyc2lvbi4gVGhpcyBpcyByZWFsbHkgcmF0aGVyXG4gKiBoYWNreSwgYnV0IGl0IHNob3VsZCB3b3JrIGFuZCBnZXQgdGhlIGpvYiBkb25lIHdoaWNoIGlzIG91ciBnb2FsIGhlcmUuXG4gKi9cblxuLypcbiAqIEEgc2VyaWVzIG9mIGNoZWNrcyB0byBtYWtlIHN1cmUgd2UgYWN0dWFsbHkgaGF2ZSBhIHNpZ25lZCAzMi1iaXQgbnVtYmVyXG4gKi9cbmZ1bmN0aW9uIHZlcmlmc2ludCh2YWx1ZSwgbWF4LCBtaW4pIHtcbiAgYXNzZXJ0Lm9rKHR5cGVvZiAodmFsdWUpID09ICdudW1iZXInLFxuICAgICAgJ2Nhbm5vdCB3cml0ZSBhIG5vbi1udW1iZXIgYXMgYSBudW1iZXInKTtcblxuICBhc3NlcnQub2sodmFsdWUgPD0gbWF4LCAndmFsdWUgbGFyZ2VyIHRoYW4gbWF4aW11bSBhbGxvd2VkIHZhbHVlJyk7XG5cbiAgYXNzZXJ0Lm9rKHZhbHVlID49IG1pbiwgJ3ZhbHVlIHNtYWxsZXIgdGhhbiBtaW5pbXVtIGFsbG93ZWQgdmFsdWUnKTtcblxuICBhc3NlcnQub2soTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlLCAndmFsdWUgaGFzIGEgZnJhY3Rpb25hbCBjb21wb25lbnQnKTtcbn1cblxuZnVuY3Rpb24gdmVyaWZJRUVFNzU0KHZhbHVlLCBtYXgsIG1pbikge1xuICBhc3NlcnQub2sodHlwZW9mICh2YWx1ZSkgPT0gJ251bWJlcicsXG4gICAgICAnY2Fubm90IHdyaXRlIGEgbm9uLW51bWJlciBhcyBhIG51bWJlcicpO1xuXG4gIGFzc2VydC5vayh2YWx1ZSA8PSBtYXgsICd2YWx1ZSBsYXJnZXIgdGhhbiBtYXhpbXVtIGFsbG93ZWQgdmFsdWUnKTtcblxuICBhc3NlcnQub2sodmFsdWUgPj0gbWluLCAndmFsdWUgc21hbGxlciB0aGFuIG1pbmltdW0gYWxsb3dlZCB2YWx1ZScpO1xufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhciBidWZmZXIgPSB0aGlzO1xuXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQub2sodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCxcbiAgICAgICAgJ21pc3NpbmcgdmFsdWUnKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCA8IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcblxuICAgIHZlcmlmc2ludCh2YWx1ZSwgMHg3ZiwgLTB4ODApO1xuICB9XG5cbiAgaWYgKHZhbHVlID49IDApIHtcbiAgICBidWZmZXIud3JpdGVVSW50OCh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCk7XG4gIH0gZWxzZSB7XG4gICAgYnVmZmVyLndyaXRlVUludDgoMHhmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBub0Fzc2VydCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHdyaXRlSW50MTYoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0JpZ0VuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydC5vayh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyB2YWx1ZScpO1xuXG4gICAgYXNzZXJ0Lm9rKHR5cGVvZiAoaXNCaWdFbmRpYW4pID09PSAnYm9vbGVhbicsXG4gICAgICAgICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG5cbiAgICBhc3NlcnQub2sob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyBvZmZzZXQnKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgKyAxIDwgYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpO1xuXG4gICAgdmVyaWZzaW50KHZhbHVlLCAweDdmZmYsIC0weDgwMDApO1xuICB9XG5cbiAgaWYgKHZhbHVlID49IDApIHtcbiAgICB3cml0ZVVJbnQxNihidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzQmlnRW5kaWFuLCBub0Fzc2VydCk7XG4gIH0gZWxzZSB7XG4gICAgd3JpdGVVSW50MTYoYnVmZmVyLCAweGZmZmYgKyB2YWx1ZSArIDEsIG9mZnNldCwgaXNCaWdFbmRpYW4sIG5vQXNzZXJ0KTtcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHdyaXRlSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgd3JpdGVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUludDMyKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNCaWdFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQub2sodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCxcbiAgICAgICAgJ21pc3NpbmcgdmFsdWUnKTtcblxuICAgIGFzc2VydC5vayh0eXBlb2YgKGlzQmlnRW5kaWFuKSA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgICAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCxcbiAgICAgICAgJ21pc3Npbmcgb2Zmc2V0Jyk7XG5cbiAgICBhc3NlcnQub2sob2Zmc2V0ICsgMyA8IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTtcblxuICAgIHZlcmlmc2ludCh2YWx1ZSwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApO1xuICB9XG5cbiAgaWYgKHZhbHVlID49IDApIHtcbiAgICB3cml0ZVVJbnQzMihidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzQmlnRW5kaWFuLCBub0Fzc2VydCk7XG4gIH0gZWxzZSB7XG4gICAgd3JpdGVVSW50MzIoYnVmZmVyLCAweGZmZmZmZmZmICsgdmFsdWUgKyAxLCBvZmZzZXQsIGlzQmlnRW5kaWFuLCBub0Fzc2VydCk7XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB3cml0ZUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHdyaXRlSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVGbG9hdChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzQmlnRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0Lm9rKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIHZhbHVlJyk7XG5cbiAgICBhc3NlcnQub2sodHlwZW9mIChpc0JpZ0VuZGlhbikgPT09ICdib29sZWFuJyxcbiAgICAgICAgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpO1xuXG4gICAgYXNzZXJ0Lm9rKG9mZnNldCArIDMgPCBidWZmZXIubGVuZ3RoLFxuICAgICAgICAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJyk7XG5cbiAgICB2ZXJpZklFRUU3NTQodmFsdWUsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KTtcbiAgfVxuXG4gIHJlcXVpcmUoJy4vYnVmZmVyX2llZWU3NTQnKS53cml0ZUlFRUU3NTQoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0JpZ0VuZGlhbixcbiAgICAgIDIzLCA0KTtcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG59O1xuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVEb3VibGUoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0JpZ0VuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydC5vayh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyB2YWx1ZScpO1xuXG4gICAgYXNzZXJ0Lm9rKHR5cGVvZiAoaXNCaWdFbmRpYW4pID09PSAnYm9vbGVhbicsXG4gICAgICAgICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJyk7XG5cbiAgICBhc3NlcnQub2sob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyBvZmZzZXQnKTtcblxuICAgIGFzc2VydC5vayhvZmZzZXQgKyA3IDwgYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpO1xuXG4gICAgdmVyaWZJRUVFNzU0KHZhbHVlLCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KTtcbiAgfVxuXG4gIHJlcXVpcmUoJy4vYnVmZmVyX2llZWU3NTQnKS53cml0ZUlFRUU3NTQoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0JpZ0VuZGlhbixcbiAgICAgIDUyLCA4KTtcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KTtcbn07XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KTtcbn07XG5cbn0se1wiLi9idWZmZXJfaWVlZTc1NFwiOjEsXCJhc3NlcnRcIjo2LFwiYmFzZTY0LWpzXCI6NH1dLFwiYnVmZmVyLWJyb3dzZXJpZnlcIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cz1yZXF1aXJlKCdxOVR4Q0MnKTtcbn0se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChleHBvcnRzKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgbG9va3VwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5KGI2NCkge1xuXHRcdHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyO1xuXHRcblx0XHRpZiAoYjY0Lmxlbmd0aCAlIDQgPiAwKSB7XG5cdFx0XHR0aHJvdyAnSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCc7XG5cdFx0fVxuXG5cdFx0Ly8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcblx0XHQvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG5cdFx0Ly8gcmVwcmVzZW50IG9uZSBieXRlXG5cdFx0Ly8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG5cdFx0Ly8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuXHRcdHBsYWNlSG9sZGVycyA9IGI2NC5pbmRleE9mKCc9Jyk7XG5cdFx0cGxhY2VIb2xkZXJzID0gcGxhY2VIb2xkZXJzID4gMCA/IGI2NC5sZW5ndGggLSBwbGFjZUhvbGRlcnMgOiAwO1xuXG5cdFx0Ly8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5cdFx0YXJyID0gW107Ly9uZXcgVWludDhBcnJheShiNjQubGVuZ3RoICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpO1xuXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuXHRcdGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gYjY0Lmxlbmd0aCAtIDQgOiBiNjQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuXHRcdFx0dG1wID0gKGxvb2t1cC5pbmRleE9mKGI2NFtpXSkgPDwgMTgpIHwgKGxvb2t1cC5pbmRleE9mKGI2NFtpICsgMV0pIDw8IDEyKSB8IChsb29rdXAuaW5kZXhPZihiNjRbaSArIDJdKSA8PCA2KSB8IGxvb2t1cC5pbmRleE9mKGI2NFtpICsgM10pO1xuXHRcdFx0YXJyLnB1c2goKHRtcCAmIDB4RkYwMDAwKSA+PiAxNik7XG5cdFx0XHRhcnIucHVzaCgodG1wICYgMHhGRjAwKSA+PiA4KTtcblx0XHRcdGFyci5wdXNoKHRtcCAmIDB4RkYpO1xuXHRcdH1cblxuXHRcdGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcblx0XHRcdHRtcCA9IChsb29rdXAuaW5kZXhPZihiNjRbaV0pIDw8IDIpIHwgKGxvb2t1cC5pbmRleE9mKGI2NFtpICsgMV0pID4+IDQpO1xuXHRcdFx0YXJyLnB1c2godG1wICYgMHhGRik7XG5cdFx0fSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcblx0XHRcdHRtcCA9IChsb29rdXAuaW5kZXhPZihiNjRbaV0pIDw8IDEwKSB8IChsb29rdXAuaW5kZXhPZihiNjRbaSArIDFdKSA8PCA0KSB8IChsb29rdXAuaW5kZXhPZihiNjRbaSArIDJdKSA+PiAyKTtcblx0XHRcdGFyci5wdXNoKCh0bXAgPj4gOCkgJiAweEZGKTtcblx0XHRcdGFyci5wdXNoKHRtcCAmIDB4RkYpO1xuXHRcdH1cblxuXHRcdHJldHVybiBhcnI7XG5cdH1cblxuXHRmdW5jdGlvbiB1aW50OFRvQmFzZTY0KHVpbnQ4KSB7XG5cdFx0dmFyIGksXG5cdFx0XHRleHRyYUJ5dGVzID0gdWludDgubGVuZ3RoICUgMywgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcblx0XHRcdG91dHB1dCA9IFwiXCIsXG5cdFx0XHR0ZW1wLCBsZW5ndGg7XG5cblx0XHRmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuXHRcdFx0cmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdO1xuXHRcdH07XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKTtcblx0XHRcdG91dHB1dCArPSB0cmlwbGV0VG9CYXNlNjQodGVtcCk7XG5cdFx0fVxuXG5cdFx0Ly8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuXHRcdHN3aXRjaCAoZXh0cmFCeXRlcykge1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHR0ZW1wID0gdWludDhbdWludDgubGVuZ3RoIC0gMV07XG5cdFx0XHRcdG91dHB1dCArPSBsb29rdXBbdGVtcCA+PiAyXTtcblx0XHRcdFx0b3V0cHV0ICs9IGxvb2t1cFsodGVtcCA8PCA0KSAmIDB4M0ZdO1xuXHRcdFx0XHRvdXRwdXQgKz0gJz09Jztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdHRlbXAgPSAodWludDhbdWludDgubGVuZ3RoIC0gMl0gPDwgOCkgKyAodWludDhbdWludDgubGVuZ3RoIC0gMV0pO1xuXHRcdFx0XHRvdXRwdXQgKz0gbG9va3VwW3RlbXAgPj4gMTBdO1xuXHRcdFx0XHRvdXRwdXQgKz0gbG9va3VwWyh0ZW1wID4+IDQpICYgMHgzRl07XG5cdFx0XHRcdG91dHB1dCArPSBsb29rdXBbKHRlbXAgPDwgMikgJiAweDNGXTtcblx0XHRcdFx0b3V0cHV0ICs9ICc9Jztcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXk7XG5cdG1vZHVsZS5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSB1aW50OFRvQmFzZTY0O1xufSgpKTtcblxufSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cblxuLy9cbi8vIFRoZSBzaGltcyBpbiB0aGlzIGZpbGUgYXJlIG5vdCBmdWxseSBpbXBsZW1lbnRlZCBzaGltcyBmb3IgdGhlIEVTNVxuLy8gZmVhdHVyZXMsIGJ1dCBkbyB3b3JrIGZvciB0aGUgcGFydGljdWxhciB1c2VjYXNlcyB0aGVyZSBpcyBpblxuLy8gdGhlIG90aGVyIG1vZHVsZXMuXG4vL1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLy8gQXJyYXkuaXNBcnJheSBpcyBzdXBwb3J0ZWQgaW4gSUU5XG5mdW5jdGlvbiBpc0FycmF5KHhzKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nID8gQXJyYXkuaXNBcnJheSA6IGlzQXJyYXk7XG5cbi8vIEFycmF5LnByb3RvdHlwZS5pbmRleE9mIGlzIHN1cHBvcnRlZCBpbiBJRTlcbmV4cG9ydHMuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgaWYgKHhzLmluZGV4T2YpIHJldHVybiB4cy5pbmRleE9mKHgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHggPT09IHhzW2ldKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG4vLyBBcnJheS5wcm90b3R5cGUuZmlsdGVyIGlzIHN1cHBvcnRlZCBpbiBJRTlcbmV4cG9ydHMuZmlsdGVyID0gZnVuY3Rpb24gZmlsdGVyKHhzLCBmbikge1xuICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGZuKTtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZuKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuLy8gQXJyYXkucHJvdG90eXBlLmZvckVhY2ggaXMgc3VwcG9ydGVkIGluIElFOVxuZXhwb3J0cy5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaCh4cywgZm4sIHNlbGYpIHtcbiAgaWYgKHhzLmZvckVhY2gpIHJldHVybiB4cy5mb3JFYWNoKGZuLCBzZWxmKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIGZuLmNhbGwoc2VsZiwgeHNbaV0sIGksIHhzKTtcbiAgfVxufTtcblxuLy8gQXJyYXkucHJvdG90eXBlLm1hcCBpcyBzdXBwb3J0ZWQgaW4gSUU5XG5leHBvcnRzLm1hcCA9IGZ1bmN0aW9uIG1hcCh4cywgZm4pIHtcbiAgaWYgKHhzLm1hcCkgcmV0dXJuIHhzLm1hcChmbik7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoeHMubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIG91dFtpXSA9IGZuKHhzW2ldLCBpLCB4cyk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8vIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgaXMgc3VwcG9ydGVkIGluIElFOVxuZXhwb3J0cy5yZWR1Y2UgPSBmdW5jdGlvbiByZWR1Y2UoYXJyYXksIGNhbGxiYWNrLCBvcHRfaW5pdGlhbFZhbHVlKSB7XG4gIGlmIChhcnJheS5yZWR1Y2UpIHJldHVybiBhcnJheS5yZWR1Y2UoY2FsbGJhY2ssIG9wdF9pbml0aWFsVmFsdWUpO1xuICB2YXIgdmFsdWUsIGlzVmFsdWVTZXQgPSBmYWxzZTtcblxuICBpZiAoMiA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB2YWx1ZSA9IG9wdF9pbml0aWFsVmFsdWU7XG4gICAgaXNWYWx1ZVNldCA9IHRydWU7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGwgPiBpOyArK2kpIHtcbiAgICBpZiAoYXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIGlmIChpc1ZhbHVlU2V0KSB7XG4gICAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUsIGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBhcnJheVtpXTtcbiAgICAgICAgaXNWYWx1ZVNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxuaWYgKCdhYicuc3Vic3RyKC0xKSAhPT0gJ2InKSB7XG4gIGV4cG9ydHMuc3Vic3RyID0gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbmd0aCkge1xuICAgIC8vIGRpZCB3ZSBnZXQgYSBuZWdhdGl2ZSBzdGFydCwgY2FsY3VsYXRlIGhvdyBtdWNoIGl0IGlzIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG5cbiAgICAvLyBjYWxsIHRoZSBvcmlnaW5hbCBmdW5jdGlvblxuICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW5ndGgpO1xuICB9O1xufSBlbHNlIHtcbiAgZXhwb3J0cy5zdWJzdHIgPSBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbmd0aCk7XG4gIH07XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUudHJpbSBpcyBzdXBwb3J0ZWQgaW4gSUU5XG5leHBvcnRzLnRyaW0gPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKCk7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufTtcblxuLy8gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgaXMgc3VwcG9ydGVkIGluIElFOVxuZXhwb3J0cy5iaW5kID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIHZhciBmbiA9IGFyZ3Muc2hpZnQoKTtcbiAgaWYgKGZuLmJpbmQpIHJldHVybiBmbi5iaW5kLmFwcGx5KGZuLCBhcmdzKTtcbiAgdmFyIHNlbGYgPSBhcmdzLnNoaWZ0KCk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm4uYXBwbHkoc2VsZiwgYXJncy5jb25jYXQoW0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyldKSk7XG4gIH07XG59O1xuXG4vLyBPYmplY3QuY3JlYXRlIGlzIHN1cHBvcnRlZCBpbiBJRTlcbmZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgdmFyIG9iamVjdDtcbiAgaWYgKHByb3RvdHlwZSA9PT0gbnVsbCkge1xuICAgIG9iamVjdCA9IHsgJ19fcHJvdG9fXycgOiBudWxsIH07XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBwcm90b3R5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAndHlwZW9mIHByb3RvdHlwZVsnICsgKHR5cGVvZiBwcm90b3R5cGUpICsgJ10gIT0gXFwnb2JqZWN0XFwnJ1xuICAgICAgKTtcbiAgICB9XG4gICAgdmFyIFR5cGUgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUeXBlLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICBvYmplY3QgPSBuZXcgVHlwZSgpO1xuICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QuZGVmaW5lUHJvcGVydGllcykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iamVjdCwgcHJvcGVydGllcyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cbmV4cG9ydHMuY3JlYXRlID0gdHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuY3JlYXRlIDogY3JlYXRlO1xuXG4vLyBPYmplY3Qua2V5cyBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgaXMgc3VwcG9ydGVkIGluIElFOSBob3dldmVyXG4vLyB0aGV5IGRvIHNob3cgYSBkZXNjcmlwdGlvbiBhbmQgbnVtYmVyIHByb3BlcnR5IG9uIEVycm9yIG9iamVjdHNcbmZ1bmN0aW9uIG5vdE9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICgodHlwZW9mIG9iamVjdCAhPSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmplY3QgIT0gXCJmdW5jdGlvblwiKSB8fCBvYmplY3QgPT09IG51bGwpO1xufVxuXG5mdW5jdGlvbiBrZXlzU2hpbShvYmplY3QpIHtcbiAgaWYgKG5vdE9iamVjdChvYmplY3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3RcIik7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBuYW1lKSkge1xuICAgICAgcmVzdWx0LnB1c2gobmFtZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIGdldE93blByb3BlcnR5TmFtZXMgaXMgYWxtb3N0IHRoZSBzYW1lIGFzIE9iamVjdC5rZXlzIG9uZSBrZXkgZmVhdHVyZVxuLy8gIGlzIHRoYXQgaXQgcmV0dXJucyBoaWRkZW4gcHJvcGVydGllcywgc2luY2UgdGhhdCBjYW4ndCBiZSBpbXBsZW1lbnRlZCxcbi8vICB0aGlzIGZlYXR1cmUgZ2V0cyByZWR1Y2VkIHNvIGl0IGp1c3Qgc2hvd3MgdGhlIGxlbmd0aCBwcm9wZXJ0eSBvbiBhcnJheXNcbmZ1bmN0aW9uIHByb3BlcnR5U2hpbShvYmplY3QpIHtcbiAgaWYgKG5vdE9iamVjdChvYmplY3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3RcIik7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0ga2V5c1NoaW0ob2JqZWN0KTtcbiAgaWYgKGV4cG9ydHMuaXNBcnJheShvYmplY3QpICYmIGV4cG9ydHMuaW5kZXhPZihvYmplY3QsICdsZW5ndGgnKSA9PT0gLTEpIHtcbiAgICByZXN1bHQucHVzaCgnbGVuZ3RoJyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIGtleXMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3Qua2V5cyA6IGtleXNTaGltO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgP1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA6IHByb3BlcnR5U2hpbTtcblxuaWYgKG5ldyBFcnJvcigpLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbicpKSB7XG4gIHZhciBFUlJPUl9QUk9QRVJUWV9GSUxURVIgPSBmdW5jdGlvbiAob2JqLCBhcnJheSkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEVycm9yXScpIHtcbiAgICAgIGFycmF5ID0gZXhwb3J0cy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lICE9PSAnZGVzY3JpcHRpb24nICYmIG5hbWUgIT09ICdudW1iZXInICYmIG5hbWUgIT09ICdtZXNzYWdlJztcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH07XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBFUlJPUl9QUk9QRVJUWV9GSUxURVIob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICB9O1xuICBleHBvcnRzLmdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIEVSUk9SX1BST1BFUlRZX0ZJTFRFUihvYmplY3QsIGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KSk7XG4gIH07XG59IGVsc2Uge1xuICBleHBvcnRzLmtleXMgPSBrZXlzO1xuICBleHBvcnRzLmdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzO1xufVxuXG4vLyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIC0gc3VwcG9ydGVkIGluIElFOCBidXQgb25seSBvbiBkb20gZWxlbWVudHNcbmZ1bmN0aW9uIHZhbHVlT2JqZWN0KHZhbHVlLCBrZXkpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbn1cblxuaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih7J2EnOiAxfSwgJ2EnKTtcbiAgICBleHBvcnRzLmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRTggZG9tIGVsZW1lbnQgaXNzdWUgLSB1c2UgYSB0cnkgY2F0Y2ggYW5kIGRlZmF1bHQgdG8gdmFsdWVPYmplY3RcbiAgICBleHBvcnRzLmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlT2JqZWN0KHZhbHVlLCBrZXkpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0gZWxzZSB7XG4gIGV4cG9ydHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gdmFsdWVPYmplY3Q7XG59XG5cbn0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIFVUSUxJVFlcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIHNoaW1zID0gcmVxdWlyZSgnX3NoaW1zJyk7XG52YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG5cbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cbi8vIG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBtZXNzYWdlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxuXG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XG4gIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gIHRoaXMuYWN0dWFsID0gb3B0aW9ucy5hY3R1YWw7XG4gIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjtcbiAgdGhpcy5tZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlIHx8IGdldE1lc3NhZ2UodGhpcyk7XG59O1xuXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxudXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICBpZiAodXRpbC5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTtcbiAgfVxuICBpZiAodXRpbC5pc051bWJlcih2YWx1ZSkgJiYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKSkge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIGlmICh1dGlsLmlzRnVuY3Rpb24odmFsdWUpIHx8IHV0aWwuaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB0cnVuY2F0ZShzLCBuKSB7XG4gIGlmICh1dGlsLmlzU3RyaW5nKHMpKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE1lc3NhZ2Uoc2VsZikge1xuICByZXR1cm4gdHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkoc2VsZi5hY3R1YWwsIHJlcGxhY2VyKSwgMTI4KSArICcgJyArXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcbiAgICAgICAgIHRydW5jYXRlKEpTT04uc3RyaW5naWZ5KHNlbGYuZXhwZWN0ZWQsIHJlcGxhY2VyKSwgMTI4KTtcbn1cblxuLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmRcbi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xuLy8gb3RoZXIga2V5cyB0byB0aGUgQXNzZXJ0aW9uRXJyb3IncyBjb25zdHJ1Y3RvciAtIHRoZXkgd2lsbCBiZVxuLy8gaWdub3JlZC5cblxuLy8gMy4gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZ1bmN0aW9uKSB7XG4gIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3Ioe1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0RnVuY3Rpb246IHN0YWNrU3RhcnRGdW5jdGlvblxuICB9KTtcbn1cblxuLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuXG5hc3NlcnQuZmFpbCA9IGZhaWw7XG5cbi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhZ3VhcmQuXG4vLyBhc3NlcnQub2soZ3VhcmQsIG1lc3NhZ2Vfb3B0KTtcbi8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsXG4vLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgZ3VhcmQsIG1lc3NhZ2Vfb3B0KTsuXG5cbmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5vayk7XG59XG5hc3NlcnQub2sgPSBvaztcblxuLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoXG4vLyA9PS5cbi8vIGFzc2VydC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQuZXF1YWwpO1xufTtcblxuLy8gNi4gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdCBlcXVhbFxuLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDcuIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwRXF1YWwnLCBhc3NlcnQuZGVlcEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSB7XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuXG4gIH0gZWxzZSBpZiAodXRpbC5pc0J1ZmZlcihhY3R1YWwpICYmIHV0aWwuaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgaWYgKGFjdHVhbC5sZW5ndGggIT0gZXhwZWN0ZWQubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdHVhbC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFjdHVhbFtpXSAhPT0gZXhwZWN0ZWRbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyA3LjIuIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIERhdGUgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIERhdGUgb2JqZWN0IHRoYXQgcmVmZXJzIHRvIHRoZSBzYW1lIHRpbWUuXG4gIH0gZWxzZSBpZiAodXRpbC5pc0RhdGUoYWN0dWFsKSAmJiB1dGlsLmlzRGF0ZShleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLmdldFRpbWUoKSA9PT0gZXhwZWN0ZWQuZ2V0VGltZSgpO1xuXG4gIC8vIDcuMyBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIFJlZ0V4cCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzb3VyY2UgYW5kXG4gIC8vIHByb3BlcnRpZXMgKGBnbG9iYWxgLCBgbXVsdGlsaW5lYCwgYGxhc3RJbmRleGAsIGBpZ25vcmVDYXNlYCkuXG4gIH0gZWxzZSBpZiAodXRpbC5pc1JlZ0V4cChhY3R1YWwpICYmIHV0aWwuaXNSZWdFeHAoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5zb3VyY2UgPT09IGV4cGVjdGVkLnNvdXJjZSAmJlxuICAgICAgICAgICBhY3R1YWwuZ2xvYmFsID09PSBleHBlY3RlZC5nbG9iYWwgJiZcbiAgICAgICAgICAgYWN0dWFsLm11bHRpbGluZSA9PT0gZXhwZWN0ZWQubXVsdGlsaW5lICYmXG4gICAgICAgICAgIGFjdHVhbC5sYXN0SW5kZXggPT09IGV4cGVjdGVkLmxhc3RJbmRleCAmJlxuICAgICAgICAgICBhY3R1YWwuaWdub3JlQ2FzZSA9PT0gZXhwZWN0ZWQuaWdub3JlQ2FzZTtcblxuICAvLyA3LjQuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIXV0aWwuaXNPYmplY3QoYWN0dWFsKSAmJiAhdXRpbC5pc09iamVjdChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNSBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXG4gIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuICAvLyB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG4gIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcbiAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcbiAgLy8gYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIpIHtcbiAgaWYgKHV0aWwuaXNOdWxsT3JVbmRlZmluZWQoYSkgfHwgdXRpbC5pc051bGxPclVuZGVmaW5lZChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cbiAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XG4gICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIpO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGthID0gc2hpbXMua2V5cyhhKSxcbiAgICAgICAga2IgPSBzaGltcy5rZXlzKGIpLFxuICAgICAgICBrZXksIGk7XG4gIH0gY2F0Y2ggKGUpIHsvL2hhcHBlbnMgd2hlbiBvbmUgaXMgYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlIG90aGVyIGlzbid0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZFxuICAvL35+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBrZXkgPSBrYVtpXTtcbiAgICBpZiAoIV9kZWVwRXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuLy8gYXNzZXJ0Lm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBFcXVhbCcsIGFzc2VydC5ub3REZWVwRXF1YWwpO1xuICB9XG59O1xuXG4vLyA5LiBUaGUgc3RyaWN0IGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzdHJpY3QgZXF1YWxpdHksIGFzIGRldGVybWluZWQgYnkgPT09LlxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09PScsIGFzc2VydC5zdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDEwLiBUaGUgc3RyaWN0IG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHN0cmljdCBpbmVxdWFsaXR5LCBhc1xuLy8gZGV0ZXJtaW5lZCBieSAhPT0uICBhc3NlcnQubm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT09JywgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGV4cGVjdGVkKSA9PSAnW29iamVjdCBSZWdFeHBdJykge1xuICAgIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7XG4gIH0gZWxzZSBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF90aHJvd3Moc2hvdWxkVGhyb3csIGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICB2YXIgYWN0dWFsO1xuXG4gIGlmICh1dGlsLmlzU3RyaW5nKGV4cGVjdGVkKSkge1xuICAgIG1lc3NhZ2UgPSBleHBlY3RlZDtcbiAgICBleHBlY3RlZCA9IG51bGw7XG4gIH1cblxuICB0cnkge1xuICAgIGJsb2NrKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBhY3R1YWwgPSBlO1xuICB9XG5cbiAgbWVzc2FnZSA9IChleHBlY3RlZCAmJiBleHBlY3RlZC5uYW1lID8gJyAoJyArIGV4cGVjdGVkLm5hbWUgKyAnKS4nIDogJy4nKSArXG4gICAgICAgICAgICAobWVzc2FnZSA/ICcgJyArIG1lc3NhZ2UgOiAnLicpO1xuXG4gIGlmIChzaG91bGRUaHJvdyAmJiAhYWN0dWFsKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnTWlzc2luZyBleHBlY3RlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoIXNob3VsZFRocm93ICYmIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnR290IHVud2FudGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIGlmICgoc2hvdWxkVGhyb3cgJiYgYWN0dWFsICYmIGV4cGVjdGVkICYmXG4gICAgICAhZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8ICghc2hvdWxkVGhyb3cgJiYgYWN0dWFsKSkge1xuICAgIHRocm93IGFjdHVhbDtcbiAgfVxufVxuXG4vLyAxMS4gRXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3I6XG4vLyBhc3NlcnQudGhyb3dzKGJsb2NrLCBFcnJvcl9vcHQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzLmFwcGx5KHRoaXMsIFt0cnVlXS5jb25jYXQocFNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xufTtcblxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cy5hcHBseSh0aGlzLCBbZmFsc2VdLmNvbmNhdChwU2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uKGVycikgeyBpZiAoZXJyKSB7dGhyb3cgZXJyO319O1xufSx7XCJfc2hpbXNcIjo1LFwidXRpbFwiOjd9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgc2hpbXMgPSByZXF1aXJlKCdfc2hpbXMnKTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBzaGltcy5mb3JFYWNoKGFycmF5LCBmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzKTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gc2hpbXMua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBzaGltcy5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuXG4gIHNoaW1zLmZvckVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gc2hpbXMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKHNoaW1zLmluZGV4T2YoY3R4LnNlZW4sIGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBzaGltcy5yZWR1Y2Uob3V0cHV0LCBmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gc2hpbXMuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmc7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiYgb2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXSc7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5mdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIEJ1ZmZlcjtcbn1cbmV4cG9ydHMuaXNCdWZmZXIgPSBpc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gZnVuY3Rpb24oY3Rvciwgc3VwZXJDdG9yKSB7XG4gIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICBjdG9yLnByb3RvdHlwZSA9IHNoaW1zLmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gc2hpbXMua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG59LHtcIl9zaGltc1wiOjV9XX0se30sW10pXG47O21vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJidWZmZXItYnJvd3NlcmlmeVwiKVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuIiwidmFyIGdsb2JhbD10eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge307LyoqXG4gKiBAbGljZW5zZVxuICogTG8tRGFzaCAyLjQuMiAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZGVybiAtbyAuL2Rpc3QvbG9kYXNoLmpzYFxuICogQ29weXJpZ2h0IDIwMTItMjAxMyBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS41LjIgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZSBFUzUgZW52aXJvbm1lbnRzICovXG4gIHZhciB1bmRlZmluZWQ7XG5cbiAgLyoqIFVzZWQgdG8gcG9vbCBhcnJheXMgYW5kIG9iamVjdHMgdXNlZCBpbnRlcm5hbGx5ICovXG4gIHZhciBhcnJheVBvb2wgPSBbXSxcbiAgICAgIG9iamVjdFBvb2wgPSBbXTtcblxuICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzICovXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gIC8qKiBVc2VkIHRvIHByZWZpeCBrZXlzIHRvIGF2b2lkIGlzc3VlcyB3aXRoIGBfX3Byb3RvX19gIGFuZCBwcm9wZXJ0aWVzIG9uIGBPYmplY3QucHJvdG90eXBlYCAqL1xuICB2YXIga2V5UHJlZml4ID0gK25ldyBEYXRlICsgJyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgd2hlbiBvcHRpbWl6YXRpb25zIGFyZSBlbmFibGVkIGZvciBsYXJnZSBhcnJheXMgKi9cbiAgdmFyIGxhcmdlQXJyYXlTaXplID0gNzU7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heCBzaXplIG9mIHRoZSBgYXJyYXlQb29sYCBhbmQgYG9iamVjdFBvb2xgICovXG4gIHZhciBtYXhQb29sU2l6ZSA9IDQwO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBhbmQgdGVzdCB3aGl0ZXNwYWNlICovXG4gIHZhciB3aGl0ZXNwYWNlID0gKFxuICAgIC8vIHdoaXRlc3BhY2VcbiAgICAnIFxcdFxceDBCXFxmXFx4QTBcXHVmZWZmJyArXG5cbiAgICAvLyBsaW5lIHRlcm1pbmF0b3JzXG4gICAgJ1xcblxcclxcdTIwMjhcXHUyMDI5JyArXG5cbiAgICAvLyB1bmljb2RlIGNhdGVnb3J5IFwiWnNcIiBzcGFjZSBzZXBhcmF0b3JzXG4gICAgJ1xcdTE2ODBcXHUxODBlXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMGFcXHUyMDJmXFx1MjA1ZlxcdTMwMDAnXG4gICk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZSAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIEVTNiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXG4gICAqIGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWxpdGVyYWxzLXN0cmluZy1saXRlcmFsc1xuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCByZWdleHAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMgKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdGVkIG5hbWVkIGZ1bmN0aW9ucyAqL1xuICB2YXIgcmVGdW5jTmFtZSA9IC9eXFxzKmZ1bmN0aW9uWyBcXG5cXHJcXHRdK1xcdy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggXCJpbnRlcnBvbGF0ZVwiIHRlbXBsYXRlIGRlbGltaXRlcnMgKi9cbiAgdmFyIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UgYW5kIHplcm9zIHRvIGJlIHJlbW92ZWQgKi9cbiAgdmFyIHJlTGVhZGluZ1NwYWNlc0FuZFplcm9zID0gUmVnRXhwKCdeWycgKyB3aGl0ZXNwYWNlICsgJ10qMCsoPz0uJCknKTtcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMgKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgZnVuY3Rpb25zIGNvbnRhaW5pbmcgYSBgdGhpc2AgcmVmZXJlbmNlICovXG4gIHZhciByZVRoaXMgPSAvXFxidGhpc1xcYi87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdFxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMgKi9cbiAgdmFyIGNvbnRleHRQcm9wcyA9IFtcbiAgICAnQXJyYXknLCAnQm9vbGVhbicsICdEYXRlJywgJ0Z1bmN0aW9uJywgJ01hdGgnLCAnTnVtYmVyJywgJ09iamVjdCcsXG4gICAgJ1JlZ0V4cCcsICdTdHJpbmcnLCAnXycsICdhdHRhY2hFdmVudCcsICdjbGVhclRpbWVvdXQnLCAnaXNGaW5pdGUnLCAnaXNOYU4nLFxuICAgICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkgKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IDA7XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCBzaG9ydGN1dHMgKi9cbiAgdmFyIGFyZ3NDbGFzcyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlDbGFzcyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBib29sQ2xhc3MgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlQ2xhc3MgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBmdW5jQ2xhc3MgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgbnVtYmVyQ2xhc3MgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG9iamVjdENsYXNzID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICByZWdleHBDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc3RyaW5nQ2xhc3MgPSAnW29iamVjdCBTdHJpbmddJztcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBvYmplY3QgY2xhc3NpZmljYXRpb25zIHRoYXQgYF8uY2xvbmVgIHN1cHBvcnRzICovXG4gIHZhciBjbG9uZWFibGVDbGFzc2VzID0ge307XG4gIGNsb25lYWJsZUNsYXNzZXNbZnVuY0NsYXNzXSA9IGZhbHNlO1xuICBjbG9uZWFibGVDbGFzc2VzW2FyZ3NDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW2FycmF5Q2xhc3NdID1cbiAgY2xvbmVhYmxlQ2xhc3Nlc1tib29sQ2xhc3NdID0gY2xvbmVhYmxlQ2xhc3Nlc1tkYXRlQ2xhc3NdID1cbiAgY2xvbmVhYmxlQ2xhc3Nlc1tudW1iZXJDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW29iamVjdENsYXNzXSA9XG4gIGNsb25lYWJsZUNsYXNzZXNbcmVnZXhwQ2xhc3NdID0gY2xvbmVhYmxlQ2xhc3Nlc1tzdHJpbmdDbGFzc10gPSB0cnVlO1xuXG4gIC8qKiBVc2VkIGFzIGFuIGludGVybmFsIGBfLmRlYm91bmNlYCBvcHRpb25zIG9iamVjdCAqL1xuICB2YXIgZGVib3VuY2VPcHRpb25zID0ge1xuICAgICdsZWFkaW5nJzogZmFsc2UsXG4gICAgJ21heFdhaXQnOiAwLFxuICAgICd0cmFpbGluZyc6IGZhbHNlXG4gIH07XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIGBfX2JpbmREYXRhX19gICovXG4gIHZhciBkZXNjcmlwdG9yID0ge1xuICAgICdjb25maWd1cmFibGUnOiBmYWxzZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IG51bGwsXG4gICAgJ3dyaXRhYmxlJzogZmFsc2VcbiAgfTtcblxuICAvKiogVXNlZCB0byBkZXRlcm1pbmUgaWYgdmFsdWVzIGFyZSBvZiB0aGUgbGFuZ3VhZ2UgdHlwZSBPYmplY3QgKi9cbiAgdmFyIG9iamVjdFR5cGVzID0ge1xuICAgICdib29sZWFuJzogZmFsc2UsXG4gICAgJ2Z1bmN0aW9uJzogdHJ1ZSxcbiAgICAnb2JqZWN0JzogdHJ1ZSxcbiAgICAnbnVtYmVyJzogZmFsc2UsXG4gICAgJ3N0cmluZyc6IGZhbHNlLFxuICAgICd1bmRlZmluZWQnOiBmYWxzZVxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzICovXG4gIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcdCc6ICd0JyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKi9cbiAgdmFyIHJvb3QgPSAob2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93KSB8fCB0aGlzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AgKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gb2JqZWN0VHlwZXNbdHlwZW9mIGV4cG9ydHNdICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAgKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYCAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cyAmJiBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlIGFuZCB1c2UgaXQgYXMgYHJvb3RgICovXG4gIHZhciBmcmVlR2xvYmFsID0gb2JqZWN0VHlwZXNbdHlwZW9mIGdsb2JhbF0gJiYgZ2xvYmFsO1xuICBpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpKSB7XG4gICAgcm9vdCA9IGZyZWVHbG9iYWw7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBiaW5hcnkgc2VhcmNoZXNcbiAgICogb3IgYGZyb21JbmRleGAgY29uc3RyYWludHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUgb3IgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gKGZyb21JbmRleCB8fCAwKSAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb250YWluc2AgZm9yIGNhY2hlIG9iamVjdHMgdGhhdCBtaW1pY3MgdGhlIHJldHVyblxuICAgKiBzaWduYXR1cmUgb2YgYF8uaW5kZXhPZmAgYnkgcmV0dXJuaW5nIGAwYCBpZiB0aGUgdmFsdWUgaXMgZm91bmQsIGVsc2UgYC0xYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgMGAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIGNhY2hlID0gY2FjaGUuY2FjaGU7XG5cbiAgICBpZiAodHlwZSA9PSAnYm9vbGVhbicgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlW3ZhbHVlXSA/IDAgOiAtMTtcbiAgICB9XG4gICAgaWYgKHR5cGUgIT0gJ251bWJlcicgJiYgdHlwZSAhPSAnc3RyaW5nJykge1xuICAgICAgdHlwZSA9ICdvYmplY3QnO1xuICAgIH1cbiAgICB2YXIga2V5ID0gdHlwZSA9PSAnbnVtYmVyJyA/IHZhbHVlIDoga2V5UHJlZml4ICsgdmFsdWU7XG4gICAgY2FjaGUgPSAoY2FjaGUgPSBjYWNoZVt0eXBlXSkgJiYgY2FjaGVba2V5XTtcblxuICAgIHJldHVybiB0eXBlID09ICdvYmplY3QnXG4gICAgICA/IChjYWNoZSAmJiBiYXNlSW5kZXhPZihjYWNoZSwgdmFsdWUpID4gLTEgPyAwIDogLTEpXG4gICAgICA6IChjYWNoZSA/IDAgOiAtMSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGdpdmVuIHZhbHVlIHRvIHRoZSBjb3JyZXNwb25kaW5nIGNhY2hlIG9iamVjdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYWRkIHRvIHRoZSBjYWNoZS5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlUHVzaCh2YWx1ZSkge1xuICAgIHZhciBjYWNoZSA9IHRoaXMuY2FjaGUsXG4gICAgICAgIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PSAnYm9vbGVhbicgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgY2FjaGVbdmFsdWVdID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGUgIT0gJ251bWJlcicgJiYgdHlwZSAhPSAnc3RyaW5nJykge1xuICAgICAgICB0eXBlID0gJ29iamVjdCc7XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdHlwZSA9PSAnbnVtYmVyJyA/IHZhbHVlIDoga2V5UHJlZml4ICsgdmFsdWUsXG4gICAgICAgICAgdHlwZUNhY2hlID0gY2FjaGVbdHlwZV0gfHwgKGNhY2hlW3R5cGVdID0ge30pO1xuXG4gICAgICBpZiAodHlwZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAodHlwZUNhY2hlW2tleV0gfHwgKHR5cGVDYWNoZVtrZXldID0gW10pKS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGVDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5tYXhgIGFuZCBgXy5taW5gIGFzIHRoZSBkZWZhdWx0IGNhbGxiYWNrIHdoZW4gYSBnaXZlblxuICAgKiBjb2xsZWN0aW9uIGlzIGEgc3RyaW5nIHZhbHVlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIGNoYXJhY3RlciB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2RlIHVuaXQgb2YgZ2l2ZW4gY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhckF0Q2FsbGJhY2sodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBzb3J0QnlgIHRvIGNvbXBhcmUgdHJhbnNmb3JtZWQgYGNvbGxlY3Rpb25gIGVsZW1lbnRzLCBzdGFibGUgc29ydGluZ1xuICAgKiB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBjb21wYXJlIHRvIGBiYC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb21wYXJlIHRvIGBhYC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3Igb2YgYDFgIG9yIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKGEsIGIpIHtcbiAgICB2YXIgYWMgPSBhLmNyaXRlcmlhLFxuICAgICAgICBiYyA9IGIuY3JpdGVyaWEsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFjLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhY1tpbmRleF0sXG4gICAgICAgICAgb3RoZXIgPSBiY1tpbmRleF07XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgaWYgKHZhbHVlID4gb3RoZXIgfHwgdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIDwgb3RoZXIgfHwgdHlwZW9mIG90aGVyID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byByZXR1cm4gdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgLy8gYGFgIGFuZCBgYmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgLy9cbiAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgIC8vIFNlZSBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MFxuICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY2FjaGUgb2JqZWN0IHRvIG9wdGltaXplIGxpbmVhciBzZWFyY2hlcyBvZiBsYXJnZSBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICogQHJldHVybnMge251bGx8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBvYmplY3Qgb3IgYG51bGxgIGlmIGNhY2hpbmcgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQ2FjaGUoYXJyYXkpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBmaXJzdCA9IGFycmF5WzBdLFxuICAgICAgICBtaWQgPSBhcnJheVsobGVuZ3RoIC8gMikgfCAwXSxcbiAgICAgICAgbGFzdCA9IGFycmF5W2xlbmd0aCAtIDFdO1xuXG4gICAgaWYgKGZpcnN0ICYmIHR5cGVvZiBmaXJzdCA9PSAnb2JqZWN0JyAmJlxuICAgICAgICBtaWQgJiYgdHlwZW9mIG1pZCA9PSAnb2JqZWN0JyAmJiBsYXN0ICYmIHR5cGVvZiBsYXN0ID09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBjYWNoZSA9IGdldE9iamVjdCgpO1xuICAgIGNhY2hlWydmYWxzZSddID0gY2FjaGVbJ251bGwnXSA9IGNhY2hlWyd0cnVlJ10gPSBjYWNoZVsndW5kZWZpbmVkJ10gPSBmYWxzZTtcblxuICAgIHZhciByZXN1bHQgPSBnZXRPYmplY3QoKTtcbiAgICByZXN1bHQuYXJyYXkgPSBhcnJheTtcbiAgICByZXN1bHQuY2FjaGUgPSBjYWNoZTtcbiAgICByZXN1bHQucHVzaCA9IGNhY2hlUHVzaDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHQucHVzaChhcnJheVtpbmRleF0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYHRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkXG4gICAqIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW21hdGNoXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGFycmF5IGZyb20gdGhlIGFycmF5IHBvb2wgb3IgY3JlYXRlcyBhIG5ldyBvbmUgaWYgdGhlIHBvb2wgaXMgZW1wdHkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IGZyb20gdGhlIHBvb2wuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRBcnJheSgpIHtcbiAgICByZXR1cm4gYXJyYXlQb29sLnBvcCgpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gb2JqZWN0IGZyb20gdGhlIG9iamVjdCBwb29sIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGlmIHRoZSBwb29sIGlzIGVtcHR5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2JqZWN0IGZyb20gdGhlIHBvb2wuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRPYmplY3QoKSB7XG4gICAgcmV0dXJuIG9iamVjdFBvb2wucG9wKCkgfHwge1xuICAgICAgJ2FycmF5JzogbnVsbCxcbiAgICAgICdjYWNoZSc6IG51bGwsXG4gICAgICAnY3JpdGVyaWEnOiBudWxsLFxuICAgICAgJ2ZhbHNlJzogZmFsc2UsXG4gICAgICAnaW5kZXgnOiAwLFxuICAgICAgJ251bGwnOiBmYWxzZSxcbiAgICAgICdudW1iZXInOiBudWxsLFxuICAgICAgJ29iamVjdCc6IG51bGwsXG4gICAgICAncHVzaCc6IG51bGwsXG4gICAgICAnc3RyaW5nJzogbnVsbCxcbiAgICAgICd0cnVlJzogZmFsc2UsXG4gICAgICAndW5kZWZpbmVkJzogZmFsc2UsXG4gICAgICAndmFsdWUnOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyB0aGUgZ2l2ZW4gYXJyYXkgYmFjayB0byB0aGUgYXJyYXkgcG9vbC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gcmVsZWFzZS5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbGVhc2VBcnJheShhcnJheSkge1xuICAgIGFycmF5Lmxlbmd0aCA9IDA7XG4gICAgaWYgKGFycmF5UG9vbC5sZW5ndGggPCBtYXhQb29sU2l6ZSkge1xuICAgICAgYXJyYXlQb29sLnB1c2goYXJyYXkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyB0aGUgZ2l2ZW4gb2JqZWN0IGJhY2sgdG8gdGhlIG9iamVjdCBwb29sLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byByZWxlYXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVsZWFzZU9iamVjdChvYmplY3QpIHtcbiAgICB2YXIgY2FjaGUgPSBvYmplY3QuY2FjaGU7XG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICByZWxlYXNlT2JqZWN0KGNhY2hlKTtcbiAgICB9XG4gICAgb2JqZWN0LmFycmF5ID0gb2JqZWN0LmNhY2hlID0gb2JqZWN0LmNyaXRlcmlhID0gb2JqZWN0Lm9iamVjdCA9IG9iamVjdC5udW1iZXIgPSBvYmplY3Quc3RyaW5nID0gb2JqZWN0LnZhbHVlID0gbnVsbDtcbiAgICBpZiAob2JqZWN0UG9vbC5sZW5ndGggPCBtYXhQb29sU2l6ZSkge1xuICAgICAgb2JqZWN0UG9vbC5wdXNoKG9iamVjdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNsaWNlcyB0aGUgYGNvbGxlY3Rpb25gIGZyb20gdGhlIGBzdGFydGAgaW5kZXggdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLFxuICAgKiB0aGUgYGVuZGAgaW5kZXguXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBpbnN0ZWFkIG9mIGBBcnJheSNzbGljZWAgdG8gc3VwcG9ydCBub2RlIGxpc3RzXG4gICAqIGluIElFIDwgOSBhbmQgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmUgcmV0dXJuZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzbGljZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBpbmRleC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIGluZGV4LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgc3RhcnQgfHwgKHN0YXJ0ID0gMCk7XG4gICAgaWYgKHR5cGVvZiBlbmQgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVuZCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICB9XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0IHx8IDAsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCA8IDAgPyAwIDogbGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBnaXZlbiBjb250ZXh0IG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIC8vIEF2b2lkIGlzc3VlcyB3aXRoIHNvbWUgRVMzIGVudmlyb25tZW50cyB0aGF0IGF0dGVtcHQgdG8gdXNlIHZhbHVlcywgbmFtZWRcbiAgICAvLyBhZnRlciBidWlsdC1pbiBjb25zdHJ1Y3RvcnMgbGlrZSBgT2JqZWN0YCwgZm9yIHRoZSBjcmVhdGlvbiBvZiBsaXRlcmFscy5cbiAgICAvLyBFUzUgY2xlYXJzIHRoaXMgdXAgYnkgc3RhdGluZyB0aGF0IGxpdGVyYWxzIG11c3QgdXNlIGJ1aWx0LWluIGNvbnN0cnVjdG9ycy5cbiAgICAvLyBTZWUgaHR0cDovL2VzNS5naXRodWIuaW8vI3gxMS4xLjUuXG4gICAgY29udGV4dCA9IGNvbnRleHQgPyBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKSA6IHJvb3Q7XG5cbiAgICAvKiogTmF0aXZlIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMgKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBCb29sZWFuID0gY29udGV4dC5Cb29sZWFuLFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE51bWJlciA9IGNvbnRleHQuTnVtYmVyLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGBBcnJheWAgbWV0aG9kIHJlZmVyZW5jZXMuXG4gICAgICpcbiAgICAgKiBOb3JtYWxseSBgQXJyYXkucHJvdG90eXBlYCB3b3VsZCBzdWZmaWNlLCBob3dldmVyLCB1c2luZyBhbiBhcnJheSBsaXRlcmFsXG4gICAgICogYXZvaWRzIGlzc3VlcyBpbiBOYXJ3aGFsLlxuICAgICAqL1xuICAgIHZhciBhcnJheVJlZiA9IFtdO1xuXG4gICAgLyoqIFVzZWQgZm9yIG5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcyAqL1xuICAgIHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBub0NvbmZsaWN0YCAqL1xuICAgIHZhciBvbGREYXNoID0gY29udGV4dC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgaW50ZXJuYWwgW1tDbGFzc11dIG9mIHZhbHVlcyAqL1xuICAgIHZhciB0b1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZSAqL1xuICAgIHZhciByZU5hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgU3RyaW5nKHRvU3RyaW5nKVxuICAgICAgICAucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKVxuICAgICAgICAucmVwbGFjZSgvdG9TdHJpbmd8IGZvciBbXlxcXV0rL2csICcuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogTmF0aXZlIG1ldGhvZCBzaG9ydGN1dHMgKi9cbiAgICB2YXIgY2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgY2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgZm5Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyxcbiAgICAgICAgZ2V0UHJvdG90eXBlT2YgPSBpc05hdGl2ZShnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZikgJiYgZ2V0UHJvdG90eXBlT2YsXG4gICAgICAgIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHksXG4gICAgICAgIHB1c2ggPSBhcnJheVJlZi5wdXNoLFxuICAgICAgICBzZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0LFxuICAgICAgICBzcGxpY2UgPSBhcnJheVJlZi5zcGxpY2UsXG4gICAgICAgIHVuc2hpZnQgPSBhcnJheVJlZi51bnNoaWZ0O1xuXG4gICAgLyoqIFVzZWQgdG8gc2V0IG1ldGEgZGF0YSBvbiBmdW5jdGlvbnMgKi9cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAvLyBJRSA4IG9ubHkgYWNjZXB0cyBET00gZWxlbWVudHNcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBvID0ge30sXG4gICAgICAgICAgICBmdW5jID0gaXNOYXRpdmUoZnVuYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgJiYgZnVuYyxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMobywgbywgbykgJiYgZnVuYztcbiAgICAgIH0gY2F0Y2goZSkgeyB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0oKSk7XG5cbiAgICAvKiBOYXRpdmUgbWV0aG9kIHNob3J0Y3V0cyBmb3IgbWV0aG9kcyB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcyAqL1xuICAgIHZhciBuYXRpdmVDcmVhdGUgPSBpc05hdGl2ZShuYXRpdmVDcmVhdGUgPSBPYmplY3QuY3JlYXRlKSAmJiBuYXRpdmVDcmVhdGUsXG4gICAgICAgIG5hdGl2ZUlzQXJyYXkgPSBpc05hdGl2ZShuYXRpdmVJc0FycmF5ID0gQXJyYXkuaXNBcnJheSkgJiYgbmF0aXZlSXNBcnJheSxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVJc05hTiA9IGNvbnRleHQuaXNOYU4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBpc05hdGl2ZShuYXRpdmVLZXlzID0gT2JqZWN0LmtleXMpICYmIG5hdGl2ZUtleXMsXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCBhIGJ1aWx0LWluIGNvbnN0cnVjdG9yIGJ5IFtbQ2xhc3NdXSAqL1xuICAgIHZhciBjdG9yQnlDbGFzcyA9IHt9O1xuICAgIGN0b3JCeUNsYXNzW2FycmF5Q2xhc3NdID0gQXJyYXk7XG4gICAgY3RvckJ5Q2xhc3NbYm9vbENsYXNzXSA9IEJvb2xlYW47XG4gICAgY3RvckJ5Q2xhc3NbZGF0ZUNsYXNzXSA9IERhdGU7XG4gICAgY3RvckJ5Q2xhc3NbZnVuY0NsYXNzXSA9IEZ1bmN0aW9uO1xuICAgIGN0b3JCeUNsYXNzW29iamVjdENsYXNzXSA9IE9iamVjdDtcbiAgICBjdG9yQnlDbGFzc1tudW1iZXJDbGFzc10gPSBOdW1iZXI7XG4gICAgY3RvckJ5Q2xhc3NbcmVnZXhwQ2xhc3NdID0gUmVnRXhwO1xuICAgIGN0b3JCeUNsYXNzW3N0cmluZ0NsYXNzXSA9IFN0cmluZztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyB0aGUgZ2l2ZW4gdmFsdWUgdG8gZW5hYmxlIGludHVpdGl2ZVxuICAgICAqIG1ldGhvZCBjaGFpbmluZy5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIExvLURhc2ggbWV0aG9kcywgd3JhcHBlcnMgYWxzbyBoYXZlIHRoZSBmb2xsb3dpbmcgYEFycmF5YCBtZXRob2RzOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGByZXZlcnNlYCwgYHNoaWZ0YCwgYHNsaWNlYCwgYHNvcnRgLCBgc3BsaWNlYCxcbiAgICAgKiBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgZnVuY3Rpb25zIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXNzaWduYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNoYWluYCwgYGNvbXBhY3RgLFxuICAgICAqIGBjb21wb3NlYCwgYGNvbmNhdGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsIGBjcmVhdGVDYWxsYmFja2AsIGBjdXJyeWAsXG4gICAgICogYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmVyYCwgYGRlbGF5YCwgYGRpZmZlcmVuY2VgLCBgZmlsdGVyYCwgYGZsYXR0ZW5gLFxuICAgICAqIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsXG4gICAgICogYGZ1bmN0aW9uc2AsIGBncm91cEJ5YCwgYGluZGV4QnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW52ZXJ0YCxcbiAgICAgKiBgaW52b2tlYCwgYGtleXNgLCBgbWFwYCwgYG1heGAsIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1pbmAsIGBvYmplY3RgLCBgb21pdGAsXG4gICAgICogYG9uY2VgLCBgcGFpcnNgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGlja2AsIGBwbHVja2AsIGBwdWxsYCwgYHB1c2hgLFxuICAgICAqIGByYW5nZWAsIGByZWplY3RgLCBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzaHVmZmxlYCwgYHNsaWNlYCwgYHNvcnRgLFxuICAgICAqIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aW1lc2AsIGB0b0FycmF5YCwgYHRyYW5zZm9ybWAsXG4gICAgICogYHVuaW9uYCwgYHVuaXFgLCBgdW5zaGlmdGAsIGB1bnppcGAsIGB2YWx1ZXNgLCBgd2hlcmVgLCBgd2l0aG91dGAsIGB3cmFwYCxcbiAgICAgKiBhbmQgYHppcGBcbiAgICAgKlxuICAgICAqIFRoZSBub24tY2hhaW5hYmxlIHdyYXBwZXIgZnVuY3Rpb25zIGFyZTpcbiAgICAgKiBgY2xvbmVgLCBgY2xvbmVEZWVwYCwgYGNvbnRhaW5zYCwgYGVzY2FwZWAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsXG4gICAgICogYGZpbmRLZXlgLCBgZmluZExhc3RgLCBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBoYXNgLCBgaWRlbnRpdHlgLFxuICAgICAqIGBpbmRleE9mYCwgYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNCb29sZWFuYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLFxuICAgICAqIGBpc0VtcHR5YCwgYGlzRXF1YWxgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc05hTmAsIGBpc051bGxgLCBgaXNOdW1iZXJgLFxuICAgICAqIGBpc09iamVjdGAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGpvaW5gLFxuICAgICAqIGBsYXN0SW5kZXhPZmAsIGBtaXhpbmAsIGBub0NvbmZsaWN0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCxcbiAgICAgKiBgcmVkdWNlUmlnaHRgLCBgcmVzdWx0YCwgYHNoaWZ0YCwgYHNpemVgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBydW5JbkNvbnRleHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGFuZCBgdmFsdWVgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBmdW5jdGlvbnMgYGZpcnN0YCBhbmQgYGxhc3RgIHJldHVybiB3cmFwcGVkIHZhbHVlcyB3aGVuIGBuYCBpc1xuICAgICAqIHByb3ZpZGVkLCBvdGhlcndpc2UgdGhleSByZXR1cm4gdW53cmFwcGVkIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluaW5nIGNhbiBiZSBlbmFibGVkIGJ5IHVzaW5nIHRoZSBgXy5jaGFpbmAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBDaGFpbmluZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gcmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWVcbiAgICAgKiB3cmFwcGVkLnJlZHVjZShmdW5jdGlvbihzdW0sIG51bSkge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG51bTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyByZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZVxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoZnVuY3Rpb24obnVtKSB7XG4gICAgICogICByZXR1cm4gbnVtICogbnVtO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICAvLyBkb24ndCB3cmFwIGlmIGFscmVhZHkgd3JhcHBlZCwgZXZlbiBpZiB3cmFwcGVkIGJ5IGEgZGlmZmVyZW50IGBsb2Rhc2hgIGNvbnN0cnVjdG9yXG4gICAgICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpXG4gICAgICAgPyB2YWx1ZVxuICAgICAgIDogbmV3IGxvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgZmFzdCBwYXRoIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNoYWluQWxsIEEgZmxhZyB0byBlbmFibGUgY2hhaW5pbmcgZm9yIGFsbCBtZXRob2RzXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgfVxuICAgIC8vIGVuc3VyZSBgbmV3IGxvZGFzaFdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBsb2Rhc2hgXG4gICAgbG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBsb2Rhc2gucHJvdG90eXBlO1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHVzZWQgdG8gZmxhZyBlbnZpcm9ubWVudHMgZmVhdHVyZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgKi9cbiAgICB2YXIgc3VwcG9ydCA9IGxvZGFzaC5zdXBwb3J0ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgaWYgZnVuY3Rpb25zIGNhbiBiZSBkZWNvbXBpbGVkIGJ5IGBGdW5jdGlvbiN0b1N0cmluZ2BcbiAgICAgKiAoYWxsIGJ1dCBQUzMgYW5kIG9sZGVyIE9wZXJhIG1vYmlsZSBicm93c2VycyAmIGF2b2lkZWQgaW4gV2luZG93cyA4IGFwcHMpLlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKi9cbiAgICBzdXBwb3J0LmZ1bmNEZWNvbXAgPSAhaXNOYXRpdmUoY29udGV4dC5XaW5SVEVycm9yKSAmJiByZVRoaXMudGVzdChydW5JbkNvbnRleHQpO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZWN0IGlmIGBGdW5jdGlvbiNuYW1lYCBpcyBzdXBwb3J0ZWQgKGFsbCBidXQgSUUpLlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKi9cbiAgICBzdXBwb3J0LmZ1bmNOYW1lcyA9IHR5cGVvZiBGdW5jdGlvbi5uYW1lID09ICdzdHJpbmcnO1xuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBMby1EYXNoIGFyZSBzaW1pbGFyIHRvIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKS4gQ2hhbmdlIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlXG4gICAgICogZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIFJlZ0V4cFxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogLzwlLShbXFxzXFxTXSs/KSU+L2csXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgUmVnRXhwXG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IC88JShbXFxzXFxTXSs/KSU+L2csXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgUmVnRXhwXG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgT2JqZWN0XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSBGdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5iaW5kYCB0aGF0IGNyZWF0ZXMgdGhlIGJvdW5kIGZ1bmN0aW9uIGFuZFxuICAgICAqIHNldHMgaXRzIG1ldGEgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYmluZERhdGEgVGhlIGJpbmQgZGF0YSBhcnJheS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQmluZChiaW5kRGF0YSkge1xuICAgICAgdmFyIGZ1bmMgPSBiaW5kRGF0YVswXSxcbiAgICAgICAgICBwYXJ0aWFsQXJncyA9IGJpbmREYXRhWzJdLFxuICAgICAgICAgIHRoaXNBcmcgPSBiaW5kRGF0YVs0XTtcblxuICAgICAgZnVuY3Rpb24gYm91bmQoKSB7XG4gICAgICAgIC8vIGBGdW5jdGlvbiNiaW5kYCBzcGVjXG4gICAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMy40LjVcbiAgICAgICAgaWYgKHBhcnRpYWxBcmdzKSB7XG4gICAgICAgICAgLy8gYXZvaWQgYGFyZ3VtZW50c2Agb2JqZWN0IGRlb3B0aW1pemF0aW9ucyBieSB1c2luZyBgc2xpY2VgIGluc3RlYWRcbiAgICAgICAgICAvLyBvZiBgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGxgIGFuZCBub3QgYXNzaWduaW5nIGBhcmd1bWVudHNgIHRvIGFcbiAgICAgICAgICAvLyB2YXJpYWJsZSBhcyBhIHRlcm5hcnkgZXhwcmVzc2lvblxuICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UocGFydGlhbEFyZ3MpO1xuICAgICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvclxuICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMlxuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGBuZXcgYm91bmRgIGlzIGFuIGluc3RhbmNlIG9mIGBmdW5jYFxuICAgICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoZnVuYy5wcm90b3R5cGUpLFxuICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzIHx8IGFyZ3VtZW50cyk7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzIHx8IGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBzZXRCaW5kRGF0YShib3VuZCwgYmluZERhdGEpO1xuICAgICAgcmV0dXJuIGJvdW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCB3aXRob3V0IGFyZ3VtZW50IGp1Z2dsaW5nIG9yIHN1cHBvcnRcbiAgICAgKiBmb3IgYHRoaXNBcmdgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcD1mYWxzZV0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyBjbG9uZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBpc0RlZXAsIGNhbGxiYWNrLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaW5zcGVjdCBbW0NsYXNzXV1cbiAgICAgIHZhciBpc09iaiA9IGlzT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmIChpc09iaikge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICAgIGlmICghY2xvbmVhYmxlQ2xhc3Nlc1tjbGFzc05hbWVdKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdG9yID0gY3RvckJ5Q2xhc3NbY2xhc3NOYW1lXTtcbiAgICAgICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgICAgICBjYXNlIGJvb2xDbGFzczpcbiAgICAgICAgICBjYXNlIGRhdGVDbGFzczpcbiAgICAgICAgICAgIHJldHVybiBuZXcgY3RvcigrdmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSBudW1iZXJDbGFzczpcbiAgICAgICAgICBjYXNlIHN0cmluZ0NsYXNzOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKHZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgcmVnZXhwQ2xhc3M6XG4gICAgICAgICAgICByZXN1bHQgPSBjdG9yKHZhbHVlLnNvdXJjZSwgcmVGbGFncy5leGVjKHZhbHVlKSk7XG4gICAgICAgICAgICByZXN1bHQubGFzdEluZGV4ID0gdmFsdWUubGFzdEluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIC8vIGNoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gY29ycmVzcG9uZGluZyBjbG9uZVxuICAgICAgICB2YXIgaW5pdGVkU3RhY2sgPSAhc3RhY2tBO1xuICAgICAgICBzdGFja0EgfHwgKHN0YWNrQSA9IGdldEFycmF5KCkpO1xuICAgICAgICBzdGFja0IgfHwgKHN0YWNrQiA9IGdldEFycmF5KCkpO1xuXG4gICAgICAgIHZhciBsZW5ndGggPSBzdGFja0EubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja0JbbGVuZ3RoXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gaXNBcnIgPyBjdG9yKHZhbHVlLmxlbmd0aCkgOiB7fTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBpc0FyciA/IHNsaWNlKHZhbHVlKSA6IGFzc2lnbih7fSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8gYWRkIGFycmF5IHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYFxuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnaW5kZXgnKSkge1xuICAgICAgICAgIHJlc3VsdC5pbmRleCA9IHZhbHVlLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnaW5wdXQnKSkge1xuICAgICAgICAgIHJlc3VsdC5pbnB1dCA9IHZhbHVlLmlucHV0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBleGl0IGZvciBzaGFsbG93IGNsb25lXG4gICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gYWRkIHRoZSBzb3VyY2UgdmFsdWUgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzXG4gICAgICAvLyBhbmQgYXNzb2NpYXRlIGl0IHdpdGggaXRzIGNsb25lXG4gICAgICBzdGFja0EucHVzaCh2YWx1ZSk7XG4gICAgICBzdGFja0IucHVzaChyZXN1bHQpO1xuXG4gICAgICAvLyByZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpXG4gICAgICAoaXNBcnIgPyBmb3JFYWNoIDogZm9yT3duKSh2YWx1ZSwgZnVuY3Rpb24ob2JqVmFsdWUsIGtleSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGJhc2VDbG9uZShvYmpWYWx1ZSwgaXNEZWVwLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChpbml0ZWRTdGFjaykge1xuICAgICAgICByZWxlYXNlQXJyYXkoc3RhY2tBKTtcbiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QocHJvdG90eXBlKSA/IG5hdGl2ZUNyZWF0ZShwcm90b3R5cGUpIDoge307XG4gICAgfVxuICAgIC8vIGZhbGxiYWNrIGZvciBicm93c2VycyB3aXRob3V0IGBPYmplY3QuY3JlYXRlYFxuICAgIGlmICghbmF0aXZlQ3JlYXRlKSB7XG4gICAgICBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICBmdW5jdGlvbiBPYmplY3QoKSB7fVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHByb3RvdHlwZSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0IHx8IGNvbnRleHQuT2JqZWN0KCk7XG4gICAgICAgIH07XG4gICAgICB9KCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZUNhbGxiYWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNyZWF0aW5nXG4gICAgICogXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPWlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBjYWxsYmFjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyZ0NvdW50XSBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0aGUgY2FsbGJhY2sgYWNjZXB0cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ3JlYXRlQ2FsbGJhY2soZnVuYywgdGhpc0FyZywgYXJnQ291bnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIC8vIGV4aXQgZWFybHkgZm9yIG5vIGB0aGlzQXJnYCBvciBhbHJlYWR5IGJvdW5kIGJ5IGBGdW5jdGlvbiNiaW5kYFxuICAgICAgaWYgKHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnIHx8ICEoJ3Byb3RvdHlwZScgaW4gZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9XG4gICAgICB2YXIgYmluZERhdGEgPSBmdW5jLl9fYmluZERhdGFfXztcbiAgICAgIGlmICh0eXBlb2YgYmluZERhdGEgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHN1cHBvcnQuZnVuY05hbWVzKSB7XG4gICAgICAgICAgYmluZERhdGEgPSAhZnVuYy5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGJpbmREYXRhID0gYmluZERhdGEgfHwgIXN1cHBvcnQuZnVuY0RlY29tcDtcbiAgICAgICAgaWYgKCFiaW5kRGF0YSkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBmblRvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgICAgaWYgKCFzdXBwb3J0LmZ1bmNOYW1lcykge1xuICAgICAgICAgICAgYmluZERhdGEgPSAhcmVGdW5jTmFtZS50ZXN0KHNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghYmluZERhdGEpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrcyBpZiBgZnVuY2AgcmVmZXJlbmNlcyB0aGUgYHRoaXNgIGtleXdvcmQgYW5kIHN0b3JlcyB0aGUgcmVzdWx0XG4gICAgICAgICAgICBiaW5kRGF0YSA9IHJlVGhpcy50ZXN0KHNvdXJjZSk7XG4gICAgICAgICAgICBzZXRCaW5kRGF0YShmdW5jLCBiaW5kRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBleGl0IGVhcmx5IGlmIHRoZXJlIGFyZSBubyBgdGhpc2AgcmVmZXJlbmNlcyBvciBgZnVuY2AgaXMgYm91bmRcbiAgICAgIGlmIChiaW5kRGF0YSA9PT0gZmFsc2UgfHwgKGJpbmREYXRhICE9PSB0cnVlICYmIGJpbmREYXRhWzFdICYgMSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGFyZ0NvdW50KSB7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGEsIGIpO1xuICAgICAgICB9O1xuICAgICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJpbmQoZnVuYywgdGhpc0FyZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGNyZWF0ZVdyYXBwZXJgIHRoYXQgY3JlYXRlcyB0aGUgd3JhcHBlciBhbmRcbiAgICAgKiBzZXRzIGl0cyBtZXRhIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGJpbmREYXRhIFRoZSBiaW5kIGRhdGEgYXJyYXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNyZWF0ZVdyYXBwZXIoYmluZERhdGEpIHtcbiAgICAgIHZhciBmdW5jID0gYmluZERhdGFbMF0sXG4gICAgICAgICAgYml0bWFzayA9IGJpbmREYXRhWzFdLFxuICAgICAgICAgIHBhcnRpYWxBcmdzID0gYmluZERhdGFbMl0sXG4gICAgICAgICAgcGFydGlhbFJpZ2h0QXJncyA9IGJpbmREYXRhWzNdLFxuICAgICAgICAgIHRoaXNBcmcgPSBiaW5kRGF0YVs0XSxcbiAgICAgICAgICBhcml0eSA9IGJpbmREYXRhWzVdO1xuXG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIDEsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIDIsXG4gICAgICAgICAgaXNDdXJyeSA9IGJpdG1hc2sgJiA0LFxuICAgICAgICAgIGlzQ3VycnlCb3VuZCA9IGJpdG1hc2sgJiA4LFxuICAgICAgICAgIGtleSA9IGZ1bmM7XG5cbiAgICAgIGZ1bmN0aW9uIGJvdW5kKCkge1xuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcztcbiAgICAgICAgaWYgKHBhcnRpYWxBcmdzKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShwYXJ0aWFsQXJncyk7XG4gICAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsUmlnaHRBcmdzIHx8IGlzQ3VycnkpIHtcbiAgICAgICAgICBhcmdzIHx8IChhcmdzID0gc2xpY2UoYXJndW1lbnRzKSk7XG4gICAgICAgICAgaWYgKHBhcnRpYWxSaWdodEFyZ3MpIHtcbiAgICAgICAgICAgIHB1c2guYXBwbHkoYXJncywgcGFydGlhbFJpZ2h0QXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0N1cnJ5ICYmIGFyZ3MubGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICAgIGJpdG1hc2sgfD0gMTYgJiB+MzI7XG4gICAgICAgICAgICByZXR1cm4gYmFzZUNyZWF0ZVdyYXBwZXIoW2Z1bmMsIChpc0N1cnJ5Qm91bmQgPyBiaXRtYXNrIDogYml0bWFzayAmIH4zKSwgYXJncywgbnVsbCwgdGhpc0FyZywgYXJpdHldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJncyB8fCAoYXJncyA9IGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChpc0JpbmRLZXkpIHtcbiAgICAgICAgICBmdW5jID0gdGhpc0JpbmRpbmdba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKGZ1bmMucHJvdG90eXBlKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICBzZXRCaW5kRGF0YShib3VuZCwgYmluZERhdGEpO1xuICAgICAgcmV0dXJuIGJvdW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRpZmZlcmVuY2VgIHRoYXQgYWNjZXB0cyBhIHNpbmdsZSBhcnJheVxuICAgICAqIG9mIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgYXJyYXkgb2YgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICBpc0xhcmdlID0gbGVuZ3RoID49IGxhcmdlQXJyYXlTaXplICYmIGluZGV4T2YgPT09IGJhc2VJbmRleE9mLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBpZiAoaXNMYXJnZSkge1xuICAgICAgICB2YXIgY2FjaGUgPSBjcmVhdGVDYWNoZSh2YWx1ZXMpO1xuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICBpbmRleE9mID0gY2FjaGVJbmRleE9mO1xuICAgICAgICAgIHZhbHVlcyA9IGNhY2hlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzTGFyZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoaW5kZXhPZih2YWx1ZXMsIHZhbHVlKSA8IDApIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0xhcmdlKSB7XG4gICAgICAgIHJlbGVhc2VPYmplY3QodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgb3IgYHRoaXNBcmdgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU2hhbGxvdz1mYWxzZV0gQSBmbGFnIHRvIHJlc3RyaWN0IGZsYXR0ZW5pbmcgdG8gYSBzaW5nbGUgbGV2ZWwuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3Q9ZmFsc2VdIEEgZmxhZyB0byByZXN0cmljdCBmbGF0dGVuaW5nIHRvIGFycmF5cyBhbmQgYGFyZ3VtZW50c2Agb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc3RhcnQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBpc1NoYWxsb3csIGlzU3RyaWN0LCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBpbmRleCA9IChmcm9tSW5kZXggfHwgMCkgLSAxLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgJiYgKGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgICAvLyByZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpXG4gICAgICAgICAgaWYgKCFpc1NoYWxsb3cpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUZsYXR0ZW4odmFsdWUsIGlzU2hhbGxvdywgaXNTdHJpY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdmFsSW5kZXggPSAtMSxcbiAgICAgICAgICAgICAgdmFsTGVuZ3RoID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICAgICAgICByZXNJbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgICAgICByZXN1bHQubGVuZ3RoICs9IHZhbExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKyt2YWxJbmRleCA8IHZhbExlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWVbdmFsSW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAsIHdpdGhvdXQgc3VwcG9ydCBmb3IgYHRoaXNBcmdgIGJpbmRpbmcsXG4gICAgICogdGhhdCBhbGxvd3MgcGFydGlhbCBcIl8ud2hlcmVcIiBzdHlsZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBhIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gYiBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXNXaGVyZT1mYWxzZV0gQSBmbGFnIHRvIGluZGljYXRlIHBlcmZvcm1pbmcgcGFydGlhbCBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIGBhYCBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0I9W11dIFRyYWNrcyB0cmF2ZXJzZWQgYGJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbChhLCBiLCBjYWxsYmFjaywgaXNXaGVyZSwgc3RhY2tBLCBzdGFja0IpIHtcbiAgICAgIC8vIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCB3aGVuIGNvbXBhcmluZyBvYmplY3RzLCBgYWAgaGFzIGF0IGxlYXN0IHRoZSBwcm9wZXJ0aWVzIG9mIGBiYFxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhhLCBiKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGV4aXQgZWFybHkgZm9yIGlkZW50aWNhbCB2YWx1ZXNcbiAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIC8vIHRyZWF0IGArMGAgdnMuIGAtMGAgYXMgbm90IGVxdWFsXG4gICAgICAgIHJldHVybiBhICE9PSAwIHx8ICgxIC8gYSA9PSAxIC8gYik7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBhLFxuICAgICAgICAgIG90aGVyVHlwZSA9IHR5cGVvZiBiO1xuXG4gICAgICAvLyBleGl0IGVhcmx5IGZvciB1bmxpa2UgcHJpbWl0aXZlIHZhbHVlc1xuICAgICAgaWYgKGEgPT09IGEgJiZcbiAgICAgICAgICAhKGEgJiYgb2JqZWN0VHlwZXNbdHlwZV0pICYmXG4gICAgICAgICAgIShiICYmIG9iamVjdFR5cGVzW290aGVyVHlwZV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGV4aXQgZWFybHkgZm9yIGBudWxsYCBhbmQgYHVuZGVmaW5lZGAgYXZvaWRpbmcgRVMzJ3MgRnVuY3Rpb24jY2FsbCBiZWhhdmlvclxuICAgICAgLy8gaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS4zLjQuNFxuICAgICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgICB9XG4gICAgICAvLyBjb21wYXJlIFtbQ2xhc3NdXSBuYW1lc1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSksXG4gICAgICAgICAgb3RoZXJDbGFzcyA9IHRvU3RyaW5nLmNhbGwoYik7XG5cbiAgICAgIGlmIChjbGFzc05hbWUgPT0gYXJnc0NsYXNzKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IG9iamVjdENsYXNzO1xuICAgICAgfVxuICAgICAgaWYgKG90aGVyQ2xhc3MgPT0gYXJnc0NsYXNzKSB7XG4gICAgICAgIG90aGVyQ2xhc3MgPSBvYmplY3RDbGFzcztcbiAgICAgIH1cbiAgICAgIGlmIChjbGFzc05hbWUgIT0gb3RoZXJDbGFzcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgICBjYXNlIGJvb2xDbGFzczpcbiAgICAgICAgY2FzZSBkYXRlQ2xhc3M6XG4gICAgICAgICAgLy8gY29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1iZXJzLCBkYXRlcyB0byBtaWxsaXNlY29uZHMgYW5kIGJvb2xlYW5zXG4gICAgICAgICAgLy8gdG8gYDFgIG9yIGAwYCB0cmVhdGluZyBpbnZhbGlkIGRhdGVzIGNvZXJjZWQgdG8gYE5hTmAgYXMgbm90IGVxdWFsXG4gICAgICAgICAgcmV0dXJuICthID09ICtiO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyQ2xhc3M6XG4gICAgICAgICAgLy8gdHJlYXQgYE5hTmAgdnMuIGBOYU5gIGFzIGVxdWFsXG4gICAgICAgICAgcmV0dXJuIChhICE9ICthKVxuICAgICAgICAgICAgPyBiICE9ICtiXG4gICAgICAgICAgICAvLyBidXQgdHJlYXQgYCswYCB2cy4gYC0wYCBhcyBub3QgZXF1YWxcbiAgICAgICAgICAgIDogKGEgPT0gMCA/ICgxIC8gYSA9PSAxIC8gYikgOiBhID09ICtiKTtcblxuICAgICAgICBjYXNlIHJlZ2V4cENsYXNzOlxuICAgICAgICBjYXNlIHN0cmluZ0NsYXNzOlxuICAgICAgICAgIC8vIGNvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgKGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMTAuNi40KVxuICAgICAgICAgIC8vIHRyZWF0IHN0cmluZyBwcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCBpbnN0YW5jZXMgYXMgZXF1YWxcbiAgICAgICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBjbGFzc05hbWUgPT0gYXJyYXlDbGFzcztcbiAgICAgIGlmICghaXNBcnIpIHtcbiAgICAgICAgLy8gdW53cmFwIGFueSBgbG9kYXNoYCB3cmFwcGVkIHZhbHVlc1xuICAgICAgICB2YXIgYVdyYXBwZWQgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGEsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgYldyYXBwZWQgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChhV3JhcHBlZCB8fCBiV3JhcHBlZCkge1xuICAgICAgICAgIHJldHVybiBiYXNlSXNFcXVhbChhV3JhcHBlZCA/IGEuX193cmFwcGVkX18gOiBhLCBiV3JhcHBlZCA/IGIuX193cmFwcGVkX18gOiBiLCBjYWxsYmFjaywgaXNXaGVyZSwgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGV4aXQgZm9yIGZ1bmN0aW9ucyBhbmQgRE9NIG5vZGVzXG4gICAgICAgIGlmIChjbGFzc05hbWUgIT0gb2JqZWN0Q2xhc3MpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW4gb2xkZXIgdmVyc2lvbnMgb2YgT3BlcmEsIGBhcmd1bWVudHNgIG9iamVjdHMgaGF2ZSBgQXJyYXlgIGNvbnN0cnVjdG9yc1xuICAgICAgICB2YXIgY3RvckEgPSBhLmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgY3RvckIgPSBiLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIG5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsXG4gICAgICAgIGlmIChjdG9yQSAhPSBjdG9yQiAmJlxuICAgICAgICAgICAgICAhKGlzRnVuY3Rpb24oY3RvckEpICYmIGN0b3JBIGluc3RhbmNlb2YgY3RvckEgJiYgaXNGdW5jdGlvbihjdG9yQikgJiYgY3RvckIgaW5zdGFuY2VvZiBjdG9yQikgJiZcbiAgICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGFzc3VtZSBjeWNsaWMgc3RydWN0dXJlcyBhcmUgZXF1YWxcbiAgICAgIC8vIHRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWMgc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xXG4gICAgICAvLyBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gIChodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEyLjMpXG4gICAgICB2YXIgaW5pdGVkU3RhY2sgPSAhc3RhY2tBO1xuICAgICAgc3RhY2tBIHx8IChzdGFja0EgPSBnZXRBcnJheSgpKTtcbiAgICAgIHN0YWNrQiB8fCAoc3RhY2tCID0gZ2V0QXJyYXkoKSk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdGFja0EubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChzdGFja0FbbGVuZ3RoXSA9PSBhKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YWNrQltsZW5ndGhdID09IGI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzaXplID0gMDtcbiAgICAgIHJlc3VsdCA9IHRydWU7XG5cbiAgICAgIC8vIGFkZCBgYWAgYW5kIGBiYCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHNcbiAgICAgIHN0YWNrQS5wdXNoKGEpO1xuICAgICAgc3RhY2tCLnB1c2goYik7XG5cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cylcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICAvLyBjb21wYXJlIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeVxuICAgICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgICAgc2l6ZSA9IGIubGVuZ3RoO1xuICAgICAgICByZXN1bHQgPSBzaXplID09IGxlbmd0aDtcblxuICAgICAgICBpZiAocmVzdWx0IHx8IGlzV2hlcmUpIHtcbiAgICAgICAgICAvLyBkZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzXG4gICAgICAgICAgd2hpbGUgKHNpemUtLSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gYltzaXplXTtcblxuICAgICAgICAgICAgaWYgKGlzV2hlcmUpIHtcbiAgICAgICAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoKHJlc3VsdCA9IGJhc2VJc0VxdWFsKGFbaW5kZXhdLCB2YWx1ZSwgY2FsbGJhY2ssIGlzV2hlcmUsIHN0YWNrQSwgc3RhY2tCKSkpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghKHJlc3VsdCA9IGJhc2VJc0VxdWFsKGFbc2l6ZV0sIHZhbHVlLCBjYWxsYmFjaywgaXNXaGVyZSwgc3RhY2tBLCBzdGFja0IpKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBkZWVwIGNvbXBhcmUgb2JqZWN0cyB1c2luZyBgZm9ySW5gLCBpbnN0ZWFkIG9mIGBmb3JPd25gLCB0byBhdm9pZCBgT2JqZWN0LmtleXNgXG4gICAgICAgIC8vIHdoaWNoLCBpbiB0aGlzIGNhc2UsIGlzIG1vcmUgY29zdGx5XG4gICAgICAgIGZvckluKGIsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGIpIHtcbiAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXkpKSB7XG4gICAgICAgICAgICAvLyBjb3VudCB0aGUgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgICAvLyBkZWVwIGNvbXBhcmUgZWFjaCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgICAgICAgIHJldHVybiAocmVzdWx0ID0gaGFzT3duUHJvcGVydHkuY2FsbChhLCBrZXkpICYmIGJhc2VJc0VxdWFsKGFba2V5XSwgdmFsdWUsIGNhbGxiYWNrLCBpc1doZXJlLCBzdGFja0EsIHN0YWNrQikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCAmJiAhaXNXaGVyZSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBib3RoIG9iamVjdHMgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllc1xuICAgICAgICAgIGZvckluKGEsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGEpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGtleSkpIHtcbiAgICAgICAgICAgICAgLy8gYHNpemVgIHdpbGwgYmUgYC0xYCBpZiBgYWAgaGFzIG1vcmUgcHJvcGVydGllcyB0aGFuIGBiYFxuICAgICAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9IC0tc2l6ZSA+IC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tBLnBvcCgpO1xuICAgICAgc3RhY2tCLnBvcCgpO1xuXG4gICAgICBpZiAoaW5pdGVkU3RhY2spIHtcbiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQSk7XG4gICAgICAgIHJlbGVhc2VBcnJheShzdGFja0IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBhcmd1bWVudCBqdWdnbGluZyBvciBzdXBwb3J0XG4gICAgICogZm9yIGB0aGlzQXJnYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2luZyBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyB2YWx1ZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgY2FsbGJhY2ssIHN0YWNrQSwgc3RhY2tCKSB7XG4gICAgICAoaXNBcnJheShzb3VyY2UpID8gZm9yRWFjaCA6IGZvck93bikoc291cmNlLCBmdW5jdGlvbihzb3VyY2UsIGtleSkge1xuICAgICAgICB2YXIgZm91bmQsXG4gICAgICAgICAgICBpc0FycixcbiAgICAgICAgICAgIHJlc3VsdCA9IHNvdXJjZSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKHNvdXJjZSAmJiAoKGlzQXJyID0gaXNBcnJheShzb3VyY2UpKSB8fCBpc1BsYWluT2JqZWN0KHNvdXJjZSkpKSB7XG4gICAgICAgICAgLy8gYXZvaWQgbWVyZ2luZyBwcmV2aW91c2x5IG1lcmdlZCBjeWNsaWMgc291cmNlc1xuICAgICAgICAgIHZhciBzdGFja0xlbmd0aCA9IHN0YWNrQS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHN0YWNrTGVuZ3RoLS0pIHtcbiAgICAgICAgICAgIGlmICgoZm91bmQgPSBzdGFja0Fbc3RhY2tMZW5ndGhdID09IHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBzdGFja0Jbc3RhY2tMZW5ndGhdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgdmFyIGlzU2hhbGxvdztcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSwgc291cmNlKTtcbiAgICAgICAgICAgICAgaWYgKChpc1NoYWxsb3cgPSB0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzU2hhbGxvdykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGlzQXJyXG4gICAgICAgICAgICAgICAgPyAoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdKVxuICAgICAgICAgICAgICAgIDogKGlzUGxhaW5PYmplY3QodmFsdWUpID8gdmFsdWUgOiB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhZGQgYHNvdXJjZWAgYW5kIGFzc29jaWF0ZWQgYHZhbHVlYCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHNcbiAgICAgICAgICAgIHN0YWNrQS5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICBzdGFja0IucHVzaCh2YWx1ZSk7XG5cbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpXG4gICAgICAgICAgICBpZiAoIWlzU2hhbGxvdykge1xuICAgICAgICAgICAgICBiYXNlTWVyZ2UodmFsdWUsIHNvdXJjZSwgY2FsbGJhY2ssIHN0YWNrQSwgc3RhY2tCKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSwgc291cmNlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHNvdXJjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IGFyZ3VtZW50IGp1Z2dsaW5nIG9yIHN1cHBvcnRcbiAgICAgKiBmb3IgcmV0dXJuaW5nIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIG1pbmltdW0gcG9zc2libGUgdmFsdWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGEgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKG1pbiwgbWF4KSB7XG4gICAgICByZXR1cm4gbWluICsgZmxvb3IobmF0aXZlUmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAqIG9yIGB0aGlzQXJnYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1NvcnRlZD1mYWxzZV0gQSBmbGFnIHRvIGluZGljYXRlIHRoYXQgYGFycmF5YCBpcyBzb3J0ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgZHVwbGljYXRlLXZhbHVlLWZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGlzU29ydGVkLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHZhciBpc0xhcmdlID0gIWlzU29ydGVkICYmIGxlbmd0aCA+PSBsYXJnZUFycmF5U2l6ZSAmJiBpbmRleE9mID09PSBiYXNlSW5kZXhPZixcbiAgICAgICAgICBzZWVuID0gKGNhbGxiYWNrIHx8IGlzTGFyZ2UpID8gZ2V0QXJyYXkoKSA6IHJlc3VsdDtcblxuICAgICAgaWYgKGlzTGFyZ2UpIHtcbiAgICAgICAgdmFyIGNhY2hlID0gY3JlYXRlQ2FjaGUoc2Vlbik7XG4gICAgICAgIGluZGV4T2YgPSBjYWNoZUluZGV4T2Y7XG4gICAgICAgIHNlZW4gPSBjYWNoZTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gY2FsbGJhY2sgPyBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGFycmF5KSA6IHZhbHVlO1xuXG4gICAgICAgIGlmIChpc1NvcnRlZFxuICAgICAgICAgICAgICA/ICFpbmRleCB8fCBzZWVuW3NlZW4ubGVuZ3RoIC0gMV0gIT09IGNvbXB1dGVkXG4gICAgICAgICAgICAgIDogaW5kZXhPZihzZWVuLCBjb21wdXRlZCkgPCAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sgfHwgaXNMYXJnZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNMYXJnZSkge1xuICAgICAgICByZWxlYXNlQXJyYXkoc2Vlbi5hcnJheSk7XG4gICAgICAgIHJlbGVhc2VPYmplY3Qoc2Vlbik7XG4gICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHJlbGVhc2VBcnJheShzZWVuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhIGNvbGxlY3Rpb24sIGNyZWF0aW5nIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIGNvbGxlY3Rpb25cbiAgICAgKiB0aHJvdWdoIGEgY2FsbGJhY2suIFRoZSBnaXZlbiBgc2V0dGVyYCBmdW5jdGlvbiBzZXRzIHRoZSBrZXlzIGFuZCB2YWx1ZXNcbiAgICAgKiBvZiB0aGUgY29tcG9zZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIHNldHRlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInKSB7XG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbGxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgICAgc2V0dGVyKHJlc3VsdCwgdmFsdWUsIGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbiksIGNvbGxlY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICAgICAgc2V0dGVyKHJlc3VsdCwgdmFsdWUsIGNhbGxiYWNrKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pLCBjb2xsZWN0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgXG4gICAgICogd2l0aCBhbiBvcHRpb25hbCBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIG9mIG1ldGhvZCBmbGFncyB0byBjb21wb3NlLlxuICAgICAqICBUaGUgYml0bWFzayBtYXkgYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBmbGFnczpcbiAgICAgKiAgMSAtIGBfLmJpbmRgXG4gICAgICogIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICA0IC0gYF8uY3VycnlgXG4gICAgICogIDggLSBgXy5jdXJyeWAgKGJvdW5kKVxuICAgICAqICAxNiAtIGBfLnBhcnRpYWxgXG4gICAgICogIDMyIC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsQXJnc10gQW4gYXJyYXkgb2YgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2VcbiAgICAgKiAgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbFJpZ2h0QXJnc10gQW4gYXJyYXkgb2YgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZVxuICAgICAqICBwcm92aWRlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwcGVyKGZ1bmMsIGJpdG1hc2ssIHBhcnRpYWxBcmdzLCBwYXJ0aWFsUmlnaHRBcmdzLCB0aGlzQXJnLCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiAxLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiAyLFxuICAgICAgICAgIGlzQ3VycnkgPSBiaXRtYXNrICYgNCxcbiAgICAgICAgICBpc0N1cnJ5Qm91bmQgPSBiaXRtYXNrICYgOCxcbiAgICAgICAgICBpc1BhcnRpYWwgPSBiaXRtYXNrICYgMTYsXG4gICAgICAgICAgaXNQYXJ0aWFsUmlnaHQgPSBiaXRtYXNrICYgMzI7XG5cbiAgICAgIGlmICghaXNCaW5kS2V5ICYmICFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgICB9XG4gICAgICBpZiAoaXNQYXJ0aWFsICYmICFwYXJ0aWFsQXJncy5sZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+MTY7XG4gICAgICAgIGlzUGFydGlhbCA9IHBhcnRpYWxBcmdzID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNQYXJ0aWFsUmlnaHQgJiYgIXBhcnRpYWxSaWdodEFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfjMyO1xuICAgICAgICBpc1BhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodEFyZ3MgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBiaW5kRGF0YSA9IGZ1bmMgJiYgZnVuYy5fX2JpbmREYXRhX187XG4gICAgICBpZiAoYmluZERhdGEgJiYgYmluZERhdGEgIT09IHRydWUpIHtcbiAgICAgICAgLy8gY2xvbmUgYGJpbmREYXRhYFxuICAgICAgICBiaW5kRGF0YSA9IHNsaWNlKGJpbmREYXRhKTtcbiAgICAgICAgaWYgKGJpbmREYXRhWzJdKSB7XG4gICAgICAgICAgYmluZERhdGFbMl0gPSBzbGljZShiaW5kRGF0YVsyXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpbmREYXRhWzNdKSB7XG4gICAgICAgICAgYmluZERhdGFbM10gPSBzbGljZShiaW5kRGF0YVszXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IGB0aGlzQmluZGluZ2AgaXMgbm90IHByZXZpb3VzbHkgYm91bmRcbiAgICAgICAgaWYgKGlzQmluZCAmJiAhKGJpbmREYXRhWzFdICYgMSkpIHtcbiAgICAgICAgICBiaW5kRGF0YVs0XSA9IHRoaXNBcmc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IGlmIHByZXZpb3VzbHkgYm91bmQgYnV0IG5vdCBjdXJyZW50bHkgKHN1YnNlcXVlbnQgY3VycmllZCBmdW5jdGlvbnMpXG4gICAgICAgIGlmICghaXNCaW5kICYmIGJpbmREYXRhWzFdICYgMSkge1xuICAgICAgICAgIGJpdG1hc2sgfD0gODtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgY3VycmllZCBhcml0eSBpZiBub3QgeWV0IHNldFxuICAgICAgICBpZiAoaXNDdXJyeSAmJiAhKGJpbmREYXRhWzFdICYgNCkpIHtcbiAgICAgICAgICBiaW5kRGF0YVs1XSA9IGFyaXR5O1xuICAgICAgICB9XG4gICAgICAgIC8vIGFwcGVuZCBwYXJ0aWFsIGxlZnQgYXJndW1lbnRzXG4gICAgICAgIGlmIChpc1BhcnRpYWwpIHtcbiAgICAgICAgICBwdXNoLmFwcGx5KGJpbmREYXRhWzJdIHx8IChiaW5kRGF0YVsyXSA9IFtdKSwgcGFydGlhbEFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFwcGVuZCBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50c1xuICAgICAgICBpZiAoaXNQYXJ0aWFsUmlnaHQpIHtcbiAgICAgICAgICB1bnNoaWZ0LmFwcGx5KGJpbmREYXRhWzNdIHx8IChiaW5kRGF0YVszXSA9IFtdKSwgcGFydGlhbFJpZ2h0QXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgZmxhZ3NcbiAgICAgICAgYmluZERhdGFbMV0gfD0gYml0bWFzaztcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVdyYXBwZXIuYXBwbHkobnVsbCwgYmluZERhdGEpO1xuICAgICAgfVxuICAgICAgLy8gZmFzdCBwYXRoIGZvciBgXy5iaW5kYFxuICAgICAgdmFyIGNyZWF0ZXIgPSAoYml0bWFzayA9PSAxIHx8IGJpdG1hc2sgPT09IDE3KSA/IGJhc2VCaW5kIDogYmFzZUNyZWF0ZVdyYXBwZXI7XG4gICAgICByZXR1cm4gY3JlYXRlcihbZnVuYywgYml0bWFzaywgcGFydGlhbEFyZ3MsIHBhcnRpYWxSaWdodEFyZ3MsIHRoaXNBcmcsIGFyaXR5XSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlSHRtbENoYXIobWF0Y2gpIHtcbiAgICAgIHJldHVybiBodG1sRXNjYXBlc1ttYXRjaF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpbmRleE9mXCIgZnVuY3Rpb24uIElmIHRoZSBgXy5pbmRleE9mYCBtZXRob2QgaXNcbiAgICAgKiBjdXN0b21pemVkLCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJuc1xuICAgICAqIHRoZSBgYmFzZUluZGV4T2ZgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIFwiaW5kZXhPZlwiIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEluZGV4T2YoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKHJlc3VsdCA9IGxvZGFzaC5pbmRleE9mKSA9PT0gaW5kZXhPZiA/IGJhc2VJbmRleE9mIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyAmJiByZU5hdGl2ZS50ZXN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGB0aGlzYCBiaW5kaW5nIGRhdGEgb24gYSBnaXZlbiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc2V0IGRhdGEgb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWUgVGhlIGRhdGEgYXJyYXkgdG8gc2V0LlxuICAgICAqL1xuICAgIHZhciBzZXRCaW5kRGF0YSA9ICFkZWZpbmVQcm9wZXJ0eSA/IG5vb3AgOiBmdW5jdGlvbihmdW5jLCB2YWx1ZSkge1xuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICAgICAgZGVmaW5lUHJvcGVydHkoZnVuYywgJ19fYmluZERhdGFfXycsIGRlc2NyaXB0b3IpO1xuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgZmFsbGJhY2sgaW1wbGVtZW50YXRpb24gb2YgYGlzUGxhaW5PYmplY3RgIHdoaWNoIGNoZWNrcyBpZiBhIGdpdmVuIHZhbHVlXG4gICAgICogaXMgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLCBhc3N1bWluZyBvYmplY3RzIGNyZWF0ZWRcbiAgICAgKiBieSB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IgaGF2ZSBubyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFuZCB0aGF0XG4gICAgICogdGhlcmUgYXJlIG5vIGBPYmplY3QucHJvdG90eXBlYCBleHRlbnNpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNoaW1Jc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG5cbiAgICAgIC8vIGF2b2lkIG5vbiBPYmplY3Qgb2JqZWN0cywgYGFyZ3VtZW50c2Agb2JqZWN0cywgYW5kIERPTSBlbGVtZW50c1xuICAgICAgaWYgKCEodmFsdWUgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gb2JqZWN0Q2xhc3MpIHx8XG4gICAgICAgICAgKGN0b3IgPSB2YWx1ZS5jb25zdHJ1Y3RvciwgaXNGdW5jdGlvbihjdG9yKSAmJiAhKGN0b3IgaW5zdGFuY2VvZiBjdG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gSW4gbW9zdCBlbnZpcm9ubWVudHMgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMgYXJlIGl0ZXJhdGVkIGJlZm9yZVxuICAgICAgLy8gaXRzIGluaGVyaXRlZCBwcm9wZXJ0aWVzLiBJZiB0aGUgbGFzdCBpdGVyYXRlZCBwcm9wZXJ0eSBpcyBhbiBvYmplY3Qnc1xuICAgICAgLy8gb3duIHByb3BlcnR5IHRoZW4gdGhlcmUgYXJlIG5vIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICBmb3JJbih2YWx1ZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0eXBlb2YgcmVzdWx0ID09ICd1bmRlZmluZWQnIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgdW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2ggVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGVIdG1sQ2hhcihtYXRjaCkge1xuICAgICAgcmV0dXJuIGh0bWxVbmVzY2FwZXNbbWF0Y2hdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8uaXNBcmd1bWVudHMoYXJndW1lbnRzKTsgfSkoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcmdzQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBGdW5jdGlvblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8uaXNBcnJheShhcmd1bWVudHMpOyB9KSgpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT0gJ251bWJlcicgJiZcbiAgICAgICAgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJyYXlDbGFzcyB8fCBmYWxzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQSBmYWxsYmFjayBpbXBsZW1lbnRhdGlvbiBvZiBgT2JqZWN0LmtleXNgIHdoaWNoIHByb2R1Y2VzIGFuIGFycmF5IG9mIHRoZVxuICAgICAqIGdpdmVuIG9iamVjdCdzIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICB2YXIgc2hpbUtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciBpbmRleCwgaXRlcmFibGUgPSBvYmplY3QsIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCFpdGVyYWJsZSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIGlmICghKG9iamVjdFR5cGVzW3R5cGVvZiBvYmplY3RdKSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgZm9yIChpbmRleCBpbiBpdGVyYWJsZSkge1xuICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZXJhYmxlLCBpbmRleCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjb21wb3NlZCBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2V5cyh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9KTtcbiAgICAgKiAvLyA9PiBbJ29uZScsICd0d28nLCAndGhyZWUnXSAocHJvcGVydHkgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIGVudmlyb25tZW50cylcbiAgICAgKi9cbiAgICB2YXIga2V5cyA9ICFuYXRpdmVLZXlzID8gc2hpbUtleXMgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzOlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBgPmAgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2UgYD5gIGFuZCBgL2BcbiAgICAgKiBkb24ndCByZXF1aXJlIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nIHVubGVzcyB0aGV5J3JlIHBhcnRcbiAgICAgKiBvZiBhIHRhZyBvciBhbiB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICogaHR0cDovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMgKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpXG4gICAgICovXG4gICAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICAgJyYnOiAnJmFtcDsnLFxuICAgICAgJzwnOiAnJmx0OycsXG4gICAgICAnPic6ICcmZ3Q7JyxcbiAgICAgICdcIic6ICcmcXVvdDsnLFxuICAgICAgXCInXCI6ICcmIzM5OydcbiAgICB9O1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMgKi9cbiAgICB2YXIgaHRtbFVuZXNjYXBlcyA9IGludmVydChodG1sRXNjYXBlcyk7XG5cbiAgICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMgKi9cbiAgICB2YXIgcmVFc2NhcGVkSHRtbCA9IFJlZ0V4cCgnKCcgKyBrZXlzKGh0bWxVbmVzY2FwZXMpLmpvaW4oJ3wnKSArICcpJywgJ2cnKSxcbiAgICAgICAgcmVVbmVzY2FwZWRIdG1sID0gUmVnRXhwKCdbJyArIGtleXMoaHRtbEVzY2FwZXMpLmpvaW4oJycpICsgJ10nLCAnZycpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdChzKSB0byB0aGUgZGVzdGluYXRpb25cbiAgICAgKiBvYmplY3QuIFN1YnNlcXVlbnQgc291cmNlcyB3aWxsIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91c1xuICAgICAqIHNvdXJjZXMuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZCB0byBwcm9kdWNlIHRoZVxuICAgICAqIGFzc2lnbmVkIHZhbHVlcy4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czsgKG9iamVjdFZhbHVlLCBzb3VyY2VWYWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBGdW5jdGlvblxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZV0gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25pbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnbmFtZSc6ICdmcmVkJyB9LCB7ICdlbXBsb3llcic6ICdzbGF0ZScgfSk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdmcmVkJywgJ2VtcGxveWVyJzogJ3NsYXRlJyB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbiwgZnVuY3Rpb24oYSwgYikge1xuICAgICAqICAgcmV0dXJuIHR5cGVvZiBhID09ICd1bmRlZmluZWQnID8gYiA6IGE7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnbmFtZSc6ICdiYXJuZXknIH07XG4gICAgICogZGVmYXVsdHMob2JqZWN0LCB7ICduYW1lJzogJ2ZyZWQnLCAnZW1wbG95ZXInOiAnc2xhdGUnIH0pO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmFybmV5JywgJ2VtcGxveWVyJzogJ3NsYXRlJyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBndWFyZCkge1xuICAgICAgdmFyIGluZGV4LCBpdGVyYWJsZSA9IG9iamVjdCwgcmVzdWx0ID0gaXRlcmFibGU7XG4gICAgICBpZiAoIWl0ZXJhYmxlKSByZXR1cm4gcmVzdWx0O1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgYXJnc0luZGV4ID0gMCxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gdHlwZW9mIGd1YXJkID09ICdudW1iZXInID8gMiA6IGFyZ3MubGVuZ3RoO1xuICAgICAgaWYgKGFyZ3NMZW5ndGggPiAzICYmIHR5cGVvZiBhcmdzW2FyZ3NMZW5ndGggLSAyXSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhhcmdzWy0tYXJnc0xlbmd0aCAtIDFdLCBhcmdzW2FyZ3NMZW5ndGgtLV0sIDIpO1xuICAgICAgfSBlbHNlIGlmIChhcmdzTGVuZ3RoID4gMiAmJiB0eXBlb2YgYXJnc1thcmdzTGVuZ3RoIC0gMV0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IGFyZ3NbLS1hcmdzTGVuZ3RoXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgaXRlcmFibGUgPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIGlmIChpdGVyYWJsZSAmJiBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdKSB7XG4gICAgICAgIHZhciBvd25JbmRleCA9IC0xLFxuICAgICAgICAgICAgb3duUHJvcHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdICYmIGtleXMoaXRlcmFibGUpLFxuICAgICAgICAgICAgbGVuZ3RoID0gb3duUHJvcHMgPyBvd25Qcm9wcy5sZW5ndGggOiAwO1xuXG4gICAgICAgIHdoaWxlICgrK293bkluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaW5kZXggPSBvd25Qcm9wc1tvd25JbmRleF07XG4gICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGNhbGxiYWNrID8gY2FsbGJhY2socmVzdWx0W2luZGV4XSwgaXRlcmFibGVbaW5kZXhdKSA6IGl0ZXJhYmxlW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdmFsdWVgLiBJZiBgaXNEZWVwYCBpcyBgdHJ1ZWAgbmVzdGVkIG9iamVjdHMgd2lsbCBhbHNvXG4gICAgICogYmUgY2xvbmVkLCBvdGhlcndpc2UgdGhleSB3aWxsIGJlIGFzc2lnbmVkIGJ5IHJlZmVyZW5jZS4gSWYgYSBjYWxsYmFja1xuICAgICAqIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlcy4gSWYgdGhlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdW5kZWZpbmVkYCBjbG9uaW5nIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuXG4gICAgICogVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwPWZhbHNlXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUoY2hhcmFjdGVycyk7XG4gICAgICogc2hhbGxvd1swXSA9PT0gY2hhcmFjdGVyc1swXTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmUoY2hhcmFjdGVycywgdHJ1ZSk7XG4gICAgICogZGVlcFswXSA9PT0gY2hhcmFjdGVyc1swXTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5taXhpbih7XG4gICAgICogICAnY2xvbmUnOiBfLnBhcnRpYWxSaWdodChfLmNsb25lLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgICByZXR1cm4gXy5pc0VsZW1lbnQodmFsdWUpID8gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgKiAgIH0pXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2xvbmUgPSBfLmNsb25lKGRvY3VtZW50LmJvZHkpO1xuICAgICAqIGNsb25lLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSwgaXNEZWVwLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgLy8gYWxsb3dzIHdvcmtpbmcgd2l0aCBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcyB3aXRob3V0IHVzaW5nIHRoZWlyIGBpbmRleGBcbiAgICAgIC8vIGFuZCBgY29sbGVjdGlvbmAgYXJndW1lbnRzIGZvciBgaXNEZWVwYCBhbmQgYGNhbGxiYWNrYFxuICAgICAgaWYgKHR5cGVvZiBpc0RlZXAgIT0gJ2Jvb2xlYW4nICYmIGlzRGVlcCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSBpc0RlZXA7XG4gICAgICAgIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgaXNEZWVwLCB0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyAmJiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVlcCBjbG9uZSBvZiBgdmFsdWVgLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmVcbiAgICAgKiBleGVjdXRlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWVzLiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIGNsb25pbmcgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvXG4gICAgICogYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGUgc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG0uIEZ1bmN0aW9uc1xuICAgICAqIGFuZCBET00gbm9kZXMgYXJlICoqbm90KiogY2xvbmVkLiBUaGUgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYW5kXG4gICAgICogb2JqZWN0cyBjcmVhdGVkIGJ5IGNvbnN0cnVjdG9ycyBvdGhlciB0aGFuIGBPYmplY3RgIGFyZSBjbG9uZWQgdG8gcGxhaW4gYE9iamVjdGAgb2JqZWN0cy5cbiAgICAgKiBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNpbnRlcm5hbC1zdHJ1Y3R1cmVkLWNsb25pbmctYWxnb3JpdGhtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBkZWVwIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChjaGFyYWN0ZXJzKTtcbiAgICAgKiBkZWVwWzBdID09PSBjaGFyYWN0ZXJzWzBdO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdmlldyA9IHtcbiAgICAgKiAgICdsYWJlbCc6ICdkb2NzJyxcbiAgICAgKiAgICdub2RlJzogZWxlbWVudFxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY2xvbmUgPSBfLmNsb25lRGVlcCh2aWV3LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNFbGVtZW50KHZhbHVlKSA/IHZhbHVlLmNsb25lTm9kZSh0cnVlKSA6IHVuZGVmaW5lZDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNsb25lLm5vZGUgPT0gdmlldy5ub2RlO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgdHJ1ZSwgdHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicgJiYgYmFzZUNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBnaXZlbiBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIHByb3ZpZGVkIGl0cyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFyZSBhc3NpZ25lZFxuICAgICAqIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7ICdjb25zdHJ1Y3Rvcic6IENpcmNsZSB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID8gYXNzaWduKHJlc3VsdCwgcHJvcGVydGllcykgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3QocykgdG8gdGhlIGRlc3RpbmF0aW9uXG4gICAgICogb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIE9uY2UgYVxuICAgICAqIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCBkZWZhdWx0cyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBGdW5jdGlvblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEFsbG93cyB3b3JraW5nIHdpdGggYF8ucmVkdWNlYCB3aXRob3V0IHVzaW5nIGl0c1xuICAgICAqICBga2V5YCBhbmQgYG9iamVjdGAgYXJndW1lbnRzIGFzIHNvdXJjZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnbmFtZSc6ICdiYXJuZXknIH07XG4gICAgICogXy5kZWZhdWx0cyhvYmplY3QsIHsgJ25hbWUnOiAnZnJlZCcsICdlbXBsb3llcic6ICdzbGF0ZScgfSk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdiYXJuZXknLCAnZW1wbG95ZXInOiAnc2xhdGUnIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBpbmRleCwgaXRlcmFibGUgPSBvYmplY3QsIHJlc3VsdCA9IGl0ZXJhYmxlO1xuICAgICAgaWYgKCFpdGVyYWJsZSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIGFyZ3NJbmRleCA9IDAsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IHR5cGVvZiBndWFyZCA9PSAnbnVtYmVyJyA/IDIgOiBhcmdzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgaXRlcmFibGUgPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIGlmIChpdGVyYWJsZSAmJiBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdKSB7XG4gICAgICAgIHZhciBvd25JbmRleCA9IC0xLFxuICAgICAgICAgICAgb3duUHJvcHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdICYmIGtleXMoaXRlcmFibGUpLFxuICAgICAgICAgICAgbGVuZ3RoID0gb3duUHJvcHMgPyBvd25Qcm9wcy5sZW5ndGggOiAwO1xuXG4gICAgICAgIHdoaWxlICgrK293bkluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaW5kZXggPSBvd25Qcm9wc1tvd25JbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHRbaW5kZXhdID09ICd1bmRlZmluZWQnKSByZXN1bHRbaW5kZXhdID0gaXRlcmFibGVbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50IHRoYXQgcGFzc2VzIHRoZSBjYWxsYmFjayBjaGVjaywgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXJcbiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0b1xuICAgICAqICBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6IHsgICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiBmYWxzZSB9LFxuICAgICAqICAgJ2ZyZWQnOiB7ICAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYmxvY2tlZCc6IGZhbHNlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KGNoYXJhY3RlcnMsIGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgcmV0dXJuIGNoci5hZ2UgPCA0MDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAocHJvcGVydHkgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIGVudmlyb25tZW50cylcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZEtleShjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAxIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kS2V5KGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgZm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlclxuICAgICAqICBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkIHRvXG4gICAgICogIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogeyAgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogeyAgICAnYWdlJzogNDAsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkoY2hhcmFjdGVycywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gY2hyLmFnZSA8IDQwO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgYHBlYmJsZXNgLCBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zIGBiYXJuZXlgXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRMYXN0S2V5KGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDQwIH0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEtleShjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICBmb3JPd25SaWdodChvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QsXG4gICAgICogZXhlY3V0aW5nIHRoZSBjYWxsYmFjayBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYFxuICAgICAqIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGtleSwgb2JqZWN0KS4gQ2FsbGJhY2tzIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBGdW5jdGlvblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIFNoYXBlLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgdGhpcy54ICs9IHg7XG4gICAgICogICB0aGlzLnkgKz0geTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgU2hhcGUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAneCcsICd5JywgYW5kICdtb3ZlJyAocHJvcGVydHkgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIGVudmlyb25tZW50cylcbiAgICAgKi9cbiAgICB2YXIgZm9ySW4gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGluZGV4LCBpdGVyYWJsZSA9IGNvbGxlY3Rpb24sIHJlc3VsdCA9IGl0ZXJhYmxlO1xuICAgICAgaWYgKCFpdGVyYWJsZSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIGlmICghb2JqZWN0VHlwZXNbdHlwZW9mIGl0ZXJhYmxlXSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgJiYgdHlwZW9mIHRoaXNBcmcgPT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFjayA6IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIGZvciAoaW5kZXggaW4gaXRlcmFibGUpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2soaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbikgPT09IGZhbHNlKSByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBTaGFwZS5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHRoaXMueCArPSB4O1xuICAgICAqICAgdGhpcy55ICs9IHk7XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgU2hhcGUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAnbW92ZScsICd5JywgYW5kICd4JyBhc3N1bWluZyBgXy5mb3JJbiBgIGxvZ3MgJ3gnLCAneScsIGFuZCAnbW92ZSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBwYWlycyA9IFtdO1xuXG4gICAgICBmb3JJbihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcGFpcnMucHVzaChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMubGVuZ3RoO1xuICAgICAgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayhwYWlyc1tsZW5ndGgtLV0sIHBhaXJzW2xlbmd0aF0sIG9iamVjdCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCwgZXhlY3V0aW5nIHRoZSBjYWxsYmFja1xuICAgICAqIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM7ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBDYWxsYmFja3MgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5XG4gICAgICogZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKHsgJzAnOiAnemVybycsICcxJzogJ29uZScsICdsZW5ndGgnOiAyIH0sIGZ1bmN0aW9uKG51bSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJzAnLCAnMScsIGFuZCAnbGVuZ3RoJyAocHJvcGVydHkgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIGVudmlyb25tZW50cylcbiAgICAgKi9cbiAgICB2YXIgZm9yT3duID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpbmRleCwgaXRlcmFibGUgPSBjb2xsZWN0aW9uLCByZXN1bHQgPSBpdGVyYWJsZTtcbiAgICAgIGlmICghaXRlcmFibGUpIHJldHVybiByZXN1bHQ7XG4gICAgICBpZiAoIW9iamVjdFR5cGVzW3R5cGVvZiBpdGVyYWJsZV0pIHJldHVybiByZXN1bHQ7XG4gICAgICBjYWxsYmFjayA9IGNhbGxiYWNrICYmIHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgICB2YXIgb3duSW5kZXggPSAtMSxcbiAgICAgICAgICAgIG93blByb3BzID0gb2JqZWN0VHlwZXNbdHlwZW9mIGl0ZXJhYmxlXSAmJiBrZXlzKGl0ZXJhYmxlKSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG93blByb3BzID8gb3duUHJvcHMubGVuZ3RoIDogMDtcblxuICAgICAgICB3aGlsZSAoKytvd25JbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGluZGV4ID0gb3duUHJvcHNbb3duSW5kZXhdO1xuICAgICAgICAgIGlmIChjYWxsYmFjayhpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodCh7ICcwJzogJ3plcm8nLCAnMSc6ICdvbmUnLCAnbGVuZ3RoJzogMiB9LCBmdW5jdGlvbihudW0sIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBsb2dzICdsZW5ndGgnLCAnMScsIGFuZCAnMCcgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICcwJywgJzEnLCBhbmQgJ2xlbmd0aCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF07XG4gICAgICAgIGlmIChjYWxsYmFjayhvYmplY3Rba2V5XSwga2V5LCBvYmplY3QpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzb3J0ZWQgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgb2YgYWxsIGVudW1lcmFibGUgcHJvcGVydGllcyxcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCwgb2YgYG9iamVjdGAgdGhhdCBoYXZlIGZ1bmN0aW9uIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBtZXRob2RzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgdGhhdCBoYXZlIGZ1bmN0aW9uIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMoXyk7XG4gICAgICogLy8gPT4gWydhbGwnLCAnYW55JywgJ2JpbmQnLCAnYmluZEFsbCcsICdjbG9uZScsICdjb21wYWN0JywgJ2NvbXBvc2UnLCAuLi5dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdC5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgbmFtZSBleGlzdHMgYXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAsXG4gICAgICogaW5zdGVhZCBvZiBhbiBpbmhlcml0ZWQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBrZXkgaXMgYSBkaXJlY3QgcHJvcGVydHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oYXMoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sICdiJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA/IGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNyZWF0ZWQgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludmVydCh7ICdmaXJzdCc6ICdmcmVkJywgJ3NlY29uZCc6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiAnZmlyc3QnLCAnYmFybmV5JzogJ3NlY29uZCcgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGludmVydChvYmplY3QpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W29iamVjdFtrZXldXSA9IGtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuIHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSBib29sZWFuIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBib29sQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBkYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSBkYXRlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IGRhdGVDbGFzcyB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZW1wdHkuIEFycmF5cywgc3RyaW5ncywgb3IgYGFyZ3VtZW50c2Agb2JqZWN0cyB3aXRoIGFcbiAgICAgKiBsZW5ndGggb2YgYDBgIGFuZCBvYmplY3RzIHdpdGggbm8gb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBhcmUgY29uc2lkZXJlZFxuICAgICAqIFwiZW1wdHlcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KCcnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbCh2YWx1ZSksXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgICBpZiAoKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzIHx8IGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcyB8fCBjbGFzc05hbWUgPT0gYXJnc0NsYXNzICkgfHxcbiAgICAgICAgICAoY2xhc3NOYW1lID09IG9iamVjdENsYXNzICYmIHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgaXNGdW5jdGlvbih2YWx1ZS5zcGxpY2UpKSkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvck93bih2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAocmVzdWx0ID0gZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50IHRvIGVhY2ggb3RoZXIuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZFxuICAgICAqIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBgdW5kZWZpbmVkYCBjb21wYXJpc29ucyB3aWxsXG4gICAgICogYmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM7IChhLCBiKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSBhIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gYiBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnbmFtZSc6ICdmcmVkJyB9O1xuICAgICAqIHZhciBjb3B5ID0geyAnbmFtZSc6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogb2JqZWN0ID09IGNvcHk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIGNvcHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB3b3JkcyA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlcldvcmRzID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwod29yZHMsIG90aGVyV29yZHMsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgKiAgIHZhciByZUdyZWV0ID0gL14oPzpoZWxsb3xoaSkkL2ksXG4gICAgICogICAgICAgYUdyZWV0ID0gXy5pc1N0cmluZyhhKSAmJiByZUdyZWV0LnRlc3QoYSksXG4gICAgICogICAgICAgYkdyZWV0ID0gXy5pc1N0cmluZyhiKSAmJiByZUdyZWV0LnRlc3QoYik7XG4gICAgICpcbiAgICAgKiAgIHJldHVybiAoYUdyZWV0IHx8IGJHcmVldCkgPyAoYUdyZWV0ID09IGJHcmVldCkgOiB1bmRlZmluZWQ7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwoYSwgYiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbChhLCBiLCB0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyAmJiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcywgb3IgY2FuIGJlIGNvZXJjZWQgdG8sIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIG5hdGl2ZSBgaXNGaW5pdGVgIHdoaWNoIHdpbGwgcmV0dXJuIHRydWUgZm9yXG4gICAgICogYm9vbGVhbnMgYW5kIGVtcHR5IHN0cmluZ3MuIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi41LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgZmluaXRlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoLTEwMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMTAnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKHRydWUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCcnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZUlzRmluaXRlKHZhbHVlKSAmJiAhbmF0aXZlSXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZSBsYW5ndWFnZSB0eXBlIG9mIE9iamVjdC5cbiAgICAgKiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCgxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICAvLyBjaGVjayBpZiB0aGUgdmFsdWUgaXMgdGhlIEVDTUFTY3JpcHQgbGFuZ3VhZ2UgdHlwZSBvZiBPYmplY3RcbiAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4OFxuICAgICAgLy8gYW5kIGF2b2lkIGEgVjggYnVnXG4gICAgICAvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMjkxXG4gICAgICByZXR1cm4gISEodmFsdWUgJiYgb2JqZWN0VHlwZXNbdHlwZW9mIHZhbHVlXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIGlzIG5vdCB0aGUgc2FtZSBhcyBuYXRpdmUgYGlzTmFOYCB3aGljaCB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1lcmljIHZhbHVlcy4gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIGBOYU5gIGFzIGEgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZlxuICAgICAgLy8gKHBlcmZvcm0gdGhlIFtbQ2xhc3NdXSBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lIGhvc3Qgb2JqZWN0cyBpbiBJRSlcbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBOb3RlOiBgTmFOYCBpcyBjb25zaWRlcmVkIGEgbnVtYmVyLiBTZWUgaHR0cDovL2VzNS5naXRodWIuaW8vI3g4LjUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDguNCAqIDUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gbnVtYmVyQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgU2hhcGUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIHZhciBpc1BsYWluT2JqZWN0ID0gIWdldFByb3RvdHlwZU9mID8gc2hpbUlzUGxhaW5PYmplY3QgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCEodmFsdWUgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gb2JqZWN0Q2xhc3MpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZixcbiAgICAgICAgICBvYmpQcm90byA9IGlzTmF0aXZlKHZhbHVlT2YpICYmIChvYmpQcm90byA9IGdldFByb3RvdHlwZU9mKHZhbHVlT2YpKSAmJiBnZXRQcm90b3R5cGVPZihvYmpQcm90byk7XG5cbiAgICAgIHJldHVybiBvYmpQcm90b1xuICAgICAgICA/ICh2YWx1ZSA9PSBvYmpQcm90byB8fCBnZXRQcm90b3R5cGVPZih2YWx1ZSkgPT0gb2JqUHJvdG8pXG4gICAgICAgIDogc2hpbUlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgcmVndWxhciBleHByZXNzaW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2ZyZWQvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gcmVnZXhwQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdmcmVkJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzdHJpbmdDbGFzcyB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkIGJ5XG4gICAgICogcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocm91Z2ggdGhlIGNhbGxiYWNrLlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBvYmplY3Qgd2l0aCB2YWx1ZXMgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXMoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzfSAsIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICogMzsgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDMsICdiJzogNiwgJ2MnOiA5IH1cbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcFZhbHVlcyhjaGFyYWN0ZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG5cbiAgICAgIGZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgbWVyZ2VzIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBvYmplY3QocyksIHRoYXRcbiAgICAgKiBkb24ndCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGludG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gU3Vic2VxdWVudCBzb3VyY2VzXG4gICAgICogd2lsbCBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy4gSWYgYSBjYWxsYmFjayBpc1xuICAgICAqIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb25cbiAgICAgKiBhbmQgc291cmNlIHByb3BlcnRpZXMuIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGB1bmRlZmluZWRgIG1lcmdpbmcgd2lsbFxuICAgICAqIGJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZFxuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOyAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdpbmcgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBuYW1lcyA9IHtcbiAgICAgKiAgICdjaGFyYWN0ZXJzJzogW1xuICAgICAqICAgICB7ICduYW1lJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgICAgeyAnbmFtZSc6ICdmcmVkJyB9XG4gICAgICogICBdXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBhZ2VzID0ge1xuICAgICAqICAgJ2NoYXJhY3RlcnMnOiBbXG4gICAgICogICAgIHsgJ2FnZSc6IDM2IH0sXG4gICAgICogICAgIHsgJ2FnZSc6IDQwIH1cbiAgICAgKiAgIF1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShuYW1lcywgYWdlcyk7XG4gICAgICogLy8gPT4geyAnY2hhcmFjdGVycyc6IFt7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LCB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV0gfVxuICAgICAqXG4gICAgICogdmFyIGZvb2QgPSB7XG4gICAgICogICAnZnJ1aXRzJzogWydhcHBsZSddLFxuICAgICAqICAgJ3ZlZ2V0YWJsZXMnOiBbJ2JlZXQnXVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXJGb29kID0ge1xuICAgICAqICAgJ2ZydWl0cyc6IFsnYmFuYW5hJ10sXG4gICAgICogICAndmVnZXRhYmxlcyc6IFsnY2Fycm90J11cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShmb29kLCBvdGhlckZvb2QsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzQXJyYXkoYSkgPyBhLmNvbmNhdChiKSA6IHVuZGVmaW5lZDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcnVpdHMnOiBbJ2FwcGxlJywgJ2JhbmFuYSddLCAndmVnZXRhYmxlcyc6IFsnYmVldCcsICdjYXJyb3RdIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZShvYmplY3QpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIGxlbmd0aCA9IDI7XG5cbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgLy8gYWxsb3dzIHdvcmtpbmcgd2l0aCBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAgd2l0aG91dCB1c2luZ1xuICAgICAgLy8gdGhlaXIgYGluZGV4YCBhbmQgYGNvbGxlY3Rpb25gIGFyZ3VtZW50c1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzJdICE9ICdudW1iZXInKSB7XG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+IDMgJiYgdHlwZW9mIGFyZ3NbbGVuZ3RoIC0gMl0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soYXJnc1stLWxlbmd0aCAtIDFdLCBhcmdzW2xlbmd0aC0tXSwgMik7XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgdHlwZW9mIGFyZ3NbbGVuZ3RoIC0gMV0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IGFyZ3NbLS1sZW5ndGhdO1xuICAgICAgfVxuICAgICAgdmFyIHNvdXJjZXMgPSBzbGljZShhcmd1bWVudHMsIDEsIGxlbmd0aCksXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBzdGFja0EgPSBnZXRBcnJheSgpLFxuICAgICAgICAgIHN0YWNrQiA9IGdldEFycmF5KCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZXNbaW5kZXhdLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgfVxuICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQSk7XG4gICAgICByZWxlYXNlQXJyYXkoc3RhY2tCKTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYG9iamVjdGAgZXhjbHVkaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZlxuICAgICAqIHByb3BlcnR5IG5hbWVzLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2hcbiAgICAgKiBwcm9wZXJ0eSBvZiBgb2JqZWN0YCBvbWl0dGluZyB0aGUgcHJvcGVydGllcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleVxuICAgICAqIGZvci4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50cztcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufC4uLnN0cmluZ3xzdHJpbmdbXX0gW2NhbGxiYWNrXSBUaGUgcHJvcGVydGllcyB0byBvbWl0IG9yIHRoZVxuICAgICAqICBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRob3V0IHRoZSBvbWl0dGVkIHByb3BlcnRpZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ub21pdCh7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSwgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnZnJlZCcgfVxuICAgICAqXG4gICAgICogXy5vbWl0KHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0KG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcHJvcHMgPSBbXTtcbiAgICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgcHJvcHMucHVzaChrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvcHMgPSBiYXNlRGlmZmVyZW5jZShwcm9wcywgYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSkpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IG9iamVjdFtrZXldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgICAgaWYgKCFjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0d28gZGltZW5zaW9uYWwgYXJyYXkgb2YgYW4gb2JqZWN0J3Mga2V5LXZhbHVlIHBhaXJzLFxuICAgICAqIGkuZS4gYFtba2V5MSwgdmFsdWUxXSwgW2tleTIsIHZhbHVlMl1dYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIG5ldyBhcnJheSBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFpcnMoeyAnYmFybmV5JzogMzYsICdmcmVkJzogNDAgfSk7XG4gICAgICogLy8gPT4gW1snYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCA0MF1dIChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhaXJzKG9iamVjdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGBvYmplY3RgIGNvbXBvc2VkIG9mIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZlxuICAgICAqIHByb3BlcnR5IG5hbWVzLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2hcbiAgICAgKiBwcm9wZXJ0eSBvZiBgb2JqZWN0YCBwaWNraW5nIHRoZSBwcm9wZXJ0aWVzIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5XG4gICAgICogZm9yLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzO1xuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258Li4uc3RyaW5nfHN0cmluZ1tdfSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyXG4gICAgICogIGl0ZXJhdGlvbiBvciBwcm9wZXJ0eSBuYW1lcyB0byBwaWNrLCBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBwcm9wZXJ0eVxuICAgICAqICBuYW1lcyBvciBhcnJheXMgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBpY2soeyAnbmFtZSc6ICdmcmVkJywgJ191c2VyaWQnOiAnZnJlZDEnIH0sICduYW1lJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdmcmVkJyB9XG4gICAgICpcbiAgICAgKiBfLnBpY2soeyAnbmFtZSc6ICdmcmVkJywgJ191c2VyaWQnOiAnZnJlZDEnIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkuY2hhckF0KDApICE9ICdfJztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrKG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIHByb3BzID0gYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSksXG4gICAgICAgICAgICBsZW5ndGggPSBpc09iamVjdChvYmplY3QpID8gcHJvcHMubGVuZ3RoIDogMDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYCB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyB0aHJvdWdoIGEgY2FsbGJhY2ssIHdpdGggZWFjaCBjYWxsYmFjayBleGVjdXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0b1xuICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOyAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogQ2FsbGJhY2tzIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNxdWFyZXMgPSBfLnRyYW5zZm9ybShbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdLCBmdW5jdGlvbihyZXN1bHQsIG51bSkge1xuICAgICAqICAgbnVtICo9IG51bTtcbiAgICAgKiAgIGlmIChudW0gJSAyKSB7XG4gICAgICogICAgIHJldHVybiByZXN1bHQucHVzaChudW0pIDwgMztcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgOSwgMjVdXG4gICAgICpcbiAgICAgKiB2YXIgbWFwcGVkID0gXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIGZ1bmN0aW9uKHJlc3VsdCwgbnVtLCBrZXkpIHtcbiAgICAgKiAgIHJlc3VsdFtrZXldID0gbnVtICogMztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMywgJ2InOiA2LCAnYyc6IDkgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGNhbGxiYWNrLCBhY2N1bXVsYXRvciwgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICAgIHByb3RvID0gY3RvciAmJiBjdG9yLnByb3RvdHlwZTtcblxuICAgICAgICAgIGFjY3VtdWxhdG9yID0gYmFzZUNyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgNCk7XG4gICAgICAgIChpc0FyciA/IGZvckVhY2ggOiBmb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjb21wb3NlZCBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBvYmplY3RbcHJvcHNbaW5kZXhdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIGZyb20gdGhlIHNwZWNpZmllZCBpbmRleGVzLCBvciBrZXlzLCBvZiB0aGVcbiAgICAgKiBgY29sbGVjdGlvbmAuIEluZGV4ZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50cyBvciBhcyBhcnJheXNcbiAgICAgKiBvZiBpbmRleGVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW118c3RyaW5nfHN0cmluZ1tdKX0gW2luZGV4XSBUaGUgaW5kZXhlcyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiAgIHRvIHJldHJpZXZlLCBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBpbmRleGVzIG9yIGFycmF5cyBvZiBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyBjb3JyZXNwb25kaW5nIHRvIHRoZVxuICAgICAqICBwcm92aWRlZCBpbmRleGVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmF0KFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ10sIFswLCAyLCA0XSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnLCAnZSddXG4gICAgICpcbiAgICAgKiBfLmF0KFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddLCAwLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXQoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBwcm9wcyA9IGJhc2VGbGF0dGVuKGFyZ3MsIHRydWUsIGZhbHNlLCAxKSxcbiAgICAgICAgICBsZW5ndGggPSAoYXJnc1syXSAmJiBhcmdzWzJdW2FyZ3NbMV1dID09PSBjb2xsZWN0aW9uKSA/IDEgOiBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gY29sbGVjdGlvbltwcm9wc1tpbmRleF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBnaXZlbiB2YWx1ZSBpcyBwcmVzZW50IGluIGEgY29sbGVjdGlvbiB1c2luZyBzdHJpY3QgZXF1YWxpdHlcbiAgICAgKiBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgaW5jbHVkZVxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIGNoZWNrIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdGFyZ2V0YCBlbGVtZW50IGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29udGFpbnMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbnRhaW5zKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uY29udGFpbnMoeyAnbmFtZSc6ICdmcmVkJywgJ2FnZSc6IDQwIH0sICdmcmVkJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb250YWlucygncGViYmxlcycsICdlYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb250YWlucyhjb2xsZWN0aW9uLCB0YXJnZXQsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSxcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heCgwLCBsZW5ndGggKyBmcm9tSW5kZXgpIDogZnJvbUluZGV4KSB8fCAwO1xuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5kZXhPZihjb2xsZWN0aW9uLCB0YXJnZXQsIGZyb21JbmRleCkgPiAtMTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXN1bHQgPSAoaXNTdHJpbmcoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uLmluZGV4T2YodGFyZ2V0LCBmcm9tSW5kZXgpIDogaW5kZXhPZihjb2xsZWN0aW9uLCB0YXJnZXQsIGZyb21JbmRleCkpID4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoKytpbmRleCA+PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAhKHJlc3VsdCA9IHZhbHVlID09PSB0YXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhyb3VnaCB0aGUgY2FsbGJhY2suIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlXG4gICAgICogb2YgZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2suXG4gICAgICogVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50cztcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzQuMywgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguZmxvb3IobnVtKTsgfSk7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzQuMywgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuZmxvb3IobnVtKTsgfSwgTWF0aCk7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XSsrIDogcmVzdWx0W2tleV0gPSAxKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gY2FsbGJhY2sgcmV0dXJucyB0cnVleSB2YWx1ZSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbi4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBhbGxcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzZWQgdGhlIGNhbGxiYWNrIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ldmVyeShjaGFyYWN0ZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ldmVyeShjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAzNiB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSAhIWNhbGxiYWNrKGNvbGxlY3Rpb25baW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbikpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvck93bihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9ICEhY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5IGZvci4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmRcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBzZWxlY3RcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgcGFzc2VkIHRoZSBjYWxsYmFjayBjaGVjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGV2ZW5zID0gXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAlIDIgPT0gMDsgfSk7XG4gICAgICogLy8gPT4gWzIsIDQsIDZdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maWx0ZXIoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdmcmVkJywgJ2FnZSc6IDQwLCAnYmxvY2tlZCc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmlsdGVyKGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDM2IH0pO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiBmYWxzZSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbGxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50IHRoYXRcbiAgICAgKiB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleSBmb3IuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgZGV0ZWN0LCBmaW5kV2hlcmVcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYmxvY2tlZCc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKGNoYXJhY3RlcnMsIGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgcmV0dXJuIGNoci5hZ2UgPCA0MDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiBmYWxzZSB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmQoY2hhcmFjdGVycywgeyAnYWdlJzogMSB9KTtcbiAgICAgKiAvLyA9PiAgeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEsICdibG9ja2VkJzogZmFsc2UgfVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kKGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdmcmVkJywgJ2FnZSc6IDQwLCAnYmxvY2tlZCc6IHRydWUgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmQoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb2xsZWN0aW9uW2luZGV4XTtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgZm9yT3duKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3QoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBhIGNvbGxlY3Rpb24sIGV4ZWN1dGluZyB0aGUgY2FsbGJhY2sgZm9yIGVhY2hcbiAgICAgKiBlbGVtZW50LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzO1xuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4gQ2FsbGJhY2tzIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieVxuICAgICAqIGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBOb3RlOiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBgbGVuZ3RoYCBwcm9wZXJ0eVxuICAgICAqIGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciBgXy5mb3JJbmAgb3IgYF8uZm9yT3duYFxuICAgICAqIG1heSBiZSB1c2VkIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R8c3RyaW5nfSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLmZvckVhY2goZnVuY3Rpb24obnVtKSB7IGNvbnNvbGUubG9nKG51bSk7IH0pLmpvaW4oJywnKTtcbiAgICAgKiAvLyA9PiBsb2dzIGVhY2ggbnVtYmVyIGFuZCByZXR1cm5zICcxLDIsMydcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9LCBmdW5jdGlvbihudW0pIHsgY29uc29sZS5sb2cobnVtKTsgfSk7XG4gICAgICogLy8gPT4gbG9ncyBlYWNoIG51bWJlciBhbmQgcmV0dXJucyB0aGUgb2JqZWN0IChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7XG5cbiAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgJiYgdHlwZW9mIHRoaXNBcmcgPT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFjayA6IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChjYWxsYmFjayhjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYSBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdHxzdHJpbmd9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkuZm9yRWFjaFJpZ2h0KGZ1bmN0aW9uKG51bSkgeyBjb25zb2xlLmxvZyhudW0pOyB9KS5qb2luKCcsJyk7XG4gICAgICogLy8gPT4gbG9ncyBlYWNoIG51bWJlciBmcm9tIHJpZ2h0IHRvIGxlZnQgYW5kIHJldHVybnMgJzMsMiwxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7XG4gICAgICBjYWxsYmFjayA9IGNhbGxiYWNrICYmIHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHtcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKGNvbGxlY3Rpb25bbGVuZ3RoXSwgbGVuZ3RoLCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgICBmb3JPd24oY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICAgIGtleSA9IHByb3BzID8gcHJvcHNbLS1sZW5ndGhdIDogLS1sZW5ndGg7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNvbGxlY3Rpb25ba2V5XSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYSBjb2xsZWN0aW9uIHRocm91Z2ggdGhlIGNhbGxiYWNrLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZVxuICAgICAqIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIHRoZSBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzQuMiwgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguZmxvb3IobnVtKTsgfSk7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuNF0gfVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs0LjIsIDYuMSwgNi40XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiB0aGlzLmZsb29yKG51bSk7IH0sIE1hdGgpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjRdIH1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSA/IHJlc3VsdFtrZXldIDogcmVzdWx0W2tleV0gPSBbXSkucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgdGhlIGNvbGxlY3Rpb24gdGhyb3VnaCB0aGUgZ2l2ZW4gY2FsbGJhY2suIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGtleXMgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleXMsICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleXMsIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShrZXkuY29kZSk7IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8uaW5kZXhCeShjaGFyYWN0ZXJzLCBmdW5jdGlvbihrZXkpIHsgdGhpcy5mcm9tQ2hhckNvZGUoa2V5LmNvZGUpOyB9LCBTdHJpbmcpO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIgaW5kZXhCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIG5hbWVkIGJ5IGBtZXRob2ROYW1lYCBvbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGBjb2xsZWN0aW9uYFxuICAgICAqIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIHdpbGwgYmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYG1ldGhvZE5hbWVgIGlzIGEgZnVuY3Rpb24gaXRcbiAgICAgKiB3aWxsIGJlIGludm9rZWQgZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gdGhlIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZShbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52b2tlKGNvbGxlY3Rpb24sIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzLCAyKSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBtZXRob2ROYW1lID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheSh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDogMCk7XG5cbiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gKGlzRnVuYyA/IG1ldGhvZE5hbWUgOiB2YWx1ZVttZXRob2ROYW1lXSkuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICogdGhyb3VnaCB0aGUgY2FsbGJhY2suIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgY29sbGVjdFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAqIDM7IH0pO1xuICAgICAqIC8vID0+IFszLCA2LCA5XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gKiAzOyB9KTtcbiAgICAgKiAvLyA9PiBbMywgNiwgOV0gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWFwKGNoYXJhY3RlcnMsICduYW1lJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwO1xuXG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FsbGJhY2soY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgIGZvck93bihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmVzdWx0WysraW5kZXhdID0gY2FsbGJhY2sodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYSBjb2xsZWN0aW9uLiBJZiB0aGUgY29sbGVjdGlvbiBpcyBlbXB0eSBvclxuICAgICAqIGZhbHNleSBgLUluZmluaXR5YCBpcyByZXR1cm5lZC4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkXG4gICAgICogZm9yIGVhY2ggdmFsdWUgaW4gdGhlIGNvbGxlY3Rpb24gdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaCB0aGUgdmFsdWVcbiAgICAgKiBpcyByYW5rZWQuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWF4KGNoYXJhY3RlcnMsIGZ1bmN0aW9uKGNocikgeyByZXR1cm4gY2hyLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdmcmVkJywgJ2FnZSc6IDQwIH07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1heChjaGFyYWN0ZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdmcmVkJywgJ2FnZSc6IDQwIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgY29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gY29tcHV0ZWQ7XG5cbiAgICAgIC8vIGFsbG93cyB3b3JraW5nIHdpdGggZnVuY3Rpb25zIGxpa2UgYF8ubWFwYCB3aXRob3V0IHVzaW5nXG4gICAgICAvLyB0aGVpciBgaW5kZXhgIGFyZ3VtZW50IGFzIGEgY2FsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJyAmJiB0aGlzQXJnICYmIHRoaXNBcmdbY2FsbGJhY2tdID09PSBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsICYmIGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbGxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgIGlmICh2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IChjYWxsYmFjayA9PSBudWxsICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKVxuICAgICAgICAgID8gY2hhckF0Q2FsbGJhY2tcbiAgICAgICAgICA6IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG5cbiAgICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPiBjb21wdXRlZCkge1xuICAgICAgICAgICAgY29tcHV0ZWQgPSBjdXJyZW50O1xuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGEgY29sbGVjdGlvbi4gSWYgdGhlIGNvbGxlY3Rpb24gaXMgZW1wdHkgb3JcbiAgICAgKiBmYWxzZXkgYEluZmluaXR5YCBpcyByZXR1cm5lZC4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkXG4gICAgICogZm9yIGVhY2ggdmFsdWUgaW4gdGhlIGNvbGxlY3Rpb24gdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaCB0aGUgdmFsdWVcbiAgICAgKiBpcyByYW5rZWQuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWluKGNoYXJhY3RlcnMsIGZ1bmN0aW9uKGNocikgeyByZXR1cm4gY2hyLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWluKGNoYXJhY3RlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGNvbXB1dGVkID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gY29tcHV0ZWQ7XG5cbiAgICAgIC8vIGFsbG93cyB3b3JraW5nIHdpdGggZnVuY3Rpb25zIGxpa2UgYF8ubWFwYCB3aXRob3V0IHVzaW5nXG4gICAgICAvLyB0aGVpciBgaW5kZXhgIGFyZ3VtZW50IGFzIGEgY2FsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJyAmJiB0aGlzQXJnICYmIHRoaXNBcmdbY2FsbGJhY2tdID09PSBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsICYmIGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbGxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgIGlmICh2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IChjYWxsYmFjayA9PSBudWxsICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKVxuICAgICAgICAgID8gY2hhckF0Q2FsbGJhY2tcbiAgICAgICAgICA6IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG5cbiAgICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPCBjb21wdXRlZCkge1xuICAgICAgICAgICAgY29tcHV0ZWQgPSBjdXJyZW50O1xuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhIHNwZWNpZmllZCBwcm9wZXJ0eSBmcm9tIGFsbCBlbGVtZW50cyBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHBsdWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wbHVjayhjaGFyYWN0ZXJzLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIHZhciBwbHVjayA9IG1hcDtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYSBjb2xsZWN0aW9uIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uIHRocm91Z2ggdGhlIGNhbGxiYWNrLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBjYWxsYmFjayBleGVjdXRpb24gY29uc3VtZXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMgZXhlY3V0aW9uLiBJZlxuICAgICAqIGBhY2N1bXVsYXRvcmAgaXMgbm90IHByb3ZpZGVkIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBjb2xsZWN0aW9uIHdpbGwgYmVcbiAgICAgKiB1c2VkIGFzIHRoZSBpbml0aWFsIGBhY2N1bXVsYXRvcmAgdmFsdWUuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOyAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGZvbGRsLCBpbmplY3RcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBJbml0aWFsIHZhbHVlIG9mIHRoZSBhY2N1bXVsYXRvci5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzdW0gPSBfLnJlZHVjZShbMSwgMiwgM10sIGZ1bmN0aW9uKHN1bSwgbnVtKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbnVtO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIHZhciBtYXBwZWQgPSBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgZnVuY3Rpb24ocmVzdWx0LCBudW0sIGtleSkge1xuICAgICAqICAgcmVzdWx0W2tleV0gPSBudW0gKiAzO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnYSc6IDMsICdiJzogNiwgJ2MnOiA5IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgY2FsbGJhY2ssIGFjY3VtdWxhdG9yLCB0aGlzQXJnKSB7XG4gICAgICBpZiAoIWNvbGxlY3Rpb24pIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIHZhciBub2FjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgNCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAobm9hY2N1bSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gY29sbGVjdGlvblsrK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gY2FsbGJhY2soYWNjdW11bGF0b3IsIGNvbGxlY3Rpb25baW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvck93bihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IG5vYWNjdW1cbiAgICAgICAgICAgID8gKG5vYWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgICAgICA6IGNhbGxiYWNrKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYSBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGZvbGRyXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gSW5pdGlhbCB2YWx1ZSBvZiB0aGUgYWNjdW11bGF0b3IuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbGlzdCA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKiB2YXIgZmxhdCA9IF8ucmVkdWNlUmlnaHQobGlzdCwgZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYS5jb25jYXQoYik7IH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBjYWxsYmFjaywgYWNjdW11bGF0b3IsIHRoaXNBcmcpIHtcbiAgICAgIHZhciBub2FjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgNCk7XG4gICAgICBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gbm9hY2N1bVxuICAgICAgICAgID8gKG5vYWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgICAgOiBjYWxsYmFjayhhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgIHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGFcbiAgICAgKiBjb2xsZWN0aW9uIHRoYXQgdGhlIGNhbGxiYWNrIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1ZXkgZm9yLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgZmFpbGVkIHRoZSBjYWxsYmFjayBjaGVjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9kZHMgPSBfLnJlamVjdChbMSwgMiwgMywgNCwgNSwgNl0sIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICUgMiA9PSAwOyB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYmxvY2tlZCc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnJlamVjdChjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiBmYWxzZSB9XVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5yZWplY3QoY2hhcmFjdGVycywgeyAnYWdlJzogMzYgfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICByZXR1cm4gZmlsdGVyKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gIWNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSByYW5kb20gZWxlbWVudCBvciBgbmAgcmFuZG9tIGVsZW1lbnRzIGZyb20gYSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW25dIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBBbGxvd3Mgd29ya2luZyB3aXRoIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGBcbiAgICAgKiAgd2l0aG91dCB1c2luZyB0aGVpciBgaW5kZXhgIGFyZ3VtZW50cyBhcyBgbmAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gc2FtcGxlKHMpIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0sIDIpO1xuICAgICAqIC8vID0+IFszLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uLCBuLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gJiYgdHlwZW9mIGNvbGxlY3Rpb24ubGVuZ3RoICE9ICdudW1iZXInKSB7XG4gICAgICAgIGNvbGxlY3Rpb24gPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICB9XG4gICAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uID8gY29sbGVjdGlvbltiYXNlUmFuZG9tKDAsIGNvbGxlY3Rpb24ubGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHNodWZmbGUoY29sbGVjdGlvbik7XG4gICAgICByZXN1bHQubGVuZ3RoID0gbmF0aXZlTWluKG5hdGl2ZU1heCgwLCBuKSwgcmVzdWx0Lmxlbmd0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlIEZpc2hlci1ZYXRlc1xuICAgICAqIHNodWZmbGUuIFNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IHNodWZmbGVkIGNvbGxlY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNCwgNSwgNl0pO1xuICAgICAqIC8vID0+IFs0LCAxLCA2LCAzLCA1LCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheSh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDogMCk7XG5cbiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKDAsICsraW5kZXgpO1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gcmVzdWx0W3JhbmRdO1xuICAgICAgICByZXN1bHRbcmFuZF0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIHRoZSBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGBjb2xsZWN0aW9uLmxlbmd0aGAgZm9yIGFycmF5c1xuICAgICAqIGFuZCBhcnJheS1saWtlIG9iamVjdHMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgY29sbGVjdGlvbi5sZW5ndGhgIG9yIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDJdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gdHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyA/IGxlbmd0aCA6IGtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBhIHRydWV5IHZhbHVlIGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYVxuICAgICAqIGNvbGxlY3Rpb24uIFRoZSBmdW5jdGlvbiByZXR1cm5zIGFzIHNvb24gYXMgaXQgZmluZHMgYSBwYXNzaW5nIHZhbHVlIGFuZFxuICAgICAqIGRvZXMgbm90IGl0ZXJhdGUgb3ZlciB0aGUgZW50aXJlIGNvbGxlY3Rpb24uIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0b1xuICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgYW55XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZWQgdGhlIGNhbGxiYWNrIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiBmYWxzZSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uc29tZShjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uc29tZShjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29tZShjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoKHJlc3VsdCA9IGNhbGxiYWNrKGNvbGxlY3Rpb25baW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbikpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvck93bihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gIShyZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJvdWdoIHRoZSBjYWxsYmFjay4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCB3aWxsIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyXG4gICAgICogb2YgZXF1YWwgZWxlbWVudHMuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNvbGxlY3Rpb25cbiAgICAgKiB3aWxsIGJlIHNvcnRlZCBieSBlYWNoIHByb3BlcnR5IHZhbHVlLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIHNvcnRlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguc2luKG51bSk7IH0pO1xuICAgICAqIC8vID0+IFszLCAxLCAyXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuc2luKG51bSk7IH0sIE1hdGgpO1xuICAgICAqIC8vID0+IFszLCAxLCAyXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAgJ2FnZSc6IDI2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYWdlJzogMzAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcChfLnNvcnRCeShjaGFyYWN0ZXJzLCAnYWdlJyksIF8udmFsdWVzKTtcbiAgICAgKiAvLyA9PiBbWydiYXJuZXknLCAyNl0sIFsnZnJlZCcsIDMwXSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIC8vIHNvcnRpbmcgYnkgbXVsdGlwbGUgcHJvcGVydGllc1xuICAgICAqIF8ubWFwKF8uc29ydEJ5KGNoYXJhY3RlcnMsIFsnbmFtZScsICdhZ2UnXSksIF8udmFsdWVzKTtcbiAgICAgKiAvLyA9ID4gW1snYmFybmV5JywgMjZdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydEJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoY2FsbGJhY2spLFxuICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyA/IGxlbmd0aCA6IDApO1xuXG4gICAgICBpZiAoIWlzQXJyKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIH1cbiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgb2JqZWN0ID0gcmVzdWx0WysraW5kZXhdID0gZ2V0T2JqZWN0KCk7XG4gICAgICAgIGlmIChpc0Fycikge1xuICAgICAgICAgIG9iamVjdC5jcml0ZXJpYSA9IG1hcChjYWxsYmFjaywgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAob2JqZWN0LmNyaXRlcmlhID0gZ2V0QXJyYXkoKSlbMF0gPSBjYWxsYmFjayh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QuaW5kZXggPSBpbmRleDtcbiAgICAgICAgb2JqZWN0LnZhbHVlID0gdmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdC5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBvYmplY3QgPSByZXN1bHRbbGVuZ3RoXTtcbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBvYmplY3QudmFsdWU7XG4gICAgICAgIGlmICghaXNBcnIpIHtcbiAgICAgICAgICByZWxlYXNlQXJyYXkob2JqZWN0LmNyaXRlcmlhKTtcbiAgICAgICAgfVxuICAgICAgICByZWxlYXNlT2JqZWN0KG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBgY29sbGVjdGlvbmAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpLnNsaWNlKDEpOyB9KSgxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uICYmIHR5cGVvZiBjb2xsZWN0aW9uLmxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gc2xpY2UoY29sbGVjdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIG9mIGVhY2ggZWxlbWVudCBpbiBhIGBjb2xsZWN0aW9uYCB0byB0aGUgZ2l2ZW5cbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0LCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzIHRoYXQgaGF2ZSBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBmaWx0ZXIgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgZ2l2ZW4gcHJvcGVydGllcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ3BldHMnOiBbJ2hvcHB5J10gfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAncGV0cyc6IFsnYmFieSBwdXNzJywgJ2Rpbm8nXSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ud2hlcmUoY2hhcmFjdGVycywgeyAnYWdlJzogMzYgfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAncGV0cyc6IFsnaG9wcHknXSB9XVxuICAgICAqXG4gICAgICogXy53aGVyZShjaGFyYWN0ZXJzLCB7ICdwZXRzJzogWydkaW5vJ10gfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCwgJ3BldHMnOiBbJ2JhYnkgcHVzcycsICdkaW5vJ10gfV1cbiAgICAgKi9cbiAgICB2YXIgd2hlcmUgPSBmaWx0ZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgYWxsIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIHZhbHVlcyBvZiB0aGUgcHJvdmlkZWQgYXJyYXlzIHVzaW5nIHN0cmljdFxuICAgICAqIGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgYXJyYXlzIG9mIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMSwgMiwgMywgNCwgNV0sIFs1LCAyLCAxMF0pO1xuICAgICAqIC8vID0+IFsxLCAzLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpZmZlcmVuY2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IHRoYXQgcGFzc2VzIHRoZSBjYWxsYmFjayBjaGVjaywgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdibG9ja2VkJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleChjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlIDwgMjA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kSW5kZXgoY2hhcmFjdGVycywgeyAnYWdlJzogMzYgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kSW5kZXgoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdibG9ja2VkJzogdHJ1ZSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleChjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlID4gMzA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEluZGV4KGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDM2IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZExhc3RJbmRleChjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvciBmaXJzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGEgY2FsbGJhY2tcbiAgICAgKiBpcyBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheSBhcmUgcmV0dXJuZWQgYXMgbG9uZ1xuICAgICAqIGFzIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZFxuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGhlYWQsIHRha2VcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fG51bWJlcnxzdHJpbmd9IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgZWxlbWVudCBvciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJldHVybi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yXG4gICAgICogIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCJcbiAgICAgKiAgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudChzKSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpcnN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5maXJzdChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5maXJzdChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSA8IDM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICduYScgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpcnN0KGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgJ2Jsb2NrZWQnOiB0cnVlLCAnZW1wbG95ZXInOiAnc2xhdGUnIH1dXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZmlyc3QoY2hhcmFjdGVycywgeyAnZW1wbG95ZXInOiAnc2xhdGUnIH0pLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpcnN0KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIG4gPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGNhbGxiYWNrKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIG4rKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAobiA9PSBudWxsIHx8IHRoaXNBcmcpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIG4pLCBsZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBhIG5lc3RlZCBhcnJheSAodGhlIG5lc3RpbmcgY2FuIGJlIHRvIGFueSBkZXB0aCkuIElmIGBpc1NoYWxsb3dgXG4gICAgICogaXMgdHJ1ZXksIHRoZSBhcnJheSB3aWxsIG9ubHkgYmUgZmxhdHRlbmVkIGEgc2luZ2xlIGxldmVsLiBJZiBhIGNhbGxiYWNrXG4gICAgICogaXMgcHJvdmlkZWQgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSBpcyBwYXNzZWQgdGhyb3VnaCB0aGUgY2FsbGJhY2sgYmVmb3JlXG4gICAgICogZmxhdHRlbmluZy4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1NoYWxsb3c9ZmFsc2VdIEEgZmxhZyB0byByZXN0cmljdCBmbGF0dGVuaW5nIHRvIGEgc2luZ2xlIGxldmVsLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMl0sIFszLCBbWzRdXV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyXSwgWzMsIFtbNF1dXV0sIHRydWUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbWzRdXV07XG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDMwLCAncGV0cyc6IFsnaG9wcHknXSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAsICdwZXRzJzogWydiYWJ5IHB1c3MnLCAnZGlubyddIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5mbGF0dGVuKGNoYXJhY3RlcnMsICdwZXRzJyk7XG4gICAgICogLy8gPT4gWydob3BweScsICdiYWJ5IHB1c3MnLCAnZGlubyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSwgaXNTaGFsbG93LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgLy8ganVnZ2xlIGFyZ3VtZW50c1xuICAgICAgaWYgKHR5cGVvZiBpc1NoYWxsb3cgIT0gJ2Jvb2xlYW4nICYmIGlzU2hhbGxvdyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSAodHlwZW9mIGlzU2hhbGxvdyAhPSAnZnVuY3Rpb24nICYmIHRoaXNBcmcgJiYgdGhpc0FyZ1tpc1NoYWxsb3ddID09PSBhcnJheSkgPyBudWxsIDogaXNTaGFsbG93O1xuICAgICAgICBpc1NoYWxsb3cgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIGFycmF5ID0gbWFwKGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGlzU2hhbGxvdyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCB1c2luZ1xuICAgICAqIHN0cmljdCBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIHRoZSBhcnJheSBpcyBhbHJlYWR5IHNvcnRlZFxuICAgICAqIHByb3ZpZGluZyBgdHJ1ZWAgZm9yIGBmcm9tSW5kZXhgIHdpbGwgcnVuIGEgZmFzdGVyIGJpbmFyeSBzZWFyY2guXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tIG9yIGB0cnVlYFxuICAgICAqICB0byBwZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBvbiBhIHNvcnRlZCBhcnJheS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSBvciBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDMsIDEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDMsIDEsIDIsIDNdLCAyLCAzKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDEsIDIsIDIsIDMsIDNdLCAyLCB0cnVlKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgoMCwgbGVuZ3RoICsgZnJvbUluZGV4KSA6IGZyb21JbmRleCB8fCAwKTtcbiAgICAgIH0gZWxzZSBpZiAoZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpbmRleCA9IHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpbmRleF0gPT09IHZhbHVlID8gaW5kZXggOiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb3IgbGFzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGFcbiAgICAgKiBjYWxsYmFjayBpcyBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheSBhcmUgZXhjbHVkZWQgZnJvbVxuICAgICAqIHRoZSByZXN1bHQgYXMgbG9uZyBhcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleS4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kXG4gICAgICogdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8bnVtYmVyfHN0cmluZ30gW2NhbGxiYWNrPTFdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBleGNsdWRlLiBJZiBhIHByb3BlcnR5IG5hbWUgb3JcbiAgICAgKiAgb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIlxuICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHtcbiAgICAgKiAgIHJldHVybiBudW0gPiAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYmxvY2tlZCc6IGZhbHNlLCAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnbmEnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5pbml0aWFsKGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5pbml0aWFsKGNoYXJhY3RlcnMsIHsgJ2VtcGxveWVyJzogJ25hJyB9KSwgJ25hbWUnKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIG4gPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgICB3aGlsZSAoaW5kZXgtLSAmJiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICBuKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSAoY2FsbGJhY2sgPT0gbnVsbCB8fCB0aGlzQXJnKSA/IDEgOiBjYWxsYmFjayB8fCBuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIGxlbmd0aCAtIG4pLCBsZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgcHJlc2VudCBpbiBhbGwgcHJvdmlkZWQgYXJyYXlzIHVzaW5nXG4gICAgICogc3RyaWN0IGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXldIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzEsIDIsIDNdLCBbNSwgMiwgMSwgNF0sIFsyLCAxXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBnZXRBcnJheSgpLFxuICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksXG4gICAgICAgICAgdHJ1c3RJbmRleE9mID0gaW5kZXhPZiA9PT0gYmFzZUluZGV4T2YsXG4gICAgICAgICAgc2VlbiA9IGdldEFycmF5KCk7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzW2FyZ3NJbmRleF07XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpIHtcbiAgICAgICAgICBhcmdzLnB1c2godmFsdWUpO1xuICAgICAgICAgIGNhY2hlcy5wdXNoKHRydXN0SW5kZXhPZiAmJiB2YWx1ZS5sZW5ndGggPj0gbGFyZ2VBcnJheVNpemUgJiZcbiAgICAgICAgICAgIGNyZWF0ZUNhY2hlKGFyZ3NJbmRleCA/IGFyZ3NbYXJnc0luZGV4XSA6IHNlZW4pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGFycmF5ID0gYXJnc1swXSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbMF07XG4gICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIGlmICgoY2FjaGUgPyBjYWNoZUluZGV4T2YoY2FjaGUsIHZhbHVlKSA6IGluZGV4T2Yoc2VlbiwgdmFsdWUpKSA8IDApIHtcbiAgICAgICAgICBhcmdzSW5kZXggPSBhcmdzTGVuZ3RoO1xuICAgICAgICAgIChjYWNoZSB8fCBzZWVuKS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICB3aGlsZSAoLS1hcmdzSW5kZXgpIHtcbiAgICAgICAgICAgIGNhY2hlID0gY2FjaGVzW2FyZ3NJbmRleF07XG4gICAgICAgICAgICBpZiAoKGNhY2hlID8gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkgOiBpbmRleE9mKGFyZ3NbYXJnc0luZGV4XSwgdmFsdWUpKSA8IDApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICBjYWNoZSA9IGNhY2hlc1thcmdzTGVuZ3RoXTtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgcmVsZWFzZU9iamVjdChjYWNoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlbGVhc2VBcnJheShjYWNoZXMpO1xuICAgICAgcmVsZWFzZUFycmF5KHNlZW4pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb3IgbGFzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGEgY2FsbGJhY2sgaXNcbiAgICAgKiBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheSBhcmUgcmV0dXJuZWQgYXMgbG9uZyBhcyB0aGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIHRydWV5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxudW1iZXJ8c3RyaW5nfSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZXR1cm4uIElmIGEgcHJvcGVydHkgbmFtZSBvclxuICAgICAqICBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiXG4gICAgICogIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudChzKSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSA+IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICduYScgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8ubGFzdChjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubGFzdChjaGFyYWN0ZXJzLCB7ICdlbXBsb3llcic6ICduYScgfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgJ2VtcGxveWVyJzogJ25hJyB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgbiA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdudW1iZXInICYmIGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIHdoaWxlIChpbmRleC0tICYmIGNhbGxiYWNrKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIG4rKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAobiA9PSBudWxsIHx8IHRoaXNBcmcpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCBuYXRpdmVNYXgoMCwgbGVuZ3RoIC0gbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBsYXN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCB1c2luZyBzdHJpY3RcbiAgICAgKiBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkXG4gICAgICogYXMgdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSBvciBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAzLCAxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMywgMSwgMiwgM10sIDIsIDMpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGluZGV4ID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5kZXggPSAoZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heCgwLCBpbmRleCArIGZyb21JbmRleCkgOiBuYXRpdmVNaW4oZnJvbUluZGV4LCBpbmRleCAtIDEpKSArIDE7XG4gICAgICB9XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHByb3ZpZGVkIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBhcnJheSB1c2luZyBzdHJpY3QgZXF1YWxpdHkgZm9yXG4gICAgICogY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZV0gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCAxLCAyLCAzXTtcbiAgICAgKiBfLnB1bGwoYXJyYXksIDIsIDMpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsKGFycmF5KSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBhcmdzSW5kZXggPSAwLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LS0sIDEpO1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIGBlbmRgLiBJZiBgc3RhcnRgIGlzIGxlc3MgdGhhbiBgc3RvcGAgYVxuICAgICAqIHplcm8tbGVuZ3RoIHJhbmdlIGlzIGNyZWF0ZWQgdW5sZXNzIGEgbmVnYXRpdmUgYHN0ZXBgIGlzIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IHJhbmdlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgIHN0YXJ0ID0gK3N0YXJ0IHx8IDA7XG4gICAgICBzdGVwID0gdHlwZW9mIHN0ZXAgPT0gJ251bWJlcicgPyBzdGVwIDogKCtzdGVwIHx8IDEpO1xuXG4gICAgICBpZiAoZW5kID09IG51bGwpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIC8vIHVzZSBgQXJyYXkobGVuZ3RoKWAgc28gZW5naW5lcyBsaWtlIENoYWtyYSBhbmQgVjggYXZvaWQgc2xvd2VyIG1vZGVzXG4gICAgICAvLyBodHRwOi8veW91dHUuYmUvWEFxSXBHVThaWmsjdD0xN20yNXNcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heCgwLCBjZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSkpLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSB0aGF0IHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNCwgNSwgNl07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICUgMiA9PSAwOyB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNCwgNl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleC0tLCAxKTtcbiAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uaW5pdGlhbGAgdGhpcyBtZXRob2QgZ2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9yXG4gICAgICogZmlyc3QgYG5gIGVsZW1lbnRzIG9mIGFuIGFycmF5LiBJZiBhIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGVsZW1lbnRzXG4gICAgICogYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgYXJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJlc3VsdCBhcyBsb25nIGFzIHRoZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgdHJ1ZXkuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgZHJvcCwgdGFpbFxuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8bnVtYmVyfHN0cmluZ30gW2NhbGxiYWNrPTFdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBleGNsdWRlLiBJZiBhIHByb3BlcnR5IG5hbWUgb3JcbiAgICAgKiAgb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIlxuICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5yZXN0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnJlc3QoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHtcbiAgICAgKiAgIHJldHVybiBudW0gPCAzO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYmxvY2tlZCc6IGZhbHNlLCAgJ2VtcGxveWVyJzogJ3NsYXRlJyB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdwZWJibGVzJywgJ2Jsb2NrZWQnOiB0cnVlLCAnZW1wbG95ZXInOiAnbmEnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnJlc3QoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKSwgJ25hbWUnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnJlc3QoY2hhcmFjdGVycywgeyAnZW1wbG95ZXInOiAnc2xhdGUnIH0pO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ3BlYmJsZXMnLCAnYmxvY2tlZCc6IHRydWUsICdlbXBsb3llcic6ICduYScgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBuID0gMCxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICBuKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSAoY2FsbGJhY2sgPT0gbnVsbCB8fCB0aGlzQXJnKSA/IDEgOiBuYXRpdmVNYXgoMCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoIGEgdmFsdWVcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBhIGdpdmVuIHNvcnRlZCBhcnJheSBpbiBvcmRlciB0byBtYWludGFpbiB0aGUgc29ydFxuICAgICAqIG9yZGVyIG9mIHRoZSBhcnJheS4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkIGZvclxuICAgICAqIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXIgc29ydCByYW5raW5nLiBUaGVcbiAgICAgKiBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMjAsIDMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnNvcnRlZEluZGV4KFt7ICd4JzogMjAgfSwgeyAneCc6IDMwIH0sIHsgJ3gnOiA1MCB9XSwgeyAneCc6IDQwIH0sICd4Jyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogdmFyIGRpY3QgPSB7XG4gICAgICogICAnd29yZFRvTnVtYmVyJzogeyAndHdlbnR5JzogMjAsICd0aGlydHknOiAzMCwgJ2ZvdXJ0eSc6IDQwLCAnZmlmdHknOiA1MCB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWyd0d2VudHknLCAndGhpcnR5JywgJ2ZpZnR5J10sICdmb3VydHknLCBmdW5jdGlvbih3b3JkKSB7XG4gICAgICogICByZXR1cm4gZGljdC53b3JkVG9OdW1iZXJbd29yZF07XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbJ3R3ZW50eScsICd0aGlydHknLCAnZmlmdHknXSwgJ2ZvdXJ0eScsIGZ1bmN0aW9uKHdvcmQpIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLndvcmRUb051bWJlclt3b3JkXTtcbiAgICAgKiB9LCBkaWN0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogbG93O1xuXG4gICAgICAvLyBleHBsaWNpdGx5IHJlZmVyZW5jZSBgaWRlbnRpdHlgIGZvciBiZXR0ZXIgaW5saW5pbmcgaW4gRmlyZWZveFxuICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayA/IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMSkgOiBpZGVudGl0eTtcbiAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUpO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxO1xuICAgICAgICAoY2FsbGJhY2soYXJyYXlbbWlkXSkgPCB2YWx1ZSlcbiAgICAgICAgICA/IGxvdyA9IG1pZCArIDFcbiAgICAgICAgICA6IGhpZ2ggPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG93O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIG9mIHRoZSBwcm92aWRlZCBhcnJheXMgdXNpbmdcbiAgICAgKiBzdHJpY3QgZXF1YWxpdHkgZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheV0gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzEsIDIsIDNdLCBbNSwgMiwgMSwgNF0sIFsyLCAxXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDUsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pb24oKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS12YWx1ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXkgdXNpbmcgc3RyaWN0IGVxdWFsaXR5XG4gICAgICogZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLiBJZiB0aGUgYXJyYXkgaXMgc29ydGVkLCBwcm92aWRpbmdcbiAgICAgKiBgdHJ1ZWAgZm9yIGBpc1NvcnRlZGAgd2lsbCB1c2UgYSBmYXN0ZXIgYWxnb3JpdGhtLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgaXMgcGFzc2VkIHRocm91Z2ggdGhlIGNhbGxiYWNrIGJlZm9yZSB1bmlxdWVuZXNzXG4gICAgICogaXMgY29tcHV0ZWQuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdW5pcXVlXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU29ydGVkPWZhbHNlXSBBIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBgYXJyYXlgIGlzIHNvcnRlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIGR1cGxpY2F0ZS12YWx1ZS1mcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzEsIDIsIDEsIDMsIDFdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udW5pcShbMSwgMSwgMiwgMiwgM10sIHRydWUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy51bmlxKFsnQScsICdiJywgJ0MnLCAnYScsICdCJywgJ2MnXSwgZnVuY3Rpb24obGV0dGVyKSB7IHJldHVybiBsZXR0ZXIudG9Mb3dlckNhc2UoKTsgfSk7XG4gICAgICogLy8gPT4gWydBJywgJ2InLCAnQyddXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzEsIDIuNSwgMywgMS41LCAyLCAzLjVdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuZmxvb3IobnVtKTsgfSwgTWF0aCk7XG4gICAgICogLy8gPT4gWzEsIDIuNSwgM11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8udW5pcShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSwgaXNTb3J0ZWQsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAvLyBqdWdnbGUgYXJndW1lbnRzXG4gICAgICBpZiAodHlwZW9mIGlzU29ydGVkICE9ICdib29sZWFuJyAmJiBpc1NvcnRlZCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSAodHlwZW9mIGlzU29ydGVkICE9ICdmdW5jdGlvbicgJiYgdGhpc0FyZyAmJiB0aGlzQXJnW2lzU29ydGVkXSA9PT0gYXJyYXkpID8gbnVsbCA6IGlzU29ydGVkO1xuICAgICAgICBpc1NvcnRlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGFycmF5LCBpc1NvcnRlZCwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBwcm92aWRlZCB2YWx1ZXMgdXNpbmcgc3RyaWN0IGVxdWFsaXR5IGZvclxuICAgICAqIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWx0ZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzEsIDIsIDEsIDAsIDMsIDEsIDRdLCAwLCAxKTtcbiAgICAgKiAvLyA9PiBbMiwgMywgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3aXRob3V0KGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZURpZmZlcmVuY2UoYXJyYXksIHNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgc3ltbWV0cmljIGRpZmZlcmVuY2Ugb2YgdGhlIHByb3ZpZGVkIGFycmF5cy5cbiAgICAgKiBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXldIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMSwgMiwgM10sIFs1LCAyLCAxLCA0XSk7XG4gICAgICogLy8gPT4gWzMsIDUsIDRdXG4gICAgICpcbiAgICAgKiBfLnhvcihbMSwgMiwgNV0sIFsyLCAzLCA1XSwgWzMsIDQsIDVdKTtcbiAgICAgKiAvLyA9PiBbMSwgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB4b3IoKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICBpZiAoaXNBcnJheShhcnJheSkgfHwgaXNBcmd1bWVudHMoYXJyYXkpKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3VsdFxuICAgICAgICAgICAgPyBiYXNlVW5pcShiYXNlRGlmZmVyZW5jZShyZXN1bHQsIGFycmF5KS5jb25jYXQoYmFzZURpZmZlcmVuY2UoYXJyYXksIHJlc3VsdCkpKVxuICAgICAgICAgICAgOiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCB8fCBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdW56aXBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5XSBBcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snZnJlZCcsIDMwLCB0cnVlXSwgWydiYXJuZXknLCA0MCwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcCgpIHtcbiAgICAgIHZhciBhcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzIDogYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBtYXgocGx1Y2soYXJyYXksICdsZW5ndGgnKSkgOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCA8IDAgPyAwIDogbGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHBsdWNrKGFycmF5LCBpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIGZyb20gYXJyYXlzIG9mIGBrZXlzYCBhbmQgYHZhbHVlc2AuIFByb3ZpZGVcbiAgICAgKiBlaXRoZXIgYSBzaW5nbGUgdHdvIGRpbWVuc2lvbmFsIGFycmF5LCBpLmUuIGBbW2tleTEsIHZhbHVlMV0sIFtrZXkyLCB2YWx1ZTJdXWBcbiAgICAgKiBvciB0d28gYXJyYXlzLCBvbmUgb2YgYGtleXNgIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBvYmplY3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0ga2V5cyBUaGUgYXJyYXkgb2Yga2V5cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBnaXZlbiBrZXlzIGFuZFxuICAgICAqICBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDMwLCAnYmFybmV5JzogNDAgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGtleXMgPyBrZXlzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIGlmICghdmFsdWVzICYmIGxlbmd0aCAmJiAhaXNBcnJheShrZXlzWzBdKSkge1xuICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkpIHtcbiAgICAgICAgICByZXN1bHRba2V5WzBdXSA9IGtleVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIGBmdW5jYCwgd2l0aCAgdGhlIGB0aGlzYCBiaW5kaW5nIGFuZFxuICAgICAqIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgb25seSBhZnRlciBiZWluZyBjYWxsZWQgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGJlZm9yZVxuICAgICAqICBgZnVuY2AgaXMgZXhlY3V0ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdEb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJ0RvbmUgc2F2aW5nIScsIGFmdGVyIGFsbCBzYXZlcyBoYXZlIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgcHJlcGVuZHMgYW55IGFkZGl0aW9uYWwgYGJpbmRgIGFyZ3VtZW50cyB0byB0aG9zZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBib3VuZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnXSBBcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMubmFtZTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZnVuYyA9IF8uYmluZChmdW5jLCB7ICduYW1lJzogJ2ZyZWQnIH0sICdoaScpO1xuICAgICAqIGZ1bmMoKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiaW5kKGZ1bmMsIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMlxuICAgICAgICA/IGNyZWF0ZVdyYXBwZXIoZnVuYywgMTcsIHNsaWNlKGFyZ3VtZW50cywgMiksIG51bGwsIHRoaXNBcmcpXG4gICAgICAgIDogY3JlYXRlV3JhcHBlcihmdW5jLCAxLCBudWxsLCBudWxsLCB0aGlzQXJnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLiBNZXRob2QgbmFtZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50cyBvciBhcyBhcnJheXNcbiAgICAgKiBvZiBtZXRob2QgbmFtZXMuIElmIG5vIG1ldGhvZCBuYW1lcyBhcmUgcHJvdmlkZWQgYWxsIHRoZSBmdW5jdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAgd2lsbCBiZSBib3VuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uc3RyaW5nfSBbbWV0aG9kTmFtZV0gVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG9cbiAgICAgKiAgYmluZCwgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgbWV0aG9kIG5hbWVzIG9yIGFycmF5cyBvZiBtZXRob2QgbmFtZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnb25DbGljayc6IGZ1bmN0aW9uKCkgeyBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7IH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcpO1xuICAgICAqIGpRdWVyeSgnI2RvY3MnKS5vbignY2xpY2snLCB2aWV3Lm9uQ2xpY2spO1xuICAgICAqIC8vID0+IGxvZ3MgJ2NsaWNrZWQgZG9jcycsIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmluZEFsbChvYmplY3QpIHtcbiAgICAgIHZhciBmdW5jcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSkgOiBmdW5jdGlvbnMob2JqZWN0KSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgb2JqZWN0W2tleV0gPSBjcmVhdGVXcmFwcGVyKG9iamVjdFtrZXldLCAxLCBudWxsLCBudWxsLCBvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gXG4gICAgICogYW5kIHByZXBlbmRzIGFueSBhZGRpdGlvbmFsIGBiaW5kS2V5YCBhcmd1bWVudHMgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGJvdW5kXG4gICAgICogZnVuY3Rpb24uIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG9cbiAgICAgKiByZWZlcmVuY2UgbWV0aG9kcyB0aGF0IHdpbGwgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC5cbiAgICAgKiBTZWUgaHR0cDovL21pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRoZSBtZXRob2QgYmVsb25ncyB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICduYW1lJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy5uYW1lO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGZ1bmMoKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMubmFtZSArICchJztcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZnVuYygpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJpbmRLZXkob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMlxuICAgICAgICA/IGNyZWF0ZVdyYXBwZXIoa2V5LCAxOSwgc2xpY2UoYXJndW1lbnRzLCAyKSwgbnVsbCwgb2JqZWN0KVxuICAgICAgICA6IGNyZWF0ZVdyYXBwZXIoa2V5LCAzLCBudWxsLCBudWxsLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiB0aGUgcHJvdmlkZWQgZnVuY3Rpb25zLFxuICAgICAqIHdoZXJlIGVhY2ggZnVuY3Rpb24gY29uc3VtZXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICAgICAqIEZvciBleGFtcGxlLCBjb21wb3NpbmcgdGhlIGZ1bmN0aW9ucyBgZigpYCwgYGcoKWAsIGFuZCBgaCgpYCBwcm9kdWNlcyBgZihnKGgoKSkpYC5cbiAgICAgKiBFYWNoIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjb21wb3NlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBbZnVuY10gRnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFsTmFtZU1hcCA9IHtcbiAgICAgKiAgICdwZWJibGVzJzogJ3BlbmVsb3BlJ1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZm9ybWF0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAqICAgbmFtZSA9IHJlYWxOYW1lTWFwW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgbmFtZTtcbiAgICAgKiAgIHJldHVybiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihmb3JtYXR0ZWQpIHtcbiAgICAgKiAgIHJldHVybiAnSGl5YSAnICsgZm9ybWF0dGVkICsgJyEnO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgd2VsY29tZSA9IF8uY29tcG9zZShncmVldCwgZm9ybWF0KTtcbiAgICAgKiB3ZWxjb21lKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ0hpeWEgUGVuZWxvcGUhJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gICAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgbGVuZ3RoID0gZnVuY3MubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmNzW2xlbmd0aF0pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzID0gW2Z1bmNzW2xlbmd0aF0uYXBwbHkodGhpcywgYXJncyldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0cyBvbmUgb3IgbW9yZSBhcmd1bWVudHMgb2YgYGZ1bmNgIHRoYXQgd2hlblxuICAgICAqIGludm9rZWQgZWl0aGVyIGV4ZWN1dGVzIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYWxsIGBmdW5jYCBhcmd1bWVudHNcbiAgICAgKiBoYXZlIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIG9yIG1vcmUgb2YgdGhlXG4gICAgICogcmVtYWluaW5nIGBmdW5jYCBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBjYW4gYmUgc3BlY2lmaWVkXG4gICAgICogaWYgYGZ1bmMubGVuZ3RoYCBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhhICsgYiArIGMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gNlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5KSB7XG4gICAgICBhcml0eSA9IHR5cGVvZiBhcml0eSA9PSAnbnVtYmVyJyA/IGFyaXR5IDogKCthcml0eSB8fCBmdW5jLmxlbmd0aCk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcHBlcihmdW5jLCA0LCBudWxsLCBudWxsLCBudWxsLCBhcml0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWxheSB0aGUgZXhlY3V0aW9uIG9mIGBmdW5jYCB1bnRpbCBhZnRlclxuICAgICAqIGB3YWl0YCBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgd2FzIGludm9rZWQuXG4gICAgICogUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvblxuICAgICAqIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gU3Vic2VxdWVudCBjYWxsc1xuICAgICAqIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgY2FsbC5cbiAgICAgKlxuICAgICAqIE5vdGU6IElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAgYGZ1bmNgIHdpbGwgYmUgY2FsbGVkXG4gICAgICogb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBpc1xuICAgICAqIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdIFNwZWNpZnkgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBjYWxsZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIGF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXhcbiAgICAgKiB2YXIgbGF6eUxheW91dCA9IF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApO1xuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBsYXp5TGF5b3V0KTtcbiAgICAgKlxuICAgICAqIC8vIGV4ZWN1dGUgYHNlbmRNYWlsYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzXG4gICAgICogalF1ZXJ5KCcjcG9zdGJveCcpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIGVuc3VyZSBgYmF0Y2hMb2dgIGlzIGV4ZWN1dGVkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzXG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7XG4gICAgICogICAnbWF4V2FpdCc6IDEwMDBcbiAgICAgKiB9LCBmYWxzZSk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MsXG4gICAgICAgICAgbWF4VGltZW91dElkLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBzdGFtcCxcbiAgICAgICAgICB0aGlzQXJnLFxuICAgICAgICAgIHRpbWVvdXRJZCxcbiAgICAgICAgICB0cmFpbGluZ0NhbGwsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDAsXG4gICAgICAgICAgbWF4V2FpdCA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgICB9XG4gICAgICB3YWl0ID0gbmF0aXZlTWF4KDAsIHdhaXQpIHx8IDA7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgbGVhZGluZyA9IHRydWU7XG4gICAgICAgIHRyYWlsaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSBvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heFdhaXQgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucyAmJiAobmF0aXZlTWF4KHdhaXQsIG9wdGlvbnMubWF4V2FpdCkgfHwgMCk7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGRlbGF5ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93KCkgLSBzdGFtcCk7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPD0gMCkge1xuICAgICAgICAgIGlmIChtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChtYXhUaW1lb3V0SWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaXNDYWxsZWQgPSB0cmFpbGluZ0NhbGw7XG4gICAgICAgICAgbWF4VGltZW91dElkID0gdGltZW91dElkID0gdHJhaWxpbmdDYWxsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChpc0NhbGxlZCkge1xuICAgICAgICAgICAgbGFzdENhbGxlZCA9IG5vdygpO1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICghdGltZW91dElkICYmICFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgYXJncyA9IHRoaXNBcmcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGRlbGF5ZWQsIHJlbWFpbmluZyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBtYXhEZWxheWVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhUaW1lb3V0SWQgPSB0aW1lb3V0SWQgPSB0cmFpbGluZ0NhbGwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0cmFpbGluZyB8fCAobWF4V2FpdCAhPT0gd2FpdCkpIHtcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gbm93KCk7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXRJZCAmJiAhbWF4VGltZW91dElkKSB7XG4gICAgICAgICAgICBhcmdzID0gdGhpc0FyZyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN0YW1wID0gbm93KCk7XG4gICAgICAgIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICB0cmFpbGluZ0NhbGwgPSB0cmFpbGluZyAmJiAodGltZW91dElkIHx8ICFsZWFkaW5nKTtcblxuICAgICAgICBpZiAobWF4V2FpdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB2YXIgbGVhZGluZ0NhbGwgPSBsZWFkaW5nICYmICF0aW1lb3V0SWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFtYXhUaW1lb3V0SWQgJiYgIWxlYWRpbmcpIHtcbiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlbWFpbmluZyA9IG1heFdhaXQgLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKSxcbiAgICAgICAgICAgICAgaXNDYWxsZWQgPSByZW1haW5pbmcgPD0gMDtcblxuICAgICAgICAgIGlmIChpc0NhbGxlZCkge1xuICAgICAgICAgICAgaWYgKG1heFRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICBtYXhUaW1lb3V0SWQgPSBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIG1heFRpbWVvdXRJZCA9IHNldFRpbWVvdXQobWF4RGVsYXllZCwgcmVtYWluaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2FsbGVkICYmIHRpbWVvdXRJZCkge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aW1lb3V0SWQgJiYgd2FpdCAhPT0gbWF4V2FpdCkge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZGVsYXllZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlYWRpbmdDYWxsKSB7XG4gICAgICAgICAgaXNDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2FsbGVkICYmICF0aW1lb3V0SWQgJiYgIW1heFRpbWVvdXRJZCkge1xuICAgICAgICAgIGFyZ3MgPSB0aGlzQXJnID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgZXhlY3V0aW5nIHRoZSBgZnVuY2AgZnVuY3Rpb24gdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC5cbiAgICAgKiBBZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0IGlzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnXSBBcmd1bWVudHMgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHsgY29uc29sZS5sb2codGV4dCk7IH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vIGxvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgb3IgbW9yZSBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZlcihmdW5jKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBgZnVuY2AgZnVuY3Rpb24gYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiB3aWxsIGJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0IGlzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgZXhlY3V0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7IGNvbnNvbGUubG9nKHRleHQpOyB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBsb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlbGF5KGZ1bmMsIHdhaXQpIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMsIDIpO1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdFxuICAgICAqIGJhc2VkIG9uIHRoZSBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGVcbiAgICAgKiBmaXJzdCBhcmd1bWVudCBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgY2FjaGUga2V5LlxuICAgICAqIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIFRoZSByZXN1bHQgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gQSBmdW5jdGlvbiB1c2VkIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXppbmcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmaWJvbmFjY2kgPSBfLm1lbW9pemUoZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gPCAyID8gbiA6IGZpYm9uYWNjaShuIC0gMSkgKyBmaWJvbmFjY2kobiAtIDIpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmlib25hY2NpKDkpXG4gICAgICogLy8gPT4gMzRcbiAgICAgKlxuICAgICAqIHZhciBkYXRhID0ge1xuICAgICAqICAgJ2ZyZWQnOiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyBtb2RpZnlpbmcgdGhlIHJlc3VsdCBjYWNoZVxuICAgICAqIHZhciBnZXQgPSBfLm1lbW9pemUoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gZGF0YVtuYW1lXTsgfSwgXy5pZGVudGl0eSk7XG4gICAgICogZ2V0KCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqXG4gICAgICogZ2V0LmNhY2hlLnBlYmJsZXMubmFtZSA9ICdwZW5lbG9wZSc7XG4gICAgICogZ2V0KCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdwZW5lbG9wZScsICdhZ2UnOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBtZW1vaXplZC5jYWNoZSxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleVByZWZpeCArIGFyZ3VtZW50c1swXTtcblxuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZSwga2V5KVxuICAgICAgICAgID8gY2FjaGVba2V5XVxuICAgICAgICAgIDogKGNhY2hlW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSB7fTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGV4ZWN1dGUgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxscyB0b1xuICAgICAqIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGNhbGwuIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWRcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyBgaW5pdGlhbGl6ZWAgZXhlY3V0ZXMgYGNyZWF0ZUFwcGxpY2F0aW9uYCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICB2YXIgcmFuLFxuICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChyYW4pIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICAvLyBjbGVhciB0aGUgYGZ1bmNgIHZhcmlhYmxlIHNvIHRoZSBmdW5jdGlvbiBtYXkgYmUgZ2FyYmFnZSBjb2xsZWN0ZWRcbiAgICAgICAgZnVuYyA9IG51bGw7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgaW52b2tlcyBgZnVuY2Agd2l0aCBhbnkgYWRkaXRpb25hbFxuICAgICAqIGBwYXJ0aWFsYCBhcmd1bWVudHMgcHJlcGVuZGVkIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uIFRoaXNcbiAgICAgKiBtZXRob2QgaXMgc2ltaWxhciB0byBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgbmFtZSkgeyByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lOyB9O1xuICAgICAqIHZhciBoaSA9IF8ucGFydGlhbChncmVldCwgJ2hpJyk7XG4gICAgICogaGkoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJ0aWFsKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsIDE2LCBzbGljZShhcmd1bWVudHMsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IGBwYXJ0aWFsYCBhcmd1bWVudHMgYXJlXG4gICAgICogYXBwZW5kZWQgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHNEZWVwID0gXy5wYXJ0aWFsUmlnaHQoXy5tZXJnZSwgXy5kZWZhdWx0cyk7XG4gICAgICpcbiAgICAgKiB2YXIgb3B0aW9ucyA9IHtcbiAgICAgKiAgICd2YXJpYWJsZSc6ICdkYXRhJyxcbiAgICAgKiAgICdpbXBvcnRzJzogeyAnanEnOiAkIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZGVmYXVsdHNEZWVwKG9wdGlvbnMsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG4gICAgICpcbiAgICAgKiBvcHRpb25zLnZhcmlhYmxlXG4gICAgICogLy8gPT4gJ2RhdGEnXG4gICAgICpcbiAgICAgKiBvcHRpb25zLmltcG9ydHNcbiAgICAgKiAvLyA9PiB7ICdfJzogXywgJ2pxJzogJCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFydGlhbFJpZ2h0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsIDMyLCBudWxsLCBzbGljZShhcmd1bWVudHMsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBleGVjdXRlZCwgd2lsbCBvbmx5IGNhbGwgdGhlIGBmdW5jYCBmdW5jdGlvblxuICAgICAqIGF0IG1vc3Qgb25jZSBwZXIgZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0b1xuICAgICAqIGluZGljYXRlIHRoYXQgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlXG4gICAgICogb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbFxuICAgICAqIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBjYWxsLlxuICAgICAqXG4gICAgICogTm90ZTogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCBgZnVuY2Agd2lsbCBiZSBjYWxsZWRcbiAgICAgKiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGlzXG4gICAgICogaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGV4ZWN1dGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdIFNwZWNpZnkgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIGF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmdcbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKTtcbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIGV4ZWN1dGUgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlc1xuICAgICAqIGpRdWVyeSgnLmludGVyYWN0aXZlJykub24oJ2NsaWNrJywgXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHtcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGxlYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZU9wdGlvbnMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICBkZWJvdW5jZU9wdGlvbnMubWF4V2FpdCA9IHdhaXQ7XG4gICAgICBkZWJvdW5jZU9wdGlvbnMudHJhaWxpbmcgPSB0cmFpbGluZztcblxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGRlYm91bmNlT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byB0aGUgd3JhcHBlciBmdW5jdGlvbiBhcyBpdHNcbiAgICAgKiBmaXJzdCBhcmd1bWVudC4gQWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSB3cmFwcGVyIGZ1bmN0aW9uLiBUaGUgd3JhcHBlciBpcyBleGVjdXRlZCB3aXRoXG4gICAgICogdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdGcmVkLCBXaWxtYSwgJiBQZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPkZyZWQsIFdpbG1hLCAmYW1wOyBQZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcHBlcih3cmFwcGVyLCAxNiwgW3ZhbHVlXSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ25hbWUnOiAnZnJlZCcgfTtcbiAgICAgKiB2YXIgZ2V0dGVyID0gXy5jb25zdGFudChvYmplY3QpO1xuICAgICAqIGdldHRlcigpID09PSBvYmplY3Q7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSBjYWxsYmFjayBib3VuZCB0byBhbiBvcHRpb25hbCBgdGhpc0FyZ2AuIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5XG4gICAgICogbmFtZSB0aGUgY3JlYXRlZCBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKiBJZiBgZnVuY2AgaXMgYW4gb2JqZWN0IHRoZSBjcmVhdGVkIGNhbGxiYWNrIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHNcbiAgICAgKiB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnQgb2JqZWN0IHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCB3aWxsIHJldHVybiBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9aWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJnQ291bnRdIFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRoZSBjYWxsYmFjayBhY2NlcHRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHdyYXAgdG8gY3JlYXRlIGN1c3RvbSBjYWxsYmFjayBzaG9ydGhhbmRzXG4gICAgICogXy5jcmVhdGVDYWxsYmFjayA9IF8ud3JhcChfLmNyZWF0ZUNhbGxiYWNrLCBmdW5jdGlvbihmdW5jLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAqICAgdmFyIG1hdGNoID0gL14oLis/KV9fKFtnbF10KSguKykkLy5leGVjKGNhbGxiYWNrKTtcbiAgICAgKiAgIHJldHVybiAhbWF0Y2ggPyBmdW5jKGNhbGxiYWNrLCB0aGlzQXJnKSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAqICAgICByZXR1cm4gbWF0Y2hbMl0gPT0gJ2d0JyA/IG9iamVjdFttYXRjaFsxXV0gPiBtYXRjaFszXSA6IG9iamVjdFttYXRjaFsxXV0gPCBtYXRjaFszXTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihjaGFyYWN0ZXJzLCAnYWdlX19ndDM4Jyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhbGxiYWNrKGZ1bmMsIHRoaXNBcmcsIGFyZ0NvdW50KSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBmdW5jO1xuICAgICAgaWYgKGZ1bmMgPT0gbnVsbCB8fCB0eXBlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDcmVhdGVDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCk7XG4gICAgICB9XG4gICAgICAvLyBoYW5kbGUgXCJfLnBsdWNrXCIgc3R5bGUgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAgaWYgKHR5cGUgIT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5KGZ1bmMpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0ga2V5cyhmdW5jKSxcbiAgICAgICAgICBrZXkgPSBwcm9wc1swXSxcbiAgICAgICAgICBhID0gZnVuY1trZXldO1xuXG4gICAgICAvLyBoYW5kbGUgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAgaWYgKHByb3BzLmxlbmd0aCA9PSAxICYmIGEgPT09IGEgJiYgIWlzT2JqZWN0KGEpKSB7XG4gICAgICAgIC8vIGZhc3QgcGF0aCB0aGUgY29tbW9uIGNhc2Ugb2YgcHJvdmlkaW5nIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlXG4gICAgICAgIC8vIHByb3BlcnR5IGNvbnRhaW5pbmcgYSBwcmltaXRpdmUgdmFsdWVcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgIHZhciBiID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgcmV0dXJuIGEgPT09IGIgJiYgKGEgIT09IDAgfHwgKDEgLyBhID09IDEgLyBiKSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBiYXNlSXNFcXVhbChvYmplY3RbcHJvcHNbbGVuZ3RoXV0sIGZ1bmNbcHJvcHNbbGVuZ3RoXV0sIG51bGwsIHRydWUpKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIGAmYCwgYDxgLCBgPmAsIGBcImAsIGFuZCBgJ2AgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ0ZyZWQsIFdpbG1hLCAmIFBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCwgV2lsbWEsICZhbXA7IFBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IHByb3ZpZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICogXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3Q7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24gbWV0aG9kcyB3aWxsIGJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIHRoZSBmdW5jdGlvbnMgYWRkZWQgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ2NhcGl0YWxpemUnOiBjYXBpdGFsaXplIH0pO1xuICAgICAqIF8uY2FwaXRhbGl6ZSgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXygnZnJlZCcpLmNhcGl0YWxpemUoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy5taXhpbih7ICdjYXBpdGFsaXplJzogY2FwaXRhbGl6ZSB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS5jYXBpdGFsaXplKCk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjaGFpbiA9IHRydWUsXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBzb3VyY2UgJiYgZnVuY3Rpb25zKHNvdXJjZSk7XG5cbiAgICAgIGlmICghc291cmNlIHx8ICghb3B0aW9ucyAmJiAhbWV0aG9kTmFtZXMubGVuZ3RoKSkge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBjdG9yID0gbG9kYXNoV3JhcHBlcjtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSBsb2Rhc2g7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gZnVuY3Rpb25zKHNvdXJjZSk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY2hhaW4gPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGNoYWluID0gb3B0aW9ucy5jaGFpbjtcbiAgICAgIH1cbiAgICAgIHZhciBjdG9yID0gb2JqZWN0LFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24oY3Rvcik7XG5cbiAgICAgIGZvckVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBvYmplY3RbbWV0aG9kTmFtZV0gPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBbdmFsdWVdO1xuXG4gICAgICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseShvYmplY3QsIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gcmVzdWx0ICYmIGlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgY3RvcihyZXN1bHQpO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlICdfJyB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBjb250ZXh0Ll8gPSBvbGREYXNoO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBuby1vcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICogXy5ub29wKG9iamVjdCkgPT09IHVuZGVmaW5lZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIG5vIG9wZXJhdGlvbiBwZXJmb3JtZWRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBVbml4IGVwb2NoXG4gICAgICogKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzdGFtcCA9IF8ubm93KCk7XG4gICAgICogXy5kZWZlcihmdW5jdGlvbigpIHsgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTsgfSk7XG4gICAgICogLy8gPT4gbG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGlzTmF0aXZlKG5vdyA9IERhdGUubm93KSAmJiBub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC5cbiAgICAgKiBJZiBgcmFkaXhgIGlzIGB1bmRlZmluZWRgIG9yIGAwYCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyB0aGVcbiAgICAgKiBgdmFsdWVgIGlzIGEgaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgbWV0aG9kIGF2b2lkcyBkaWZmZXJlbmNlcyBpbiBuYXRpdmUgRVMzIGFuZCBFUzUgYHBhcnNlSW50YFxuICAgICAqIGltcGxlbWVudGF0aW9ucy4gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyNFLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFyc2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeF0gVGhlIHJhZGl4IHVzZWQgdG8gaW50ZXJwcmV0IHRoZSB2YWx1ZSB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBuZXcgaW50ZWdlciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICovXG4gICAgdmFyIHBhcnNlSW50ID0gbmF0aXZlUGFyc2VJbnQod2hpdGVzcGFjZSArICcwOCcpID09IDggPyBuYXRpdmVQYXJzZUludCA6IGZ1bmN0aW9uKHZhbHVlLCByYWRpeCkge1xuICAgICAgLy8gRmlyZWZveCA8IDIxIGFuZCBPcGVyYSA8IDE1IGZvbGxvdyB0aGUgRVMzIHNwZWNpZmllZCBpbXBsZW1lbnRhdGlvbiBvZiBgcGFyc2VJbnRgXG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQoaXNTdHJpbmcodmFsdWUpID8gdmFsdWUucmVwbGFjZShyZUxlYWRpbmdTcGFjZXNBbmRaZXJvcywgJycpIDogdmFsdWUsIHJhZGl4IHx8IDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgXCJfLnBsdWNrXCIgc3R5bGUgZnVuY3Rpb24sIHdoaWNoIHJldHVybnMgdGhlIGBrZXlgIHZhbHVlIG9mIGFcbiAgICAgKiBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gcmV0cmlldmUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIGdldE5hbWUgPSBfLnByb3BlcnR5KCduYW1lJyk7XG4gICAgICpcbiAgICAgKiBfLm1hcChjaGFyYWN0ZXJzLCBnZXROYW1lKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KGNoYXJhY3RlcnMsIGdldE5hbWUpO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LCB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KGtleSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIGBtaW5gIGFuZCBgbWF4YCAoaW5jbHVzaXZlKS4gSWYgb25seSBvbmVcbiAgICAgKiBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlciB3aWxsIGJlXG4gICAgICogcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgdHJ1ZXkgb3IgZWl0aGVyIGBtaW5gIG9yIGBtYXhgIGFyZSBmbG9hdHMgYVxuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlciB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21pbj0wXSBUaGUgbWluaW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heD0xXSBUaGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZz1mYWxzZV0gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBhIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCBmbG9hdGluZykge1xuICAgICAgdmFyIG5vTWluID0gbWluID09IG51bGwsXG4gICAgICAgICAgbm9NYXggPSBtYXggPT0gbnVsbDtcblxuICAgICAgaWYgKGZsb2F0aW5nID09IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtaW4gPT0gJ2Jvb2xlYW4nICYmIG5vTWF4KSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBtaW47XG4gICAgICAgICAgbWluID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbm9NYXggJiYgdHlwZW9mIG1heCA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IG1heDtcbiAgICAgICAgICBub01heCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub01pbiAmJiBub01heCkge1xuICAgICAgICBtYXggPSAxO1xuICAgICAgfVxuICAgICAgbWluID0gK21pbiB8fCAwO1xuICAgICAgaWYgKG5vTWF4KSB7XG4gICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgbWluID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heCA9ICttYXggfHwgMDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBtaW4gJSAxIHx8IG1heCAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihtaW4gKyAocmFuZCAqIChtYXggLSBtaW4gKyBwYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsnJykubGVuZ3RoIC0gMSkpKSksIG1heCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShtaW4sIG1heCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgdGhlIHZhbHVlIG9mIHByb3BlcnR5IGBrZXlgIG9uIGBvYmplY3RgLiBJZiBga2V5YCBpcyBhIGZ1bmN0aW9uXG4gICAgICogaXQgd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBvYmplY3RgIGFuZCBpdHMgcmVzdWx0IHJldHVybmVkLFxuICAgICAqIGVsc2UgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHJldHVybmVkLiBJZiBgb2JqZWN0YCBpcyBmYWxzZXkgdGhlbiBgdW5kZWZpbmVkYFxuICAgICAqIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2NoZWVzZSc6ICdjcnVtcGV0cycsXG4gICAgICogICAnc3R1ZmYnOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgcmV0dXJuICdub25zZW5zZSc7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2NoZWVzZScpO1xuICAgICAqIC8vID0+ICdjcnVtcGV0cydcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ3N0dWZmJyk7XG4gICAgICogLy8gPT4gJ25vbnNlbnNlJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUpID8gb2JqZWN0W2tleV0oKSA6IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgbWljcm8tdGVtcGxhdGluZyBtZXRob2QgdGhhdCBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXNcbiAgICAgKiB3aGl0ZXNwYWNlLCBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgICAgKlxuICAgICAqIE5vdGU6IEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCwgYF8udGVtcGxhdGVgIHV0aWxpemVzIHNvdXJjZVVSTHMgZm9yIGVhc2llclxuICAgICAqIGRlYnVnZ2luZy4gU2VlIGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmxcbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlOlxuICAgICAqIGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWU6XG4gICAgICogaHR0cDovL2RldmVsb3Blci5jaHJvbWUuY29tL3N0YWJsZS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsLmh0bWxcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgZGF0YSBvYmplY3QgdXNlZCB0byBwb3B1bGF0ZSB0aGUgdGV4dC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlXSBUaGUgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlXSBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0c10gQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBsb2NhbCB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlXSBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NvdXJjZVVSTF0gVGhlIHNvdXJjZVVSTCBvZiB0aGUgdGVtcGxhdGUncyBjb21waWxlZCBzb3VyY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt2YXJpYWJsZV0gVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufHN0cmluZ30gUmV0dXJucyBhIGNvbXBpbGVkIGZ1bmN0aW9uIHdoZW4gbm8gYGRhdGFgIG9iamVjdFxuICAgICAqICBpcyBnaXZlbiwgZWxzZSBpdCByZXR1cm5zIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGVcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gbmFtZSAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ25hbWUnOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIEhUTUwgaW4gZGF0YSBwcm9wZXJ0eSB2YWx1ZXNcbiAgICAgKiBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+JywgeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBnZW5lcmF0ZSBIVE1MXG4gICAgICogdmFyIGxpc3QgPSAnPCUgXy5mb3JFYWNoKHBlb3BsZSwgZnVuY3Rpb24obmFtZSkgeyAlPjxsaT48JS0gbmFtZSAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiBfLnRlbXBsYXRlKGxpc3QsIHsgJ3Blb3BsZSc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBFUzYgZGVsaW1pdGVyIGFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSBkZWZhdWx0IFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJcbiAgICAgKiBfLnRlbXBsYXRlKCdoZWxsbyAkeyBuYW1lIH0nLCB7ICduYW1lJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnNcbiAgICAgKiBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgbmFtZSk7ICU+IScsIHsgJ25hbWUnOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGEgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnNcbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgICogICAnaW50ZXJwb2xhdGUnOiAve3soW1xcc1xcU10rPyl9fS9nXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8udGVtcGxhdGUoJ2hlbGxvIHt7IG5hbWUgfX0hJywgeyAnbmFtZSc6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBqUXVlcnlcbiAgICAgKiB2YXIgbGlzdCA9ICc8JSBqcS5lYWNoKHBlb3BsZSwgZnVuY3Rpb24obmFtZSkgeyAlPjxsaT48JS0gbmFtZSAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiBfLnRlbXBsYXRlKGxpc3QsIHsgJ3Blb3BsZSc6IFsnZnJlZCcsICdiYXJuZXknXSB9LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZVxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSBuYW1lICU+JywgbnVsbCwgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IGZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3JcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZVxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLm5hbWUgJT4hJywgbnVsbCwgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAgIHZhciBfX3QsIF9fcCA9ICcnLCBfX2UgPSBfLmVzY2FwZTtcbiAgICAgKiAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLm5hbWUgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAgIHJldHVybiBfX3A7XG4gICAgICogfVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIGEgc3RhY2sgdHJhY2VcbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihjd2QsICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUodGV4dCwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgLy8gYmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy9cbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanNcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1RcbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuICAgICAgdGV4dCA9IFN0cmluZyh0ZXh0IHx8ICcnKTtcblxuICAgICAgLy8gYXZvaWQgbWlzc2luZyBkZXBlbmRlbmNpZXMgd2hlbiBgaXRlcmF0b3JUZW1wbGF0ZWAgaXMgbm90IGRlZmluZWRcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0cyh7fSwgb3B0aW9ucywgc2V0dGluZ3MpO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGRlZmF1bHRzKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gdmFsdWVzKGltcG9ydHMpO1xuXG4gICAgICB2YXIgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gY29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICB0ZXh0LnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIGVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2Fubm90IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFsc1xuICAgICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyByZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0c1xuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIHJlcXVpcmVzIHJldHVybmluZyB0aGUgYG1hdGNoYFxuICAgICAgICAvLyBzdHJpbmcgaW4gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZVxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gaWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkLCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpblxuICAgICAgdmFyIHZhcmlhYmxlID0gb3B0aW9ucy52YXJpYWJsZSxcbiAgICAgICAgICBoYXNWYXJpYWJsZSA9IHZhcmlhYmxlO1xuXG4gICAgICBpZiAoIWhhc1ZhcmlhYmxlKSB7XG4gICAgICAgIHZhcmlhYmxlID0gJ29iaic7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoICgnICsgdmFyaWFibGUgKyAnKSB7XFxuJyArIHNvdXJjZSArICdcXG59XFxuJztcbiAgICAgIH1cbiAgICAgIC8vIGNsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5nc1xuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBmcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5XG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArIHZhcmlhYmxlICsgJykge1xcbicgK1xuICAgICAgICAoaGFzVmFyaWFibGUgPyAnJyA6IHZhcmlhYmxlICsgJyB8fCAoJyArIHZhcmlhYmxlICsgJyA9IHt9KTtcXG4nKSArXG4gICAgICAgIFwidmFyIF9fdCwgX19wID0gJycsIF9fZSA9IF8uZXNjYXBlXCIgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybFxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICdcXG4vKlxcbi8vIyBzb3VyY2VVUkw9JyArIChvcHRpb25zLnNvdXJjZVVSTCB8fCAnL2xvZGFzaC90ZW1wbGF0ZS9zb3VyY2VbJyArICh0ZW1wbGF0ZUNvdW50ZXIrKykgKyAnXScpICsgJ1xcbiovJztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uKGltcG9ydHNLZXlzLCAncmV0dXJuICcgKyBzb3VyY2UgKyBzb3VyY2VVUkwpLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0KGRhdGEpO1xuICAgICAgfVxuICAgICAgLy8gcHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kLCBpblxuICAgICAgLy8gc3VwcG9ydGVkIGVudmlyb25tZW50cywgb3IgdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yXG4gICAgICAvLyBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMgZHVyaW5nIHRoZSBidWlsZCBwcm9jZXNzXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2FsbGJhY2sgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHNcbiAgICAgKiBvZiBlYWNoIGNhbGxiYWNrIGV4ZWN1dGlvbi4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gZXhlY3V0ZSB0aGUgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGBjYWxsYmFja2AgZXhlY3V0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZGljZVJvbGxzID0gXy50aW1lcygzLCBfLnBhcnRpYWwoXy5yYW5kb20sIDEsIDYpKTtcbiAgICAgKiAvLyA9PiBbMywgNiwgNF1cbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgZnVuY3Rpb24obikgeyBtYWdlLmNhc3RTcGVsbChuKTsgfSk7XG4gICAgICogLy8gPT4gY2FsbHMgYG1hZ2UuY2FzdFNwZWxsKG4pYCB0aHJlZSB0aW1lcywgcGFzc2luZyBgbmAgb2YgYDBgLCBgMWAsIGFuZCBgMmAgcmVzcGVjdGl2ZWx5XG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIGZ1bmN0aW9uKG4pIHsgdGhpcy5jYXN0KG4pOyB9LCBtYWdlKTtcbiAgICAgKiAvLyA9PiBhbHNvIGNhbGxzIGBtYWdlLmNhc3RTcGVsbChuKWAgdGhyZWUgdGltZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgbiA9IChuID0gK24pID4gLTEgPyBuIDogMDtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgICBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGNhbGxiYWNrKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYCB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ0ZyZWQsIEJhcm5leSAmYW1wOyBQZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQsIEJhcm5leSAmIFBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nID09IG51bGwgPyAnJyA6IFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBwcm92aWRlZCB0aGUgSUQgd2lsbCBiZSBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeF0gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiBTdHJpbmcocHJlZml4ID09IG51bGwgPyAnJyA6IHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3QgdGhhdCB3cmFwcyB0aGUgZ2l2ZW4gdmFsdWUgd2l0aCBleHBsaWNpdFxuICAgICAqIG1ldGhvZCBjaGFpbmluZyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluaW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfLmNoYWluKGNoYXJhY3RlcnMpXG4gICAgICogICAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAgIC5tYXAoZnVuY3Rpb24oY2hyKSB7IHJldHVybiBjaHIubmFtZSArICcgaXMgJyArIGNoci5hZ2U7IH0pXG4gICAgICogICAgIC5maXJzdCgpXG4gICAgICogICAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhbHVlID0gbmV3IGxvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgICAgdmFsdWUuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBpbnRlcmNlcHRvcmAgd2l0aCB0aGUgYHZhbHVlYCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgYW5kIHRoZW5cbiAgICAgKiByZXR1cm5zIGB2YWx1ZWAuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZFxuICAgICAqIGNoYWluIGluIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW5cbiAgICAgKiB0aGUgY2hhaW4uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5pbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzLCA0XSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkgeyBhcnJheS5wb3AoKTsgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBleHBsaWNpdCBtZXRob2QgY2hhaW5pbmcgb24gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpbmluZ1xuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nXG4gICAgICogXyhjaGFyYWN0ZXJzKS5maXJzdCgpO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIHdpdGggZXhwbGljaXQgY2hhaW5pbmdcbiAgICAgKiBfKGNoYXJhY3RlcnMpLmNoYWluKClcbiAgICAgKiAgIC5maXJzdCgpXG4gICAgICogICAucGljaygnYWdlJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ2FnZSc6IDM2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyB0aGUgYHRvU3RyaW5nYCByZXN1bHQgb2YgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB0b1N0cmluZ1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluaW5nXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlc3VsdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnRvU3RyaW5nKCk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb1N0cmluZygpIHtcbiAgICAgIHJldHVybiBTdHJpbmcodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZU9mXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5pbmdcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlT2YoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWVPZigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fd3JhcHBlZF9fO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gYWRkIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyB3aGVuIGNoYWluaW5nXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbXBvc2UgPSBjb21wb3NlO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jcmVhdGVDYWxsYmFjayA9IGNyZWF0ZUNhbGxiYWNrO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5kZXhCeSA9IGluZGV4Qnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5wYWlycyA9IHBhaXJzO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGx1Y2sgPSBwbHVjaztcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC53aGVyZSA9IHdoZXJlO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG5cbiAgICAvLyBhZGQgYWxpYXNlc1xuICAgIGxvZGFzaC5jb2xsZWN0ID0gbWFwO1xuICAgIGxvZGFzaC5kcm9wID0gcmVzdDtcbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduO1xuICAgIGxvZGFzaC5tZXRob2RzID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5vYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnNlbGVjdCA9IGZpbHRlcjtcbiAgICBsb2Rhc2gudGFpbCA9IHJlc3Q7XG4gICAgbG9kYXNoLnVuaXF1ZSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuemlwID0gemlwO1xuXG4gICAgLy8gYWRkIGZ1bmN0aW9ucyB0byBgbG9kYXNoLnByb3RvdHlwZWBcbiAgICBtaXhpbihsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBhZGQgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgd2hlbiBjaGFpbmluZ1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNvbnRhaW5zID0gY29udGFpbnM7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuXG4gICAgLy8gYWRkIGFsaWFzZXNcbiAgICBsb2Rhc2guYWxsID0gZXZlcnk7XG4gICAgbG9kYXNoLmFueSA9IHNvbWU7XG4gICAgbG9kYXNoLmRldGVjdCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRXaGVyZSA9IGZpbmQ7XG4gICAgbG9kYXNoLmZvbGRsID0gcmVkdWNlO1xuICAgIGxvZGFzaC5mb2xkciA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5pbmNsdWRlID0gY29udGFpbnM7XG4gICAgbG9kYXNoLmluamVjdCA9IHJlZHVjZTtcblxuICAgIG1peGluKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9XG4gICAgICBmb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCksIGZhbHNlKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gYWRkIGZ1bmN0aW9ucyBjYXBhYmxlIG9mIHJldHVybmluZyB3cmFwcGVkIGFuZCB1bndyYXBwZWQgdmFsdWVzIHdoZW4gY2hhaW5pbmdcbiAgICBsb2Rhc2guZmlyc3QgPSBmaXJzdDtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcblxuICAgIC8vIGFkZCBhbGlhc2VzXG4gICAgbG9kYXNoLnRha2UgPSBmaXJzdDtcbiAgICBsb2Rhc2guaGVhZCA9IGZpcnN0O1xuXG4gICAgZm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNhbGxiYWNrYWJsZSA9IG1ldGhvZE5hbWUgIT09ICdzYW1wbGUnO1xuICAgICAgaWYgKCFsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV09IGZ1bmN0aW9uKG4sIGd1YXJkKSB7XG4gICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmModGhpcy5fX3dyYXBwZWRfXywgbiwgZ3VhcmQpO1xuXG4gICAgICAgICAgcmV0dXJuICFjaGFpbkFsbCAmJiAobiA9PSBudWxsIHx8IChndWFyZCAmJiAhKGNhbGxiYWNrYWJsZSAmJiB0eXBlb2YgbiA9PSAnZnVuY3Rpb24nKSkpXG4gICAgICAgICAgICA/IHJlc3VsdFxuICAgICAgICAgICAgOiBuZXcgbG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSAnMi40LjInO1xuXG4gICAgLy8gYWRkIFwiQ2hhaW5pbmdcIiBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXJcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9TdHJpbmcgPSB3cmFwcGVyVG9TdHJpbmc7XG4gICAgbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZU9mO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IHdyYXBwZXJWYWx1ZU9mO1xuXG4gICAgLy8gYWRkIGBBcnJheWAgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXNcbiAgICBmb3JFYWNoKFsnam9pbicsICdwb3AnLCAnc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVJlZlttZXRob2ROYW1lXTtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMuX193cmFwcGVkX18sIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgcmV0dXJuIGNoYWluQWxsXG4gICAgICAgICAgPyBuZXcgbG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKVxuICAgICAgICAgIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIGFkZCBgQXJyYXlgIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGUgZXhpc3Rpbmcgd3JhcHBlZCB2YWx1ZVxuICAgIGZvckVhY2goWydwdXNoJywgJ3JldmVyc2UnLCAnc29ydCcsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlSZWZbbWV0aG9kTmFtZV07XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmMuYXBwbHkodGhpcy5fX3dyYXBwZWRfXywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIGBBcnJheWAgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIG5ldyB3cmFwcGVkIHZhbHVlc1xuICAgIGZvckVhY2goWydjb25jYXQnLCAnc2xpY2UnLCAnc3BsaWNlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlSZWZbbWV0aG9kTmFtZV07XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgbG9kYXNoV3JhcHBlcihmdW5jLmFwcGx5KHRoaXMuX193cmFwcGVkX18sIGFyZ3VtZW50cyksIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gZXhwb3NlIExvLURhc2hcbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBzb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzIGxpa2Ugci5qcyBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2UgdGhlIGZvbGxvd2luZzpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvLURhc2ggdG8gdGhlIGdsb2JhbCBvYmplY3QgZXZlbiB3aGVuIGFuIEFNRCBsb2FkZXIgaXMgcHJlc2VudCBpblxuICAgIC8vIGNhc2UgTG8tRGFzaCBpcyBsb2FkZWQgd2l0aCBhIFJlcXVpcmVKUyBzaGltIGNvbmZpZy5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9hcGkuaHRtbCNjb25maWctc2hpbVxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBkZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZVxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIGNoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGFuIGBleHBvcnRzYCBvYmplY3RcbiAgZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuICAgIC8vIGluIE5vZGUuanMgb3IgUmluZ29KU1xuICAgIGlmIChtb2R1bGVFeHBvcnRzKSB7XG4gICAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgfVxuICAgIC8vIGluIE5hcndoYWwgb3IgUmhpbm8gLXJlcXVpcmVcbiAgICBlbHNlIHtcbiAgICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBpbiBhIGJyb3dzZXIgb3IgUmhpbm9cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiXG5mdW5jdGlvbiBCb2R5U2Nyb2xsKCl7XG59XG5cbkJvZHlTY3JvbGwucHJvdG90eXBlLmlzTG9ja2VkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhIXRoaXMuaW5pdGlhbFN0YXRlO1xufTtcblxuQm9keVNjcm9sbC5wcm90b3R5cGUubG9jayA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5pbml0aWFsU3RhdGUpIHtcbiAgICB0aGlzLmluaXRpYWxTdGF0ZS5sb2NrQ291bnQrKztcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdO1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHRoaXMuaW5pdGlhbFN0YXRlID0ge1xuICAgIGh0bWxPdmVyZmxvdzogaHRtbC5zdHlsZS5vdmVyZmxvdyxcbiAgICBib2R5T3ZlcmZsb3c6IGJvZHkuc3R5bGUub3ZlcmZsb3csXG4gICAgbG9ja0NvdW50OiAxXG4gIH07XG4gIGh0bWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xufTtcblxuQm9keVNjcm9sbC5wcm90b3R5cGUudW5sb2NrID0gZnVuY3Rpb24oZm9yY2UpIHtcbiAgaWYgKCF0aGlzLmluaXRpYWxTdGF0ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodGhpcy5pbml0aWFsU3RhdGUubG9ja0NvdW50ID4gMSAmJiAhZm9yY2UpIHtcbiAgICB0aGlzLmluaXRpYWxTdGF0ZS5sb2NrQ291bnQtLTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluaXRpYWwgPSB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdO1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIGh0bWwuc3R5bGUub3ZlcmZsb3cgPSBpbml0aWFsLmh0bWxPdmVyZmxvdztcbiAgYm9keS5zdHlsZS5vdmVyZmxvdyA9IGluaXRpYWwuYm9keU92ZXJmbG93O1xuICB0aGlzLmluaXRpYWxTdGF0ZSA9IG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBCb2R5U2Nyb2xsKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciB0aHJvdHRsZSA9IGZ1bmN0aW9uKGZuLCB0aHJlc2hob2xkLCBzY29wZSkge1xuICAgIHRocmVzaGhvbGQgfHwgKHRocmVzaGhvbGQgPSAyNTApO1xuICAgIHZhciBsYXN0LFxuICAgICAgZGVmZXJUaW1lcjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHNjb3BlIHx8IHRoaXM7XG5cbiAgICAgIHZhciBub3cgPSArbmV3IERhdGUsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAobGFzdCAmJiBub3cgPCBsYXN0ICsgdGhyZXNoaG9sZCkge1xuICAgICAgICAvLyBob2xkIG9uIHRvIGl0XG4gICAgICAgIGNsZWFyVGltZW91dChkZWZlclRpbWVyKTtcbiAgICAgICAgZGVmZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfSwgdGhyZXNoaG9sZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYXN0ID0gbm93O1xuICAgICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiBhbmd1bGFyICE9PSAndW5kZWZpbmVkJyAmJiBhbmd1bGFyLm1vZHVsZSgnc2hvcGJlYW1TaGFyZWQnKSkge1xuICAgICAgYW5ndWxhci5tb2R1bGUoJ3Nob3BiZWFtU2hhcmVkJykudmFsdWUoJ3Rocm90dGxlJywgdGhyb3R0bGUpXG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvL3Byb2JhYmx5IGVpdGhlciBubyBhbmd1bGFyIG9yIG5vIFwic2hvcGJlYW1TaGFyZWRcIiBtb2R1bGUgLSBpdCdzIGshXG4gICAgLy8gY29uc29sZS53YXJuKCdlcnJvciBjYXVnaHQgd2hpbGUgdHJ5aW5nIHRvIHJlZ2lzdGVyIGFuZ3VsYXIgY29tcG9uZW50OiAnLCBlcnIpXG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlXG59KCkpO1xuIiwiKGZ1bmN0aW9uKHNlcnZpY2UpIHtcblxuICB2YXIgcG1ycGMgPSByZXF1aXJlKCcuLi8uLi9saWIvaXp1emFrL3BtcnBjJylcbiAgICAsIHEgPSByZXF1aXJlKCcuLi8uLi9saWIva3Jpc2tvd2FsL3EnKVxuLy8gICAgLCAkID0gcmVxdWlyZSgnLi4vLi4vLi4vd2lkZ2V0L2FwcC9sb2FkZXIvYnVpbGQnKVxuICAgICwgY3Jvc3NEb21haW4gPSBmYWxzZVxuICAgIDtcblxuICBpZiAod2luZG93ICE9PSB3aW5kb3cudG9wKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIG9uIGlmcmFtZXMsIGRvY3VtZW50LnJlZmVycmVyIGlzIGluaXRpYWxseSB0aGUgdXJsIG9mIHRoZSBwYXJlbnQgZG9jdW1lbnRcbiAgICAgIGlmIChkb2N1bWVudC5yZWZlcnJlciAmJiBkb2N1bWVudC5yZWZlcnJlci5pbmRleE9mKGRvY3VtZW50LmxvY2F0aW9uLm9yaWdpbikgIT09IDApIHtcbiAgICAgICAgY3Jvc3NEb21haW4gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnRvcC5sb2NhdGlvbi5ocmVmLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBjb3VsZG4ndCBhY2Nlc3MgdG9wIHdpbmRvdywgdGhpcyBtdXN0IGJlIGEgY3Jvc3MtZG9tYWluIGlmcmFtZVxuICAgICAgY3Jvc3NEb21haW4gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY3Jvc3NEb21haW4pIHtcbiAgICBzZXJ2aWNlLmhhc2ggPSBmdW5jdGlvbihoYXNoKSB7XG4gICAgICByZXR1cm4gZGVmZXJyZWRGYWN0b3J5KGZ1bmN0aW9uKGRlZmVycmVkKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaGFzaCAhPT0gbnVsbCAmJiBoYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChoYXNoICE9PSAnJykgaGFzaCA9ICcjJyArIGhhc2g7XG4gICAgICAgICAgICB3aW5kb3cudG9wLmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsICcnLFxuICAgICAgICAgICAgICAgIHdpbmRvdy50b3AubG9jYXRpb24uaHJlZlxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uod2luZG93LnRvcC5sb2NhdGlvbi5oYXNoLCAnJykgKyBoYXNoXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh3aW5kb3cudG9wLmxvY2F0aW9uLmhhc2gpO1xuICAgICAgICB9XG4gICAgICB9LCB0cnVlKVxuICAgIH07XG5cbiAgICBzZXJ2aWNlLmhyZWYgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkZWZlcnJlZEZhY3RvcnkoZnVuY3Rpb24oZGVmZXJyZWQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUod2luZG93LnRvcC5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgfVxuICAgICAgfSwgdHJ1ZSlcbiAgICB9O1xuXG4gICAgc2VydmljZS5sb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRlZmVycmVkRmFjdG9yeShmdW5jdGlvbihkZWZlcnJlZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGtleXMgPSBbJ2hhc2gnLCAnaHJlZicsICdob3N0JywgJ2hvc3RuYW1lJywgJ29yaWdpbicsICdwYXRobmFtZScsICdwb3J0JywgJ3Byb3RvY29sJ11cbiAgICAgICAgICAgICwgbG9jYXRpb25EYXRhID0ge307XG5cbiAgICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBsb2NhdGlvbkRhdGFba2V5XSA9IHdpbmRvdy50b3AubG9jYXRpb25ba2V5XVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShsb2NhdGlvbkRhdGEpO1xuICAgICAgICB9XG4gICAgICB9LCB0cnVlKVxuICAgIH07XG5cbiAgICBzZXJ2aWNlLmRvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVmZXJyZWRGYWN0b3J5KGZ1bmN0aW9uKGRlZmVycmVkKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHdpbmRvdy50b3AuZG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9LCB0cnVlKVxuICAgIH07XG5cbiAgICBzZXJ2aWNlLndpbmRvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRlZmVycmVkRmFjdG9yeShmdW5jdGlvbihkZWZlcnJlZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh3aW5kb3cudG9wKTtcbiAgICAgICAgfVxuICAgICAgfSwgdHJ1ZSlcbiAgICB9O1xuXG5cbiAgfSBlbHNlIHtcbiAgICAvL1RPRE86IENST1NTIERPTUFJTiBOT1QgV09SS0lORyBZRVQgTE9PSyBBVCBUT0RPIEJFTE9XISEhXG4gICAgc2VydmljZS5oYXNoID0gZnVuY3Rpb24oaGFzaCkge1xuICAgICAgcmV0dXJuIGRlZmVycmVkRmFjdG9yeShmdW5jdGlvbihkZWZlcnJlZCkge1xuICAgICAgICBwbXJwYy5jYWxsKHtcbiAgICAgICAgICBkZXN0aW5hdGlvbiAgICAgICAgOiAncHVibGlzaCcsXG4gICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ2hhc2gnLFxuICAgICAgICAgIHBhcmFtcyAgICAgICAgICAgICA6IFtoYXNoXSxcbiAgICAgICAgICBvblN1Y2Nlc3MgICAgICAgICAgOiBmdW5jdGlvbihyZXR1cm5PYmopIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmV0dXJuT2JqLnJldHVyblZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH07XG5cbiAgICBzZXJ2aWNlLmxvY2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVmZXJyZWRGYWN0b3J5KGZ1bmN0aW9uKGRlZmVycmVkKSB7XG4gICAgICAgIHBtcnBjLmNhbGwoe1xuICAgICAgICAgIGRlc3RpbmF0aW9uICAgICAgICA6ICdwdWJsaXNoJyxcbiAgICAgICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnbG9jYXRpb24nLFxuICAgICAgICAgIG9uU3VjY2VzcyAgICAgICAgICA6IGZ1bmN0aW9uKHJldHVybk9iaikge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXR1cm5PYmoucmV0dXJuVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfTtcblxuICAgIHNlcnZpY2UuaHJlZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRlZmVycmVkRmFjdG9yeShmdW5jdGlvbihkZWZlcnJlZCkge1xuICAgICAgICBwbXJwYy5jYWxsKHtcbiAgICAgICAgICBkZXN0aW5hdGlvbiAgICAgICAgOiAncHVibGlzaCcsXG4gICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ2hyZWYnLFxuICAgICAgICAgIG9uU3VjY2VzcyAgICAgICAgICA6IGZ1bmN0aW9uKHJldHVybk9iaikge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXR1cm5PYmoucmV0dXJuVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfTtcblxuICAgIHNlcnZpY2Uud2luZG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVmZXJyZWRGYWN0b3J5KGZ1bmN0aW9uKGRlZmVycmVkKSB7XG4gICAgICAgIHBtcnBjLmNhbGwoe1xuICAgICAgICAgIGRlc3RpbmF0aW9uICAgICAgICA6ICdwdWJsaXNoJyxcbiAgICAgICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnd2luZG93JyxcbiAgICAgICAgICBvblN1Y2Nlc3MgICAgICAgICAgOiBmdW5jdGlvbihyZXR1cm5PYmopIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmV0dXJuT2JqLnJldHVyblZhbHVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuXG4vLyAgICBzZXJ2aWNlLmRvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgIHJldHVybiBkZWZlcnJlZEZhY3RvcnkoZnVuY3Rpb24oZGVmZXJyZWQpIHtcbi8vICAgICAgICBwbXJwYy5jYWxsKHtcbi8vICAgICAgICAgIGRlc3RpbmF0aW9uICAgICAgICA6ICdwdWJsaXNoJyxcbi8vICAgICAgICAgIHB1YmxpY1Byb2NlZHVyZU5hbWU6ICdkb2N1bWVudCcsXG4vLyAgICAgICAgICBvblN1Y2Nlc3MgICAgICAgICAgOiBmdW5jdGlvbihyZXR1cm5PYmopIHtcbi8vICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXR1cm5PYmoucmV0dXJuVmFsdWUpO1xuLy8gICAgICAgICAgfVxuLy8gICAgICAgIH0pXG4vLyAgICAgIH0pXG4vLyAgICB9O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIGFuZ3VsYXIgIT09ICd1bmRlZmluZWQnICYmIGFuZ3VsYXIubW9kdWxlKCdzaG9wYmVhbVNoYXJlZCcpKSB7XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdzaG9wYmVhbVNoYXJlZCcpLnNlcnZpY2UoJ3RvcFdpbmRvd1NlcnZpY2UnLCBbXG4gICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmNvcHkoc2VydmljZSwgdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICBdKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vcHJvYmFibHkgZWl0aGVyIG5vIGFuZ3VsYXIgb3Igbm8gXCJzaG9wYmVhbVNoYXJlZFwiIG1vZHVsZSAtIGl0J3MgayFcbiAgICAvL2NvbnNvbGUud2FybignZXJyb3IgY2F1Z2h0IHdoaWxlIHRyeWluZyB0byByZWdpc3RlciBhbmd1bGFyIGNvbXBvbmVudDogJywgZXJyKVxuICB9XG5cblxuICAvL09ubHkgcmVnaXN0ZXIgcnBjIGZ1bmN0aW9ucyBpZiB5b3UncmUgdGhlIHRvcCB3aW5kb3dcbiAgaWYgKHdpbmRvdyA9PT0gd2luZG93LnRvcCkge1xuICAgIHBtcnBjLnJlZ2lzdGVyKHtcbiAgICAgIHB1YmxpY1Byb2NlZHVyZU5hbWU6ICdoYXNoJyxcbiAgICAgIHByb2NlZHVyZSAgICAgICAgICA6IGZ1bmN0aW9uKGhhc2gpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gc2VydmljZS5oYXNoKGhhc2gpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRPRE86IG1ha2UgdGhlIHJlc3Qgb2YgdGhlc2UgYXN5bmMgdXNpbmcgYGxvY2F0aW9uYCBhcyBhIG1vZGVsXG4gICAgcG1ycGMucmVnaXN0ZXIoe1xuICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ2xvY2F0aW9uJyxcbiAgICAgIGlzQXN5bmNocm9ub3VzICAgICA6IHRydWUsXG4gICAgICBwcm9jZWR1cmUgICAgICAgICAgOiBmdW5jdGlvbihvblN1Y2Nlc3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzZXJ2aWNlLmxvY2F0aW9uKCkudGhlbihmdW5jdGlvbihsb2NhdGlvbikge1xuICAgICAgICAgICAgb25TdWNjZXNzKGxvY2F0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBwbXJwYy5yZWdpc3Rlcih7XG4gICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnd2luZG93JyxcbiAgICAgIHByb2NlZHVyZSAgICAgICAgICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuLy8gICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKFt3aW5kb3csIHt0b3A6IG51bGwsIHdpbmRvdzogbnVsbH1dKTtcbiAgICAgICAgICAvL1RPRE86IHdyaXRlIG15IG93biBQb3N0TWVzc2FnZSBSUEMgbGlicmFyeSBhbmQgZ2V0IHJpZCBvZiB0aGlzIHVzZWxlc3MgcG1ycGMgc2hpdCFcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9jdW1lbnQ6IHtcbiAgICAgICAgICAgICAgcmVmZXJyZXI6IHdpbmRvdy5kb2N1bWVudC5yZWZlcnJlclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvY2F0aW9uOiB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgICAgICBTaG9wYmVhbToge1xuICAgICAgICAgICAgICBIT1NUOiB3aW5kb3cuU2hvcGJlYW0uSE9TVFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4vLyAgICAgICAgICByZXR1cm4gc2VydmljZS53aW5kb3coKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmVycmVkRmFjdG9yeShmbiwgc2hvdWxkU2V0VGltZW91dCkge1xuICAgIHZhciBkZWZlcnJlZCA9IHEuZGVmZXIoKTtcbiAgICBpZiAoc2hvdWxkU2V0VGltZW91dCkge1xuICAgICAgc2V0VGltZW91dChmbihkZWZlcnJlZCksIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBmbihkZWZlcnJlZCk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG59KGV4cG9ydHMpKTtcbiIsIi8qXG4qIENsaWVudC1zaWRlIGNvbmZpZ3VyYXRpb25zXG4qXG4qL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLy8gYmFzZSBjb25maWd1cmF0aW9uIGZvciBhbGwgZW52aXJvbm1lbnRzXG4gIGJhc2U6IHtcbiAgICBhbmFseXRpY3M6IHtcbiAgICAgIGNvbnNvbGU6IHRydWUsXG4gICAgfVxuICB9LFxuXG4gIC8vIGVudmlyb25tZW50YWwgb3ZlcnJpZGVzXG4gIGxvY2FsOiB7XG4gICAgYW5hbHl0aWNzOiB7XG4gICAgICAvLyB1bi1jb21tZW50IHRvIGVuYWJsZSBHQSBsb2NhbGx5ICh1c2luZyBzdGFnaW5nIGFjY291bnQpXG4gICAgICAvKmdhOiB7XG4gICAgICAgIHRyYWNraW5nSWQ6ICdVQS00OTAxNTkxOC0yJ1xuICAgICAgfSovXG4gICAgfVxuICB9LFxuICBzdGFnaW5nOiB7XG4gICAgYW5hbHl0aWNzOiB7XG4gICAgICBnYToge1xuICAgICAgICB0cmFja2luZ0lkOiAnVUEtNDkwMTU5MTgtMidcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHByb2R1Y3Rpb246IHtcbiAgICBhbmFseXRpY3M6IHtcbiAgICAgIGNvbnNvbGU6IGZhbHNlLFxuICAgICAgZ2E6IHtcbiAgICAgICAgdHJhY2tpbmdJZDogJ1VBLTQ5MDE1OTE4LTEnXG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG4iLCJcbnZhciBob3N0bmFtZVJlZ2V4ID0gL2h0dHBzP1xcOlxcL1xcLyhbXlxcL10rKS9pO1xuXG52YXIgZW52U3ViZG9tYWlucyA9IFtcbiAgJ3N0YWdpbmcnLFxuICAnYmV0YScsXG4gICdkZXYnLFxuICAnbG9jYWwnXG5dO1xuXG52YXIgaXNDcm9zc0RvbWFpbklGcmFtZUNhY2hlZCA9IG51bGw7XG5cbmZ1bmN0aW9uIGlzQ3Jvc3NEb21haW5JRnJhbWUoKSB7XG4gIGlmICh0eXBlb2YgaXNDcm9zc0RvbWFpbklGcmFtZUNhY2hlZCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBpc0Nyb3NzRG9tYWluSUZyYW1lQ2FjaGVkO1xuICB9XG4gIHZhciBjcm9zc0RvbWFpbiA9IGZhbHNlO1xuICBpZiAod2luZG93ICE9PSB3aW5kb3cucGFyZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIG9uIGlmcmFtZXMsIGRvY3VtZW50LnJlZmVycmVyIGlzIGluaXRpYWxseSB0aGUgdXJsIG9mIHRoZSBwYXJlbnQgZG9jdW1lbnRcbiAgICAgIGlmIChkb2N1bWVudC5yZWZlcnJlciAmJiBkb2N1bWVudC5yZWZlcnJlci5pbmRleE9mKGRvY3VtZW50LmxvY2F0aW9uLm9yaWdpbikgIT09IDApIHtcbiAgICAgICAgY3Jvc3NEb21haW4gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnBhcmVudC5sb2NhdGlvbi5ocmVmLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBjb3VsZG4ndCBhY2Nlc3MgcGFyZW50IHdpbmRvdywgdGhpcyBtdXN0IGJlIGEgY3Jvc3MtZG9tYWluIGlmcmFtZVxuICAgICAgY3Jvc3NEb21haW4gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKGlzQ3Jvc3NEb21haW5JRnJhbWVDYWNoZWQgPSBjcm9zc0RvbWFpbik7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZURvbWFpbklGcmFtZSgpIHtcbiAgcmV0dXJuIHdpbmRvdyAhPT0gd2luZG93LnBhcmVudCAmJiAhaXNDcm9zc0RvbWFpbklGcmFtZSgpO1xufVxuXG5mdW5jdGlvbiBkZXRlY3RTb3VyY2VIb3N0KCkge1xuICB2YXIgc2NyaXB0VGFnO1xuICB0cnkge1xuICAgIHNjcmlwdFRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdC5zaG9wYmVhbS1zY3JpcHQsc2NyaXB0W3NyYyo9XCJqcy93aWRnZXQubG9hZGVyLmpzXCJdJyk7XG4gICAgaWYgKCFzY3JpcHRUYWcgJiYgaXNTYW1lRG9tYWluSUZyYW1lKCkpIHtcbiAgICAgIHNjcmlwdFRhZyA9IHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0LnNob3BiZWFtLXNjcmlwdCxzY3JpcHRbc3JjKj1cImpzL3dpZGdldC5sb2FkZXIuanNcIl0nKTtcbiAgICB9XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgc2NyaXB0VGFnID0gbnVsbDtcbiAgfVxuICBpZiAoc2NyaXB0VGFnKSB7XG4gICAgdmFyIG1hdGNoID0gaG9zdG5hbWVSZWdleC5leGVjKHNjcmlwdFRhZy5zcmMpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmV0dXJuIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5ob3N0LnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGRldGVjdEVudmlyb25tZW50KCkge1xuICB2YXIgaG9zdFBhcnRzID0gZGV0ZWN0U291cmNlSG9zdCgpLnNwbGl0KCcuJykucmV2ZXJzZSgpO1xuICBpZiAoaG9zdFBhcnRzWzBdID09PSAnY29tJyAmJiBob3N0UGFydHNbMV0gPT09ICdzaG9wYmVhbScpIHtcbiAgICAvLyB0aGlzIGlzIGEgc2hvcGJlYW0gcGFnZSwgdXNlIHBhZ2UgbWFpbiBzdWJkb21haW5cbiAgICBpZiAoZW52U3ViZG9tYWlucy5pbmRleE9mKGhvc3RQYXJ0c1syXSkgPj0gMCkge1xuICAgICAgcmV0dXJuIGhvc3RQYXJ0c1syXTtcbiAgICB9XG4gICAgcmV0dXJuICdwcm9kdWN0aW9uJztcbiAgfVxuICBpZiAoL15sb2NhbGhvc3RcXDovaS50ZXN0KGhvc3RQYXJ0c1swXSkpIHtcbiAgICByZXR1cm4gJ2xvY2FsJztcbiAgfVxuICByZXR1cm4gJ3Byb2R1Y3Rpb24nO1xufVxuXG5leHBvcnRzLmlzQ3Jvc3NEb21haW5JRnJhbWUgPSBpc0Nyb3NzRG9tYWluSUZyYW1lO1xuZXhwb3J0cy5pc1NhbWVEb21haW5JRnJhbWUgPSBpc1NhbWVEb21haW5JRnJhbWU7XG5leHBvcnRzLmRldGVjdCA9IGRldGVjdEVudmlyb25tZW50O1xuIiwiXG52YXIgZW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL2Vudmlyb25tZW50Jyk7XG52YXIgYWxsID0gcmVxdWlyZSgnLi9hbGwnKTtcblxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuICEodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fFxuICAgIHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgfHxcbiAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGUpO1xufVxuXG5mdW5jdGlvbiBkZWVwTWVyZ2UodGFyZ2V0KSB7XG4gIHZhciBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZXMuc2hpZnQoKTtcbiAgICBmb3IgKHZhciBtZW1iZXJOYW1lIGluIHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShtZW1iZXJOYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbbWVtYmVyTmFtZV07XG4gICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0YXJnZXRbbWVtYmVyTmFtZV07XG4gICAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkgJiYgaXNPYmplY3QoY3VycmVudFZhbHVlKSkge1xuICAgICAgICAgIGRlZXBNZXJnZShjdXJyZW50VmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRbbWVtYmVyTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBjdXJyZW50KCkge1xuICB2YXIgZW52aXJvbm1lbnROYW1lID0gZW52aXJvbm1lbnQuZGV0ZWN0KCk7XG4gIHZhciBjb25maWcgPSBkZWVwTWVyZ2Uoe30sIGFsbC5iYXNlLCBhbGxbZW52aXJvbm1lbnROYW1lXSk7XG4gIGNvbmZpZy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50TmFtZTtcbiAgcmV0dXJuIGNvbmZpZztcbn1cblxuZXhwb3J0cy5jdXJyZW50ID0gY3VycmVudDtcbiIsIi8qIVxuICogQWRhcHRhdGlvbiBvZiB0aGUgJChkb2N1bWVudCkucmVhZHkoKSBmdW5jdGlvbiBmcm9tIGpRdWVyeVxuICogbGlicmFyeSBmb3IgdXNlIGluIHNpbXBsZSBKYXZhU2NyaXB0IHNjZW5hcmlvcy5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYxLjQuM1xuICogaHR0cDovL2pxdWVyeS5jb20vIFxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMCBKb2huIFJlc2lnLCBodHRwOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAqIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuICogU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAqIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkVcbiAqIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbiAqIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuICogV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIHczYyA9ICEhZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcixcbiAgbG9hZGVkID0gZmFsc2UsXG4gIHRvcGxldmVsID0gZmFsc2UsXG4gIGZucyA9IFtdO1xuXG5pZiAodzNjKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGNvbnRlbnRMb2FkZWQsIHRydWUpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcmVhZHksIGZhbHNlKTtcbn1cbmVsc2Uge1xuICBkb2N1bWVudC5hdHRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLCBjb250ZW50TG9hZGVkKTtcbiAgd2luZG93LmF0dGFjaEV2ZW50KFwib25sb2FkXCIsIHJlYWR5KTtcblxuICB0cnkge1xuICAgIHRvcGxldmVsID0gd2luZG93LmZyYW1lRWxlbWVudCA9PT0gbnVsbDtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG4gIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgJiYgdG9wbGV2ZWwpIHtcbiAgICBzY3JvbGxDaGVjaygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRlbnRMb2FkZWQoKSB7XG4gICh3M2MpID9cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBjb250ZW50TG9hZGVkLCB0cnVlKSA6XG4gICAgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICYmXG4gICAgICBkb2N1bWVudC5kZXRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLCBjb250ZW50TG9hZGVkKTtcbiAgcmVhZHkoKTtcbn1cblxuLy8gSWYgSUUgaXMgdXNlZCwgdXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmlcbi8vIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9JRUNvbnRlbnRMb2FkZWQvXG5mdW5jdGlvbiBzY3JvbGxDaGVjaygpIHtcbiAgaWYgKGxvYWRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKFwibGVmdFwiKTtcbiAgfVxuICBjYXRjaCAoZSkge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsIDE1KTtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVhZHkoKTtcbn1cblxuZnVuY3Rpb24gcmVhZHkoKSB7XG4gIGlmIChsb2FkZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbG9hZGVkID0gdHJ1ZTtcblxuICB2YXIgbGVuID0gZm5zLmxlbmd0aCxcbiAgICBpID0gMDtcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgZm5zW2ldLmNhbGwoZG9jdW1lbnQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgLy8gaWYgdGhlIERPTSBpcyBhbHJlYWR5IHJlYWR5LFxuICAvLyBleGVjdXRlIHRoZSBmdW5jdGlvblxuICByZXR1cm4gKGxvYWRlZCkgP1xuICAgIGZuLmNhbGwoZG9jdW1lbnQpIDpcbiAgICBmbnMucHVzaChmbik7XG59O1xuIiwiLyohXG4gKiBFdmVudEVtaXR0ZXIgdjQuMi4zIC0gZ2l0LmlvL2VlXG4gKiBPbGl2ZXIgQ2FsZHdlbGxcbiAqIE1JVCBsaWNlbnNlXG4gKiBAcHJlc2VydmVcbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCAqIENsYXNzIGZvciBtYW5hZ2luZyBldmVudHMuXG5cdCAqIENhbiBiZSBleHRlbmRlZCB0byBwcm92aWRlIGV2ZW50IGZ1bmN0aW9uYWxpdHkgaW4gb3RoZXIgY2xhc3Nlcy5cblx0ICpcblx0ICogQGNsYXNzIEV2ZW50RW1pdHRlciBNYW5hZ2VzIGV2ZW50IHJlZ2lzdGVyaW5nIGFuZCBlbWl0dGluZy5cblx0ICovXG5cdGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHt9XG5cblx0Ly8gU2hvcnRjdXRzIHRvIGltcHJvdmUgc3BlZWQgYW5kIHNpemVcblxuXHQvLyBFYXN5IGFjY2VzcyB0byB0aGUgcHJvdG90eXBlXG5cdHZhciBwcm90byA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGU7XG5cblx0LyoqXG5cdCAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgbGlzdGVuZXIgZm9yIHRoZSBldmVudCBpbiBpdCdzIHN0b3JhZ2UgYXJyYXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gbGlzdGVuZXJzIEFycmF5IG9mIGxpc3RlbmVycyB0byBzZWFyY2ggdGhyb3VnaC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgTWV0aG9kIHRvIGxvb2sgZm9yLlxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IEluZGV4IG9mIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIsIC0xIGlmIG5vdCBmb3VuZFxuXHQgKiBAYXBpIHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnMsIGxpc3RlbmVyKSB7XG5cdFx0dmFyIGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xuXHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdGlmIChsaXN0ZW5lcnNbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiAtMTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBbGlhcyBhIG1ldGhvZCB3aGlsZSBrZWVwaW5nIHRoZSBjb250ZXh0IGNvcnJlY3QsIHRvIGFsbG93IGZvciBvdmVyd3JpdGluZyBvZiB0YXJnZXQgbWV0aG9kLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgdGFyZ2V0IG1ldGhvZC5cblx0ICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBhbGlhc2VkIG1ldGhvZFxuXHQgKiBAYXBpIHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFsaWFzKG5hbWUpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gYWxpYXNDbG9zdXJlKCkge1xuXHRcdFx0cmV0dXJuIHRoaXNbbmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGxpc3RlbmVyIGFycmF5IGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuXHQgKiBXaWxsIGluaXRpYWxpc2UgdGhlIGV2ZW50IG9iamVjdCBhbmQgbGlzdGVuZXIgYXJyYXlzIGlmIHJlcXVpcmVkLlxuXHQgKiBXaWxsIHJldHVybiBhbiBvYmplY3QgaWYgeW91IHVzZSBhIHJlZ2V4IHNlYXJjaC4gVGhlIG9iamVjdCBjb250YWlucyBrZXlzIGZvciBlYWNoIG1hdGNoZWQgZXZlbnQuIFNvIC9iYVtyel0vIG1pZ2h0IHJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBiYXIgYW5kIGJhei4gQnV0IG9ubHkgaWYgeW91IGhhdmUgZWl0aGVyIGRlZmluZWQgdGhlbSB3aXRoIGRlZmluZUV2ZW50IG9yIGFkZGVkIHNvbWUgbGlzdGVuZXJzIHRvIHRoZW0uXG5cdCAqIEVhY2ggcHJvcGVydHkgaW4gdGhlIG9iamVjdCByZXNwb25zZSBpcyBhbiBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gZXZ0IE5hbWUgb2YgdGhlIGV2ZW50IHRvIHJldHVybiB0aGUgbGlzdGVuZXJzIGZyb20uXG5cdCAqIEByZXR1cm4ge0Z1bmN0aW9uW118T2JqZWN0fSBBbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciB0aGUgZXZlbnQuXG5cdCAqL1xuXHRwcm90by5nZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoZXZ0KSB7XG5cdFx0dmFyIGV2ZW50cyA9IHRoaXMuX2dldEV2ZW50cygpO1xuXHRcdHZhciByZXNwb25zZTtcblx0XHR2YXIga2V5O1xuXG5cdFx0Ly8gUmV0dXJuIGEgY29uY2F0ZW5hdGVkIGFycmF5IG9mIGFsbCBtYXRjaGluZyBldmVudHMgaWZcblx0XHQvLyB0aGUgc2VsZWN0b3IgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24uXG5cdFx0aWYgKHR5cGVvZiBldnQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRyZXNwb25zZSA9IHt9O1xuXHRcdFx0Zm9yIChrZXkgaW4gZXZlbnRzKSB7XG5cdFx0XHRcdGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBldnQudGVzdChrZXkpKSB7XG5cdFx0XHRcdFx0cmVzcG9uc2Vba2V5XSA9IGV2ZW50c1trZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0cmVzcG9uc2UgPSBldmVudHNbZXZ0XSB8fCAoZXZlbnRzW2V2dF0gPSBbXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3BvbnNlO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUYWtlcyBhIGxpc3Qgb2YgbGlzdGVuZXIgb2JqZWN0cyBhbmQgZmxhdHRlbnMgaXQgaW50byBhIGxpc3Qgb2YgbGlzdGVuZXIgZnVuY3Rpb25zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdFtdfSBsaXN0ZW5lcnMgUmF3IGxpc3RlbmVyIG9iamVjdHMuXG5cdCAqIEByZXR1cm4ge0Z1bmN0aW9uW119IEp1c3QgdGhlIGxpc3RlbmVyIGZ1bmN0aW9ucy5cblx0ICovXG5cdHByb3RvLmZsYXR0ZW5MaXN0ZW5lcnMgPSBmdW5jdGlvbiBmbGF0dGVuTGlzdGVuZXJzKGxpc3RlbmVycykge1xuXHRcdHZhciBmbGF0TGlzdGVuZXJzID0gW107XG5cdFx0dmFyIGk7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRmbGF0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXJzW2ldLmxpc3RlbmVyKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmxhdExpc3RlbmVycztcblx0fTtcblxuXHQvKipcblx0ICogRmV0Y2hlcyB0aGUgcmVxdWVzdGVkIGxpc3RlbmVycyB2aWEgZ2V0TGlzdGVuZXJzIGJ1dCB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIHJlc3VsdHMgaW5zaWRlIGFuIG9iamVjdC4gVGhpcyBpcyBtYWlubHkgZm9yIGludGVybmFsIHVzZSBidXQgb3RoZXJzIG1heSBmaW5kIGl0IHVzZWZ1bC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gcmV0dXJuIHRoZSBsaXN0ZW5lcnMgZnJvbS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBBbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciBhbiBldmVudCBpbiBhbiBvYmplY3QuXG5cdCAqL1xuXHRwcm90by5nZXRMaXN0ZW5lcnNBc09iamVjdCA9IGZ1bmN0aW9uIGdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCkge1xuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVycyhldnQpO1xuXHRcdHZhciByZXNwb25zZTtcblxuXHRcdGlmIChsaXN0ZW5lcnMgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0cmVzcG9uc2UgPSB7fTtcblx0XHRcdHJlc3BvbnNlW2V2dF0gPSBsaXN0ZW5lcnM7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3BvbnNlIHx8IGxpc3RlbmVycztcblx0fTtcblxuXHQvKipcblx0ICogQWRkcyBhIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG5cdCAqIFRoZSBsaXN0ZW5lciB3aWxsIG5vdCBiZSBhZGRlZCBpZiBpdCBpcyBhIGR1cGxpY2F0ZS5cblx0ICogSWYgdGhlIGxpc3RlbmVyIHJldHVybnMgdHJ1ZSB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZCBhZnRlciBpdCBpcyBjYWxsZWQuXG5cdCAqIElmIHlvdSBwYXNzIGEgcmVndWxhciBleHByZXNzaW9uIGFzIHRoZSBldmVudCBuYW1lIHRoZW4gdGhlIGxpc3RlbmVyIHdpbGwgYmUgYWRkZWQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBhdHRhY2ggdGhlIGxpc3RlbmVyIHRvLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cblx0ICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRwcm90by5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKGV2dCwgbGlzdGVuZXIpIHtcblx0XHR2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChldnQpO1xuXHRcdHZhciBsaXN0ZW5lcklzV3JhcHBlZCA9IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ29iamVjdCc7XG5cdFx0dmFyIGtleTtcblxuXHRcdGZvciAoa2V5IGluIGxpc3RlbmVycykge1xuXHRcdFx0aWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnNba2V5XSwgbGlzdGVuZXIpID09PSAtMSkge1xuXHRcdFx0XHRsaXN0ZW5lcnNba2V5XS5wdXNoKGxpc3RlbmVySXNXcmFwcGVkID8gbGlzdGVuZXIgOiB7XG5cdFx0XHRcdFx0bGlzdGVuZXI6IGxpc3RlbmVyLFxuXHRcdFx0XHRcdG9uY2U6IGZhbHNlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBbGlhcyBvZiBhZGRMaXN0ZW5lclxuXHQgKi9cblx0cHJvdG8ub24gPSBhbGlhcygnYWRkTGlzdGVuZXInKTtcblxuXHQvKipcblx0ICogU2VtaS1hbGlhcyBvZiBhZGRMaXN0ZW5lci4gSXQgd2lsbCBhZGQgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmVcblx0ICogYXV0b21hdGljYWxseSByZW1vdmVkIGFmdGVyIGl0J3MgZmlyc3QgZXhlY3V0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBhdHRhY2ggdGhlIGxpc3RlbmVyIHRvLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRydWUgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgY2FsbGluZy5cblx0ICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRwcm90by5hZGRPbmNlTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRPbmNlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xuXHRcdHJldHVybiB0aGlzLmFkZExpc3RlbmVyKGV2dCwge1xuXHRcdFx0bGlzdGVuZXI6IGxpc3RlbmVyLFxuXHRcdFx0b25jZTogdHJ1ZVxuXHRcdH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBbGlhcyBvZiBhZGRPbmNlTGlzdGVuZXIuXG5cdCAqL1xuXHRwcm90by5vbmNlID0gYWxpYXMoJ2FkZE9uY2VMaXN0ZW5lcicpO1xuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIGFuIGV2ZW50IG5hbWUuIFRoaXMgaXMgcmVxdWlyZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgcmVnZXggdG8gYWRkIGEgbGlzdGVuZXIgdG8gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuIElmIHlvdSBkb24ndCBkbyB0aGlzIHRoZW4gaG93IGRvIHlvdSBleHBlY3QgaXQgdG8ga25vdyB3aGF0IGV2ZW50IHRvIGFkZCB0bz8gU2hvdWxkIGl0IGp1c3QgYWRkIHRvIGV2ZXJ5IHBvc3NpYmxlIG1hdGNoIGZvciBhIHJlZ2V4PyBOby4gVGhhdCBpcyBzY2FyeSBhbmQgYmFkLlxuXHQgKiBZb3UgbmVlZCB0byB0ZWxsIGl0IHdoYXQgZXZlbnQgbmFtZXMgc2hvdWxkIGJlIG1hdGNoZWQgYnkgYSByZWdleC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBjcmVhdGUuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0cHJvdG8uZGVmaW5lRXZlbnQgPSBmdW5jdGlvbiBkZWZpbmVFdmVudChldnQpIHtcblx0XHR0aGlzLmdldExpc3RlbmVycyhldnQpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBVc2VzIGRlZmluZUV2ZW50IHRvIGRlZmluZSBtdWx0aXBsZSBldmVudHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nW119IGV2dHMgQW4gYXJyYXkgb2YgZXZlbnQgbmFtZXMgdG8gZGVmaW5lLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHByb3RvLmRlZmluZUV2ZW50cyA9IGZ1bmN0aW9uIGRlZmluZUV2ZW50cyhldnRzKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBldnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHR0aGlzLmRlZmluZUV2ZW50KGV2dHNbaV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogUmVtb3ZlcyBhIGxpc3RlbmVyIGZ1bmN0aW9uIGZyb20gdGhlIHNwZWNpZmllZCBldmVudC5cblx0ICogV2hlbiBwYXNzZWQgYSByZWd1bGFyIGV4cHJlc3Npb24gYXMgdGhlIGV2ZW50IG5hbWUsIGl0IHdpbGwgcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBNZXRob2QgdG8gcmVtb3ZlIGZyb20gdGhlIGV2ZW50LlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHByb3RvLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZ0LCBsaXN0ZW5lcikge1xuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGV2dCk7XG5cdFx0dmFyIGluZGV4O1xuXHRcdHZhciBrZXk7XG5cblx0XHRmb3IgKGtleSBpbiBsaXN0ZW5lcnMpIHtcblx0XHRcdGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRpbmRleCA9IGluZGV4T2ZMaXN0ZW5lcihsaXN0ZW5lcnNba2V5XSwgbGlzdGVuZXIpO1xuXG5cdFx0XHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0XHRsaXN0ZW5lcnNba2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIEFsaWFzIG9mIHJlbW92ZUxpc3RlbmVyXG5cdCAqL1xuXHRwcm90by5vZmYgPSBhbGlhcygncmVtb3ZlTGlzdGVuZXInKTtcblxuXHQvKipcblx0ICogQWRkcyBsaXN0ZW5lcnMgaW4gYnVsayB1c2luZyB0aGUgbWFuaXB1bGF0ZUxpc3RlbmVycyBtZXRob2QuXG5cdCAqIElmIHlvdSBwYXNzIGFuIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHlvdSBjYW4gYWRkIHRvIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlLiBUaGUgb2JqZWN0IHNob3VsZCBjb250YWluIGtleSB2YWx1ZSBwYWlycyBvZiBldmVudHMgYW5kIGxpc3RlbmVycyBvciBsaXN0ZW5lciBhcnJheXMuIFlvdSBjYW4gYWxzbyBwYXNzIGl0IGFuIGV2ZW50IG5hbWUgYW5kIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0byBiZSBhZGRlZC5cblx0ICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gYWRkIHRoZSBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuXHQgKiBZZWFoLCB0aGlzIGZ1bmN0aW9uIGRvZXMgcXVpdGUgYSBiaXQuIFRoYXQncyBwcm9iYWJseSBhIGJhZCB0aGluZy5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fFJlZ0V4cH0gZXZ0IEFuIGV2ZW50IG5hbWUgaWYgeW91IHdpbGwgcGFzcyBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgbmV4dC4gQW4gb2JqZWN0IGlmIHlvdSB3aXNoIHRvIGFkZCB0byBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cblx0ICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gYWRkLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHByb3RvLmFkZExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZExpc3RlbmVycyhldnQsIGxpc3RlbmVycykge1xuXHRcdC8vIFBhc3MgdGhyb3VnaCB0byBtYW5pcHVsYXRlTGlzdGVuZXJzXG5cdFx0cmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyhmYWxzZSwgZXZ0LCBsaXN0ZW5lcnMpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGxpc3RlbmVycyBpbiBidWxrIHVzaW5nIHRoZSBtYW5pcHVsYXRlTGlzdGVuZXJzIG1ldGhvZC5cblx0ICogSWYgeW91IHBhc3MgYW4gb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgeW91IGNhbiByZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxuXHQgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgcmVtb3ZlZC5cblx0ICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgZnJvbSBhbGwgZXZlbnRzIHRoYXQgbWF0Y2ggaXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byByZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS5cblx0ICogQHBhcmFtIHtGdW5jdGlvbltdfSBbbGlzdGVuZXJzXSBBbiBvcHRpb25hbCBhcnJheSBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdG8gcmVtb3ZlLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHByb3RvLnJlbW92ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycyhldnQsIGxpc3RlbmVycykge1xuXHRcdC8vIFBhc3MgdGhyb3VnaCB0byBtYW5pcHVsYXRlTGlzdGVuZXJzXG5cdFx0cmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyh0cnVlLCBldnQsIGxpc3RlbmVycyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEVkaXRzIGxpc3RlbmVycyBpbiBidWxrLiBUaGUgYWRkTGlzdGVuZXJzIGFuZCByZW1vdmVMaXN0ZW5lcnMgbWV0aG9kcyBib3RoIHVzZSB0aGlzIHRvIGRvIHRoZWlyIGpvYi4gWW91IHNob3VsZCByZWFsbHkgdXNlIHRob3NlIGluc3RlYWQsIHRoaXMgaXMgYSBsaXR0bGUgbG93ZXIgbGV2ZWwuXG5cdCAqIFRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGRldGVybWluZSBpZiB0aGUgbGlzdGVuZXJzIGFyZSByZW1vdmVkICh0cnVlKSBvciBhZGRlZCAoZmFsc2UpLlxuXHQgKiBJZiB5b3UgcGFzcyBhbiBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB5b3UgY2FuIGFkZC9yZW1vdmUgZnJvbSBtdWx0aXBsZSBldmVudHMgYXQgb25jZS4gVGhlIG9iamVjdCBzaG91bGQgY29udGFpbiBrZXkgdmFsdWUgcGFpcnMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMgb3IgbGlzdGVuZXIgYXJyYXlzLlxuXHQgKiBZb3UgY2FuIGFsc28gcGFzcyBpdCBhbiBldmVudCBuYW1lIGFuZCBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQvcmVtb3ZlZC5cblx0ICogWW91IGNhbiBhbHNvIHBhc3MgaXQgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWFuaXB1bGF0ZSB0aGUgbGlzdGVuZXJzIG9mIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cblx0ICpcblx0ICogQHBhcmFtIHtCb29sZWFufSByZW1vdmUgVHJ1ZSBpZiB5b3Ugd2FudCB0byByZW1vdmUgbGlzdGVuZXJzLCBmYWxzZSBpZiB5b3Ugd2FudCB0byBhZGQuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdHxSZWdFeHB9IGV2dCBBbiBldmVudCBuYW1lIGlmIHlvdSB3aWxsIHBhc3MgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIG5leHQuIEFuIG9iamVjdCBpZiB5b3Ugd2lzaCB0byBhZGQvcmVtb3ZlIGZyb20gbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2UuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gW2xpc3RlbmVyc10gQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRvIGFkZC9yZW1vdmUuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0cHJvdG8ubWFuaXB1bGF0ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIG1hbmlwdWxhdGVMaXN0ZW5lcnMocmVtb3ZlLCBldnQsIGxpc3RlbmVycykge1xuXHRcdHZhciBpO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgc2luZ2xlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lciA6IHRoaXMuYWRkTGlzdGVuZXI7XG5cdFx0dmFyIG11bHRpcGxlID0gcmVtb3ZlID8gdGhpcy5yZW1vdmVMaXN0ZW5lcnMgOiB0aGlzLmFkZExpc3RlbmVycztcblxuXHRcdC8vIElmIGV2dCBpcyBhbiBvYmplY3QgdGhlbiBwYXNzIGVhY2ggb2YgaXQncyBwcm9wZXJ0aWVzIHRvIHRoaXMgbWV0aG9kXG5cdFx0aWYgKHR5cGVvZiBldnQgPT09ICdvYmplY3QnICYmICEoZXZ0IGluc3RhbmNlb2YgUmVnRXhwKSkge1xuXHRcdFx0Zm9yIChpIGluIGV2dCkge1xuXHRcdFx0XHRpZiAoZXZ0Lmhhc093blByb3BlcnR5KGkpICYmICh2YWx1ZSA9IGV2dFtpXSkpIHtcblx0XHRcdFx0XHQvLyBQYXNzIHRoZSBzaW5nbGUgbGlzdGVuZXIgc3RyYWlnaHQgdGhyb3VnaCB0byB0aGUgc2luZ3VsYXIgbWV0aG9kXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0c2luZ2xlLmNhbGwodGhpcywgaSwgdmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSBwYXNzIGJhY2sgdG8gdGhlIG11bHRpcGxlIGZ1bmN0aW9uXG5cdFx0XHRcdFx0XHRtdWx0aXBsZS5jYWxsKHRoaXMsIGksIHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHQvLyBTbyBldnQgbXVzdCBiZSBhIHN0cmluZ1xuXHRcdFx0Ly8gQW5kIGxpc3RlbmVycyBtdXN0IGJlIGFuIGFycmF5IG9mIGxpc3RlbmVyc1xuXHRcdFx0Ly8gTG9vcCBvdmVyIGl0IGFuZCBwYXNzIGVhY2ggb25lIHRvIHRoZSBtdWx0aXBsZSBtZXRob2Rcblx0XHRcdGkgPSBsaXN0ZW5lcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRzaW5nbGUuY2FsbCh0aGlzLCBldnQsIGxpc3RlbmVyc1tpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmcm9tIGEgc3BlY2lmaWVkIGV2ZW50LlxuXHQgKiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgYW4gZXZlbnQgdGhlbiBhbGwgbGlzdGVuZXJzIHdpbGwgYmUgcmVtb3ZlZC5cblx0ICogVGhhdCBtZWFucyBldmVyeSBldmVudCB3aWxsIGJlIGVtcHRpZWQuXG5cdCAqIFlvdSBjYW4gYWxzbyBwYXNzIGEgcmVnZXggdG8gcmVtb3ZlIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBbZXZ0XSBPcHRpb25hbCBuYW1lIG9mIHRoZSBldmVudCB0byByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IuIFdpbGwgcmVtb3ZlIGZyb20gZXZlcnkgZXZlbnQgaWYgbm90IHBhc3NlZC5cblx0ICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRwcm90by5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50KGV2dCkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIGV2dDtcblx0XHR2YXIgZXZlbnRzID0gdGhpcy5fZ2V0RXZlbnRzKCk7XG5cdFx0dmFyIGtleTtcblxuXHRcdC8vIFJlbW92ZSBkaWZmZXJlbnQgdGhpbmdzIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgZXZ0XG5cdFx0aWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHQvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdGhlIHNwZWNpZmllZCBldmVudFxuXHRcdFx0ZGVsZXRlIGV2ZW50c1tldnRdO1xuXHRcdH1cblx0XHRlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBldmVudHMgbWF0Y2hpbmcgdGhlIHJlZ2V4LlxuXHRcdFx0Zm9yIChrZXkgaW4gZXZlbnRzKSB7XG5cdFx0XHRcdGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBldnQudGVzdChrZXkpKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIGV2ZW50c1trZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgaW4gYWxsIGV2ZW50c1xuXHRcdFx0ZGVsZXRlIHRoaXMuX2V2ZW50cztcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogRW1pdHMgYW4gZXZlbnQgb2YgeW91ciBjaG9pY2UuXG5cdCAqIFdoZW4gZW1pdHRlZCwgZXZlcnkgbGlzdGVuZXIgYXR0YWNoZWQgdG8gdGhhdCBldmVudCB3aWxsIGJlIGV4ZWN1dGVkLlxuXHQgKiBJZiB5b3UgcGFzcyB0aGUgb3B0aW9uYWwgYXJndW1lbnQgYXJyYXkgdGhlbiB0aG9zZSBhcmd1bWVudHMgd2lsbCBiZSBwYXNzZWQgdG8gZXZlcnkgbGlzdGVuZXIgdXBvbiBleGVjdXRpb24uXG5cdCAqIEJlY2F1c2UgaXQgdXNlcyBgYXBwbHlgLCB5b3VyIGFycmF5IG9mIGFyZ3VtZW50cyB3aWxsIGJlIHBhc3NlZCBhcyBpZiB5b3Ugd3JvdGUgdGhlbSBvdXQgc2VwYXJhdGVseS5cblx0ICogU28gdGhleSB3aWxsIG5vdCBhcnJpdmUgd2l0aGluIHRoZSBhcnJheSBvbiB0aGUgb3RoZXIgc2lkZSwgdGhleSB3aWxsIGJlIHNlcGFyYXRlLlxuXHQgKiBZb3UgY2FuIGFsc28gcGFzcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBlbWl0IHRvIGFsbCBldmVudHMgdGhhdCBtYXRjaCBpdC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBldnQgTmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdCBhbmQgZXhlY3V0ZSBsaXN0ZW5lcnMgZm9yLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBbYXJnc10gT3B0aW9uYWwgYXJyYXkgb2YgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBlYWNoIGxpc3RlbmVyLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEN1cnJlbnQgaW5zdGFuY2Ugb2YgRXZlbnRFbWl0dGVyIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHByb3RvLmVtaXRFdmVudCA9IGZ1bmN0aW9uIGVtaXRFdmVudChldnQsIGFyZ3MpIHtcblx0XHR2YXIgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChldnQpO1xuXHRcdHZhciBsaXN0ZW5lcjtcblx0XHR2YXIgaTtcblx0XHR2YXIga2V5O1xuXHRcdHZhciByZXNwb25zZTtcblxuXHRcdGZvciAoa2V5IGluIGxpc3RlbmVycykge1xuXHRcdFx0aWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdGkgPSBsaXN0ZW5lcnNba2V5XS5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdC8vIElmIHRoZSBsaXN0ZW5lciByZXR1cm5zIHRydWUgdGhlbiBpdCBzaGFsbCBiZSByZW1vdmVkIGZyb20gdGhlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGVpdGhlciB3aXRoIGEgYmFzaWMgY2FsbCBvciBhbiBhcHBseSBpZiB0aGVyZSBpcyBhbiBhcmdzIGFycmF5XG5cdFx0XHRcdFx0bGlzdGVuZXIgPSBsaXN0ZW5lcnNba2V5XVtpXTtcblxuXHRcdFx0XHRcdGlmIChsaXN0ZW5lci5vbmNlID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJlbW92ZUxpc3RlbmVyKGV2dCwgbGlzdGVuZXIubGlzdGVuZXIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlc3BvbnNlID0gbGlzdGVuZXIubGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyB8fCBbXSk7XG5cblx0XHRcdFx0XHRpZiAocmVzcG9uc2UgPT09IHRoaXMuX2dldE9uY2VSZXR1cm5WYWx1ZSgpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJlbW92ZUxpc3RlbmVyKGV2dCwgbGlzdGVuZXIubGlzdGVuZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBbGlhcyBvZiBlbWl0RXZlbnRcblx0ICovXG5cdHByb3RvLnRyaWdnZXIgPSBhbGlhcygnZW1pdEV2ZW50Jyk7XG5cblx0LyoqXG5cdCAqIFN1YnRseSBkaWZmZXJlbnQgZnJvbSBlbWl0RXZlbnQgaW4gdGhhdCBpdCB3aWxsIHBhc3MgaXRzIGFyZ3VtZW50cyBvbiB0byB0aGUgbGlzdGVuZXJzLCBhcyBvcHBvc2VkIHRvIHRha2luZyBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMgdG8gcGFzcyBvbi5cblx0ICogQXMgd2l0aCBlbWl0RXZlbnQsIHlvdSBjYW4gcGFzcyBhIHJlZ2V4IGluIHBsYWNlIG9mIHRoZSBldmVudCBuYW1lIHRvIGVtaXQgdG8gYWxsIGV2ZW50cyB0aGF0IG1hdGNoIGl0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGV2dCBOYW1lIG9mIHRoZSBldmVudCB0byBlbWl0IGFuZCBleGVjdXRlIGxpc3RlbmVycyBmb3IuXG5cdCAqIEBwYXJhbSB7Li4uKn0gT3B0aW9uYWwgYWRkaXRpb25hbCBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggbGlzdGVuZXIuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQ3VycmVudCBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0cHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZ0KSB7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXHRcdHJldHVybiB0aGlzLmVtaXRFdmVudChldnQsIGFyZ3MpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBjdXJyZW50IHZhbHVlIHRvIGNoZWNrIGFnYWluc3Qgd2hlbiBleGVjdXRpbmcgbGlzdGVuZXJzLiBJZiBhXG5cdCAqIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGUgb25lIHNldCBoZXJlIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkXG5cdCAqIGFmdGVyIGV4ZWN1dGlvbi4gVGhpcyB2YWx1ZSBkZWZhdWx0cyB0byB0cnVlLlxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBuZXcgdmFsdWUgdG8gY2hlY2sgZm9yIHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy5cblx0ICogQHJldHVybiB7T2JqZWN0fSBDdXJyZW50IGluc3RhbmNlIG9mIEV2ZW50RW1pdHRlciBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRwcm90by5zZXRPbmNlUmV0dXJuVmFsdWUgPSBmdW5jdGlvbiBzZXRPbmNlUmV0dXJuVmFsdWUodmFsdWUpIHtcblx0XHR0aGlzLl9vbmNlUmV0dXJuVmFsdWUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogRmV0Y2hlcyB0aGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBhZ2FpbnN0IHdoZW4gZXhlY3V0aW5nIGxpc3RlbmVycy4gSWZcblx0ICogdGhlIGxpc3RlbmVycyByZXR1cm4gdmFsdWUgbWF0Y2hlcyB0aGlzIG9uZSB0aGVuIGl0IHNob3VsZCBiZSByZW1vdmVkXG5cdCAqIGF1dG9tYXRpY2FsbHkuIEl0IHdpbGwgcmV0dXJuIHRydWUgYnkgZGVmYXVsdC5cblx0ICpcblx0ICogQHJldHVybiB7KnxCb29sZWFufSBUaGUgY3VycmVudCB2YWx1ZSB0byBjaGVjayBmb3Igb3IgdGhlIGRlZmF1bHQsIHRydWUuXG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblx0cHJvdG8uX2dldE9uY2VSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uIF9nZXRPbmNlUmV0dXJuVmFsdWUoKSB7XG5cdFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ19vbmNlUmV0dXJuVmFsdWUnKSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX29uY2VSZXR1cm5WYWx1ZTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEZldGNoZXMgdGhlIGV2ZW50cyBvYmplY3QgYW5kIGNyZWF0ZXMgb25lIGlmIHJlcXVpcmVkLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBldmVudHMgc3RvcmFnZSBvYmplY3QuXG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblx0cHJvdG8uX2dldEV2ZW50cyA9IGZ1bmN0aW9uIF9nZXRFdmVudHMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2V2ZW50cyB8fCAodGhpcy5fZXZlbnRzID0ge30pO1xuXHR9O1xuXG5cdC8vIEV4cG9zZSB0aGUgY2xhc3MgZWl0aGVyIHZpYSBBTUQsIENvbW1vbkpTIG9yIHRoZSBnbG9iYWwgb2JqZWN0XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIEV2ZW50RW1pdHRlcjtcblx0XHR9KTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cdH1cblx0ZWxzZSB7XG5cdFx0dGhpcy5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cdH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIvKiFcbiAqIGV2ZW50aWUgdjEuMC4zXG4gKiBldmVudCBiaW5kaW5nIGhlbHBlclxuICogICBldmVudGllLmJpbmQoIGVsZW0sICdjbGljaycsIG15Rm4gKVxuICogICBldmVudGllLnVuYmluZCggZWxlbSwgJ2NsaWNrJywgbXlGbiApXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSAqL1xuXG4oZnVuY3Rpb24od2luZG93KSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gIHZhciBiaW5kID0gZnVuY3Rpb24oKSB7XG4gIH07XG5cbiAgaWYgKGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGJpbmQgPSBmdW5jdGlvbihvYmosIHR5cGUsIGZuKSB7XG4gICAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoZG9jRWxlbS5hdHRhY2hFdmVudCkge1xuICAgIGJpbmQgPSBmdW5jdGlvbihvYmosIHR5cGUsIGZuKSB7XG4gICAgICBvYmpbIHR5cGUgKyBmbiBdID0gZm4uaGFuZGxlRXZlbnQgP1xuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXZlbnQgPSB3aW5kb3cuZXZlbnQ7XG4gICAgICAgICAgLy8gYWRkIGV2ZW50LnRhcmdldFxuICAgICAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50O1xuICAgICAgICAgIGZuLmhhbmRsZUV2ZW50LmNhbGwoZm4sIGV2ZW50KTtcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBldmVudCA9IHdpbmRvdy5ldmVudDtcbiAgICAgICAgICAvLyBhZGQgZXZlbnQudGFyZ2V0XG4gICAgICAgICAgZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQ7XG4gICAgICAgICAgZm4uY2FsbChvYmosIGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgIG9iai5hdHRhY2hFdmVudChcIm9uXCIgKyB0eXBlLCBvYmpbIHR5cGUgKyBmbiBdKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHVuYmluZCA9IGZ1bmN0aW9uKCkge1xuICB9O1xuXG4gIGlmIChkb2NFbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICB1bmJpbmQgPSBmdW5jdGlvbihvYmosIHR5cGUsIGZuKSB7XG4gICAgICBvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoZG9jRWxlbS5kZXRhY2hFdmVudCkge1xuICAgIHVuYmluZCA9IGZ1bmN0aW9uKG9iaiwgdHlwZSwgZm4pIHtcbiAgICAgIG9iai5kZXRhY2hFdmVudChcIm9uXCIgKyB0eXBlLCBvYmpbIHR5cGUgKyBmbiBdKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRlbGV0ZSBvYmpbIHR5cGUgKyBmbiBdO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIGNhbid0IGRlbGV0ZSB3aW5kb3cgb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgICAgb2JqWyB0eXBlICsgZm4gXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGV2ZW50aWUgPSB7XG4gICAgYmluZCAgOiBiaW5kLFxuICAgIHVuYmluZDogdW5iaW5kXG4gIH07XG5cbi8vIHRyYW5zcG9ydFxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKGV2ZW50aWUpO1xuXG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGV2ZW50aWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZXZlbnRpZSA9IGV2ZW50aWU7XG4gIH1cblxufSkodGhpcyk7XG4iLCIvKiFcbiAqIGltYWdlc0xvYWRlZCB2My4wLjRcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKi9cblxuKGZ1bmN0aW9uKHdpbmRvdykge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgJCAvLz0gd2luZG93LmpRdWVyeTtcbiAgdmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZXh0ZW5kIG9iamVjdHNcbiAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIGIpIHtcbiAgICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgb2JqVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gIGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIG9ialRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfVxuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxuICBmdW5jdGlvbiBtYWtlQXJyYXkob2JqKSB7XG4gICAgdmFyIGFyeSA9IFtdO1xuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICAgICAgYXJ5ID0gb2JqO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iai5sZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb2JqLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGFyeS5wdXNoKG9ialtpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICAgICAgYXJ5LnB1c2gob2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyeTtcbiAgfVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICBmdW5jdGlvbiBkZWZpbmVJbWFnZXNMb2FkZWQoRXZlbnRFbWl0dGVyLCBldmVudGllKSB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5LCBFbGVtZW50LCBOb2RlTGlzdCwgU3RyaW5nfSBlbGVtXG4gICAgICogQHBhcmFtIHtPYmplY3Qgb3IgRnVuY3Rpb259IG9wdGlvbnMgLSBpZiBmdW5jdGlvbiwgdXNlIGFzIGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25BbHdheXMgLSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEltYWdlc0xvYWRlZChlbGVtLCBvcHRpb25zLCBvbkFsd2F5cykge1xuICAgICAgLy8gY29lcmNlIEltYWdlc0xvYWRlZCgpIHdpdGhvdXQgbmV3LCB0byBiZSBuZXcgSW1hZ2VzTG9hZGVkKClcbiAgICAgIGlmICghKCB0aGlzIGluc3RhbmNlb2YgSW1hZ2VzTG9hZGVkICkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbWFnZXNMb2FkZWQoZWxlbSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICAvLyB1c2UgZWxlbSBhcyBzZWxlY3RvciBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWxlbWVudHMgPSBtYWtlQXJyYXkoZWxlbSk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmQoe30sIHRoaXMub3B0aW9ucyk7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvbkFsd2F5cyA9IG9wdGlvbnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHRlbmQodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQWx3YXlzKSB7XG4gICAgICAgIHRoaXMub24oJ2Fsd2F5cycsIG9uQWx3YXlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5nZXRJbWFnZXMoKTtcblxuICAgICAgaWYgKCQpIHtcbiAgICAgICAgLy8gYWRkIGpRdWVyeSBEZWZlcnJlZCBvYmplY3RcbiAgICAgICAgdGhpcy5qcURlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gSEFDSyBjaGVjayBhc3luYyB0byBhbGxvdyB0aW1lIHRvIGJpbmQgbGlzdGVuZXJzXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY2hlY2soKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIEltYWdlc0xvYWRlZC5wcm90b3R5cGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLm9wdGlvbnMgPSB7fTtcblxuICAgIEltYWdlc0xvYWRlZC5wcm90b3R5cGUuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmltYWdlcyA9IFtdO1xuXG4gICAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYW4gaXRlbSBzZWxlY3RvclxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZW0gPSB0aGlzLmVsZW1lbnRzW2ldO1xuICAgICAgICAvLyBmaWx0ZXIgc2libGluZ3NcbiAgICAgICAgaWYgKGVsZW0ubm9kZU5hbWUgPT09ICdJTUcnKSB7XG4gICAgICAgICAgdGhpcy5hZGRJbWFnZShlbGVtKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBmaW5kIGNoaWxkcmVuXG4gICAgICAgIHZhciBjaGlsZEVsZW1zID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcbiAgICAgICAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpMZW4gPSBjaGlsZEVsZW1zLmxlbmd0aDsgaiA8IGpMZW47IGorKykge1xuICAgICAgICAgIHZhciBpbWcgPSBjaGlsZEVsZW1zW2pdO1xuICAgICAgICAgIHRoaXMuYWRkSW1hZ2UoaW1nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0ltYWdlfSBpbWdcbiAgICAgKi9cbiAgICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEltYWdlID0gZnVuY3Rpb24oaW1nKSB7XG4gICAgICB2YXIgbG9hZGluZ0ltYWdlID0gbmV3IExvYWRpbmdJbWFnZShpbWcpO1xuICAgICAgdGhpcy5pbWFnZXMucHVzaChsb2FkaW5nSW1hZ2UpO1xuICAgIH07XG5cbiAgICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGNoZWNrZWRDb3VudCA9IDA7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy5pbWFnZXMubGVuZ3RoO1xuICAgICAgdGhpcy5oYXNBbnlCcm9rZW4gPSBmYWxzZTtcbiAgICAgIC8vIGNvbXBsZXRlIGlmIG5vIGltYWdlc1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uQ29uZmlybShpbWFnZSwgbWVzc2FnZSkge1xuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kZWJ1ZyAmJiBoYXNDb25zb2xlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NvbmZpcm0nLCBpbWFnZSwgbWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5wcm9ncmVzcyhpbWFnZSk7XG4gICAgICAgIGNoZWNrZWRDb3VudCsrO1xuICAgICAgICBpZiAoY2hlY2tlZENvdW50ID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBfdGhpcy5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBiaW5kIG9uY2VcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbG9hZGluZ0ltYWdlID0gdGhpcy5pbWFnZXNbaV07XG4gICAgICAgIGxvYWRpbmdJbWFnZS5vbignY29uZmlybScsIG9uQ29uZmlybSk7XG4gICAgICAgIGxvYWRpbmdJbWFnZS5jaGVjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBJbWFnZXNMb2FkZWQucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICAgIHRoaXMuaGFzQW55QnJva2VuID0gdGhpcy5oYXNBbnlCcm9rZW4gfHwgIWltYWdlLmlzTG9hZGVkO1xuICAgICAgLy8gSEFDSyAtIENocm9tZSB0cmlnZ2VycyBldmVudCBiZWZvcmUgb2JqZWN0IHByb3BlcnRpZXMgaGF2ZSBjaGFuZ2VkLiAjODNcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5lbWl0KCdwcm9ncmVzcycsIF90aGlzLCBpbWFnZSk7XG4gICAgICAgIGlmIChfdGhpcy5qcURlZmVycmVkKSB7XG4gICAgICAgICAgX3RoaXMuanFEZWZlcnJlZC5ub3RpZnkoX3RoaXMsIGltYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIEltYWdlc0xvYWRlZC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBldmVudE5hbWUgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdmYWlsJyA6ICdkb25lJztcbiAgICAgIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgLy8gSEFDSyAtIGFub3RoZXIgc2V0VGltZW91dCBzbyB0aGF0IGNvbmZpcm0gaGFwcGVucyBhZnRlciBwcm9ncmVzc1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuZW1pdChldmVudE5hbWUsIF90aGlzKTtcbiAgICAgICAgX3RoaXMuZW1pdCgnYWx3YXlzJywgX3RoaXMpO1xuICAgICAgICBpZiAoX3RoaXMuanFEZWZlcnJlZCkge1xuICAgICAgICAgIHZhciBqcU1ldGhvZCA9IF90aGlzLmhhc0FueUJyb2tlbiA/ICdyZWplY3QnIDogJ3Jlc29sdmUnO1xuICAgICAgICAgIF90aGlzLmpxRGVmZXJyZWRbIGpxTWV0aG9kIF0oX3RoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0ganF1ZXJ5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgICBpZiAoJCkge1xuICAgICAgJC5mbi5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgSW1hZ2VzTG9hZGVkKHRoaXMsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmpxRGVmZXJyZWQucHJvbWlzZSgkKHRoaXMpKTtcbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgIHZhciBjYWNoZSA9IHt9O1xuXG4gICAgZnVuY3Rpb24gTG9hZGluZ0ltYWdlKGltZykge1xuICAgICAgdGhpcy5pbWcgPSBpbWc7XG4gICAgfVxuXG4gICAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIExvYWRpbmdJbWFnZS5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGZpcnN0IGNoZWNrIGNhY2hlZCBhbnkgcHJldmlvdXMgaW1hZ2VzIHRoYXQgaGF2ZSBzYW1lIHNyY1xuICAgICAgdmFyIGNhY2hlZCA9IGNhY2hlWyB0aGlzLmltZy5zcmMgXTtcbiAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgdGhpcy51c2VDYWNoZWQoY2FjaGVkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYWRkIHRoaXMgdG8gY2FjaGVcbiAgICAgIGNhY2hlWyB0aGlzLmltZy5zcmMgXSA9IHRoaXM7XG5cbiAgICAgIC8vIElmIGNvbXBsZXRlIGlzIHRydWUgYW5kIGJyb3dzZXIgc3VwcG9ydHMgbmF0dXJhbCBzaXplcyxcbiAgICAgIC8vIHRyeSB0byBjaGVjayBmb3IgaW1hZ2Ugc3RhdHVzIG1hbnVhbGx5LlxuICAgICAgaWYgKHRoaXMuaW1nLmNvbXBsZXRlICYmIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHJlcG9ydCBiYXNlZCBvbiBuYXR1cmFsV2lkdGhcbiAgICAgICAgdGhpcy5jb25maXJtKHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vbmUgb2YgdGhlIGNoZWNrcyBhYm92ZSBtYXRjaGVkLCBzaW11bGF0ZSBsb2FkaW5nIG9uIGRldGFjaGVkIGVsZW1lbnQuXG4gICAgICB2YXIgcHJveHlJbWFnZSA9IHRoaXMucHJveHlJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgZXZlbnRpZS5iaW5kKHByb3h5SW1hZ2UsICdsb2FkJywgdGhpcyk7XG4gICAgICBldmVudGllLmJpbmQocHJveHlJbWFnZSwgJ2Vycm9yJywgdGhpcyk7XG4gICAgICBwcm94eUltYWdlLnNyYyA9IHRoaXMuaW1nLnNyYztcbiAgICB9O1xuXG4gICAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS51c2VDYWNoZWQgPSBmdW5jdGlvbihjYWNoZWQpIHtcbiAgICAgIGlmIChjYWNoZWQuaXNDb25maXJtZWQpIHtcbiAgICAgICAgdGhpcy5jb25maXJtKGNhY2hlZC5pc0xvYWRlZCwgJ2NhY2hlZCB3YXMgY29uZmlybWVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBjYWNoZWQub24oJ2NvbmZpcm0nLCBmdW5jdGlvbihpbWFnZSkge1xuICAgICAgICAgIF90aGlzLmNvbmZpcm0oaW1hZ2UuaXNMb2FkZWQsICdjYWNoZSBlbWl0dGVkIGNvbmZpcm1lZCcpO1xuICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBiaW5kIG9uY2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIExvYWRpbmdJbWFnZS5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKGlzTG9hZGVkLCBtZXNzYWdlKSB7XG4gICAgICB0aGlzLmlzQ29uZmlybWVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgICAgIHRoaXMuZW1pdCgnY29uZmlybScsIHRoaXMsIG1lc3NhZ2UpO1xuICAgIH07XG5cbiAgICAvLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXG4gICAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gICAgICBpZiAodGhpc1sgbWV0aG9kIF0pIHtcbiAgICAgICAgdGhpc1sgbWV0aG9kIF0oZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBMb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5jb25maXJtKHRydWUsICdvbmxvYWQnKTtcbiAgICAgIHRoaXMudW5iaW5kUHJveHlFdmVudHMoKTtcbiAgICB9O1xuXG4gICAgTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNvbmZpcm0oZmFsc2UsICdvbmVycm9yJyk7XG4gICAgICB0aGlzLnVuYmluZFByb3h5RXZlbnRzKCk7XG4gICAgfTtcblxuICAgIExvYWRpbmdJbWFnZS5wcm90b3R5cGUudW5iaW5kUHJveHlFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGV2ZW50aWUudW5iaW5kKHRoaXMucHJveHlJbWFnZSwgJ2xvYWQnLCB0aGlzKTtcbiAgICAgIGV2ZW50aWUudW5iaW5kKHRoaXMucHJveHlJbWFnZSwgJ2Vycm9yJywgdGhpcyk7XG4gICAgfTtcblxuICAgIC8vIC0tLS0tICAtLS0tLSAvL1xuXG4gICAgcmV0dXJuIEltYWdlc0xvYWRlZDtcbiAgfVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB0cmFuc3BvcnQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKFtcbiAgICAgICcuLi8uLi8uLi9ib3dlcl9jb21wb25lbnRzL2V2ZW50RW1pdHRlci9FdmVudEVtaXR0ZXInLFxuICAgICAgJ2V2ZW50aWUvZXZlbnRpZSdcbiAgICBdLFxuICAgICAgZGVmaW5lSW1hZ2VzTG9hZGVkKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIHZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL0V2ZW50RW1pdHRlcicpXG4gICAgICAsIGV2ZW50aWUgPSByZXF1aXJlKCcuL2V2ZW50aWUnKVxuICAgICAgO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJbWFnZXNMb2FkZWQoXG4gICAgICBFdmVudEVtaXR0ZXIsXG4gICAgICBldmVudGllXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQgPSBkZWZpbmVJbWFnZXNMb2FkZWQoXG4gICAgICB3aW5kb3cuRXZlbnRFbWl0dGVyLFxuICAgICAgd2luZG93LmV2ZW50aWVcbiAgICApO1xuICB9XG5cbn0pKHdpbmRvdyk7XG4iLCIvKlxuICogcG1ycGMgMC43LjEgLSBJbnRlci13aWRnZXQgcmVtb3RlIHByb2NlZHVyZSBjYWxsIGxpYnJhcnkgYmFzZWQgb24gSFRNTDVcbiAqICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UgQVBJIGFuZCBKU09OLVJQQy4gaHR0cHM6Ly9naXRodWIuY29tL2l6dXphay9wbXJwY1xuICpcbiAqIENvcHlyaWdodCAyMDEyIEl2YW4gWnV6YWssIE1hcmtvIEl2YW5rb3ZpY1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbnZhciBwbXJwYztcbm1vZHVsZS5leHBvcnRzID0gcG1ycGMgPSBzZWxmLnBtcnBjID0gIGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBpZiBKU09OIGxpYnJhcnkgaXMgYXZhaWxhYmxlXG4gIGlmICh0eXBlb2YgSlNPTiA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgSlNPTi5zdHJpbmdpZnkgPT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICB0eXBlb2YgSlNPTi5wYXJzZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IFwicG1ycGMgcmVxdWlyZXMgdGhlIEpTT04gbGlicmFyeVwiO1xuICB9XG5cbiAgLy8gVE9ETzogbWFrZSBcImNvbnRleHRUeXBlXCIgcHJpdmF0ZSB2YXJpYWJsZVxuICAvLyBjaGVjayBpZiBwb3N0TWVzc2FnZSBBUElzIGFyZSBhdmFpbGFibGVcbiAgaWYgKHR5cGVvZiB0aGlzLnBvc3RNZXNzYWdlID09PSBcInVuZGVmaW5lZFwiICYmICAvLyB3aW5kb3cgb3Igd29ya2VyXG4gICAgdHlwZW9mIHRoaXMub25jb25uZWN0ID09PSBcInVuZGVmaW5lZFwiKSB7ICAvLyBzaGFyZWQgd29ya2VyXG4gICAgdGhyb3cgXCJwbXJwYyByZXF1aXJlcyB0aGUgSFRNTDUgY3Jvc3MtZG9jdW1lbnQgbWVzc2FnaW5nIGFuZCB3b3JrZXIgQVBJc1wiO1xuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgdmVyc2lvbiA0IFVVSURcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xuICAgIHZhciB1dWlkID0gW10sIG5pbmV0ZWVuID0gXCI4OUFCXCIsIGhleCA9IFwiMDEyMzQ1Njc4OUFCQ0RFRlwiO1xuICAgIGZvciAodmFyIGk9MDsgaTwzNjsgaSsrKSB7XG4gICAgICB1dWlkW2ldID0gaGV4W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KV07XG4gICAgfVxuICAgIHV1aWRbMTRdID0gJzQnO1xuICAgIHV1aWRbMTldID0gbmluZXRlZW5bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCldO1xuICAgIHV1aWRbOF0gPSB1dWlkWzEzXSA9IHV1aWRbMThdID0gdXVpZFsyM10gPSAnLSc7XG4gICAgcmV0dXJuIHV1aWQuam9pbignJyk7XG4gIH1cblxuICAvLyBDaGVja3Mgd2hldGhlciBhIGRvbWFpbiBzYXRpc2ZpZXMgdGhlIGFjY2VzcyBjb250cm9sIGxpc3QuIFRoZSBhY2Nlc3NcbiAgLy8gY29udHJvbCBsaXN0IGhhcyBhIHdoaXRlbGlzdCBhbmQgYSBibGFja2xpc3QuIEluIG9yZGVyIHRvIHNhdGlzZnkgdGhlIGFjbCxcbiAgLy8gdGhlIGRvbWFpbiBtdXN0IGJlIG9uIHRoZSB3aGl0ZWxpc3QsIGFuZCBtdXN0IG5vdCBiZSBvbiB0aGUgYmxhY2tsaXN0LlxuICBmdW5jdGlvbiBjaGVja0FDTChhY2Nlc3NDb250cm9sTGlzdCwgb3JpZ2luKSB7XG4gICAgdmFyIGFjbFdoaXRlbGlzdCA9IGFjY2Vzc0NvbnRyb2xMaXN0LndoaXRlbGlzdDtcbiAgICB2YXIgYWNsQmxhY2tsaXN0ID0gYWNjZXNzQ29udHJvbExpc3QuYmxhY2tsaXN0O1xuXG4gICAgdmFyIGlzV2hpdGVsaXN0ZWQgPSBmYWxzZTtcbiAgICB2YXIgaXNCbGFja2xpc3RlZCA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaT0wOyBpPGFjbFdoaXRlbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgaWYob3JpZ2luLm1hdGNoKG5ldyBSZWdFeHAoYWNsV2hpdGVsaXN0W2ldKSkpIHtcbiAgICAgICAgaXNXaGl0ZWxpc3RlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGo9MDsgajxhY2xCbGFja2xpc3QubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmKG9yaWdpbi5tYXRjaChuZXcgUmVnRXhwKGFjbEJsYWNrbGlzdFtqXSkpKSB7XG4gICAgICAgIGlzQmxhY2tsaXN0ZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXNXaGl0ZWxpc3RlZCAmJiAhaXNCbGFja2xpc3RlZDtcbiAgfVxuXG4gIC8vIENhbGxzIGEgZnVuY3Rpb24gd2l0aCBlaXRoZXIgcG9zaXRpb25hbCBvciBuYW1lZCBwYXJhbWV0ZXJzXG4gIC8vIEluIGVpdGhlciBjYXNlLCBhZGRpdGlvbmFsUGFyYW1zIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGVuZFxuICBmdW5jdGlvbiBpbnZva2VQcm9jZWR1cmUoZm4sIHNlbGYsIHBhcmFtcywgYWRkaXRpb25hbFBhcmFtcykge1xuICAgIGlmICghKHBhcmFtcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgLy8gZ2V0IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBmdW5jdGlvblxuICAgICAgdmFyIGZuRGVmID0gZm4udG9TdHJpbmcoKTtcblxuICAgICAgLy8gcGFyc2UgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBhbmQgcmV0cmlldmUgb3JkZXIgb2YgcGFyYW1ldGVyc1xuICAgICAgdmFyIGFyZ05hbWVzID0gZm5EZWYuc3Vic3RyaW5nKGZuRGVmLmluZGV4T2YoXCIoXCIpKzEsIGZuRGVmLmluZGV4T2YoXCIpXCIpKTtcbiAgICAgIGFyZ05hbWVzID0gKGFyZ05hbWVzID09PSBcIlwiKSA/IFtdIDogYXJnTmFtZXMuc3BsaXQoXCIsIFwiKTtcblxuICAgICAgdmFyIGFyZ0luZGV4ZXMgPSB7fTtcbiAgICAgIGZvciAodmFyIGk9MDsgaTxhcmdOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcmdJbmRleGVzW2FyZ05hbWVzW2ldXSA9IGk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnN0cnVjdCBhbiBhcnJheSBvZiBhcmd1bWVudHMgZnJvbSBhIGRpY3Rpb25hcnlcbiAgICAgIHZhciBjYWxsUGFyYW1ldGVycyA9IFtdO1xuICAgICAgZm9yICh2YXIgcGFyYW1OYW1lIGluIHBhcmFtcykge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ0luZGV4ZXNbcGFyYW1OYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGNhbGxQYXJhbWV0ZXJzW2FyZ0luZGV4ZXNbcGFyYW1OYW1lXV0gPSBwYXJhbXNbcGFyYW1OYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBcIk5vIHN1Y2ggcGFyYW06IFwiICsgcGFyYW1OYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBhcmFtcyA9IGNhbGxQYXJhbWV0ZXJzO1xuICAgIH1cblxuICAgIC8vIGFwcGVuZCBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICBpZiAodHlwZW9mIGFkZGl0aW9uYWxQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBhcmFtcyA9IHBhcmFtcy5jb25jYXQoYWRkaXRpb25hbFBhcmFtcyk7XG4gICAgfVxuXG4gICAgLy8gaW52b2tlIGZ1bmN0aW9uIHdpdGggc3BlY2lmaWVkIGNvbnRleHQgYW5kIGFyZ3VtZW50cyBhcnJheVxuICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBwYXJhbXMpO1xuICB9XG5cbiAgLy8gSlNPTiBlbmNvZGUgYW4gb2JqZWN0IGludG8gcG1ycGMgbWVzc2FnZVxuICBmdW5jdGlvbiBlbmNvZGUob2JqKSB7XG4gICAgcmV0dXJuIFwicG1ycGMuXCIgKyBKU09OLnN0cmluZ2lmeShvYmopO1xuICB9XG5cbiAgLy8gSlNPTiBkZWNvZGUgYSBwbXJwYyBtZXNzYWdlXG4gIGZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIuc3Vic3RyaW5nKFwicG1ycGMuXCIubGVuZ3RoKSk7XG4gIH1cblxuICAvLyBDcmVhdGVzIGEgYmFzZSBKU09OLVJQQyBvYmplY3QsIHVzYWJsZSBmb3IgYm90aCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAgLy8gQXMgb2YgSlNPTi1SUEMgMi4wIGl0IG9ubHkgY29udGFpbnMgb25lIGZpZWxkIFwianNvbnJwY1wiIHdpdGggdmFsdWUgXCIyLjBcIlxuICBmdW5jdGlvbiBjcmVhdGVKU09OUnBjQmFzZU9iamVjdCgpIHtcbiAgICB2YXIgY2FsbCA9IHt9O1xuICAgIGNhbGwuanNvbnJwYyA9IFwiMi4wXCI7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICAvLyBDcmVhdGVzIGEgSlNPTi1SUEMgcmVxdWVzdCBvYmplY3QgZm9yIHRoZSBnaXZlbiBtZXRob2QgYW5kIHBhcmFtZXRlcnNcbiAgZnVuY3Rpb24gY3JlYXRlSlNPTlJwY1JlcXVlc3RPYmplY3QocHJvY2VkdXJlTmFtZSwgcGFyYW1ldGVycywgaWQpIHtcbiAgICB2YXIgY2FsbCA9IGNyZWF0ZUpTT05ScGNCYXNlT2JqZWN0KCk7XG4gICAgY2FsbC5tZXRob2QgPSBwcm9jZWR1cmVOYW1lO1xuICAgIGNhbGwucGFyYW1zID0gcGFyYW1ldGVycztcbiAgICBpZiAodHlwZW9mIGlkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjYWxsLmlkID0gaWQ7XG4gICAgfVxuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgLy8gQ3JlYXRlcyBhIEpTT04tUlBDIGVycm9yIG9iamVjdCBjb21wbGV0ZSB3aXRoIG1lc3NhZ2UgYW5kIGVycm9yIGNvZGVcbiAgZnVuY3Rpb24gY3JlYXRlSlNPTlJwY0Vycm9yT2JqZWN0KGVycm9yY29kZSwgbWVzc2FnZSwgZGF0YSkge1xuICAgIHZhciBlcnJvciA9IHt9O1xuICAgIGVycm9yLmNvZGUgPSBlcnJvcmNvZGU7XG4gICAgZXJyb3IubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgZXJyb3IuZGF0YSA9IGRhdGE7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgLy8gQ3JlYXRlcyBhIEpTT04tUlBDIHJlc3BvbnNlIG9iamVjdC5cbiAgZnVuY3Rpb24gY3JlYXRlSlNPTlJwY1Jlc3BvbnNlT2JqZWN0KGVycm9yLCByZXN1bHQsIGlkKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gY3JlYXRlSlNPTlJwY0Jhc2VPYmplY3QoKTtcbiAgICByZXNwb25zZS5pZCA9IGlkO1xuXG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJ1bmRlZmluZWRcIiB8fCBlcnJvciA9PT0gbnVsbCkge1xuICAgICAgcmVzcG9uc2UucmVzdWx0ID0gKHJlc3VsdCA9PT0gXCJ1bmRlZmluZWRcIikgPyBudWxsIDogcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZS5lcnJvciA9IGVycm9yO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIC8vIGRpY3Rpb25hcnkgb2Ygc2VydmljZXMgcmVnaXN0ZXJlZCBmb3IgcmVtb3RlIGNhbGxzXG4gIHZhciByZWdpc3RlcmVkU2VydmljZXMgPSB7fTtcbiAgLy8gZGljdGlvbmFyeSBvZiByZXF1ZXN0cyBiZWluZyBwcm9jZXNzZWQgb24gdGhlIGNsaWVudCBzaWRlXG4gIHZhciBjYWxsUXVldWUgPSB7fTtcblxuICB2YXIgcmVzZXJ2ZWRQcm9jZWR1cmVOYW1lcyA9IHt9O1xuICAvLyByZWdpc3RlciBhIHNlcnZpY2UgYXZhaWxhYmxlIGZvciByZW1vdGUgY2FsbHNcbiAgLy8gaWYgbm8gYWNsIGlzIGdpdmVuLCBhc3N1bWUgdGhhdCBpdCBpcyBhdmFpbGFibGUgdG8gZXZlcnlvbmVcbiAgZnVuY3Rpb24gcmVnaXN0ZXIoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5wdWJsaWNQcm9jZWR1cmVOYW1lIGluIHJlc2VydmVkUHJvY2VkdXJlTmFtZXMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVnaXN0ZXJlZFNlcnZpY2VzW2NvbmZpZy5wdWJsaWNQcm9jZWR1cmVOYW1lXSA9IHtcbiAgICAgICAgXCJwdWJsaWNQcm9jZWR1cmVOYW1lXCIgOiBjb25maWcucHVibGljUHJvY2VkdXJlTmFtZSxcbiAgICAgICAgXCJwcm9jZWR1cmVcIiA6IGNvbmZpZy5wcm9jZWR1cmUsXG4gICAgICAgIFwiY29udGV4dFwiIDogY29uZmlnLnByb2NlZHVyZS5jb250ZXh0LFxuICAgICAgICBcImlzQXN5bmNcIiA6IHR5cGVvZiBjb25maWcuaXNBc3luY2hyb25vdXMgIT09IFwidW5kZWZpbmVkXCIgP1xuICAgICAgICAgIGNvbmZpZy5pc0FzeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgICBcImFjbFwiIDogdHlwZW9mIGNvbmZpZy5hY2wgIT09IFwidW5kZWZpbmVkXCIgP1xuICAgICAgICAgIGNvbmZpZy5hY2wgOiB7d2hpdGVsaXN0OiBbXCIoLiopXCJdLCBibGFja2xpc3Q6IFtdfX07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIHByb2NlZHVyZVxuICBmdW5jdGlvbiB1bnJlZ2lzdGVyKHB1YmxpY1Byb2NlZHVyZU5hbWUpIHtcbiAgICBpZiAocHVibGljUHJvY2VkdXJlTmFtZSBpbiByZXNlcnZlZFByb2NlZHVyZU5hbWVzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSByZWdpc3RlcmVkU2VydmljZXNbcHVibGljUHJvY2VkdXJlTmFtZV07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyByZXRyZWl2ZSBzZXJ2aWNlIGZvciBhIHNwZWNpZmljIHByb2NlZHVyZSBuYW1lXG4gIGZ1bmN0aW9uIGZldGNoUmVnaXN0ZXJlZFNlcnZpY2UocHVibGljUHJvY2VkdXJlTmFtZSl7XG4gICAgcmV0dXJuIHJlZ2lzdGVyZWRTZXJ2aWNlc1twdWJsaWNQcm9jZWR1cmVOYW1lXTtcbiAgfVxuXG4gIC8vIHJlY2VpdmUgYW5kIGV4ZWN1dGUgYSBwbXJwYyBjYWxsIHdoaWNoIG1heSBiZSBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICBmdW5jdGlvbiBwcm9jZXNzUG1ycGNNZXNzYWdlKGV2ZW50UGFyYW1zKSB7XG4gICAgdmFyIHNlcnZpY2VDYWxsRXZlbnQgPSBldmVudFBhcmFtcy5ldmVudDtcbiAgICB2YXIgZXZlbnRTb3VyY2UgPSBldmVudFBhcmFtcy5zb3VyY2U7XG4gICAgdmFyIGlzV29ya2VyQ29tbSA9IHR5cGVvZiBldmVudFNvdXJjZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBldmVudFNvdXJjZSAhPT0gbnVsbDtcblxuICAgIC8vIGlmIHRoZSBtZXNzYWdlIGlzIG5vdCBmb3IgcG1ycGMsIGlnbm9yZSBpdC5cbiAgICBpZiAoc2VydmljZUNhbGxFdmVudC5kYXRhLmluZGV4T2YoXCJwbXJwYy5cIikgIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1lc3NhZ2UgPSBkZWNvZGUoc2VydmljZUNhbGxFdmVudC5kYXRhKTtcblxuICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLm1ldGhvZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyB0aGlzIGlzIGEgcmVxdWVzdFxuXG4gICAgICAgIHZhciBuZXdTZXJ2aWNlQ2FsbEV2ZW50ID0ge1xuICAgICAgICAgIGRhdGEgOiBzZXJ2aWNlQ2FsbEV2ZW50LmRhdGEsXG4gICAgICAgICAgc291cmNlIDogaXNXb3JrZXJDb21tID8gZXZlbnRTb3VyY2UgOiBzZXJ2aWNlQ2FsbEV2ZW50LnNvdXJjZSxcbiAgICAgICAgICBvcmlnaW4gOiBpc1dvcmtlckNvbW0gPyBcIipcIiA6IHNlcnZpY2VDYWxsRXZlbnQub3JpZ2luLFxuICAgICAgICAgIHNob3VsZENoZWNrQUNMIDogIWlzV29ya2VyQ29tbVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZXNwb25zZSA9IHByb2Nlc3NKU09OUnBjUmVxdWVzdChtZXNzYWdlLCBuZXdTZXJ2aWNlQ2FsbEV2ZW50KTtcblxuICAgICAgICAvLyByZXR1cm4gdGhlIHJlc3BvbnNlXG4gICAgICAgIGlmIChyZXNwb25zZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHNlbmRQbXJwY01lc3NhZ2UoXG4gICAgICAgICAgICBuZXdTZXJ2aWNlQ2FsbEV2ZW50LnNvdXJjZSwgcmVzcG9uc2UsIG5ld1NlcnZpY2VDYWxsRXZlbnQub3JpZ2luKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhpcyBpcyBhIHJlc3BvbnNlXG4gICAgICAgIHByb2Nlc3NKU09OUnBjUmVzcG9uc2UobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUHJvY2VzcyBhIHNpbmdsZSBKU09OLVJQQyBSZXF1ZXN0XG4gIGZ1bmN0aW9uIHByb2Nlc3NKU09OUnBjUmVxdWVzdChyZXF1ZXN0LCBzZXJ2aWNlQ2FsbEV2ZW50LCBzaG91bGRDaGVja0FDTCkge1xuICAgIGlmIChyZXF1ZXN0Lmpzb25ycGMgIT09IFwiMi4wXCIpIHtcbiAgICAgIC8vIEludmFsaWQgSlNPTi1SUEMgcmVxdWVzdFxuICAgICAgcmV0dXJuIGNyZWF0ZUpTT05ScGNSZXNwb25zZU9iamVjdChcbiAgICAgICAgY3JlYXRlSlNPTlJwY0Vycm9yT2JqZWN0KC0zMjYwMCwgXCJJbnZhbGlkIHJlcXVlc3QuXCIsXG4gICAgICAgICAgXCJUaGUgcmVjaXZlZCBKU09OIGlzIG5vdCBhIHZhbGlkIEpTT04tUlBDIDIuMCByZXF1ZXN0LlwiKSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCk7XG4gICAgfVxuXG4gICAgdmFyIGlkID0gcmVxdWVzdC5pZDtcbiAgICB2YXIgc2VydmljZSA9IGZldGNoUmVnaXN0ZXJlZFNlcnZpY2UocmVxdWVzdC5tZXRob2QpO1xuXG4gICAgaWYgKHR5cGVvZiBzZXJ2aWNlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAvLyBjaGVjayB0aGUgYWNsIHJpZ2h0c1xuICAgICAgaWYgKCFzZXJ2aWNlQ2FsbEV2ZW50LnNob3VsZENoZWNrQUNMIHx8XG4gICAgICAgIGNoZWNrQUNMKHNlcnZpY2UuYWNsLCBzZXJ2aWNlQ2FsbEV2ZW50Lm9yaWdpbikpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VydmljZS5pc0FzeW5jKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgc2VydmljZSBpcyBhc3luYywgY3JlYXRlIGEgY2FsbGJhY2sgd2hpY2ggdGhlIHNlcnZpY2VcbiAgICAgICAgICAgIC8vIG11c3QgY2FsbCBpbiBvcmRlciB0byBzZW5kIGEgcmVzcG9uc2UgYmFja1xuICAgICAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKHJldHVyblZhbHVlKSB7XG4gICAgICAgICAgICAgIHNlbmRQbXJwY01lc3NhZ2UoXG4gICAgICAgICAgICAgICAgc2VydmljZUNhbGxFdmVudC5zb3VyY2UsXG4gICAgICAgICAgICAgICAgY3JlYXRlSlNPTlJwY1Jlc3BvbnNlT2JqZWN0KG51bGwsIHJldHVyblZhbHVlLCBpZCksXG4gICAgICAgICAgICAgICAgc2VydmljZUNhbGxFdmVudC5vcmlnaW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGVycm9yYmFjayB3aGljaCB0aGUgc2VydmljZVxuICAgICAgICAgICAgLy8gbXVzdCBjYWxsIGluIG9yZGVyIHRvIHNlbmQgYW4gZXJyb3IgYmFja1xuICAgICAgICAgICAgdmFyIGViID0gZnVuY3Rpb24gKGVycm9yVmFsdWUpIHtcbiAgICAgICAgICAgICAgc2VuZFBtcnBjTWVzc2FnZShcbiAgICAgICAgICAgICAgICBzZXJ2aWNlQ2FsbEV2ZW50LnNvdXJjZSxcbiAgICAgICAgICAgICAgICBjcmVhdGVKU09OUnBjUmVzcG9uc2VPYmplY3QoXG4gICAgICAgICAgICAgICAgICBjcmVhdGVKU09OUnBjRXJyb3JPYmplY3QoXG4gICAgICAgICAgICAgICAgICAgIC0xLCBcIkFwcGxpY2F0aW9uIGVycm9yLlwiLGVycm9yVmFsdWUubWVzc2FnZSksXG4gICAgICAgICAgICAgICAgICBudWxsLCBpZCksXG4gICAgICAgICAgICAgICAgc2VydmljZUNhbGxFdmVudC5vcmlnaW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGludm9rZVByb2NlZHVyZShcbiAgICAgICAgICAgICAgc2VydmljZS5wcm9jZWR1cmUsIHNlcnZpY2UuY29udGV4dCwgcmVxdWVzdC5wYXJhbXMsIFtjYiwgZWIsIHNlcnZpY2VDYWxsRXZlbnRdKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgc2VydmljZSBpcyBub3QgYXN5bmMsIGp1c3QgY2FsbCBpdCBhbmQgcmV0dXJuIHRoZSB2YWx1ZVxuICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gaW52b2tlUHJvY2VkdXJlKFxuICAgICAgICAgICAgICBzZXJ2aWNlLnByb2NlZHVyZSxcbiAgICAgICAgICAgICAgc2VydmljZS5jb250ZXh0LFxuICAgICAgICAgICAgICByZXF1ZXN0LnBhcmFtcywgW3NlcnZpY2VDYWxsRXZlbnRdKTtcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIGlkID09PSBcInVuZGVmaW5lZFwiKSA/IG51bGwgOlxuICAgICAgICAgICAgICBjcmVhdGVKU09OUnBjUmVzcG9uc2VPYmplY3QobnVsbCwgcmV0dXJuVmFsdWUsIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgLy8gaXQgd2FzIGEgbm90aWZpY2F0aW9uIG5vYm9keSBjYXJlcyBpZiBpdCBmYWlsc1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGVycm9yLm1hdGNoKFwiXihObyBzdWNoIHBhcmFtKVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUpTT05ScGNSZXNwb25zZU9iamVjdChcbiAgICAgICAgICAgICAgY3JlYXRlSlNPTlJwY0Vycm9yT2JqZWN0KFxuICAgICAgICAgICAgICAgIC0zMjYwMiwgXCJJbnZhbGlkIHBhcmFtcy5cIiwgZXJyb3IubWVzc2FnZSksXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGlkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0aGUgLTEgdmFsdWUgaXMgXCJhcHBsaWNhdGlvbiBkZWZpbmVkXCJcbiAgICAgICAgICByZXR1cm4gY3JlYXRlSlNPTlJwY1Jlc3BvbnNlT2JqZWN0KFxuICAgICAgICAgICAgY3JlYXRlSlNPTlJwY0Vycm9yT2JqZWN0KFxuICAgICAgICAgICAgICAtMSwgXCJBcHBsaWNhdGlvbiBlcnJvci5cIiwgZXJyb3IubWVzc2FnZSksXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgaWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhY2Nlc3MgZGVuaWVkXG4gICAgICAgIHJldHVybiAodHlwZW9mIGlkID09PSBcInVuZGVmaW5lZFwiKSA/IG51bGwgOiBjcmVhdGVKU09OUnBjUmVzcG9uc2VPYmplY3QoXG4gICAgICAgICAgY3JlYXRlSlNPTlJwY0Vycm9yT2JqZWN0KFxuICAgICAgICAgICAgLTIsIFwiQXBwbGljYXRpb24gZXJyb3IuXCIsIFwiQWNjZXNzIGRlbmllZCBvbiBzZXJ2ZXIuXCIpLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgaWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBzdWNoIG1ldGhvZFxuICAgICAgcmV0dXJuICh0eXBlb2YgaWQgPT09IFwidW5kZWZpbmVkXCIpID8gbnVsbCA6IGNyZWF0ZUpTT05ScGNSZXNwb25zZU9iamVjdChcbiAgICAgICAgY3JlYXRlSlNPTlJwY0Vycm9yT2JqZWN0KFxuICAgICAgICAgIC0zMjYwMSxcbiAgICAgICAgICBcIk1ldGhvZCBub3QgZm91bmQuXCIsXG4gICAgICAgICAgXCJUaGUgcmVxdWVzdGQgcmVtb3RlIHByb2NlZHVyZSBkb2VzIG5vdCBleGlzdCBvciBpcyBub3QgYXZhaWxhYmxlLlwiKSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgaWQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGludGVybmFsIHJwYyBzZXJ2aWNlIHRoYXQgcmVjZWl2ZXMgcmVzcG9uc2VzIGZvciBycGMgY2FsbHNcbiAgZnVuY3Rpb24gcHJvY2Vzc0pTT05ScGNSZXNwb25zZShyZXNwb25zZSkge1xuICAgIHZhciBpZCA9IHJlc3BvbnNlLmlkO1xuICAgIHZhciBjYWxsT2JqID0gY2FsbFF1ZXVlW2lkXTtcbiAgICBpZiAodHlwZW9mIGNhbGxPYmogPT09IFwidW5kZWZpbmVkXCIgfHwgY2FsbE9iaiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgY2FsbFF1ZXVlW2lkXTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiB0aGUgY2FsbCB3YXMgc3VjZXNzZnVsIG9yIG5vdFxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZXJyb3IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNhbGxPYmoub25TdWNjZXNzKCB7XG4gICAgICAgIFwiZGVzdGluYXRpb25cIiA6IGNhbGxPYmouZGVzdGluYXRpb24sXG4gICAgICAgIFwicHVibGljUHJvY2VkdXJlTmFtZVwiIDogY2FsbE9iai5wdWJsaWNQcm9jZWR1cmVOYW1lLFxuICAgICAgICBcInBhcmFtc1wiIDogY2FsbE9iai5wYXJhbXMsXG4gICAgICAgIFwic3RhdHVzXCIgOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgXCJyZXR1cm5WYWx1ZVwiIDogcmVzcG9uc2UucmVzdWx0fSApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsT2JqLm9uRXJyb3IoIHtcbiAgICAgICAgXCJkZXN0aW5hdGlvblwiIDogY2FsbE9iai5kZXN0aW5hdGlvbixcbiAgICAgICAgXCJwdWJsaWNQcm9jZWR1cmVOYW1lXCIgOiBjYWxsT2JqLnB1YmxpY1Byb2NlZHVyZU5hbWUsXG4gICAgICAgIFwicGFyYW1zXCIgOiBjYWxsT2JqLnBhcmFtcyxcbiAgICAgICAgXCJzdGF0dXNcIiA6IFwiZXJyb3JcIixcbiAgICAgICAgXCJtZXNzYWdlXCIgOiByZXNwb25zZS5lcnJvci5tZXNzYWdlICsgXCIgXCIgKyByZXNwb25zZS5lcnJvci5kYXRhfSApO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNhbGwgcmVtb3RlIHByb2NlZHVyZVxuICBmdW5jdGlvbiBjYWxsKGNvbmZpZykge1xuICAgIC8vIGNoZWNrIHRoYXQgbnVtYmVyIG9mIHJldHJpZXMgaXMgbm90IC0xLCB0aGF0IGlzIGEgc3BlY2lhbCBpbnRlcm5hbCB2YWx1ZVxuICAgIGlmIChjb25maWcucmV0cmllcyAmJiBjb25maWcucmV0cmllcyA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJudW1iZXIgb2YgcmV0cmllcyBtdXN0IGJlIDAgb3IgaGlnaGVyXCIpO1xuICAgIH1cblxuICAgIHZhciBkZXN0Q29udGV4dHMgPSBbXTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmRlc3RpbmF0aW9uID09PSBcInVuZGVmaW5lZFwiIHx8IGNvbmZpZy5kZXN0aW5hdGlvbiA9PT0gbnVsbCB8fCBjb25maWcuZGVzdGluYXRpb24gPT09IFwid29ya2VyUGFyZW50XCIpIHtcbiAgICAgIGRlc3RDb250ZXh0cyA9IFt7Y29udGV4dCA6IG51bGwsIHR5cGUgOiBcIndvcmtlclBhcmVudFwifV07XG4gICAgfSBlbHNlIGlmIChjb25maWcuZGVzdGluYXRpb24gPT09IFwicHVibGlzaFwiKSB7XG4gICAgICBkZXN0Q29udGV4dHMgPSBmaW5kQWxsUmVhY2hhYmxlQ29udGV4dHMoKTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5kZXN0aW5hdGlvbiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8Y29uZmlnLmRlc3RpbmF0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjb25maWcuZGVzdGluYXRpb25baV0gPT09IFwid29ya2VyUGFyZW50XCIpIHtcbiAgICAgICAgICBkZXN0Q29udGV4dHMucHVzaCh7Y29udGV4dCA6IG51bGwsIHR5cGUgOiBcIndvcmtlclBhcmVudFwifSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZy5kZXN0aW5hdGlvbltpXS5mcmFtZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBkZXN0Q29udGV4dHMucHVzaCh7Y29udGV4dCA6IGNvbmZpZy5kZXN0aW5hdGlvbltpXSwgdHlwZSA6IFwid2luZG93XCJ9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXN0Q29udGV4dHMucHVzaCh7Y29udGV4dCA6IGNvbmZpZy5kZXN0aW5hdGlvbltpXSwgdHlwZSA6IFwid29ya2VyXCJ9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5kZXN0aW5hdGlvbi5mcmFtZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZGVzdENvbnRleHRzLnB1c2goe2NvbnRleHQgOiBjb25maWcuZGVzdGluYXRpb24sIHR5cGUgOiBcIndpbmRvd1wifSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXN0Q29udGV4dHMucHVzaCh7Y29udGV4dCA6IGNvbmZpZy5kZXN0aW5hdGlvbiwgdHlwZSA6IFwid29ya2VyXCJ9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpPTA7IGk8ZGVzdENvbnRleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2FsbE9iaiA9IHtcbiAgICAgICAgZGVzdGluYXRpb24gOiBkZXN0Q29udGV4dHNbaV0uY29udGV4dCxcbiAgICAgICAgZGVzdGluYXRpb25Eb21haW4gOiB0eXBlb2YgY29uZmlnLmRlc3RpbmF0aW9uRG9tYWluID09PSBcInVuZGVmaW5lZFwiID8gW1wiKlwiXSA6ICh0eXBlb2YgY29uZmlnLmRlc3RpbmF0aW9uRG9tYWluID09PSBcInN0cmluZ1wiID8gW2NvbmZpZy5kZXN0aW5hdGlvbkRvbWFpbl0gOiBjb25maWcuZGVzdGluYXRpb25Eb21haW4pLFxuICAgICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lIDogY29uZmlnLnB1YmxpY1Byb2NlZHVyZU5hbWUsXG4gICAgICAgIG9uU3VjY2VzcyA6IHR5cGVvZiBjb25maWcub25TdWNjZXNzICE9PSBcInVuZGVmaW5lZFwiID9cbiAgICAgICAgICBjb25maWcub25TdWNjZXNzIDogZnVuY3Rpb24gKCl7fSxcbiAgICAgICAgb25FcnJvciA6IHR5cGVvZiBjb25maWcub25FcnJvciAhPT0gXCJ1bmRlZmluZWRcIiA/XG4gICAgICAgICAgY29uZmlnLm9uRXJyb3IgOiBmdW5jdGlvbiAoKXt9LFxuICAgICAgICByZXRyaWVzIDogdHlwZW9mIGNvbmZpZy5yZXRyaWVzICE9PSBcInVuZGVmaW5lZFwiID8gY29uZmlnLnJldHJpZXMgOiA1LFxuICAgICAgICB0aW1lb3V0IDogdHlwZW9mIGNvbmZpZy50aW1lb3V0ICE9PSBcInVuZGVmaW5lZFwiID8gY29uZmlnLnRpbWVvdXQgOiA1MDAsXG4gICAgICAgIHN0YXR1cyA6IFwicmVxdWVzdE5vdFNlbnRcIlxuICAgICAgfTtcblxuICAgICAgaXNOb3RpZmljYXRpb24gPSB0eXBlb2YgY29uZmlnLm9uRXJyb3IgPT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGNvbmZpZy5vblN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBwYXJhbXMgPSAodHlwZW9mIGNvbmZpZy5wYXJhbXMgIT09IFwidW5kZWZpbmVkXCIpID8gY29uZmlnLnBhcmFtcyA6IFtdO1xuICAgICAgY2FsbElkID0gZ2VuZXJhdGVVVUlEKCk7XG4gICAgICBjYWxsUXVldWVbY2FsbElkXSA9IGNhbGxPYmo7XG5cbiAgICAgIGlmIChpc05vdGlmaWNhdGlvbikge1xuICAgICAgICBjYWxsT2JqLm1lc3NhZ2UgPSBjcmVhdGVKU09OUnBjUmVxdWVzdE9iamVjdChcbiAgICAgICAgICBjb25maWcucHVibGljUHJvY2VkdXJlTmFtZSwgcGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxPYmoubWVzc2FnZSA9IGNyZWF0ZUpTT05ScGNSZXF1ZXN0T2JqZWN0KFxuICAgICAgICAgIGNvbmZpZy5wdWJsaWNQcm9jZWR1cmVOYW1lLCBwYXJhbXMsIGNhbGxJZCk7XG4gICAgICB9XG5cbiAgICAgIHdhaXRBbmRTZW5kUmVxdWVzdChjYWxsSWQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVzZSB0aGUgcG9zdE1lc3NhZ2UgQVBJIHRvIHNlbmQgYSBwbXJwYyBtZXNzYWdlIHRvIGEgZGVzdGluYXRpb25cbiAgZnVuY3Rpb24gc2VuZFBtcnBjTWVzc2FnZShkZXN0aW5hdGlvbiwgbWVzc2FnZSwgYWNsKSB7XG4gICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbiA9PT0gXCJ1bmRlZmluZWRcIiB8fCBkZXN0aW5hdGlvbiA9PT0gbnVsbCkge1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZShlbmNvZGUobWVzc2FnZSkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlc3RpbmF0aW9uLmZyYW1lcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uLnBvc3RNZXNzYWdlKGVuY29kZShtZXNzYWdlKSwgYWNsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVzdGluYXRpb24ucG9zdE1lc3NhZ2UoZW5jb2RlKG1lc3NhZ2UpKTtcbiAgICB9XG4gIH1cblxuICAvLyBFeGVjdXRlIGEgcmVtb3RlIGNhbGwgYnkgZmlyc3QgcGluZ2luZyB0aGUgZGVzdGluYXRpb24gYW5kIGFmdGVyd2FyZHNcbiAgLy8gc2VuZGluZyB0aGUgcmVxdWVzdFxuICBmdW5jdGlvbiB3YWl0QW5kU2VuZFJlcXVlc3QoY2FsbElkKSB7XG4gICAgdmFyIGNhbGxPYmogPSBjYWxsUXVldWVbY2FsbElkXTtcbiAgICBpZiAodHlwZW9mIGNhbGxPYmogPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGNhbGxPYmoucmV0cmllcyA8PSAtMSkge1xuICAgICAgcHJvY2Vzc0pTT05ScGNSZXNwb25zZShcbiAgICAgICAgY3JlYXRlSlNPTlJwY1Jlc3BvbnNlT2JqZWN0KFxuICAgICAgICAgIGNyZWF0ZUpTT05ScGNFcnJvck9iamVjdChcbiAgICAgICAgICAgIC00LCBcIkFwcGxpY2F0aW9uIGVycm9yLlwiLCBcIkRlc3RpbmF0aW9uIHVuYXZhaWxhYmxlLlwiKSxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGNhbGxJZCkpO1xuICAgIH0gZWxzZSBpZiAoY2FsbE9iai5zdGF0dXMgPT09IFwicmVxdWVzdFNlbnRcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2FsbE9iai5yZXRyaWVzID09PSAwIHx8IGNhbGxPYmouc3RhdHVzID09PSBcImF2YWlsYWJsZVwiKSB7XG4gICAgICBjYWxsT2JqLnN0YXR1cyA9IFwicmVxdWVzdFNlbnRcIjtcbiAgICAgIGNhbGxPYmoucmV0cmllcyA9IC0xO1xuICAgICAgY2FsbFF1ZXVlW2NhbGxJZF0gPSBjYWxsT2JqO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPGNhbGxPYmouZGVzdGluYXRpb25Eb21haW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2VuZFBtcnBjTWVzc2FnZShcbiAgICAgICAgICBjYWxsT2JqLmRlc3RpbmF0aW9uLCBjYWxsT2JqLm1lc3NhZ2UsIGNhbGxPYmouZGVzdGluYXRpb25Eb21haW5baV0sIGNhbGxPYmopO1xuICAgICAgICBzZWxmLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHdhaXRBbmRTZW5kUmVxdWVzdChjYWxsSWQpOyB9LCBjYWxsT2JqLnRpbWVvdXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiB3ZSBjYW4gcGluZyBzb21lIG1vcmUgLSBzZW5kIGEgbmV3IHBpbmcgcmVxdWVzdFxuICAgICAgY2FsbE9iai5zdGF0dXMgPSBcInBpbmdpbmdcIjtcbiAgICAgIHZhciByZXRyaWVzID0gY2FsbE9iai5yZXRyaWVzO1xuICAgICAgY2FsbE9iai5yZXRyaWVzID0gcmV0cmllcyAtIDE7XG5cbiAgICAgIGNhbGwoe1xuICAgICAgICBcImRlc3RpbmF0aW9uXCIgOiBjYWxsT2JqLmRlc3RpbmF0aW9uLFxuICAgICAgICBcInB1YmxpY1Byb2NlZHVyZU5hbWVcIiA6IFwicmVjZWl2ZVBpbmdSZXF1ZXN0XCIsXG4gICAgICAgIFwib25TdWNjZXNzXCIgOiBmdW5jdGlvbiAoY2FsbFJlc3VsdCkge1xuICAgICAgICAgIGlmIChjYWxsUmVzdWx0LnJldHVyblZhbHVlID09PSB0cnVlICYmXG4gICAgICAgICAgICB0eXBlb2YgY2FsbFF1ZXVlW2NhbGxJZF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjYWxsUXVldWVbY2FsbElkXS5zdGF0dXMgPSBcImF2YWlsYWJsZVwiO1xuICAgICAgICAgICAgd2FpdEFuZFNlbmRSZXF1ZXN0KGNhbGxJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiIDogW2NhbGxPYmoucHVibGljUHJvY2VkdXJlTmFtZV0sXG4gICAgICAgIFwicmV0cmllc1wiIDogMCxcbiAgICAgICAgXCJkZXN0aW5hdGlvbkRvbWFpblwiIDogY2FsbE9iai5kZXN0aW5hdGlvbkRvbWFpbn0pO1xuICAgICAgY2FsbFF1ZXVlW2NhbGxJZF0gPSBjYWxsT2JqO1xuICAgICAgc2VsZi5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY2FsbFF1ZXVlW2NhbGxJZF0gJiYgY2FsbFF1ZXVlW2NhbGxJZF0uc3RhdHVzID09PSBcInBpbmdpbmdcIikge1xuICAgICAgICAgIHdhaXRBbmRTZW5kUmVxdWVzdChjYWxsSWQpO1xuICAgICAgICB9XG4gICAgICB9LCBjYWxsT2JqLnRpbWVvdXQgLyByZXRyaWVzKTtcbiAgICB9XG4gIH1cblxuICAvLyBhdHRhY2ggdGhlIHBtcnBjIGV2ZW50IGxpc3RlbmVyXG4gIGZ1bmN0aW9uIGFkZENyb3NzQnJvd3NlckV2ZW50TGlzdGVybmVyKG9iaiwgZXZlbnROYW1lLCBoYW5kbGVyLCBidWJibGUpIHtcbiAgICBpZiAoXCJhZGRFdmVudExpc3RlbmVyXCIgaW4gb2JqKSB7XG4gICAgICAvLyBGRlxuICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBidWJibGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJRVxuICAgICAgb2JqLmF0dGFjaEV2ZW50KFwib25cIiArIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSGFuZGxlcihtZXRob2QsIHNvdXJjZSwgZGVzdGluYXRpb25UeXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgcGFyYW1zID0ge2V2ZW50IDogZXZlbnQsIHNvdXJjZSA6IHNvdXJjZSwgZGVzdGluYXRpb25UeXBlIDogZGVzdGluYXRpb25UeXBlfTtcbiAgICAgIG1ldGhvZChwYXJhbXMpO1xuICAgIH07XG4gIH1cblxuICBpZiAoJ3dpbmRvdycgaW4gdGhpcykge1xuICAgIC8vIHdpbmRvdyBvYmplY3QgLSB3aW5kb3ctdG8td2luZG93IGNvbW1cbiAgICB2YXIgaGFuZGxlciA9IGNyZWF0ZUhhbmRsZXIocHJvY2Vzc1BtcnBjTWVzc2FnZSwgbnVsbCwgXCJ3aW5kb3dcIik7XG4gICAgYWRkQ3Jvc3NCcm93c2VyRXZlbnRMaXN0ZXJuZXIodGhpcywgXCJtZXNzYWdlXCIsIGhhbmRsZXIsIGZhbHNlKTtcbiAgfSBlbHNlIGlmICgnb25tZXNzYWdlJyBpbiB0aGlzKSB7XG4gICAgLy8gZGVkaWNhdGVkIHdvcmtlciAtIHBhcmVudCBYIHRvIHdvcmtlciBjb21tXG4gICAgdmFyIGhhbmRsZXIgPSBjcmVhdGVIYW5kbGVyKHByb2Nlc3NQbXJwY01lc3NhZ2UsIHRoaXMsIFwid29ya2VyXCIpO1xuICAgIGFkZENyb3NzQnJvd3NlckV2ZW50TGlzdGVybmVyKHRoaXMsIFwibWVzc2FnZVwiLCBoYW5kbGVyLCBmYWxzZSk7XG4gIH0gZWxzZSBpZiAoJ29uY29ubmVjdCcgaW4gdGhpcykge1xuICAgIC8vIHNoYXJlZCB3b3JrZXIgLSBwYXJlbnQgWCB0byBzaGFyZWQtd29ya2VyIGNvbW1cbiAgICB2YXIgY29ubmVjdEhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAvL3RoaXMuc2VuZFBvcnQgPSBlLnBvcnRzWzBdO1xuICAgICAgdmFyIGhhbmRsZXIgPSBjcmVhdGVIYW5kbGVyKHByb2Nlc3NQbXJwY01lc3NhZ2UsIGUucG9ydHNbMF0sIFwic2hhcmVkV29ya2VyXCIpO1xuICAgICAgYWRkQ3Jvc3NCcm93c2VyRXZlbnRMaXN0ZXJuZXIoZS5wb3J0c1swXSwgXCJtZXNzYWdlXCIsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgIGUucG9ydHNbMF0uc3RhcnQoKTtcbiAgICB9O1xuICAgIGFkZENyb3NzQnJvd3NlckV2ZW50TGlzdGVybmVyKHRoaXMsIFwiY29ubmVjdFwiLCBjb25uZWN0SGFuZGxlciwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IFwiUG1ycGMgbXVzdCBiZSBsb2FkZWQgd2l0aGluIGEgYnJvd3NlciB3aW5kb3cgb3Igd2ViIHdvcmtlci5cIjtcbiAgfVxuXG4gIC8vIE92ZXJyaWRlIFdvcmtlciBhbmQgU2hhcmVkV29ya2VyIGNvbnN0cnVjdG9ycyBzbyB0aGF0IHBtcnBjIG1heSByZWxheVxuICAvLyBtZXNzYWdlcy4gRm9yIGVhY2ggbWVzc2FnZSByZWNlaXZlZCBmcm9tIHRoZSB3b3JrZXIsIGNhbGwgcG1ycGMgcHJvY2Vzc2luZ1xuICAvLyBtZXRob2QuIFRoaXMgaXMgY2hpbGQgd29ya2VyIHRvIHBhcmVudCBjb21tdW5pY2F0aW9uLlxuXG4gIHZhciBjcmVhdGVEZWRpY2F0ZWRXb3JrZXIgPSB0aGlzLldvcmtlcjtcbiAgdGhpcy5ub25QbXJwY1dvcmtlciA9IGNyZWF0ZURlZGljYXRlZFdvcmtlcjtcbiAgdmFyIGNyZWF0ZVNoYXJlZFdvcmtlciA9IHRoaXMuU2hhcmVkV29ya2VyO1xuICB0aGlzLm5vblBtcnBjU2hhcmVkV29ya2VyID0gY3JlYXRlU2hhcmVkV29ya2VyO1xuXG4gIHZhciBhbGxXb3JrZXJzID0gW107XG5cbiAgdGhpcy5Xb3JrZXIgPSBmdW5jdGlvbihzY3JpcHRVcmkpIHtcbiAgICB2YXIgbmV3V29ya2VyID0gbmV3IGNyZWF0ZURlZGljYXRlZFdvcmtlcihzY3JpcHRVcmkpO1xuICAgIGFsbFdvcmtlcnMucHVzaCh7Y29udGV4dCA6IG5ld1dvcmtlciwgdHlwZSA6ICd3b3JrZXInfSk7XG4gICAgdmFyIGhhbmRsZXIgPSBjcmVhdGVIYW5kbGVyKHByb2Nlc3NQbXJwY01lc3NhZ2UsIG5ld1dvcmtlciwgXCJ3b3JrZXJcIik7XG4gICAgYWRkQ3Jvc3NCcm93c2VyRXZlbnRMaXN0ZXJuZXIobmV3V29ya2VyLCBcIm1lc3NhZ2VcIiwgaGFuZGxlciwgZmFsc2UpO1xuICAgIHJldHVybiBuZXdXb3JrZXI7XG4gIH07XG5cbiAgdGhpcy5TaGFyZWRXb3JrZXIgPSBmdW5jdGlvbihzY3JpcHRVcmksIHdvcmtlck5hbWUpIHtcbiAgICB2YXIgbmV3V29ya2VyID0gbmV3IGNyZWF0ZVNoYXJlZFdvcmtlcihzY3JpcHRVcmksIHdvcmtlck5hbWUpO1xuICAgIGFsbFdvcmtlcnMucHVzaCh7Y29udGV4dCA6IG5ld1dvcmtlciwgdHlwZSA6ICdzaGFyZWRXb3JrZXInfSk7XG4gICAgdmFyIGhhbmRsZXIgPSBjcmVhdGVIYW5kbGVyKHByb2Nlc3NQbXJwY01lc3NhZ2UsIG5ld1dvcmtlci5wb3J0LCBcInNoYXJlZFdvcmtlclwiKTtcbiAgICBhZGRDcm9zc0Jyb3dzZXJFdmVudExpc3Rlcm5lcihuZXdXb3JrZXIucG9ydCwgXCJtZXNzYWdlXCIsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICBuZXdXb3JrZXIucG9zdE1lc3NhZ2UgPSBmdW5jdGlvbiAobXNnLCBwb3J0QXJyYXkpIHtcbiAgICAgIHJldHVybiBuZXdXb3JrZXIucG9ydC5wb3N0TWVzc2FnZShtc2csIHBvcnRBcnJheSk7XG4gICAgfTtcbiAgICBuZXdXb3JrZXIucG9ydC5zdGFydCgpO1xuICAgIHJldHVybiBuZXdXb3JrZXI7XG4gIH07XG5cbiAgLy8gZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBwaW5ncyBmb3IgbWV0aG9kcyBhbmQgcmV0dXJucyByZXNwb25zZXNcbiAgZnVuY3Rpb24gcmVjZWl2ZVBpbmdSZXF1ZXN0KHB1YmxpY1Byb2NlZHVyZU5hbWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGZldGNoUmVnaXN0ZXJlZFNlcnZpY2UocHVibGljUHJvY2VkdXJlTmFtZSkgIT09IFwidW5kZWZpbmVkXCI7XG4gIH1cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUocGFyYW1zKSB7XG4gICAgcmV0dXJuIHJlZ2lzdGVyKHBhcmFtcyk7XG4gIH1cblxuICBmdW5jdGlvbiB1bnN1YnNjcmliZShwYXJhbXMpIHtcbiAgICByZXR1cm4gdW5yZWdpc3RlcihwYXJhbXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZEFsbFdpbmRvd3MoKSB7XG4gICAgdmFyIGFsbFdpbmRvd0NvbnRleHRzID0gW107XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGFsbFdpbmRvd0NvbnRleHRzLnB1c2goIHsgY29udGV4dCA6IHdpbmRvdy50b3AsIHR5cGUgOiAnd2luZG93JyB9ICk7XG5cbiAgICAgIC8vIHdhbGsgdGhyb3VnaCBhbGwgaWZyYW1lcywgc3RhcnRpbmcgd2l0aCB3aW5kb3cudG9wXG4gICAgICBmb3IgKHZhciBpPTA7IHR5cGVvZiBhbGxXaW5kb3dDb250ZXh0c1tpXSAhPT0gJ3VuZGVmaW5lZCc7IGkrKykge1xuICAgICAgICB2YXIgY3VycmVudFdpbmRvdyA9IGFsbFdpbmRvd0NvbnRleHRzW2ldO1xuICAgICAgICBmb3IgKHZhciBqPTA7IGo8Y3VycmVudFdpbmRvdy5jb250ZXh0LmZyYW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGFsbFdpbmRvd0NvbnRleHRzLnB1c2goe1xuICAgICAgICAgICAgY29udGV4dCA6IGN1cnJlbnRXaW5kb3cuY29udGV4dC5mcmFtZXNbal0sXG4gICAgICAgICAgICB0eXBlIDogJ3dpbmRvdydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhbGxXaW5kb3dDb250ZXh0cy5wdXNoKCB7Y29udGV4dCA6IHRoaXMsIHR5cGUgOiAnd29ya2VyUGFyZW50J30gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxsV2luZG93Q29udGV4dHM7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kQWxsV29ya2VycygpIHtcbiAgICByZXR1cm4gYWxsV29ya2VycztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRBbGxSZWFjaGFibGVDb250ZXh0cygpIHtcbiAgICB2YXIgYWxsV2luZG93cyA9IGZpbmRBbGxXaW5kb3dzKCk7XG4gICAgdmFyIGFsbFdvcmtlcnMgPSBmaW5kQWxsV29ya2VycygpO1xuICAgIHZhciBhbGxDb250ZXh0cyA9IGFsbFdpbmRvd3MuY29uY2F0KGFsbFdvcmtlcnMpO1xuXG4gICAgcmV0dXJuIGFsbENvbnRleHRzO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbWV0aG9kIGZvciByZWNlaXZpbmcgYW5kIHJldHVybmluZyBwaW5nc1xuICByZWdpc3Rlcih7XG4gICAgXCJwdWJsaWNQcm9jZWR1cmVOYW1lXCIgOiBcInJlY2VpdmVQaW5nUmVxdWVzdFwiLFxuICAgIFwicHJvY2VkdXJlXCIgOiByZWNlaXZlUGluZ1JlcXVlc3R9KTtcblxuICBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkUHJvY2VkdXJlcygpIHtcbiAgICB2YXIgcmVnU3ZjcyA9IFtdO1xuICAgIHZhciBvcmlnaW4gPSB0eXBlb2YgdGhpcy5mcmFtZXMgIT09IFwidW5kZWZpbmVkXCIgPyAod2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3QgKyAod2luZG93LmxvY2F0aW9uLnBvcnQgIT09IFwiXCIgPyBcIjpcIiArIHdpbmRvdy5sb2NhdGlvbi5wb3J0IDogXCJcIikpIDogXCJcIjtcbiAgICBmb3IgKHZhciBwdWJsaWNQcm9jZWR1cmVOYW1lIGluIHJlZ2lzdGVyZWRTZXJ2aWNlcykge1xuICAgICAgaWYgKHB1YmxpY1Byb2NlZHVyZU5hbWUgaW4gcmVzZXJ2ZWRQcm9jZWR1cmVOYW1lcykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZ1N2Y3MucHVzaCgge1xuICAgICAgICAgIFwicHVibGljUHJvY2VkdXJlTmFtZVwiIDogcmVnaXN0ZXJlZFNlcnZpY2VzW3B1YmxpY1Byb2NlZHVyZU5hbWVdLnB1YmxpY1Byb2NlZHVyZU5hbWUsXG4gICAgICAgICAgXCJhY2xcIiA6IHJlZ2lzdGVyZWRTZXJ2aWNlc1twdWJsaWNQcm9jZWR1cmVOYW1lXS5hY2wsXG4gICAgICAgICAgXCJvcmlnaW5cIiA6IG9yaWdpblxuICAgICAgICB9ICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZWdTdmNzO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbWV0aG9kIGZvciByZXR1cm5pbmcgcmVnaXN0ZXJlZCBwcm9jZWR1cmVzXG4gIHJlZ2lzdGVyKHtcbiAgICBcInB1YmxpY1Byb2NlZHVyZU5hbWVcIiA6IFwiZ2V0UmVnaXN0ZXJlZFByb2NlZHVyZXNcIixcbiAgICBcInByb2NlZHVyZVwiIDogZ2V0UmVnaXN0ZXJlZFByb2NlZHVyZXN9KTtcblxuICBmdW5jdGlvbiBkaXNjb3ZlcihwYXJhbXMpIHtcbiAgICB2YXIgd2luZG93c0ZvckRpc2NvdmVyeSA9IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIHBhcmFtcy5kZXN0aW5hdGlvbiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgd2luZG93c0ZvckRpc2NvdmVyeSA9IGZpbmRBbGxSZWFjaGFibGVDb250ZXh0cygpO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPHdpbmRvd3NGb3JEaXNjb3ZlcnkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgd2luZG93c0ZvckRpc2NvdmVyeVtpXSA9IHdpbmRvd3NGb3JEaXNjb3ZlcnlbaV0uY29udGV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93c0ZvckRpc2NvdmVyeSA9IHBhcmFtcy5kZXN0aW5hdGlvbjtcbiAgICB9XG4gICAgdmFyIG9yaWdpblJlZ2V4ID0gdHlwZW9mIHBhcmFtcy5vcmlnaW5SZWdleCA9PT0gXCJ1bmRlZmluZWRcIiA/XG4gICAgICBcIiguKilcIiA6IHBhcmFtcy5vcmlnaW5SZWdleDtcbiAgICB2YXIgbmFtZVJlZ2V4ID0gdHlwZW9mIHBhcmFtcy5uYW1lUmVnZXggPT09IFwidW5kZWZpbmVkXCIgP1xuICAgICAgXCIoLiopXCIgOiBwYXJhbXMubmFtZVJlZ2V4O1xuXG4gICAgdmFyIGNvdW50ZXIgPSB3aW5kb3dzRm9yRGlzY292ZXJ5Lmxlbmd0aDtcblxuICAgIHZhciBkaXNjb3ZlcmVkTWV0aG9kcyA9IFtdO1xuICAgIGZ1bmN0aW9uIGFkZFRvRGlzY292ZXJlZE1ldGhvZHMobWV0aG9kcywgZGVzdGluYXRpb24pIHtcbiAgICAgIGZvciAodmFyIGk9MDsgaTxtZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChtZXRob2RzW2ldLm9yaWdpbi5tYXRjaChuZXcgUmVnRXhwKG9yaWdpblJlZ2V4KSkgJiZcbiAgICAgICAgICBtZXRob2RzW2ldLnB1YmxpY1Byb2NlZHVyZU5hbWUubWF0Y2gobmV3IFJlZ0V4cChuYW1lUmVnZXgpKSkge1xuICAgICAgICAgIGRpc2NvdmVyZWRNZXRob2RzLnB1c2goe1xuICAgICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZSA6IG1ldGhvZHNbaV0ucHVibGljUHJvY2VkdXJlTmFtZSxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uIDogZGVzdGluYXRpb24sXG4gICAgICAgICAgICBwcm9jZWR1cmVBQ0wgOiBtZXRob2RzW2ldLmFjbCxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uT3JpZ2luIDogbWV0aG9kc1tpXS5vcmlnaW5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHBtcnBjLmNhbGwoe1xuICAgICAgZGVzdGluYXRpb24gOiB3aW5kb3dzRm9yRGlzY292ZXJ5LFxuICAgICAgZGVzdGluYXRpb25Eb21haW4gOiBcIipcIixcbiAgICAgIHB1YmxpY1Byb2NlZHVyZU5hbWUgOiBcImdldFJlZ2lzdGVyZWRQcm9jZWR1cmVzXCIsXG4gICAgICBvblN1Y2Nlc3MgOiBmdW5jdGlvbiAoY2FsbFJlc3VsdCkge1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICAgIGFkZFRvRGlzY292ZXJlZE1ldGhvZHMoY2FsbFJlc3VsdC5yZXR1cm5WYWx1ZSwgY2FsbFJlc3VsdC5kZXN0aW5hdGlvbik7XG4gICAgICAgIGlmIChjb3VudGVyID09PSAwKSB7XG4gICAgICAgICAgcGFyYW1zLmNhbGxiYWNrKGRpc2NvdmVyZWRNZXRob2RzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uRXJyb3IgOiBmdW5jdGlvbiAoY2FsbFJlc3VsdCkge1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICAgIGlmIChjb3VudGVyID09PSAwKSB7XG4gICAgICAgICAgcGFyYW1zLmNhbGxiYWNrKGRpc2NvdmVyZWRNZXRob2RzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmVzZXJ2ZWRQcm9jZWR1cmVOYW1lcyA9IHtcImdldFJlZ2lzdGVyZWRQcm9jZWR1cmVzXCIgOiBudWxsLCBcInJlY2VpdmVQaW5nUmVxdWVzdFwiIDogbnVsbH07XG5cbiAgLy8gcmV0dXJuIHB1YmxpYyBtZXRob2RzXG4gIHJldHVybiB7XG4gICAgcmVnaXN0ZXIgOiByZWdpc3RlcixcbiAgICB1bnJlZ2lzdGVyIDogdW5yZWdpc3RlcixcbiAgICBjYWxsIDogY2FsbCxcbiAgICBkaXNjb3ZlciA6IGRpc2NvdmVyXG4gIH07XG59KCk7XG5cbi8vQU1EIHN1cHBwb3J0XG5pZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKHBtcnBjKTtcbn1cbiIsInZhciBwcm9jZXNzPXJlcXVpcmUoXCJfX2Jyb3dzZXJpZnlfcHJvY2Vzc1wiKTsvLyB2aW06dHM9NDpzdHM9NDpzdz00OlxuLyohXG4gKlxuICogQ29weXJpZ2h0IDIwMDktMjAxMiBLcmlzIEtvd2FsIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUXG4gKiBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL3Jhdy9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIFdpdGggcGFydHMgYnkgVHlsZXIgQ2xvc2VcbiAqIENvcHlyaWdodCAyMDA3LTIwMDkgVHlsZXIgQ2xvc2UgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgWCBsaWNlbnNlIGZvdW5kXG4gKiBhdCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLmh0bWxcbiAqIEZvcmtlZCBhdCByZWZfc2VuZC5qcyB2ZXJzaW9uOiAyMDA5LTA1LTExXG4gKlxuICogV2l0aCBwYXJ0cyBieSBNYXJrIE1pbGxlclxuICogQ29weXJpZ2h0IChDKSAyMDExIEdvb2dsZSBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGhhc1N0YWNrcyA9IGZhbHNlO1xudHJ5IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbn0gY2F0Y2ggKGUpIHtcbiAgICBoYXNTdGFja3MgPSAhIWUuc3RhY2s7XG59XG5cbi8vIEFsbCBjb2RlIGFmdGVyIHRoaXMgcG9pbnQgd2lsbCBiZSBmaWx0ZXJlZCBmcm9tIHN0YWNrIHRyYWNlcyByZXBvcnRlZFxuLy8gYnkgUS5cbnZhciBxU3RhcnRpbmdMaW5lID0gY2FwdHVyZUxpbmUoKTtcbnZhciBxRmlsZU5hbWU7XG5cbi8vIHNoaW1zXG5cbi8vIHVzZWQgZm9yIGZhbGxiYWNrIGluIFwiYWxsUmVzb2x2ZWRcIlxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gVXNlIHRoZSBmYXN0ZXN0IHBvc3NpYmxlIG1lYW5zIHRvIGV4ZWN1dGUgYSB0YXNrIGluIGEgZnV0dXJlIHR1cm5cbi8vIG9mIHRoZSBldmVudCBsb29wLlxudmFyIG5leHRUaWNrID0oZnVuY3Rpb24gKCkge1xuICAgIC8vIGxpbmtlZCBsaXN0IG9mIHRhc2tzIChzaW5nbGUsIHdpdGggaGVhZCBub2RlKVxuICAgIHZhciBoZWFkID0ge3Rhc2s6IHZvaWQgMCwgbmV4dDogbnVsbH07XG4gICAgdmFyIHRhaWwgPSBoZWFkO1xuICAgIHZhciBmbHVzaGluZyA9IGZhbHNlO1xuICAgIHZhciByZXF1ZXN0VGljayA9IHZvaWQgMDtcbiAgICB2YXIgaXNOb2RlSlMgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICAvKiBqc2hpbnQgbG9vcGZ1bmM6IHRydWUgKi9cblxuICAgICAgICB3aGlsZSAoaGVhZC5uZXh0KSB7XG4gICAgICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgICAgICAgdmFyIHRhc2sgPSBoZWFkLnRhc2s7XG4gICAgICAgICAgICBoZWFkLnRhc2sgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgZG9tYWluID0gaGVhZC5kb21haW47XG5cbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgICBoZWFkLmRvbWFpbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0YXNrKCk7XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOb2RlSlMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gbm9kZSwgdW5jYXVnaHQgZXhjZXB0aW9ucyBhcmUgY29uc2lkZXJlZCBmYXRhbCBlcnJvcnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlLXRocm93IHRoZW0gc3luY2hyb25vdXNseSB0byBpbnRlcnJ1cHQgZmx1c2hpbmchXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIGNvbnRpbnVhdGlvbiBpZiB0aGUgdW5jYXVnaHQgZXhjZXB0aW9uIGlzIHN1cHByZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gbGlzdGVuaW5nIFwidW5jYXVnaHRFeGNlcHRpb25cIiBldmVudHMgKGFzIGRvbWFpbnMgZG9lcykuXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIGluIG5leHQgZXZlbnQgdG8gYXZvaWQgdGljayByZWN1cnNpb24uXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmbHVzaCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluIGJyb3dzZXJzLCB1bmNhdWdodCBleGNlcHRpb25zIGFyZSBub3QgZmF0YWwuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlLXRocm93IHRoZW0gYXN5bmNocm9ub3VzbHkgdG8gYXZvaWQgc2xvdy1kb3ducy5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZsdXNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgbmV4dFRpY2sgPSBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICB0YWlsID0gdGFpbC5uZXh0ID0ge1xuICAgICAgICAgICAgdGFzazogdGFzayxcbiAgICAgICAgICAgIGRvbWFpbjogaXNOb2RlSlMgJiYgcHJvY2Vzcy5kb21haW4sXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgICAgICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmVxdWVzdFRpY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5uZXh0VGljaykge1xuICAgICAgICAvLyBOb2RlLmpzIGJlZm9yZSAwLjkuIE5vdGUgdGhhdCBzb21lIGZha2UtTm9kZSBlbnZpcm9ubWVudHMsIGxpa2UgdGhlXG4gICAgICAgIC8vIE1vY2hhIHRlc3QgcnVubmVyLCBpbnRyb2R1Y2UgYSBgcHJvY2Vzc2AgZ2xvYmFsIHdpdGhvdXQgYSBgbmV4dFRpY2tgLlxuICAgICAgICBpc05vZGVKUyA9IHRydWU7XG5cbiAgICAgICAgcmVxdWVzdFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICAgICAgfTtcblxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIEluIElFMTAsIE5vZGUuanMgMC45Kywgb3IgaHR0cHM6Ly9naXRodWIuY29tL05vYmxlSlMvc2V0SW1tZWRpYXRlXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXF1ZXN0VGljayA9IHNldEltbWVkaWF0ZS5iaW5kKHdpbmRvdywgZmx1c2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGZsdXNoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAodHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIC8vIG1vZGVybiBicm93c2Vyc1xuICAgICAgICAvLyBodHRwOi8vd3d3Lm5vbmJsb2NraW5nLmlvLzIwMTEvMDYvd2luZG93bmV4dHRpY2suaHRtbFxuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICAvLyBBdCBsZWFzdCBTYWZhcmkgVmVyc2lvbiA2LjAuNSAoODUzNi4zMC4xKSBpbnRlcm1pdHRlbnRseSBjYW5ub3QgY3JlYXRlXG4gICAgICAgIC8vIHdvcmtpbmcgbWVzc2FnZSBwb3J0cyB0aGUgZmlyc3QgdGltZSBhIHBhZ2UgbG9hZHMuXG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVxdWVzdFRpY2sgPSByZXF1ZXN0UG9ydFRpY2s7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlcXVlc3RQb3J0VGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIE9wZXJhIHJlcXVpcmVzIHVzIHRvIHByb3ZpZGUgYSBtZXNzYWdlIHBheWxvYWQsIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgICAgICAgIC8vIHdoZXRoZXIgd2UgdXNlIGl0LlxuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZsdXNoLCAwKTtcbiAgICAgICAgICAgIHJlcXVlc3RQb3J0VGljaygpO1xuICAgICAgICB9O1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gb2xkIGJyb3dzZXJzXG4gICAgICAgIHJlcXVlc3RUaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmbHVzaCwgMCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHRUaWNrO1xufSkoKTtcblxuLy8gQXR0ZW1wdCB0byBtYWtlIGdlbmVyaWNzIHNhZmUgaW4gdGhlIGZhY2Ugb2YgZG93bnN0cmVhbVxuLy8gbW9kaWZpY2F0aW9ucy5cbi8vIFRoZXJlIGlzIG5vIHNpdHVhdGlvbiB3aGVyZSB0aGlzIGlzIG5lY2Vzc2FyeS5cbi8vIElmIHlvdSBuZWVkIGEgc2VjdXJpdHkgZ3VhcmFudGVlLCB0aGVzZSBwcmltb3JkaWFscyBuZWVkIHRvIGJlXG4vLyBkZWVwbHkgZnJvemVuIGFueXdheSwgYW5kIGlmIHlvdSBkb27igJl0IG5lZWQgYSBzZWN1cml0eSBndWFyYW50ZWUsXG4vLyB0aGlzIGlzIGp1c3QgcGxhaW4gcGFyYW5vaWQuXG4vLyBIb3dldmVyLCB0aGlzIGRvZXMgaGF2ZSB0aGUgbmljZSBzaWRlLWVmZmVjdCBvZiByZWR1Y2luZyB0aGUgc2l6ZVxuLy8gb2YgdGhlIGNvZGUgYnkgcmVkdWNpbmcgeC5jYWxsKCkgdG8gbWVyZWx5IHgoKSwgZWxpbWluYXRpbmcgbWFueVxuLy8gaGFyZC10by1taW5pZnkgY2hhcmFjdGVycy5cbi8vIFNlZSBNYXJrIE1pbGxlcuKAmXMgZXhwbGFuYXRpb24gb2Ygd2hhdCB0aGlzIGRvZXMuXG4vLyBodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1jb252ZW50aW9uczpzYWZlX21ldGFfcHJvZ3JhbW1pbmdcbnZhciBjYWxsID0gRnVuY3Rpb24uY2FsbDtcbmZ1bmN0aW9uIHVuY3VycnlUaGlzKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2FsbC5hcHBseShmLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG4vLyBUaGlzIGlzIGVxdWl2YWxlbnQsIGJ1dCBzbG93ZXI6XG4vLyB1bmN1cnJ5VGhpcyA9IEZ1bmN0aW9uX2JpbmQuYmluZChGdW5jdGlvbl9iaW5kLmNhbGwpO1xuLy8gaHR0cDovL2pzcGVyZi5jb20vdW5jdXJyeXRoaXNcblxudmFyIGFycmF5X3NsaWNlID0gdW5jdXJyeVRoaXMoQXJyYXkucHJvdG90eXBlLnNsaWNlKTtcblxudmFyIGFycmF5X3JlZHVjZSA9IHVuY3VycnlUaGlzKFxuICAgIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgfHwgZnVuY3Rpb24gKGNhbGxiYWNrLCBiYXNpcykge1xuICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIC8vIGNvbmNlcm5pbmcgdGhlIGluaXRpYWwgdmFsdWUsIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIHNlZWsgdG8gdGhlIGZpcnN0IHZhbHVlIGluIHRoZSBhcnJheSwgYWNjb3VudGluZ1xuICAgICAgICAgICAgLy8gZm9yIHRoZSBwb3NzaWJpbGl0eSB0aGF0IGlzIGlzIGEgc3BhcnNlIGFycmF5XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzaXMgPSB0aGlzW2luZGV4KytdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCsraW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICgxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWR1Y2VcbiAgICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAvLyBhY2NvdW50IGZvciB0aGUgcG9zc2liaWxpdHkgdGhhdCB0aGUgYXJyYXkgaXMgc3BhcnNlXG4gICAgICAgICAgICBpZiAoaW5kZXggaW4gdGhpcykge1xuICAgICAgICAgICAgICAgIGJhc2lzID0gY2FsbGJhY2soYmFzaXMsIHRoaXNbaW5kZXhdLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2lzO1xuICAgIH1cbik7XG5cbnZhciBhcnJheV9pbmRleE9mID0gdW5jdXJyeVRoaXMoXG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgfHwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIG5vdCBhIHZlcnkgZ29vZCBzaGltLCBidXQgZ29vZCBlbm91Z2ggZm9yIG91ciBvbmUgdXNlIG9mIGl0XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbik7XG5cbnZhciBhcnJheV9tYXAgPSB1bmN1cnJ5VGhpcyhcbiAgICBBcnJheS5wcm90b3R5cGUubWFwIHx8IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc3ApIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY29sbGVjdCA9IFtdO1xuICAgICAgICBhcnJheV9yZWR1Y2Uoc2VsZiwgZnVuY3Rpb24gKHVuZGVmaW5lZCwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICBjb2xsZWN0LnB1c2goY2FsbGJhY2suY2FsbCh0aGlzcCwgdmFsdWUsIGluZGV4LCBzZWxmKSk7XG4gICAgICAgIH0sIHZvaWQgMCk7XG4gICAgICAgIHJldHVybiBjb2xsZWN0O1xuICAgIH1cbik7XG5cbnZhciBvYmplY3RfY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiAocHJvdG90eXBlKSB7XG4gICAgZnVuY3Rpb24gVHlwZSgpIHsgfVxuICAgIFR5cGUucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgIHJldHVybiBuZXcgVHlwZSgpO1xufTtcblxudmFyIG9iamVjdF9oYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuXG52YXIgb2JqZWN0X2tleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3RfaGFzT3duUHJvcGVydHkob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn07XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBPYmplY3QodmFsdWUpO1xufVxuXG4vLyBsb25nIHN0YWNrIHRyYWNlc1xuXG52YXIgU1RBQ0tfSlVNUF9TRVBBUkFUT1IgPSBcIkZyb20gcHJldmlvdXMgZXZlbnQ6XCI7XG5cbmZ1bmN0aW9uIG1ha2VTdGFja1RyYWNlTG9uZyhlcnJvciwgcHJvbWlzZSkge1xuICAgIC8vIElmIHBvc3NpYmxlLCB0cmFuc2Zvcm0gdGhlIGVycm9yIHN0YWNrIHRyYWNlIGJ5IHJlbW92aW5nIE5vZGUgYW5kIFFcbiAgICAvLyBjcnVmdCwgdGhlbiBjb25jYXRlbmF0aW5nIHdpdGggdGhlIHN0YWNrIHRyYWNlIG9mIGBwcm9taXNlYC4gU2VlICM1Ny5cbiAgICBpZiAoaGFzU3RhY2tzICYmXG4gICAgICAgIHByb21pc2Uuc3RhY2sgJiZcbiAgICAgICAgdHlwZW9mIGVycm9yID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIGVycm9yICE9PSBudWxsICYmXG4gICAgICAgIGVycm9yLnN0YWNrICYmXG4gICAgICAgIGVycm9yLnN0YWNrLmluZGV4T2YoU1RBQ0tfSlVNUF9TRVBBUkFUT1IpID09PSAtMVxuICAgICkge1xuICAgICAgICB2YXIgc3RhY2tzID0gW107XG4gICAgICAgIGZvciAodmFyIHAgPSBwcm9taXNlOyAhIXA7IHAgPSBwLnNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHAuc3RhY2spIHtcbiAgICAgICAgICAgICAgICBzdGFja3MudW5zaGlmdChwLnN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdGFja3MudW5zaGlmdChlcnJvci5zdGFjayk7XG5cbiAgICAgICAgdmFyIGNvbmNhdGVkU3RhY2tzID0gc3RhY2tzLmpvaW4oXCJcXG5cIiArIFNUQUNLX0pVTVBfU0VQQVJBVE9SICsgXCJcXG5cIik7XG4gICAgICAgIGVycm9yLnN0YWNrID0gZmlsdGVyU3RhY2tTdHJpbmcoY29uY2F0ZWRTdGFja3MpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyU3RhY2tTdHJpbmcoc3RhY2tTdHJpbmcpIHtcbiAgICB2YXIgbGluZXMgPSBzdGFja1N0cmluZy5zcGxpdChcIlxcblwiKTtcbiAgICB2YXIgZGVzaXJlZExpbmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2ldO1xuXG4gICAgICAgIGlmICghaXNJbnRlcm5hbEZyYW1lKGxpbmUpICYmICFpc05vZGVGcmFtZShsaW5lKSAmJiBsaW5lKSB7XG4gICAgICAgICAgICBkZXNpcmVkTGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVzaXJlZExpbmVzLmpvaW4oXCJcXG5cIik7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZUZyYW1lKHN0YWNrTGluZSkge1xuICAgIHJldHVybiBzdGFja0xpbmUuaW5kZXhPZihcIihtb2R1bGUuanM6XCIpICE9PSAtMSB8fFxuICAgICAgICAgICBzdGFja0xpbmUuaW5kZXhPZihcIihub2RlLmpzOlwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGdldEZpbGVOYW1lQW5kTGluZU51bWJlcihzdGFja0xpbmUpIHtcbiAgICAvLyBOYW1lZCBmdW5jdGlvbnM6IFwiYXQgZnVuY3Rpb25OYW1lIChmaWxlbmFtZTpsaW5lTnVtYmVyOmNvbHVtbk51bWJlcilcIlxuICAgIC8vIEluIElFMTAgZnVuY3Rpb24gbmFtZSBjYW4gaGF2ZSBzcGFjZXMgKFwiQW5vbnltb3VzIGZ1bmN0aW9uXCIpIE9fb1xuICAgIHZhciBhdHRlbXB0MSA9IC9hdCAuKyBcXCgoLispOihcXGQrKTooPzpcXGQrKVxcKSQvLmV4ZWMoc3RhY2tMaW5lKTtcbiAgICBpZiAoYXR0ZW1wdDEpIHtcbiAgICAgICAgcmV0dXJuIFthdHRlbXB0MVsxXSwgTnVtYmVyKGF0dGVtcHQxWzJdKV07XG4gICAgfVxuXG4gICAgLy8gQW5vbnltb3VzIGZ1bmN0aW9uczogXCJhdCBmaWxlbmFtZTpsaW5lTnVtYmVyOmNvbHVtbk51bWJlclwiXG4gICAgdmFyIGF0dGVtcHQyID0gL2F0IChbXiBdKyk6KFxcZCspOig/OlxcZCspJC8uZXhlYyhzdGFja0xpbmUpO1xuICAgIGlmIChhdHRlbXB0Mikge1xuICAgICAgICByZXR1cm4gW2F0dGVtcHQyWzFdLCBOdW1iZXIoYXR0ZW1wdDJbMl0pXTtcbiAgICB9XG5cbiAgICAvLyBGaXJlZm94IHN0eWxlOiBcImZ1bmN0aW9uQGZpbGVuYW1lOmxpbmVOdW1iZXIgb3IgQGZpbGVuYW1lOmxpbmVOdW1iZXJcIlxuICAgIHZhciBhdHRlbXB0MyA9IC8uKkAoLispOihcXGQrKSQvLmV4ZWMoc3RhY2tMaW5lKTtcbiAgICBpZiAoYXR0ZW1wdDMpIHtcbiAgICAgICAgcmV0dXJuIFthdHRlbXB0M1sxXSwgTnVtYmVyKGF0dGVtcHQzWzJdKV07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0ludGVybmFsRnJhbWUoc3RhY2tMaW5lKSB7XG4gICAgdmFyIGZpbGVOYW1lQW5kTGluZU51bWJlciA9IGdldEZpbGVOYW1lQW5kTGluZU51bWJlcihzdGFja0xpbmUpO1xuXG4gICAgaWYgKCFmaWxlTmFtZUFuZExpbmVOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBmaWxlTmFtZSA9IGZpbGVOYW1lQW5kTGluZU51bWJlclswXTtcbiAgICB2YXIgbGluZU51bWJlciA9IGZpbGVOYW1lQW5kTGluZU51bWJlclsxXTtcblxuICAgIHJldHVybiBmaWxlTmFtZSA9PT0gcUZpbGVOYW1lICYmXG4gICAgICAgIGxpbmVOdW1iZXIgPj0gcVN0YXJ0aW5nTGluZSAmJlxuICAgICAgICBsaW5lTnVtYmVyIDw9IHFFbmRpbmdMaW5lO1xufVxuXG4vLyBkaXNjb3ZlciBvd24gZmlsZSBuYW1lIGFuZCBsaW5lIG51bWJlciByYW5nZSBmb3IgZmlsdGVyaW5nIHN0YWNrXG4vLyB0cmFjZXNcbmZ1bmN0aW9uIGNhcHR1cmVMaW5lKCkge1xuICAgIGlmICghaGFzU3RhY2tzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHZhciBsaW5lcyA9IGUuc3RhY2suc3BsaXQoXCJcXG5cIik7XG4gICAgICAgIHZhciBmaXJzdExpbmUgPSBsaW5lc1swXS5pbmRleE9mKFwiQFwiKSA+IDAgPyBsaW5lc1sxXSA6IGxpbmVzWzJdO1xuICAgICAgICB2YXIgZmlsZU5hbWVBbmRMaW5lTnVtYmVyID0gZ2V0RmlsZU5hbWVBbmRMaW5lTnVtYmVyKGZpcnN0TGluZSk7XG4gICAgICAgIGlmICghZmlsZU5hbWVBbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBxRmlsZU5hbWUgPSBmaWxlTmFtZUFuZExpbmVOdW1iZXJbMF07XG4gICAgICAgIHJldHVybiBmaWxlTmFtZUFuZExpbmVOdW1iZXJbMV07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZXByZWNhdGUoY2FsbGJhY2ssIG5hbWUsIGFsdGVybmF0aXZlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZS53YXJuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihuYW1lICsgXCIgaXMgZGVwcmVjYXRlZCwgdXNlIFwiICsgYWx0ZXJuYXRpdmUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGluc3RlYWQuXCIsIG5ldyBFcnJvcihcIlwiKS5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbi8vIGVuZCBvZiBzaGltc1xuLy8gYmVnaW5uaW5nIG9mIHJlYWwgd29ya1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBwcm9taXNlIGZvciBhbiBpbW1lZGlhdGUgcmVmZXJlbmNlLCBwYXNzZXMgcHJvbWlzZXMgdGhyb3VnaCwgb3JcbiAqIGNvZXJjZXMgcHJvbWlzZXMgZnJvbSBkaWZmZXJlbnQgc3lzdGVtcy5cbiAqIEBwYXJhbSB2YWx1ZSBpbW1lZGlhdGUgcmVmZXJlbmNlIG9yIHByb21pc2VcbiAqL1xuZnVuY3Rpb24gUSh2YWx1ZSkge1xuICAgIC8vIElmIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBhIFByb21pc2UsIHJldHVybiBpdCBkaXJlY3RseS4gIFRoaXMgZW5hYmxlc1xuICAgIC8vIHRoZSByZXNvbHZlIGZ1bmN0aW9uIHRvIGJvdGggYmUgdXNlZCB0byBjcmVhdGVkIHJlZmVyZW5jZXMgZnJvbSBvYmplY3RzLFxuICAgIC8vIGJ1dCB0byB0b2xlcmFibHkgY29lcmNlIG5vbi1wcm9taXNlcyB0byBwcm9taXNlcy5cbiAgICBpZiAoaXNQcm9taXNlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gYXNzaW1pbGF0ZSB0aGVuYWJsZXNcbiAgICBpZiAoaXNQcm9taXNlQWxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjb2VyY2UodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdWxmaWxsKHZhbHVlKTtcbiAgICB9XG59XG5RLnJlc29sdmUgPSBRO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgdGFzayBpbiBhIGZ1dHVyZSB0dXJuIG9mIHRoZSBldmVudCBsb29wLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdGFza1xuICovXG5RLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbi8qKlxuICogQ29udHJvbHMgd2hldGhlciBvciBub3QgbG9uZyBzdGFjayB0cmFjZXMgd2lsbCBiZSBvblxuICovXG5RLmxvbmdTdGFja1N1cHBvcnQgPSBmYWxzZTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEge3Byb21pc2UsIHJlc29sdmUsIHJlamVjdH0gb2JqZWN0LlxuICpcbiAqIGByZXNvbHZlYCBpcyBhIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIGEgbW9yZSByZXNvbHZlZCB2YWx1ZSBmb3IgdGhlXG4gKiBwcm9taXNlLiBUbyBmdWxmaWxsIHRoZSBwcm9taXNlLCBpbnZva2UgYHJlc29sdmVgIHdpdGggYW55IHZhbHVlIHRoYXQgaXNcbiAqIG5vdCBhIHRoZW5hYmxlLiBUbyByZWplY3QgdGhlIHByb21pc2UsIGludm9rZSBgcmVzb2x2ZWAgd2l0aCBhIHJlamVjdGVkXG4gKiB0aGVuYWJsZSwgb3IgaW52b2tlIGByZWplY3RgIHdpdGggdGhlIHJlYXNvbiBkaXJlY3RseS4gVG8gcmVzb2x2ZSB0aGVcbiAqIHByb21pc2UgdG8gYW5vdGhlciB0aGVuYWJsZSwgdGh1cyBwdXR0aW5nIGl0IGluIHRoZSBzYW1lIHN0YXRlLCBpbnZva2VcbiAqIGByZXNvbHZlYCB3aXRoIHRoYXQgb3RoZXIgdGhlbmFibGUuXG4gKi9cblEuZGVmZXIgPSBkZWZlcjtcbmZ1bmN0aW9uIGRlZmVyKCkge1xuICAgIC8vIGlmIFwibWVzc2FnZXNcIiBpcyBhbiBcIkFycmF5XCIsIHRoYXQgaW5kaWNhdGVzIHRoYXQgdGhlIHByb21pc2UgaGFzIG5vdCB5ZXRcbiAgICAvLyBiZWVuIHJlc29sdmVkLiAgSWYgaXQgaXMgXCJ1bmRlZmluZWRcIiwgaXQgaGFzIGJlZW4gcmVzb2x2ZWQuICBFYWNoXG4gICAgLy8gZWxlbWVudCBvZiB0aGUgbWVzc2FnZXMgYXJyYXkgaXMgaXRzZWxmIGFuIGFycmF5IG9mIGNvbXBsZXRlIGFyZ3VtZW50cyB0b1xuICAgIC8vIGZvcndhcmQgdG8gdGhlIHJlc29sdmVkIHByb21pc2UuICBXZSBjb2VyY2UgdGhlIHJlc29sdXRpb24gdmFsdWUgdG8gYVxuICAgIC8vIHByb21pc2UgdXNpbmcgdGhlIGByZXNvbHZlYCBmdW5jdGlvbiBiZWNhdXNlIGl0IGhhbmRsZXMgYm90aCBmdWxseVxuICAgIC8vIG5vbi10aGVuYWJsZSB2YWx1ZXMgYW5kIG90aGVyIHRoZW5hYmxlcyBncmFjZWZ1bGx5LlxuICAgIHZhciBtZXNzYWdlcyA9IFtdLCBwcm9ncmVzc0xpc3RlbmVycyA9IFtdLCByZXNvbHZlZFByb21pc2U7XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBvYmplY3RfY3JlYXRlKGRlZmVyLnByb3RvdHlwZSk7XG4gICAgdmFyIHByb21pc2UgPSBvYmplY3RfY3JlYXRlKFByb21pc2UucHJvdG90eXBlKTtcblxuICAgIHByb21pc2UucHJvbWlzZURpc3BhdGNoID0gZnVuY3Rpb24gKHJlc29sdmUsIG9wLCBvcGVyYW5kcykge1xuICAgICAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChtZXNzYWdlcykge1xuICAgICAgICAgICAgbWVzc2FnZXMucHVzaChhcmdzKTtcbiAgICAgICAgICAgIGlmIChvcCA9PT0gXCJ3aGVuXCIgJiYgb3BlcmFuZHNbMV0pIHsgLy8gcHJvZ3Jlc3Mgb3BlcmFuZFxuICAgICAgICAgICAgICAgIHByb2dyZXNzTGlzdGVuZXJzLnB1c2gob3BlcmFuZHNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkUHJvbWlzZS5wcm9taXNlRGlzcGF0Y2guYXBwbHkocmVzb2x2ZWRQcm9taXNlLCBhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFhYWCBkZXByZWNhdGVkXG4gICAgcHJvbWlzZS52YWx1ZU9mID0gZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmVhcmVyVmFsdWUgPSBuZWFyZXIocmVzb2x2ZWRQcm9taXNlKTtcbiAgICAgICAgaWYgKGlzUHJvbWlzZShuZWFyZXJWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJlc29sdmVkUHJvbWlzZSA9IG5lYXJlclZhbHVlOyAvLyBzaG9ydGVuIGNoYWluXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5lYXJlclZhbHVlO1xuICAgIH0sIFwidmFsdWVPZlwiLCBcImluc3BlY3RcIik7XG5cbiAgICBwcm9taXNlLmluc3BlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghcmVzb2x2ZWRQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJwZW5kaW5nXCIgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZWRQcm9taXNlLmluc3BlY3QoKTtcbiAgICB9O1xuXG4gICAgaWYgKFEubG9uZ1N0YWNrU3VwcG9ydCAmJiBoYXNTdGFja3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBkb24ndCB0cnkgdG8gdXNlIGBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZWAgb3IgdHJhbnNmZXIgdGhlXG4gICAgICAgICAgICAvLyBhY2Nlc3NvciBhcm91bmQ7IHRoYXQgY2F1c2VzIG1lbW9yeSBsZWFrcyBhcyBwZXIgR0gtMTExLiBKdXN0XG4gICAgICAgICAgICAvLyByZWlmeSB0aGUgc3RhY2sgdHJhY2UgYXMgYSBzdHJpbmcgQVNBUC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBBdCB0aGUgc2FtZSB0aW1lLCBjdXQgb2ZmIHRoZSBmaXJzdCBsaW5lOyBpdCdzIGFsd2F5cyBqdXN0XG4gICAgICAgICAgICAvLyBcIltvYmplY3QgUHJvbWlzZV1cXG5cIiwgYXMgcGVyIHRoZSBgdG9TdHJpbmdgLlxuICAgICAgICAgICAgcHJvbWlzZS5zdGFjayA9IGUuc3RhY2suc3Vic3RyaW5nKGUuc3RhY2suaW5kZXhPZihcIlxcblwiKSArIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTk9URTogd2UgZG8gdGhlIGNoZWNrcyBmb3IgYHJlc29sdmVkUHJvbWlzZWAgaW4gZWFjaCBtZXRob2QsIGluc3RlYWQgb2ZcbiAgICAvLyBjb25zb2xpZGF0aW5nIHRoZW0gaW50byBgYmVjb21lYCwgc2luY2Ugb3RoZXJ3aXNlIHdlJ2QgY3JlYXRlIG5ld1xuICAgIC8vIHByb21pc2VzIHdpdGggdGhlIGxpbmVzIGBiZWNvbWUod2hhdGV2ZXIodmFsdWUpKWAuIFNlZSBlLmcuIEdILTI1Mi5cblxuICAgIGZ1bmN0aW9uIGJlY29tZShuZXdQcm9taXNlKSB7XG4gICAgICAgIHJlc29sdmVkUHJvbWlzZSA9IG5ld1Byb21pc2U7XG4gICAgICAgIHByb21pc2Uuc291cmNlID0gbmV3UHJvbWlzZTtcblxuICAgICAgICBhcnJheV9yZWR1Y2UobWVzc2FnZXMsIGZ1bmN0aW9uICh1bmRlZmluZWQsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBuZXdQcm9taXNlLnByb21pc2VEaXNwYXRjaC5hcHBseShuZXdQcm9taXNlLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB2b2lkIDApO1xuXG4gICAgICAgIG1lc3NhZ2VzID0gdm9pZCAwO1xuICAgICAgICBwcm9ncmVzc0xpc3RlbmVycyA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICBkZWZlcnJlZC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChyZXNvbHZlZFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJlY29tZShRKHZhbHVlKSk7XG4gICAgfTtcblxuICAgIGRlZmVycmVkLmZ1bGZpbGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHJlc29sdmVkUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYmVjb21lKGZ1bGZpbGwodmFsdWUpKTtcbiAgICB9O1xuICAgIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgaWYgKHJlc29sdmVkUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYmVjb21lKHJlamVjdChyZWFzb24pKTtcbiAgICB9O1xuICAgIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uIChwcm9ncmVzcykge1xuICAgICAgICBpZiAocmVzb2x2ZWRQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcnJheV9yZWR1Y2UocHJvZ3Jlc3NMaXN0ZW5lcnMsIGZ1bmN0aW9uICh1bmRlZmluZWQsIHByb2dyZXNzTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0xpc3RlbmVyKHByb2dyZXNzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB2b2lkIDApO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVmZXJyZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIE5vZGUtc3R5bGUgY2FsbGJhY2sgdGhhdCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IHRoZSBkZWZlcnJlZFxuICogcHJvbWlzZS5cbiAqIEByZXR1cm5zIGEgbm9kZWJhY2tcbiAqL1xuZGVmZXIucHJvdG90eXBlLm1ha2VOb2RlUmVzb2x2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIHZhbHVlKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgc2VsZi5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICBzZWxmLnJlc29sdmUoYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnJlc29sdmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHJlc29sdmVyIHtGdW5jdGlvbn0gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgbm90aGluZyBhbmQgYWNjZXB0c1xuICogdGhlIHJlc29sdmUsIHJlamVjdCwgYW5kIG5vdGlmeSBmdW5jdGlvbnMgZm9yIGEgZGVmZXJyZWQuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCBtYXkgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgZ2l2ZW4gcmVzb2x2ZSBhbmQgcmVqZWN0XG4gKiBmdW5jdGlvbnMsIG9yIHJlamVjdGVkIGJ5IGEgdGhyb3duIGV4Y2VwdGlvbiBpbiByZXNvbHZlclxuICovXG5RLnByb21pc2UgPSBwcm9taXNlO1xuZnVuY3Rpb24gcHJvbWlzZShyZXNvbHZlcikge1xuICAgIGlmICh0eXBlb2YgcmVzb2x2ZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVzb2x2ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICB0cnkge1xuICAgICAgICByZXNvbHZlcihkZWZlcnJlZC5yZXNvbHZlLCBkZWZlcnJlZC5yZWplY3QsIGRlZmVycmVkLm5vdGlmeSk7XG4gICAgfSBjYXRjaCAocmVhc29uKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cblxuLy8gWFhYIGV4cGVyaW1lbnRhbC4gIFRoaXMgbWV0aG9kIGlzIGEgd2F5IHRvIGRlbm90ZSB0aGF0IGEgbG9jYWwgdmFsdWUgaXNcbi8vIHNlcmlhbGl6YWJsZSBhbmQgc2hvdWxkIGJlIGltbWVkaWF0ZWx5IGRpc3BhdGNoZWQgdG8gYSByZW1vdGUgdXBvbiByZXF1ZXN0LFxuLy8gaW5zdGVhZCBvZiBwYXNzaW5nIGEgcmVmZXJlbmNlLlxuUS5wYXNzQnlDb3B5ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIC8vZnJlZXplKG9iamVjdCk7XG4gICAgLy9wYXNzQnlDb3BpZXMuc2V0KG9iamVjdCwgdHJ1ZSk7XG4gICAgcmV0dXJuIG9iamVjdDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnBhc3NCeUNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy9mcmVlemUob2JqZWN0KTtcbiAgICAvL3Bhc3NCeUNvcGllcy5zZXQob2JqZWN0LCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogSWYgdHdvIHByb21pc2VzIGV2ZW50dWFsbHkgZnVsZmlsbCB0byB0aGUgc2FtZSB2YWx1ZSwgcHJvbWlzZXMgdGhhdCB2YWx1ZSxcbiAqIGJ1dCBvdGhlcndpc2UgcmVqZWN0cy5cbiAqIEBwYXJhbSB4IHtBbnkqfVxuICogQHBhcmFtIHkge0FueSp9XG4gKiBAcmV0dXJucyB7QW55Kn0gYSBwcm9taXNlIGZvciB4IGFuZCB5IGlmIHRoZXkgYXJlIHRoZSBzYW1lLCBidXQgYSByZWplY3Rpb25cbiAqIG90aGVyd2lzZS5cbiAqXG4gKi9cblEuam9pbiA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgcmV0dXJuIFEoeCkuam9pbih5KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiAodGhhdCkge1xuICAgIHJldHVybiBRKFt0aGlzLCB0aGF0XSkuc3ByZWFkKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIGlmICh4ID09PSB5KSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBcIj09PVwiIHNob3VsZCBiZSBPYmplY3QuaXMgb3IgZXF1aXZcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgam9pbjogbm90IHRoZSBzYW1lOiBcIiArIHggKyBcIiBcIiArIHkpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgZmlyc3Qgb2YgYW4gYXJyYXkgb2YgcHJvbWlzZXMgdG8gYmVjb21lIGZ1bGZpbGxlZC5cbiAqIEBwYXJhbSBhbnN3ZXJzIHtBcnJheVtBbnkqXX0gcHJvbWlzZXMgdG8gcmFjZVxuICogQHJldHVybnMge0FueSp9IHRoZSBmaXJzdCBwcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5RLnJhY2UgPSByYWNlO1xuZnVuY3Rpb24gcmFjZShhbnN3ZXJQcykge1xuICAgIHJldHVybiBwcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAvLyBTd2l0Y2ggdG8gdGhpcyBvbmNlIHdlIGNhbiBhc3N1bWUgYXQgbGVhc3QgRVM1XG4gICAgICAgIC8vIGFuc3dlclBzLmZvckVhY2goZnVuY3Rpb24oYW5zd2VyUCkge1xuICAgICAgICAvLyAgICAgUShhbnN3ZXJQKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyBVc2UgdGhpcyBpbiB0aGUgbWVhbnRpbWVcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFuc3dlclBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBRKGFuc3dlclBzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUucmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKFEucmFjZSk7XG59O1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBQcm9taXNlIHdpdGggYSBwcm9taXNlIGRlc2NyaXB0b3Igb2JqZWN0IGFuZCBvcHRpb25hbCBmYWxsYmFja1xuICogZnVuY3Rpb24uICBUaGUgZGVzY3JpcHRvciBjb250YWlucyBtZXRob2RzIGxpa2Ugd2hlbihyZWplY3RlZCksIGdldChuYW1lKSxcbiAqIHNldChuYW1lLCB2YWx1ZSksIHBvc3QobmFtZSwgYXJncyksIGFuZCBkZWxldGUobmFtZSksIHdoaWNoIGFsbFxuICogcmV0dXJuIGVpdGhlciBhIHZhbHVlLCBhIHByb21pc2UgZm9yIGEgdmFsdWUsIG9yIGEgcmVqZWN0aW9uLiAgVGhlIGZhbGxiYWNrXG4gKiBhY2NlcHRzIHRoZSBvcGVyYXRpb24gbmFtZSwgYSByZXNvbHZlciwgYW5kIGFueSBmdXJ0aGVyIGFyZ3VtZW50cyB0aGF0IHdvdWxkXG4gKiBoYXZlIGJlZW4gZm9yd2FyZGVkIHRvIHRoZSBhcHByb3ByaWF0ZSBtZXRob2QgYWJvdmUgaGFkIGEgbWV0aG9kIGJlZW5cbiAqIHByb3ZpZGVkIHdpdGggdGhlIHByb3BlciBuYW1lLiAgVGhlIEFQSSBtYWtlcyBubyBndWFyYW50ZWVzIGFib3V0IHRoZSBuYXR1cmVcbiAqIG9mIHRoZSByZXR1cm5lZCBvYmplY3QsIGFwYXJ0IGZyb20gdGhhdCBpdCBpcyB1c2FibGUgd2hlcmVldmVyIHByb21pc2VzIGFyZVxuICogYm91Z2h0IGFuZCBzb2xkLlxuICovXG5RLm1ha2VQcm9taXNlID0gUHJvbWlzZTtcbmZ1bmN0aW9uIFByb21pc2UoZGVzY3JpcHRvciwgZmFsbGJhY2ssIGluc3BlY3QpIHtcbiAgICBpZiAoZmFsbGJhY2sgPT09IHZvaWQgMCkge1xuICAgICAgICBmYWxsYmFjayA9IGZ1bmN0aW9uIChvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJQcm9taXNlIGRvZXMgbm90IHN1cHBvcnQgb3BlcmF0aW9uOiBcIiArIG9wXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGluc3BlY3QgPT09IHZvaWQgMCkge1xuICAgICAgICBpbnNwZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtzdGF0ZTogXCJ1bmtub3duXCJ9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gb2JqZWN0X2NyZWF0ZShQcm9taXNlLnByb3RvdHlwZSk7XG5cbiAgICBwcm9taXNlLnByb21pc2VEaXNwYXRjaCA9IGZ1bmN0aW9uIChyZXNvbHZlLCBvcCwgYXJncykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3Jbb3BdKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZGVzY3JpcHRvcltvcF0uYXBwbHkocHJvbWlzZSwgYXJncyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbGxiYWNrLmNhbGwocHJvbWlzZSwgb3AsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlamVjdChleGNlcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvbWlzZS5pbnNwZWN0ID0gaW5zcGVjdDtcblxuICAgIC8vIFhYWCBkZXByZWNhdGVkIGB2YWx1ZU9mYCBhbmQgYGV4Y2VwdGlvbmAgc3VwcG9ydFxuICAgIGlmIChpbnNwZWN0KSB7XG4gICAgICAgIHZhciBpbnNwZWN0ZWQgPSBpbnNwZWN0KCk7XG4gICAgICAgIGlmIChpbnNwZWN0ZWQuc3RhdGUgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgICAgcHJvbWlzZS5leGNlcHRpb24gPSBpbnNwZWN0ZWQucmVhc29uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvbWlzZS52YWx1ZU9mID0gZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbnNwZWN0ZWQgPSBpbnNwZWN0KCk7XG4gICAgICAgICAgICBpZiAoaW5zcGVjdGVkLnN0YXRlID09PSBcInBlbmRpbmdcIiB8fFxuICAgICAgICAgICAgICAgIGluc3BlY3RlZC5zdGF0ZSA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zcGVjdGVkLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBQcm9taXNlXVwiO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzc2VkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdmFyIGRvbmUgPSBmYWxzZTsgICAvLyBlbnN1cmUgdGhlIHVudHJ1c3RlZCBwcm9taXNlIG1ha2VzIGF0IG1vc3QgYVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2luZ2xlIGNhbGwgdG8gb25lIG9mIHRoZSBjYWxsYmFja3NcblxuICAgIGZ1bmN0aW9uIF9mdWxmaWxsZWQodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZnVsZmlsbGVkID09PSBcImZ1bmN0aW9uXCIgPyBmdWxmaWxsZWQodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChleGNlcHRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3JlamVjdGVkKGV4Y2VwdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIHJlamVjdGVkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIG1ha2VTdGFja1RyYWNlTG9uZyhleGNlcHRpb24sIHNlbGYpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQoZXhjZXB0aW9uKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKG5ld0V4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3RXhjZXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3Byb2dyZXNzZWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBwcm9ncmVzc2VkID09PSBcImZ1bmN0aW9uXCIgPyBwcm9ncmVzc2VkKHZhbHVlKSA6IHZhbHVlO1xuICAgIH1cblxuICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5wcm9taXNlRGlzcGF0Y2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKF9mdWxmaWxsZWQodmFsdWUpKTtcbiAgICAgICAgfSwgXCJ3aGVuXCIsIFtmdW5jdGlvbiAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKF9yZWplY3RlZChleGNlcHRpb24pKTtcbiAgICAgICAgfV0pO1xuICAgIH0pO1xuXG4gICAgLy8gUHJvZ3Jlc3MgcHJvcGFnYXRvciBuZWVkIHRvIGJlIGF0dGFjaGVkIGluIHRoZSBjdXJyZW50IHRpY2suXG4gICAgc2VsZi5wcm9taXNlRGlzcGF0Y2godm9pZCAwLCBcIndoZW5cIiwgW3ZvaWQgMCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZTtcbiAgICAgICAgdmFyIHRocmV3ID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IF9wcm9ncmVzc2VkKHZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyZXcgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKFEub25lcnJvcikge1xuICAgICAgICAgICAgICAgIFEub25lcnJvcihlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhyZXcpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLm5vdGlmeShuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogUmVnaXN0ZXJzIGFuIG9ic2VydmVyIG9uIGEgcHJvbWlzZS5cbiAqXG4gKiBHdWFyYW50ZWVzOlxuICpcbiAqIDEuIHRoYXQgZnVsZmlsbGVkIGFuZCByZWplY3RlZCB3aWxsIGJlIGNhbGxlZCBvbmx5IG9uY2UuXG4gKiAyLiB0aGF0IGVpdGhlciB0aGUgZnVsZmlsbGVkIGNhbGxiYWNrIG9yIHRoZSByZWplY3RlZCBjYWxsYmFjayB3aWxsIGJlXG4gKiAgICBjYWxsZWQsIGJ1dCBub3QgYm90aC5cbiAqIDMuIHRoYXQgZnVsZmlsbGVkIGFuZCByZWplY3RlZCB3aWxsIG5vdCBiZSBjYWxsZWQgaW4gdGhpcyB0dXJuLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAgICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSB0byBvYnNlcnZlXG4gKiBAcGFyYW0gZnVsZmlsbGVkICBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2l0aCB0aGUgZnVsZmlsbGVkIHZhbHVlXG4gKiBAcGFyYW0gcmVqZWN0ZWQgICBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2l0aCB0aGUgcmVqZWN0aW9uIGV4Y2VwdGlvblxuICogQHBhcmFtIHByb2dyZXNzZWQgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGFueSBwcm9ncmVzcyBub3RpZmljYXRpb25zXG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgaW52b2tlZCBjYWxsYmFja1xuICovXG5RLndoZW4gPSB3aGVuO1xuZnVuY3Rpb24gd2hlbih2YWx1ZSwgZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3NlZCkge1xuICAgIHJldHVybiBRKHZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzZWQpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuUmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWU7IH0pO1xufTtcblxuUS50aGVuUmVzb2x2ZSA9IGZ1bmN0aW9uIChwcm9taXNlLCB2YWx1ZSkge1xuICAgIHJldHVybiBRKHByb21pc2UpLnRoZW5SZXNvbHZlKHZhbHVlKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRoZW5SZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IHJlYXNvbjsgfSk7XG59O1xuXG5RLnRoZW5SZWplY3QgPSBmdW5jdGlvbiAocHJvbWlzZSwgcmVhc29uKSB7XG4gICAgcmV0dXJuIFEocHJvbWlzZSkudGhlblJlamVjdChyZWFzb24pO1xufTtcblxuLyoqXG4gKiBJZiBhbiBvYmplY3QgaXMgbm90IGEgcHJvbWlzZSwgaXQgaXMgYXMgXCJuZWFyXCIgYXMgcG9zc2libGUuXG4gKiBJZiBhIHByb21pc2UgaXMgcmVqZWN0ZWQsIGl0IGlzIGFzIFwibmVhclwiIGFzIHBvc3NpYmxlIHRvby5cbiAqIElmIGl04oCZcyBhIGZ1bGZpbGxlZCBwcm9taXNlLCB0aGUgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmVhcmVyLlxuICogSWYgaXTigJlzIGEgZGVmZXJyZWQgcHJvbWlzZSBhbmQgdGhlIGRlZmVycmVkIGhhcyBiZWVuIHJlc29sdmVkLCB0aGVcbiAqIHJlc29sdXRpb24gaXMgXCJuZWFyZXJcIi5cbiAqIEBwYXJhbSBvYmplY3RcbiAqIEByZXR1cm5zIG1vc3QgcmVzb2x2ZWQgKG5lYXJlc3QpIGZvcm0gb2YgdGhlIG9iamVjdFxuICovXG5cbi8vIFhYWCBzaG91bGQgd2UgcmUtZG8gdGhpcz9cblEubmVhcmVyID0gbmVhcmVyO1xuZnVuY3Rpb24gbmVhcmVyKHZhbHVlKSB7XG4gICAgaWYgKGlzUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGluc3BlY3RlZCA9IHZhbHVlLmluc3BlY3QoKTtcbiAgICAgICAgaWYgKGluc3BlY3RlZC5zdGF0ZSA9PT0gXCJmdWxmaWxsZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3RlZC52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgcHJvbWlzZS5cbiAqIE90aGVyd2lzZSBpdCBpcyBhIGZ1bGZpbGxlZCB2YWx1ZS5cbiAqL1xuUS5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG5mdW5jdGlvbiBpc1Byb21pc2Uob2JqZWN0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iamVjdCkgJiZcbiAgICAgICAgdHlwZW9mIG9iamVjdC5wcm9taXNlRGlzcGF0Y2ggPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICB0eXBlb2Ygb2JqZWN0Lmluc3BlY3QgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuUS5pc1Byb21pc2VBbGlrZSA9IGlzUHJvbWlzZUFsaWtlO1xuZnVuY3Rpb24gaXNQcm9taXNlQWxpa2Uob2JqZWN0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iamVjdCkgJiYgdHlwZW9mIG9iamVjdC50aGVuID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgcGVuZGluZyBwcm9taXNlLCBtZWFuaW5nIG5vdFxuICogZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuICovXG5RLmlzUGVuZGluZyA9IGlzUGVuZGluZztcbmZ1bmN0aW9uIGlzUGVuZGluZyhvYmplY3QpIHtcbiAgICByZXR1cm4gaXNQcm9taXNlKG9iamVjdCkgJiYgb2JqZWN0Lmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJwZW5kaW5nXCI7XG59XG5cblByb21pc2UucHJvdG90eXBlLmlzUGVuZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNwZWN0KCkuc3RhdGUgPT09IFwicGVuZGluZ1wiO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSB2YWx1ZSBvciBmdWxmaWxsZWRcbiAqIHByb21pc2UuXG4gKi9cblEuaXNGdWxmaWxsZWQgPSBpc0Z1bGZpbGxlZDtcbmZ1bmN0aW9uIGlzRnVsZmlsbGVkKG9iamVjdCkge1xuICAgIHJldHVybiAhaXNQcm9taXNlKG9iamVjdCkgfHwgb2JqZWN0Lmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJmdWxmaWxsZWRcIjtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zcGVjdCgpLnN0YXRlID09PSBcImZ1bGZpbGxlZFwiO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSByZWplY3RlZCBwcm9taXNlLlxuICovXG5RLmlzUmVqZWN0ZWQgPSBpc1JlamVjdGVkO1xuZnVuY3Rpb24gaXNSZWplY3RlZChvYmplY3QpIHtcbiAgICByZXR1cm4gaXNQcm9taXNlKG9iamVjdCkgJiYgb2JqZWN0Lmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJyZWplY3RlZFwiO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5pc1JlamVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJyZWplY3RlZFwiO1xufTtcblxuLy8vLyBCRUdJTiBVTkhBTkRMRUQgUkVKRUNUSU9OIFRSQUNLSU5HXG5cbi8vIFRoaXMgcHJvbWlzZSBsaWJyYXJ5IGNvbnN1bWVzIGV4Y2VwdGlvbnMgdGhyb3duIGluIGhhbmRsZXJzIHNvIHRoZXkgY2FuIGJlXG4vLyBoYW5kbGVkIGJ5IGEgc3Vic2VxdWVudCBwcm9taXNlLiAgVGhlIGV4Y2VwdGlvbnMgZ2V0IGFkZGVkIHRvIHRoaXMgYXJyYXkgd2hlblxuLy8gdGhleSBhcmUgY3JlYXRlZCwgYW5kIHJlbW92ZWQgd2hlbiB0aGV5IGFyZSBoYW5kbGVkLiAgTm90ZSB0aGF0IGluIEVTNiBvclxuLy8gc2hpbW1lZCBlbnZpcm9ubWVudHMsIHRoaXMgd291bGQgbmF0dXJhbGx5IGJlIGEgYFNldGAuXG52YXIgdW5oYW5kbGVkUmVhc29ucyA9IFtdO1xudmFyIHVuaGFuZGxlZFJlamVjdGlvbnMgPSBbXTtcbnZhciB1bmhhbmRsZWRSZWFzb25zRGlzcGxheWVkID0gZmFsc2U7XG52YXIgdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zID0gdHJ1ZTtcbmZ1bmN0aW9uIGRpc3BsYXlVbmhhbmRsZWRSZWFzb25zKCkge1xuICAgIGlmIChcbiAgICAgICAgIXVuaGFuZGxlZFJlYXNvbnNEaXNwbGF5ZWQgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAhd2luZG93LlRvdWNoICYmXG4gICAgICAgIHdpbmRvdy5jb25zb2xlXG4gICAgKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIltRXSBVbmhhbmRsZWQgcmVqZWN0aW9uIHJlYXNvbnMgKHNob3VsZCBiZSBlbXB0eSk6XCIsXG4gICAgICAgICAgICAgICAgICAgICB1bmhhbmRsZWRSZWFzb25zKTtcbiAgICB9XG5cbiAgICB1bmhhbmRsZWRSZWFzb25zRGlzcGxheWVkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbG9nVW5oYW5kbGVkUmVhc29ucygpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaGFuZGxlZFJlYXNvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJlYXNvbiA9IHVuaGFuZGxlZFJlYXNvbnNbaV07XG4gICAgICAgIGNvbnNvbGUud2FybihcIlVuaGFuZGxlZCByZWplY3Rpb24gcmVhc29uOlwiLCByZWFzb24pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRVbmhhbmRsZWRSZWplY3Rpb25zKCkge1xuICAgIHVuaGFuZGxlZFJlYXNvbnMubGVuZ3RoID0gMDtcbiAgICB1bmhhbmRsZWRSZWplY3Rpb25zLmxlbmd0aCA9IDA7XG4gICAgdW5oYW5kbGVkUmVhc29uc0Rpc3BsYXllZCA9IGZhbHNlO1xuXG4gICAgaWYgKCF0cmFja1VuaGFuZGxlZFJlamVjdGlvbnMpIHtcbiAgICAgICAgdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zID0gdHJ1ZTtcblxuICAgICAgICAvLyBTaG93IHVuaGFuZGxlZCByZWplY3Rpb24gcmVhc29ucyBpZiBOb2RlIGV4aXRzIHdpdGhvdXQgaGFuZGxpbmcgYW5cbiAgICAgICAgLy8gb3V0c3RhbmRpbmcgcmVqZWN0aW9uLiAgKE5vdGUgdGhhdCBCcm93c2VyaWZ5IHByZXNlbnRseSBwcm9kdWNlcyBhXG4gICAgICAgIC8vIGBwcm9jZXNzYCBnbG9iYWwgd2l0aG91dCB0aGUgYEV2ZW50RW1pdHRlcmAgYG9uYCBtZXRob2QuKVxuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5vbikge1xuICAgICAgICAgICAgcHJvY2Vzcy5vbihcImV4aXRcIiwgbG9nVW5oYW5kbGVkUmVhc29ucyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRyYWNrUmVqZWN0aW9uKHByb21pc2UsIHJlYXNvbikge1xuICAgIGlmICghdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1bmhhbmRsZWRSZWplY3Rpb25zLnB1c2gocHJvbWlzZSk7XG4gICAgaWYgKHJlYXNvbiAmJiB0eXBlb2YgcmVhc29uLnN0YWNrICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHVuaGFuZGxlZFJlYXNvbnMucHVzaChyZWFzb24uc3RhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHVuaGFuZGxlZFJlYXNvbnMucHVzaChcIihubyBzdGFjaykgXCIgKyByZWFzb24pO1xuICAgIH1cbiAgICBkaXNwbGF5VW5oYW5kbGVkUmVhc29ucygpO1xufVxuXG5mdW5jdGlvbiB1bnRyYWNrUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgICBpZiAoIXRyYWNrVW5oYW5kbGVkUmVqZWN0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGF0ID0gYXJyYXlfaW5kZXhPZih1bmhhbmRsZWRSZWplY3Rpb25zLCBwcm9taXNlKTtcbiAgICBpZiAoYXQgIT09IC0xKSB7XG4gICAgICAgIHVuaGFuZGxlZFJlamVjdGlvbnMuc3BsaWNlKGF0LCAxKTtcbiAgICAgICAgdW5oYW5kbGVkUmVhc29ucy5zcGxpY2UoYXQsIDEpO1xuICAgIH1cbn1cblxuUS5yZXNldFVuaGFuZGxlZFJlamVjdGlvbnMgPSByZXNldFVuaGFuZGxlZFJlamVjdGlvbnM7XG5cblEuZ2V0VW5oYW5kbGVkUmVhc29ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBNYWtlIGEgY29weSBzbyB0aGF0IGNvbnN1bWVycyBjYW4ndCBpbnRlcmZlcmUgd2l0aCBvdXIgaW50ZXJuYWwgc3RhdGUuXG4gICAgcmV0dXJuIHVuaGFuZGxlZFJlYXNvbnMuc2xpY2UoKTtcbn07XG5cblEuc3RvcFVuaGFuZGxlZFJlamVjdGlvblRyYWNraW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJlc2V0VW5oYW5kbGVkUmVqZWN0aW9ucygpO1xuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLm9uKSB7XG4gICAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoXCJleGl0XCIsIGxvZ1VuaGFuZGxlZFJlYXNvbnMpO1xuICAgIH1cbiAgICB0cmFja1VuaGFuZGxlZFJlamVjdGlvbnMgPSBmYWxzZTtcbn07XG5cbnJlc2V0VW5oYW5kbGVkUmVqZWN0aW9ucygpO1xuXG4vLy8vIEVORCBVTkhBTkRMRUQgUkVKRUNUSU9OIFRSQUNLSU5HXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHJlamVjdGVkIHByb21pc2UuXG4gKiBAcGFyYW0gcmVhc29uIHZhbHVlIGRlc2NyaWJpbmcgdGhlIGZhaWx1cmVcbiAqL1xuUS5yZWplY3QgPSByZWplY3Q7XG5mdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gICAgdmFyIHJlamVjdGlvbiA9IFByb21pc2Uoe1xuICAgICAgICBcIndoZW5cIjogZnVuY3Rpb24gKHJlamVjdGVkKSB7XG4gICAgICAgICAgICAvLyBub3RlIHRoYXQgdGhlIGVycm9yIGhhcyBiZWVuIGhhbmRsZWRcbiAgICAgICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgICAgICAgIHVudHJhY2tSZWplY3Rpb24odGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQgPyByZWplY3RlZChyZWFzb24pIDogdGhpcztcbiAgICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIGZhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJyZWplY3RlZFwiLCByZWFzb246IHJlYXNvbiB9O1xuICAgIH0pO1xuXG4gICAgLy8gTm90ZSB0aGF0IHRoZSByZWFzb24gaGFzIG5vdCBiZWVuIGhhbmRsZWQuXG4gICAgdHJhY2tSZWplY3Rpb24ocmVqZWN0aW9uLCByZWFzb24pO1xuXG4gICAgcmV0dXJuIHJlamVjdGlvbjtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgZnVsZmlsbGVkIHByb21pc2UgZm9yIGFuIGltbWVkaWF0ZSByZWZlcmVuY2UuXG4gKiBAcGFyYW0gdmFsdWUgaW1tZWRpYXRlIHJlZmVyZW5jZVxuICovXG5RLmZ1bGZpbGwgPSBmdWxmaWxsO1xuZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkge1xuICAgIHJldHVybiBQcm9taXNlKHtcbiAgICAgICAgXCJ3aGVuXCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRcIjogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVtuYW1lXTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXRcIjogZnVuY3Rpb24gKG5hbWUsIHJocykge1xuICAgICAgICAgICAgdmFsdWVbbmFtZV0gPSByaHM7XG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVsZXRlXCI6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBkZWxldGUgdmFsdWVbbmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIFwicG9zdFwiOiBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICAgICAgLy8gTWFyayBNaWxsZXIgcHJvcG9zZXMgdGhhdCBwb3N0IHdpdGggbm8gbmFtZSBzaG91bGQgYXBwbHkgYVxuICAgICAgICAgICAgLy8gcHJvbWlzZWQgZnVuY3Rpb24uXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gbnVsbCB8fCBuYW1lID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlW25hbWVdLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJhcHBseVwiOiBmdW5jdGlvbiAodGhpc3AsIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5hcHBseSh0aGlzcCwgYXJncyk7XG4gICAgICAgIH0sXG4gICAgICAgIFwia2V5c1wiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0X2tleXModmFsdWUpO1xuICAgICAgICB9XG4gICAgfSwgdm9pZCAwLCBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJmdWxmaWxsZWRcIiwgdmFsdWU6IHZhbHVlIH07XG4gICAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlbmFibGVzIHRvIFEgcHJvbWlzZXMuXG4gKiBAcGFyYW0gcHJvbWlzZSB0aGVuYWJsZSBwcm9taXNlXG4gKiBAcmV0dXJucyBhIFEgcHJvbWlzZVxuICovXG5mdW5jdGlvbiBjb2VyY2UocHJvbWlzZSkge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZS50aGVuKGRlZmVycmVkLnJlc29sdmUsIGRlZmVycmVkLnJlamVjdCwgZGVmZXJyZWQubm90aWZ5KTtcbiAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufVxuXG4vKipcbiAqIEFubm90YXRlcyBhbiBvYmplY3Qgc3VjaCB0aGF0IGl0IHdpbGwgbmV2ZXIgYmVcbiAqIHRyYW5zZmVycmVkIGF3YXkgZnJvbSB0aGlzIHByb2Nlc3Mgb3ZlciBhbnkgcHJvbWlzZVxuICogY29tbXVuaWNhdGlvbiBjaGFubmVsLlxuICogQHBhcmFtIG9iamVjdFxuICogQHJldHVybnMgcHJvbWlzZSBhIHdyYXBwaW5nIG9mIHRoYXQgb2JqZWN0IHRoYXRcbiAqIGFkZGl0aW9uYWxseSByZXNwb25kcyB0byB0aGUgXCJpc0RlZlwiIG1lc3NhZ2VcbiAqIHdpdGhvdXQgYSByZWplY3Rpb24uXG4gKi9cblEubWFzdGVyID0gbWFzdGVyO1xuZnVuY3Rpb24gbWFzdGVyKG9iamVjdCkge1xuICAgIHJldHVybiBQcm9taXNlKHtcbiAgICAgICAgXCJpc0RlZlwiOiBmdW5jdGlvbiAoKSB7fVxuICAgIH0sIGZ1bmN0aW9uIGZhbGxiYWNrKG9wLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaChvYmplY3QsIG9wLCBhcmdzKTtcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBRKG9iamVjdCkuaW5zcGVjdCgpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFNwcmVhZHMgdGhlIHZhbHVlcyBvZiBhIHByb21pc2VkIGFycmF5IG9mIGFyZ3VtZW50cyBpbnRvIHRoZVxuICogZnVsZmlsbG1lbnQgY2FsbGJhY2suXG4gKiBAcGFyYW0gZnVsZmlsbGVkIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgdmFyaWFkaWMgYXJndW1lbnRzIGZyb20gdGhlXG4gKiBwcm9taXNlZCBhcnJheVxuICogQHBhcmFtIHJlamVjdGVkIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgdGhlIGV4Y2VwdGlvbiBpZiB0aGUgcHJvbWlzZVxuICogaXMgcmVqZWN0ZWQuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWUgb3IgdGhyb3duIGV4Y2VwdGlvbiBvZlxuICogZWl0aGVyIGNhbGxiYWNrLlxuICovXG5RLnNwcmVhZCA9IHNwcmVhZDtcbmZ1bmN0aW9uIHNwcmVhZCh2YWx1ZSwgZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICAgIHJldHVybiBRKHZhbHVlKS5zcHJlYWQoZnVsZmlsbGVkLCByZWplY3RlZCk7XG59XG5cblByb21pc2UucHJvdG90eXBlLnNwcmVhZCA9IGZ1bmN0aW9uIChmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsKCkudGhlbihmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZC5hcHBseSh2b2lkIDAsIGFycmF5KTtcbiAgICB9LCByZWplY3RlZCk7XG59O1xuXG4vKipcbiAqIFRoZSBhc3luYyBmdW5jdGlvbiBpcyBhIGRlY29yYXRvciBmb3IgZ2VuZXJhdG9yIGZ1bmN0aW9ucywgdHVybmluZ1xuICogdGhlbSBpbnRvIGFzeW5jaHJvbm91cyBnZW5lcmF0b3JzLiAgQWx0aG91Z2ggZ2VuZXJhdG9ycyBhcmUgb25seSBwYXJ0XG4gKiBvZiB0aGUgbmV3ZXN0IEVDTUFTY3JpcHQgNiBkcmFmdHMsIHRoaXMgY29kZSBkb2VzIG5vdCBjYXVzZSBzeW50YXhcbiAqIGVycm9ycyBpbiBvbGRlciBlbmdpbmVzLiAgVGhpcyBjb2RlIHNob3VsZCBjb250aW51ZSB0byB3b3JrIGFuZCB3aWxsXG4gKiBpbiBmYWN0IGltcHJvdmUgb3ZlciB0aW1lIGFzIHRoZSBsYW5ndWFnZSBpbXByb3Zlcy5cbiAqXG4gKiBFUzYgZ2VuZXJhdG9ycyBhcmUgY3VycmVudGx5IHBhcnQgb2YgVjggdmVyc2lvbiAzLjE5IHdpdGggdGhlXG4gKiAtLWhhcm1vbnktZ2VuZXJhdG9ycyBydW50aW1lIGZsYWcgZW5hYmxlZC4gIFNwaWRlck1vbmtleSBoYXMgaGFkIHRoZW1cbiAqIGZvciBsb25nZXIsIGJ1dCB1bmRlciBhbiBvbGRlciBQeXRob24taW5zcGlyZWQgZm9ybS4gIFRoaXMgZnVuY3Rpb25cbiAqIHdvcmtzIG9uIGJvdGgga2luZHMgb2YgZ2VuZXJhdG9ycy5cbiAqXG4gKiBEZWNvcmF0ZXMgYSBnZW5lcmF0b3IgZnVuY3Rpb24gc3VjaCB0aGF0OlxuICogIC0gaXQgbWF5IHlpZWxkIHByb21pc2VzXG4gKiAgLSBleGVjdXRpb24gd2lsbCBjb250aW51ZSB3aGVuIHRoYXQgcHJvbWlzZSBpcyBmdWxmaWxsZWRcbiAqICAtIHRoZSB2YWx1ZSBvZiB0aGUgeWllbGQgZXhwcmVzc2lvbiB3aWxsIGJlIHRoZSBmdWxmaWxsZWQgdmFsdWVcbiAqICAtIGl0IHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlICh3aGVuIHRoZSBnZW5lcmF0b3JcbiAqICAgIHN0b3BzIGl0ZXJhdGluZylcbiAqICAtIHRoZSBkZWNvcmF0ZWQgZnVuY3Rpb24gcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWVcbiAqICAgIG9mIHRoZSBnZW5lcmF0b3Igb3IgdGhlIGZpcnN0IHJlamVjdGVkIHByb21pc2UgYW1vbmcgdGhvc2VcbiAqICAgIHlpZWxkZWQuXG4gKiAgLSBpZiBhbiBlcnJvciBpcyB0aHJvd24gaW4gdGhlIGdlbmVyYXRvciwgaXQgcHJvcGFnYXRlcyB0aHJvdWdoXG4gKiAgICBldmVyeSBmb2xsb3dpbmcgeWllbGQgdW50aWwgaXQgaXMgY2F1Z2h0LCBvciB1bnRpbCBpdCBlc2NhcGVzXG4gKiAgICB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGFsdG9nZXRoZXIsIGFuZCBpcyB0cmFuc2xhdGVkIGludG8gYVxuICogICAgcmVqZWN0aW9uIGZvciB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgZGVjb3JhdGVkIGdlbmVyYXRvci5cbiAqL1xuUS5hc3luYyA9IGFzeW5jO1xuZnVuY3Rpb24gYXN5bmMobWFrZUdlbmVyYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHdoZW4gdmVyYiBpcyBcInNlbmRcIiwgYXJnIGlzIGEgdmFsdWVcbiAgICAgICAgLy8gd2hlbiB2ZXJiIGlzIFwidGhyb3dcIiwgYXJnIGlzIGFuIGV4Y2VwdGlvblxuICAgICAgICBmdW5jdGlvbiBjb250aW51ZXIodmVyYiwgYXJnKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBnZW5lcmF0b3JbdmVyYl0oYXJnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aGVuKHJlc3VsdC52YWx1ZSwgY2FsbGJhY2ssIGVycmJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBnZW5lcmF0b3IgPSBtYWtlR2VuZXJhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNvbnRpbnVlci5iaW5kKGNvbnRpbnVlciwgXCJuZXh0XCIpO1xuICAgICAgICB2YXIgZXJyYmFjayA9IGNvbnRpbnVlci5iaW5kKGNvbnRpbnVlciwgXCJ0aHJvd1wiKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBUaGUgc3Bhd24gZnVuY3Rpb24gaXMgYSBzbWFsbCB3cmFwcGVyIGFyb3VuZCBhc3luYyB0aGF0IGltbWVkaWF0ZWx5XG4gKiBjYWxscyB0aGUgZ2VuZXJhdG9yIGFuZCBhbHNvIGVuZHMgdGhlIHByb21pc2UgY2hhaW4sIHNvIHRoYXQgYW55XG4gKiB1bmhhbmRsZWQgZXJyb3JzIGFyZSB0aHJvd24gaW5zdGVhZCBvZiBmb3J3YXJkZWQgdG8gdGhlIGVycm9yXG4gKiBoYW5kbGVyLiBUaGlzIGlzIHVzZWZ1bCBiZWNhdXNlIGl0J3MgZXh0cmVtZWx5IGNvbW1vbiB0byBydW5cbiAqIGdlbmVyYXRvcnMgYXQgdGhlIHRvcC1sZXZlbCB0byB3b3JrIHdpdGggbGlicmFyaWVzLlxuICovXG5RLnNwYXduID0gc3Bhd247XG5mdW5jdGlvbiBzcGF3bihtYWtlR2VuZXJhdG9yKSB7XG4gICAgUS5kb25lKFEuYXN5bmMobWFrZUdlbmVyYXRvcikoKSk7XG59XG5cbi8qKlxuICogVGhlIHByb21pc2VkIGZ1bmN0aW9uIGRlY29yYXRvciBlbnN1cmVzIHRoYXQgYW55IHByb21pc2UgYXJndW1lbnRzXG4gKiBhcmUgc2V0dGxlZCBhbmQgcGFzc2VkIGFzIHZhbHVlcyAoYHRoaXNgIGlzIGFsc28gc2V0dGxlZCBhbmQgcGFzc2VkXG4gKiBhcyBhIHZhbHVlKS4gIEl0IHdpbGwgYWxzbyBlbnN1cmUgdGhhdCB0aGUgcmVzdWx0IG9mIGEgZnVuY3Rpb24gaXNcbiAqIGFsd2F5cyBhIHByb21pc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciBhZGQgPSBRLnByb21pc2VkKGZ1bmN0aW9uIChhLCBiKSB7XG4gKiAgICAgcmV0dXJuIGEgKyBiO1xuICogfSk7XG4gKiBhZGQoUShhKSwgUShCKSk7XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGRlY29yYXRlXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IGEgZnVuY3Rpb24gdGhhdCBoYXMgYmVlbiBkZWNvcmF0ZWQuXG4gKi9cblEucHJvbWlzZWQgPSBwcm9taXNlZDtcbmZ1bmN0aW9uIHByb21pc2VkKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNwcmVhZChbdGhpcywgYWxsKGFyZ3VtZW50cyldLCBmdW5jdGlvbiAoc2VsZiwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG4vKipcbiAqIHNlbmRzIGEgbWVzc2FnZSB0byBhIHZhbHVlIGluIGEgZnV0dXJlIHR1cm5cbiAqIEBwYXJhbSBvYmplY3QqIHRoZSByZWNpcGllbnRcbiAqIEBwYXJhbSBvcCB0aGUgbmFtZSBvZiB0aGUgbWVzc2FnZSBvcGVyYXRpb24sIGUuZy4sIFwid2hlblwiLFxuICogQHBhcmFtIGFyZ3MgZnVydGhlciBhcmd1bWVudHMgdG8gYmUgZm9yd2FyZGVkIHRvIHRoZSBvcGVyYXRpb25cbiAqIEByZXR1cm5zIHJlc3VsdCB7UHJvbWlzZX0gYSBwcm9taXNlIGZvciB0aGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb25cbiAqL1xuUS5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuZnVuY3Rpb24gZGlzcGF0Y2gob2JqZWN0LCBvcCwgYXJncykge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2gob3AsIGFyZ3MpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChvcCwgYXJncykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5wcm9taXNlRGlzcGF0Y2goZGVmZXJyZWQucmVzb2x2ZSwgb3AsIGFyZ3MpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IG9iamVjdFxuICogQHBhcmFtIG5hbWUgICAgICBuYW1lIG9mIHByb3BlcnR5IHRvIGdldFxuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcHJvcGVydHkgdmFsdWVcbiAqL1xuUS5nZXQgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwiZ2V0XCIsIFtrZXldKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcImdldFwiLCBba2V5XSk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciBvYmplY3Qgb2JqZWN0XG4gKiBAcGFyYW0gbmFtZSAgICAgIG5hbWUgb2YgcHJvcGVydHkgdG8gc2V0XG4gKiBAcGFyYW0gdmFsdWUgICAgIG5ldyB2YWx1ZSBvZiBwcm9wZXJ0eVxuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlXG4gKi9cblEuc2V0ID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJzZXRcIiwgW2tleSwgdmFsdWVdKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJzZXRcIiwgW2tleSwgdmFsdWVdKTtcbn07XG5cbi8qKlxuICogRGVsZXRlcyBhIHByb3BlcnR5IGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IG9iamVjdFxuICogQHBhcmFtIG5hbWUgICAgICBuYW1lIG9mIHByb3BlcnR5IHRvIGRlbGV0ZVxuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlXG4gKi9cblEuZGVsID0gLy8gWFhYIGxlZ2FjeVxuUVtcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJkZWxldGVcIiwgW2tleV0pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZGVsID0gLy8gWFhYIGxlZ2FjeVxuUHJvbWlzZS5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJkZWxldGVcIiwgW2tleV0pO1xufTtcblxuLyoqXG4gKiBJbnZva2VzIGEgbWV0aG9kIGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IG9iamVjdFxuICogQHBhcmFtIG5hbWUgICAgICBuYW1lIG9mIG1ldGhvZCB0byBpbnZva2VcbiAqIEBwYXJhbSB2YWx1ZSAgICAgYSB2YWx1ZSB0byBwb3N0LCB0eXBpY2FsbHkgYW4gYXJyYXkgb2ZcbiAqICAgICAgICAgICAgICAgICAgaW52b2NhdGlvbiBhcmd1bWVudHMgZm9yIHByb21pc2VzIHRoYXRcbiAqICAgICAgICAgICAgICAgICAgYXJlIHVsdGltYXRlbHkgYmFja2VkIHdpdGggYHJlc29sdmVgIHZhbHVlcyxcbiAqICAgICAgICAgICAgICAgICAgYXMgb3Bwb3NlZCB0byB0aG9zZSBiYWNrZWQgd2l0aCBVUkxzXG4gKiAgICAgICAgICAgICAgICAgIHdoZXJlaW4gdGhlIHBvc3RlZCB2YWx1ZSBjYW4gYmUgYW55XG4gKiAgICAgICAgICAgICAgICAgIEpTT04gc2VyaWFsaXphYmxlIG9iamVjdC5cbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZVxuICovXG4vLyBib3VuZCBsb2NhbGx5IGJlY2F1c2UgaXQgaXMgdXNlZCBieSBvdGhlciBtZXRob2RzXG5RLm1hcHBseSA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5RLnBvc3QgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBhcmdzKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIGFyZ3NdKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm1hcHBseSA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5Qcm9taXNlLnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIGFyZ3NdKTtcbn07XG5cbi8qKlxuICogSW52b2tlcyBhIG1ldGhvZCBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBvYmplY3RcbiAqIEBwYXJhbSBuYW1lICAgICAgbmFtZSBvZiBtZXRob2QgdG8gaW52b2tlXG4gKiBAcGFyYW0gLi4uYXJncyAgIGFycmF5IG9mIGludm9jYXRpb24gYXJndW1lbnRzXG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWVcbiAqL1xuUS5zZW5kID0gLy8gWFhYIE1hcmsgTWlsbGVyJ3MgcHJvcG9zZWQgcGFybGFuY2VcblEubWNhbGwgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUS5pbnZva2UgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lIC8qLi4uYXJncyovKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMildKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNlbmQgPSAvLyBYWFggTWFyayBNaWxsZXIncyBwcm9wb3NlZCBwYXJsYW5jZVxuUHJvbWlzZS5wcm90b3R5cGUubWNhbGwgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUHJvbWlzZS5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gKG5hbWUgLyouLi5hcmdzKi8pIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSldKTtcbn07XG5cbi8qKlxuICogQXBwbGllcyB0aGUgcHJvbWlzZWQgZnVuY3Rpb24gaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgZnVuY3Rpb25cbiAqIEBwYXJhbSBhcmdzICAgICAgYXJyYXkgb2YgYXBwbGljYXRpb24gYXJndW1lbnRzXG4gKi9cblEuZmFwcGx5ID0gZnVuY3Rpb24gKG9iamVjdCwgYXJncykge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJhcHBseVwiLCBbdm9pZCAwLCBhcmdzXSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5mYXBwbHkgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwiYXBwbHlcIiwgW3ZvaWQgMCwgYXJnc10pO1xufTtcblxuLyoqXG4gKiBDYWxscyB0aGUgcHJvbWlzZWQgZnVuY3Rpb24gaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgZnVuY3Rpb25cbiAqIEBwYXJhbSAuLi5hcmdzICAgYXJyYXkgb2YgYXBwbGljYXRpb24gYXJndW1lbnRzXG4gKi9cblFbXCJ0cnlcIl0gPVxuUS5mY2FsbCA9IGZ1bmN0aW9uIChvYmplY3QgLyogLi4uYXJncyovKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcImFwcGx5XCIsIFt2b2lkIDAsIGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSldKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmZjYWxsID0gZnVuY3Rpb24gKC8qLi4uYXJncyovKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJhcHBseVwiLCBbdm9pZCAwLCBhcnJheV9zbGljZShhcmd1bWVudHMpXSk7XG59O1xuXG4vKipcbiAqIEJpbmRzIHRoZSBwcm9taXNlZCBmdW5jdGlvbiwgdHJhbnNmb3JtaW5nIHJldHVybiB2YWx1ZXMgaW50byBhIGZ1bGZpbGxlZFxuICogcHJvbWlzZSBhbmQgdGhyb3duIGVycm9ycyBpbnRvIGEgcmVqZWN0ZWQgb25lLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBmdW5jdGlvblxuICogQHBhcmFtIC4uLmFyZ3MgICBhcnJheSBvZiBhcHBsaWNhdGlvbiBhcmd1bWVudHNcbiAqL1xuUS5mYmluZCA9IGZ1bmN0aW9uIChvYmplY3QgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgcHJvbWlzZSA9IFEob2JqZWN0KTtcbiAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZib3VuZCgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UuZGlzcGF0Y2goXCJhcHBseVwiLCBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgYXJncy5jb25jYXQoYXJyYXlfc2xpY2UoYXJndW1lbnRzKSlcbiAgICAgICAgXSk7XG4gICAgfTtcbn07XG5Qcm9taXNlLnByb3RvdHlwZS5mYmluZCA9IGZ1bmN0aW9uICgvKi4uLmFyZ3MqLykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZib3VuZCgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UuZGlzcGF0Y2goXCJhcHBseVwiLCBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgYXJncy5jb25jYXQoYXJyYXlfc2xpY2UoYXJndW1lbnRzKSlcbiAgICAgICAgXSk7XG4gICAgfTtcbn07XG5cbi8qKlxuICogUmVxdWVzdHMgdGhlIG5hbWVzIG9mIHRoZSBvd25lZCBwcm9wZXJ0aWVzIG9mIGEgcHJvbWlzZWRcbiAqIG9iamVjdCBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBvYmplY3RcbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIGtleXMgb2YgdGhlIGV2ZW50dWFsbHkgc2V0dGxlZCBvYmplY3RcbiAqL1xuUS5rZXlzID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJrZXlzXCIsIFtdKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJrZXlzXCIsIFtdKTtcbn07XG5cbi8qKlxuICogVHVybnMgYW4gYXJyYXkgb2YgcHJvbWlzZXMgaW50byBhIHByb21pc2UgZm9yIGFuIGFycmF5LiAgSWYgYW55IG9mXG4gKiB0aGUgcHJvbWlzZXMgZ2V0cyByZWplY3RlZCwgdGhlIHdob2xlIGFycmF5IGlzIHJlamVjdGVkIGltbWVkaWF0ZWx5LlxuICogQHBhcmFtIHtBcnJheSp9IGFuIGFycmF5IChvciBwcm9taXNlIGZvciBhbiBhcnJheSkgb2YgdmFsdWVzIChvclxuICogcHJvbWlzZXMgZm9yIHZhbHVlcylcbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgYW4gYXJyYXkgb2YgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzXG4gKi9cbi8vIEJ5IE1hcmsgTWlsbGVyXG4vLyBodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1zdHJhd21hbjpjb25jdXJyZW5jeSZyZXY9MTMwODc3NjUyMSNhbGxmdWxmaWxsZWRcblEuYWxsID0gYWxsO1xuZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIHdoZW4ocHJvbWlzZXMsIGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgICAgICB2YXIgY291bnREb3duID0gMDtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgICAgYXJyYXlfcmVkdWNlKHByb21pc2VzLCBmdW5jdGlvbiAodW5kZWZpbmVkLCBwcm9taXNlLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIHNuYXBzaG90O1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGlzUHJvbWlzZShwcm9taXNlKSAmJlxuICAgICAgICAgICAgICAgIChzbmFwc2hvdCA9IHByb21pc2UuaW5zcGVjdCgpKS5zdGF0ZSA9PT0gXCJmdWxmaWxsZWRcIlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXNbaW5kZXhdID0gc25hcHNob3QudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICsrY291bnREb3duO1xuICAgICAgICAgICAgICAgIHdoZW4oXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoLS1jb3VudERvd24gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHByb21pc2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLm5vdGlmeSh7IGluZGV4OiBpbmRleCwgdmFsdWU6IHByb2dyZXNzIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdm9pZCAwKTtcbiAgICAgICAgaWYgKGNvdW50RG93biA9PT0gMCkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShwcm9taXNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfSk7XG59XG5cblByb21pc2UucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBXYWl0cyBmb3IgYWxsIHByb21pc2VzIHRvIGJlIHNldHRsZWQsIGVpdGhlciBmdWxmaWxsZWQgb3JcbiAqIHJlamVjdGVkLiAgVGhpcyBpcyBkaXN0aW5jdCBmcm9tIGBhbGxgIHNpbmNlIHRoYXQgd291bGQgc3RvcFxuICogd2FpdGluZyBhdCB0aGUgZmlyc3QgcmVqZWN0aW9uLiAgVGhlIHByb21pc2UgcmV0dXJuZWQgYnlcbiAqIGBhbGxSZXNvbHZlZGAgd2lsbCBuZXZlciBiZSByZWplY3RlZC5cbiAqIEBwYXJhbSBwcm9taXNlcyBhIHByb21pc2UgZm9yIGFuIGFycmF5IChvciBhbiBhcnJheSkgb2YgcHJvbWlzZXNcbiAqIChvciB2YWx1ZXMpXG4gKiBAcmV0dXJuIGEgcHJvbWlzZSBmb3IgYW4gYXJyYXkgb2YgcHJvbWlzZXNcbiAqL1xuUS5hbGxSZXNvbHZlZCA9IGRlcHJlY2F0ZShhbGxSZXNvbHZlZCwgXCJhbGxSZXNvbHZlZFwiLCBcImFsbFNldHRsZWRcIik7XG5mdW5jdGlvbiBhbGxSZXNvbHZlZChwcm9taXNlcykge1xuICAgIHJldHVybiB3aGVuKHByb21pc2VzLCBmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICAgICAgcHJvbWlzZXMgPSBhcnJheV9tYXAocHJvbWlzZXMsIFEpO1xuICAgICAgICByZXR1cm4gd2hlbihhbGwoYXJyYXlfbWFwKHByb21pc2VzLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdoZW4ocHJvbWlzZSwgbm9vcCwgbm9vcCk7XG4gICAgICAgIH0pKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VzO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuYWxsUmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFsbFJlc29sdmVkKHRoaXMpO1xufTtcblxuLyoqXG4gKiBAc2VlIFByb21pc2UjYWxsU2V0dGxlZFxuICovXG5RLmFsbFNldHRsZWQgPSBhbGxTZXR0bGVkO1xuZnVuY3Rpb24gYWxsU2V0dGxlZChwcm9taXNlcykge1xuICAgIHJldHVybiBRKHByb21pc2VzKS5hbGxTZXR0bGVkKCk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gYXJyYXkgb2YgcHJvbWlzZXMgaW50byBhIHByb21pc2UgZm9yIGFuIGFycmF5IG9mIHRoZWlyIHN0YXRlcyAoYXNcbiAqIHJldHVybmVkIGJ5IGBpbnNwZWN0YCkgd2hlbiB0aGV5IGhhdmUgYWxsIHNldHRsZWQuXG4gKiBAcGFyYW0ge0FycmF5W0FueSpdfSB2YWx1ZXMgYW4gYXJyYXkgKG9yIHByb21pc2UgZm9yIGFuIGFycmF5KSBvZiB2YWx1ZXMgKG9yXG4gKiBwcm9taXNlcyBmb3IgdmFsdWVzKVxuICogQHJldHVybnMge0FycmF5W1N0YXRlXX0gYW4gYXJyYXkgb2Ygc3RhdGVzIGZvciB0aGUgcmVzcGVjdGl2ZSB2YWx1ZXMuXG4gKi9cblByb21pc2UucHJvdG90eXBlLmFsbFNldHRsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICAgICAgcmV0dXJuIGFsbChhcnJheV9tYXAocHJvbWlzZXMsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gUShwcm9taXNlKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZ2FyZGxlc3MoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UuaW5zcGVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihyZWdhcmRsZXNzLCByZWdhcmRsZXNzKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBDYXB0dXJlcyB0aGUgZmFpbHVyZSBvZiBhIHByb21pc2UsIGdpdmluZyBhbiBvcG9ydHVuaXR5IHRvIHJlY292ZXJcbiAqIHdpdGggYSBjYWxsYmFjay4gIElmIHRoZSBnaXZlbiBwcm9taXNlIGlzIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gKiBwcm9taXNlIGlzIGZ1bGZpbGxlZC5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZSBmb3Igc29tZXRoaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0byBmdWxmaWxsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlmIHRoZVxuICogZ2l2ZW4gcHJvbWlzZSBpcyByZWplY3RlZFxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBjYWxsYmFja1xuICovXG5RLmZhaWwgPSAvLyBYWFggbGVnYWN5XG5RW1wiY2F0Y2hcIl0gPSBmdW5jdGlvbiAob2JqZWN0LCByZWplY3RlZCkge1xuICAgIHJldHVybiBRKG9iamVjdCkudGhlbih2b2lkIDAsIHJlamVjdGVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmZhaWwgPSAvLyBYWFggbGVnYWN5XG5Qcm9taXNlLnByb3RvdHlwZVtcImNhdGNoXCJdID0gZnVuY3Rpb24gKHJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2b2lkIDAsIHJlamVjdGVkKTtcbn07XG5cbi8qKlxuICogQXR0YWNoZXMgYSBsaXN0ZW5lciB0aGF0IGNhbiByZXNwb25kIHRvIHByb2dyZXNzIG5vdGlmaWNhdGlvbnMgZnJvbSBhXG4gKiBwcm9taXNlJ3Mgb3JpZ2luYXRpbmcgZGVmZXJyZWQuIFRoaXMgbGlzdGVuZXIgcmVjZWl2ZXMgdGhlIGV4YWN0IGFyZ3VtZW50c1xuICogcGFzc2VkIHRvIGBgZGVmZXJyZWQubm90aWZ5YGAuXG4gKiBAcGFyYW0ge0FueSp9IHByb21pc2UgZm9yIHNvbWV0aGluZ1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdG8gcmVjZWl2ZSBhbnkgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uc1xuICogQHJldHVybnMgdGhlIGdpdmVuIHByb21pc2UsIHVuY2hhbmdlZFxuICovXG5RLnByb2dyZXNzID0gcHJvZ3Jlc3M7XG5mdW5jdGlvbiBwcm9ncmVzcyhvYmplY3QsIHByb2dyZXNzZWQpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLnRoZW4odm9pZCAwLCB2b2lkIDAsIHByb2dyZXNzZWQpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uIChwcm9ncmVzc2VkKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2b2lkIDAsIHZvaWQgMCwgcHJvZ3Jlc3NlZCk7XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIGFuIG9wcG9ydHVuaXR5IHRvIG9ic2VydmUgdGhlIHNldHRsaW5nIG9mIGEgcHJvbWlzZSxcbiAqIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgcHJvbWlzZSBpcyBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuICBGb3J3YXJkc1xuICogdGhlIHJlc29sdXRpb24gdG8gdGhlIHJldHVybmVkIHByb21pc2Ugd2hlbiB0aGUgY2FsbGJhY2sgaXMgZG9uZS5cbiAqIFRoZSBjYWxsYmFjayBjYW4gcmV0dXJuIGEgcHJvbWlzZSB0byBkZWZlciBjb21wbGV0aW9uLlxuICogQHBhcmFtIHtBbnkqfSBwcm9taXNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0byBvYnNlcnZlIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBnaXZlblxuICogcHJvbWlzZSwgdGFrZXMgbm8gYXJndW1lbnRzLlxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgZ2l2ZW4gcHJvbWlzZSB3aGVuXG4gKiBgYGZpbmBgIGlzIGRvbmUuXG4gKi9cblEuZmluID0gLy8gWFhYIGxlZ2FjeVxuUVtcImZpbmFsbHlcIl0gPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiBRKG9iamVjdClbXCJmaW5hbGx5XCJdKGNhbGxiYWNrKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmZpbiA9IC8vIFhYWCBsZWdhY3lcblByb21pc2UucHJvdG90eXBlW1wiZmluYWxseVwiXSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gUShjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmZjYWxsKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgLy8gVE9ETyBhdHRlbXB0IHRvIHJlY3ljbGUgdGhlIHJlamVjdGlvbiB3aXRoIFwidGhpc1wiLlxuICAgICAgICByZXR1cm4gY2FsbGJhY2suZmNhbGwoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFRlcm1pbmF0ZXMgYSBjaGFpbiBvZiBwcm9taXNlcywgZm9yY2luZyByZWplY3Rpb25zIHRvIGJlXG4gKiB0aHJvd24gYXMgZXhjZXB0aW9ucy5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZSBhdCB0aGUgZW5kIG9mIGEgY2hhaW4gb2YgcHJvbWlzZXNcbiAqIEByZXR1cm5zIG5vdGhpbmdcbiAqL1xuUS5kb25lID0gZnVuY3Rpb24gKG9iamVjdCwgZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRvbmUoZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uIChmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzcykge1xuICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIC8vIGZvcndhcmQgdG8gYSBmdXR1cmUgdHVybiBzbyB0aGF0IGBgd2hlbmBgXG4gICAgICAgIC8vIGRvZXMgbm90IGNhdGNoIGl0IGFuZCB0dXJuIGl0IGludG8gYSByZWplY3Rpb24uXG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1ha2VTdGFja1RyYWNlTG9uZyhlcnJvciwgcHJvbWlzZSk7XG4gICAgICAgICAgICBpZiAoUS5vbmVycm9yKSB7XG4gICAgICAgICAgICAgICAgUS5vbmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBgbmV4dFRpY2tgaW5nIHZpYSBhbiB1bm5lY2Vzc2FyeSBgd2hlbmAuXG4gICAgdmFyIHByb21pc2UgPSBmdWxmaWxsZWQgfHwgcmVqZWN0ZWQgfHwgcHJvZ3Jlc3MgP1xuICAgICAgICB0aGlzLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIDpcbiAgICAgICAgdGhpcztcblxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzICYmIHByb2Nlc3MuZG9tYWluKSB7XG4gICAgICAgIG9uVW5oYW5kbGVkRXJyb3IgPSBwcm9jZXNzLmRvbWFpbi5iaW5kKG9uVW5oYW5kbGVkRXJyb3IpO1xuICAgIH1cblxuICAgIHByb21pc2UudGhlbih2b2lkIDAsIG9uVW5oYW5kbGVkRXJyb3IpO1xufTtcblxuLyoqXG4gKiBDYXVzZXMgYSBwcm9taXNlIHRvIGJlIHJlamVjdGVkIGlmIGl0IGRvZXMgbm90IGdldCBmdWxmaWxsZWQgYmVmb3JlXG4gKiBzb21lIG1pbGxpc2Vjb25kcyB0aW1lIG91dC5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZVxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbGxpc2Vjb25kcyB0aW1lb3V0XG4gKiBAcGFyYW0ge1N0cmluZ30gY3VzdG9tIGVycm9yIG1lc3NhZ2UgKG9wdGlvbmFsKVxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgZ2l2ZW4gcHJvbWlzZSBpZiBpdCBpc1xuICogZnVsZmlsbGVkIGJlZm9yZSB0aGUgdGltZW91dCwgb3RoZXJ3aXNlIHJlamVjdGVkLlxuICovXG5RLnRpbWVvdXQgPSBmdW5jdGlvbiAob2JqZWN0LCBtcywgbWVzc2FnZSkge1xuICAgIHJldHVybiBRKG9iamVjdCkudGltZW91dChtcywgbWVzc2FnZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gKG1zLCBtZXNzYWdlKSB7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICB2YXIgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChuZXcgRXJyb3IobWVzc2FnZSB8fCBcIlRpbWVkIG91dCBhZnRlciBcIiArIG1zICsgXCIgbXNcIikpO1xuICAgIH0sIG1zKTtcblxuICAgIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUodmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChleGNlcHRpb24pIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChleGNlcHRpb24pO1xuICAgIH0sIGRlZmVycmVkLm5vdGlmeSk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSBnaXZlbiB2YWx1ZSAob3IgcHJvbWlzZWQgdmFsdWUpLCBzb21lXG4gKiBtaWxsaXNlY29uZHMgYWZ0ZXIgaXQgcmVzb2x2ZWQuIFBhc3NlcyByZWplY3Rpb25zIGltbWVkaWF0ZWx5LlxuICogQHBhcmFtIHtBbnkqfSBwcm9taXNlXG4gKiBAcGFyYW0ge051bWJlcn0gbWlsbGlzZWNvbmRzXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBnaXZlbiBwcm9taXNlIGFmdGVyIG1pbGxpc2Vjb25kc1xuICogdGltZSBoYXMgZWxhcHNlZCBzaW5jZSB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgZ2l2ZW4gcHJvbWlzZS5cbiAqIElmIHRoZSBnaXZlbiBwcm9taXNlIHJlamVjdHMsIHRoYXQgaXMgcGFzc2VkIGltbWVkaWF0ZWx5LlxuICovXG5RLmRlbGF5ID0gZnVuY3Rpb24gKG9iamVjdCwgdGltZW91dCkge1xuICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgdGltZW91dCA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gUShvYmplY3QpLmRlbGF5KHRpbWVvdXQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogUGFzc2VzIGEgY29udGludWF0aW9uIHRvIGEgTm9kZSBmdW5jdGlvbiwgd2hpY2ggaXMgY2FsbGVkIHdpdGggdGhlIGdpdmVuXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgYXMgYW4gYXJyYXksIGFuZCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqXG4gKiAgICAgIFEubmZhcHBseShGUy5yZWFkRmlsZSwgW19fZmlsZW5hbWVdKVxuICogICAgICAudGhlbihmdW5jdGlvbiAoY29udGVudCkge1xuICogICAgICB9KVxuICpcbiAqL1xuUS5uZmFwcGx5ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBhcmdzKSB7XG4gICAgcmV0dXJuIFEoY2FsbGJhY2spLm5mYXBwbHkoYXJncyk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5uZmFwcGx5ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIHZhciBub2RlQXJncyA9IGFycmF5X3NsaWNlKGFyZ3MpO1xuICAgIG5vZGVBcmdzLnB1c2goZGVmZXJyZWQubWFrZU5vZGVSZXNvbHZlcigpKTtcbiAgICB0aGlzLmZhcHBseShub2RlQXJncykuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBQYXNzZXMgYSBjb250aW51YXRpb24gdG8gYSBOb2RlIGZ1bmN0aW9uLCB3aGljaCBpcyBjYWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAqIGFyZ3VtZW50cyBwcm92aWRlZCBpbmRpdmlkdWFsbHksIGFuZCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqIEBleGFtcGxlXG4gKiBRLm5mY2FsbChGUy5yZWFkRmlsZSwgX19maWxlbmFtZSlcbiAqIC50aGVuKGZ1bmN0aW9uIChjb250ZW50KSB7XG4gKiB9KVxuICpcbiAqL1xuUS5uZmNhbGwgPSBmdW5jdGlvbiAoY2FsbGJhY2sgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIFEoY2FsbGJhY2spLm5mYXBwbHkoYXJncyk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5uZmNhbGwgPSBmdW5jdGlvbiAoLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgbm9kZUFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMpO1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgIHRoaXMuZmFwcGx5KG5vZGVBcmdzKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIFdyYXBzIGEgTm9kZUpTIGNvbnRpbnVhdGlvbiBwYXNzaW5nIGZ1bmN0aW9uIGFuZCByZXR1cm5zIGFuIGVxdWl2YWxlbnRcbiAqIHZlcnNpb24gdGhhdCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqIEBleGFtcGxlXG4gKiBRLm5mYmluZChGUy5yZWFkRmlsZSwgX19maWxlbmFtZSkoXCJ1dGYtOFwiKVxuICogLnRoZW4oY29uc29sZS5sb2cpXG4gKiAuZG9uZSgpXG4gKi9cblEubmZiaW5kID1cblEuZGVub2RlaWZ5ID0gZnVuY3Rpb24gKGNhbGxiYWNrIC8qLi4uYXJncyovKSB7XG4gICAgdmFyIGJhc2VBcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbm9kZUFyZ3MgPSBiYXNlQXJncy5jb25jYXQoYXJyYXlfc2xpY2UoYXJndW1lbnRzKSk7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgICAgIG5vZGVBcmdzLnB1c2goZGVmZXJyZWQubWFrZU5vZGVSZXNvbHZlcigpKTtcbiAgICAgICAgUShjYWxsYmFjaykuZmFwcGx5KG5vZGVBcmdzKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH07XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5uZmJpbmQgPVxuUHJvbWlzZS5wcm90b3R5cGUuZGVub2RlaWZ5ID0gZnVuY3Rpb24gKC8qLi4uYXJncyovKSB7XG4gICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICByZXR1cm4gUS5kZW5vZGVpZnkuYXBwbHkodm9pZCAwLCBhcmdzKTtcbn07XG5cblEubmJpbmQgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoaXNwIC8qLi4uYXJncyovKSB7XG4gICAgdmFyIGJhc2VBcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbm9kZUFyZ3MgPSBiYXNlQXJncy5jb25jYXQoYXJyYXlfc2xpY2UoYXJndW1lbnRzKSk7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgICAgIG5vZGVBcmdzLnB1c2goZGVmZXJyZWQubWFrZU5vZGVSZXNvbHZlcigpKTtcbiAgICAgICAgZnVuY3Rpb24gYm91bmQoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpc3AsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgUShib3VuZCkuZmFwcGx5KG5vZGVBcmdzKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH07XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5uYmluZCA9IGZ1bmN0aW9uICgvKnRoaXNwLCAuLi5hcmdzKi8pIHtcbiAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMCk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIHJldHVybiBRLm5iaW5kLmFwcGx5KHZvaWQgMCwgYXJncyk7XG59O1xuXG4vKipcbiAqIENhbGxzIGEgbWV0aG9kIG9mIGEgTm9kZS1zdHlsZSBvYmplY3QgdGhhdCBhY2NlcHRzIGEgTm9kZS1zdHlsZVxuICogY2FsbGJhY2sgd2l0aCBhIGdpdmVuIGFycmF5IG9mIGFyZ3VtZW50cywgcGx1cyBhIHByb3ZpZGVkIGNhbGxiYWNrLlxuICogQHBhcmFtIG9iamVjdCBhbiBvYmplY3QgdGhhdCBoYXMgdGhlIG5hbWVkIG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbWV0aG9kIG9mIG9iamVjdFxuICogQHBhcmFtIHtBcnJheX0gYXJncyBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgbWV0aG9kOyB0aGUgY2FsbGJhY2tcbiAqIHdpbGwgYmUgcHJvdmlkZWQgYnkgUSBhbmQgYXBwZW5kZWQgdG8gdGhlc2UgYXJndW1lbnRzLlxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgdmFsdWUgb3IgZXJyb3JcbiAqL1xuUS5ubWFwcGx5ID0gLy8gWFhYIEFzIHByb3Bvc2VkIGJ5IFwiUmVkc2FuZHJvXCJcblEubnBvc3QgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBhcmdzKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5ucG9zdChuYW1lLCBhcmdzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5tYXBwbHkgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUHJvbWlzZS5wcm90b3R5cGUubnBvc3QgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgIHZhciBub2RlQXJncyA9IGFycmF5X3NsaWNlKGFyZ3MgfHwgW10pO1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgIHRoaXMuZGlzcGF0Y2goXCJwb3N0XCIsIFtuYW1lLCBub2RlQXJnc10pLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogQ2FsbHMgYSBtZXRob2Qgb2YgYSBOb2RlLXN0eWxlIG9iamVjdCB0aGF0IGFjY2VwdHMgYSBOb2RlLXN0eWxlXG4gKiBjYWxsYmFjaywgZm9yd2FyZGluZyB0aGUgZ2l2ZW4gdmFyaWFkaWMgYXJndW1lbnRzLCBwbHVzIGEgcHJvdmlkZWRcbiAqIGNhbGxiYWNrIGFyZ3VtZW50LlxuICogQHBhcmFtIG9iamVjdCBhbiBvYmplY3QgdGhhdCBoYXMgdGhlIG5hbWVkIG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbWV0aG9kIG9mIG9iamVjdFxuICogQHBhcmFtIC4uLmFyZ3MgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIG1ldGhvZDsgdGhlIGNhbGxiYWNrIHdpbGxcbiAqIGJlIHByb3ZpZGVkIGJ5IFEgYW5kIGFwcGVuZGVkIHRvIHRoZXNlIGFyZ3VtZW50cy5cbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9yIGVycm9yXG4gKi9cblEubnNlbmQgPSAvLyBYWFggQmFzZWQgb24gTWFyayBNaWxsZXIncyBwcm9wb3NlZCBcInNlbmRcIlxuUS5ubWNhbGwgPSAvLyBYWFggQmFzZWQgb24gXCJSZWRzYW5kcm8nc1wiIHByb3Bvc2FsXG5RLm5pbnZva2UgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lIC8qLi4uYXJncyovKSB7XG4gICAgdmFyIG5vZGVBcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIG5vZGVBcmdzLnB1c2goZGVmZXJyZWQubWFrZU5vZGVSZXNvbHZlcigpKTtcbiAgICBRKG9iamVjdCkuZGlzcGF0Y2goXCJwb3N0XCIsIFtuYW1lLCBub2RlQXJnc10pLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5zZW5kID0gLy8gWFhYIEJhc2VkIG9uIE1hcmsgTWlsbGVyJ3MgcHJvcG9zZWQgXCJzZW5kXCJcblByb21pc2UucHJvdG90eXBlLm5tY2FsbCA9IC8vIFhYWCBCYXNlZCBvbiBcIlJlZHNhbmRybydzXCIgcHJvcG9zYWxcblByb21pc2UucHJvdG90eXBlLm5pbnZva2UgPSBmdW5jdGlvbiAobmFtZSAvKi4uLmFyZ3MqLykge1xuICAgIHZhciBub2RlQXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgdGhpcy5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIG5vZGVBcmdzXSkuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBJZiBhIGZ1bmN0aW9uIHdvdWxkIGxpa2UgdG8gc3VwcG9ydCBib3RoIE5vZGUgY29udGludWF0aW9uLXBhc3Npbmctc3R5bGUgYW5kXG4gKiBwcm9taXNlLXJldHVybmluZy1zdHlsZSwgaXQgY2FuIGVuZCBpdHMgaW50ZXJuYWwgcHJvbWlzZSBjaGFpbiB3aXRoXG4gKiBgbm9kZWlmeShub2RlYmFjaylgLCBmb3J3YXJkaW5nIHRoZSBvcHRpb25hbCBub2RlYmFjayBhcmd1bWVudC4gIElmIHRoZSB1c2VyXG4gKiBlbGVjdHMgdG8gdXNlIGEgbm9kZWJhY2ssIHRoZSByZXN1bHQgd2lsbCBiZSBzZW50IHRoZXJlLiAgSWYgdGhleSBkbyBub3RcbiAqIHBhc3MgYSBub2RlYmFjaywgdGhleSB3aWxsIHJlY2VpdmUgdGhlIHJlc3VsdCBwcm9taXNlLlxuICogQHBhcmFtIG9iamVjdCBhIHJlc3VsdCAob3IgYSBwcm9taXNlIGZvciBhIHJlc3VsdClcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG5vZGViYWNrIGEgTm9kZS5qcy1zdHlsZSBjYWxsYmFja1xuICogQHJldHVybnMgZWl0aGVyIHRoZSBwcm9taXNlIG9yIG5vdGhpbmdcbiAqL1xuUS5ub2RlaWZ5ID0gbm9kZWlmeTtcbmZ1bmN0aW9uIG5vZGVpZnkob2JqZWN0LCBub2RlYmFjaykge1xuICAgIHJldHVybiBRKG9iamVjdCkubm9kZWlmeShub2RlYmFjayk7XG59XG5cblByb21pc2UucHJvdG90eXBlLm5vZGVpZnkgPSBmdW5jdGlvbiAobm9kZWJhY2spIHtcbiAgICBpZiAobm9kZWJhY2spIHtcbiAgICAgICAgdGhpcy50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG5vZGViYWNrKG51bGwsIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBub2RlYmFjayhlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRO1xuXG4vLyBBbGwgY29kZSBiZWZvcmUgdGhpcyBwb2ludCB3aWxsIGJlIGZpbHRlcmVkIGZyb20gc3RhY2sgdHJhY2VzLlxudmFyIHFFbmRpbmdMaW5lID0gY2FwdHVyZUxpbmUoKTtcbiIsInZhciBnbG9iYWw9dHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9Oy8qKlxuICogQGxpY2Vuc2VcbiAqIExvLURhc2ggMi40LjEgKEN1c3RvbSBCdWlsZCkgPGh0dHA6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIC1vIC4vZGlzdC9sb2Rhc2guY29tcGF0LmpzYFxuICogQ29weXJpZ2h0IDIwMTItMjAxMyBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS41LjIgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHA6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlIEVTNSBlbnZpcm9ubWVudHMgKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCB0byBwb29sIGFycmF5cyBhbmQgb2JqZWN0cyB1c2VkIGludGVybmFsbHkgKi9cbiAgdmFyIGFycmF5UG9vbCA9IFtdLFxuICAgICAgb2JqZWN0UG9vbCA9IFtdO1xuXG4gIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMgKi9cbiAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSB0byBpbmRpY2F0ZSB2YXJpb3VzIHRoaW5ncyAqL1xuICB2YXIgaW5kaWNhdG9yT2JqZWN0ID0ge307XG5cbiAgLyoqIFVzZWQgdG8gcHJlZml4IGtleXMgdG8gYXZvaWQgaXNzdWVzIHdpdGggYF9fcHJvdG9fX2AgYW5kIHByb3BlcnRpZXMgb24gYE9iamVjdC5wcm90b3R5cGVgICovXG4gIHZhciBrZXlQcmVmaXggPSArbmV3IERhdGUgKyAnJztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB3aGVuIG9wdGltaXphdGlvbnMgYXJlIGVuYWJsZWQgZm9yIGxhcmdlIGFycmF5cyAqL1xuICB2YXIgbGFyZ2VBcnJheVNpemUgPSA3NTtcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4IHNpemUgb2YgdGhlIGBhcnJheVBvb2xgIGFuZCBgb2JqZWN0UG9vbGAgKi9cbiAgdmFyIG1heFBvb2xTaXplID0gNDA7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGFuZCB0ZXN0IHdoaXRlc3BhY2UgKi9cbiAgdmFyIHdoaXRlc3BhY2UgPSAoXG4gICAgLy8gd2hpdGVzcGFjZVxuICAgICcgXFx0XFx4MEJcXGZcXHhBMFxcdWZlZmYnICtcblxuICAgICAgLy8gbGluZSB0ZXJtaW5hdG9yc1xuICAgICdcXG5cXHJcXHUyMDI4XFx1MjAyOScgK1xuXG4gICAgICAvLyB1bmljb2RlIGNhdGVnb3J5IFwiWnNcIiBzcGFjZSBzZXBhcmF0b3JzXG4gICAgJ1xcdTE2ODBcXHUxODBlXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMGFcXHUyMDJmXFx1MjA1ZlxcdTMwMDAnXG4gICk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZSAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIEVTNiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXG4gICAqIGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWxpdGVyYWxzLXN0cmluZy1saXRlcmFsc1xuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCByZWdleHAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMgKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdGVkIG5hbWVkIGZ1bmN0aW9ucyAqL1xuICB2YXIgcmVGdW5jTmFtZSA9IC9eXFxzKmZ1bmN0aW9uWyBcXG5cXHJcXHRdK1xcdy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggXCJpbnRlcnBvbGF0ZVwiIHRlbXBsYXRlIGRlbGltaXRlcnMgKi9cbiAgdmFyIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UgYW5kIHplcm9zIHRvIGJlIHJlbW92ZWQgKi9cbiAgdmFyIHJlTGVhZGluZ1NwYWNlc0FuZFplcm9zID0gUmVnRXhwKCdeWycgKyB3aGl0ZXNwYWNlICsgJ10qMCsoPz0uJCknKTtcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMgKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgZnVuY3Rpb25zIGNvbnRhaW5pbmcgYSBgdGhpc2AgcmVmZXJlbmNlICovXG4gIHZhciByZVRoaXMgPSAvXFxidGhpc1xcYi87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdFxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMgKi9cbiAgdmFyIGNvbnRleHRQcm9wcyA9IFtcbiAgICAnQXJyYXknLCAnQm9vbGVhbicsICdEYXRlJywgJ0Vycm9yJywgJ0Z1bmN0aW9uJywgJ01hdGgnLCAnTnVtYmVyJywgJ09iamVjdCcsXG4gICAgJ1JlZ0V4cCcsICdTdHJpbmcnLCAnXycsICdhdHRhY2hFdmVudCcsICdjbGVhclRpbWVvdXQnLCAnaXNGaW5pdGUnLCAnaXNOYU4nLFxuICAgICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIGZpeCB0aGUgSlNjcmlwdCBbW0RvbnRFbnVtXV0gYnVnICovXG4gIHZhciBzaGFkb3dlZFByb3BzID0gW1xuICAgICdjb25zdHJ1Y3RvcicsICdoYXNPd25Qcm9wZXJ0eScsICdpc1Byb3RvdHlwZU9mJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgICAndG9Mb2NhbGVTdHJpbmcnLCAndG9TdHJpbmcnLCAndmFsdWVPZidcbiAgXTtcblxuICAvKiogVXNlZCB0byBtYWtlIHRlbXBsYXRlIHNvdXJjZVVSTHMgZWFzaWVyIHRvIGlkZW50aWZ5ICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAwO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgc2hvcnRjdXRzICovXG4gIHZhciBhcmdzQ2xhc3MgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5Q2xhc3MgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYm9vbENsYXNzID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZUNsYXNzID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZXJyb3JDbGFzcyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jQ2xhc3MgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgbnVtYmVyQ2xhc3MgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG9iamVjdENsYXNzID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICByZWdleHBDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc3RyaW5nQ2xhc3MgPSAnW29iamVjdCBTdHJpbmddJztcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBvYmplY3QgY2xhc3NpZmljYXRpb25zIHRoYXQgYF8uY2xvbmVgIHN1cHBvcnRzICovXG4gIHZhciBjbG9uZWFibGVDbGFzc2VzID0ge307XG4gIGNsb25lYWJsZUNsYXNzZXNbZnVuY0NsYXNzXSA9IGZhbHNlO1xuICBjbG9uZWFibGVDbGFzc2VzW2FyZ3NDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW2FycmF5Q2xhc3NdID1cbiAgICBjbG9uZWFibGVDbGFzc2VzW2Jvb2xDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW2RhdGVDbGFzc10gPVxuICAgICAgY2xvbmVhYmxlQ2xhc3Nlc1tudW1iZXJDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW29iamVjdENsYXNzXSA9XG4gICAgICAgIGNsb25lYWJsZUNsYXNzZXNbcmVnZXhwQ2xhc3NdID0gY2xvbmVhYmxlQ2xhc3Nlc1tzdHJpbmdDbGFzc10gPSB0cnVlO1xuXG4gIC8qKiBVc2VkIGFzIGFuIGludGVybmFsIGBfLmRlYm91bmNlYCBvcHRpb25zIG9iamVjdCAqL1xuICB2YXIgZGVib3VuY2VPcHRpb25zID0ge1xuICAgICdsZWFkaW5nJzogZmFsc2UsXG4gICAgJ21heFdhaXQnOiAwLFxuICAgICd0cmFpbGluZyc6IGZhbHNlXG4gIH07XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIGBfX2JpbmREYXRhX19gICovXG4gIHZhciBkZXNjcmlwdG9yID0ge1xuICAgICdjb25maWd1cmFibGUnOiBmYWxzZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IG51bGwsXG4gICAgJ3dyaXRhYmxlJzogZmFsc2VcbiAgfTtcblxuICAvKiogVXNlZCBhcyB0aGUgZGF0YSBvYmplY3QgZm9yIGBpdGVyYXRvclRlbXBsYXRlYCAqL1xuICB2YXIgaXRlcmF0b3JEYXRhID0ge1xuICAgICdhcmdzJzogJycsXG4gICAgJ2FycmF5JzogbnVsbCxcbiAgICAnYm90dG9tJzogJycsXG4gICAgJ2ZpcnN0QXJnJzogJycsXG4gICAgJ2luaXQnOiAnJyxcbiAgICAna2V5cyc6IG51bGwsXG4gICAgJ2xvb3AnOiAnJyxcbiAgICAnc2hhZG93ZWRQcm9wcyc6IG51bGwsXG4gICAgJ3N1cHBvcnQnOiBudWxsLFxuICAgICd0b3AnOiAnJyxcbiAgICAndXNlSGFzJzogZmFsc2VcbiAgfTtcblxuICAvKiogVXNlZCB0byBkZXRlcm1pbmUgaWYgdmFsdWVzIGFyZSBvZiB0aGUgbGFuZ3VhZ2UgdHlwZSBPYmplY3QgKi9cbiAgdmFyIG9iamVjdFR5cGVzID0ge1xuICAgICdib29sZWFuJzogZmFsc2UsXG4gICAgJ2Z1bmN0aW9uJzogdHJ1ZSxcbiAgICAnb2JqZWN0JzogdHJ1ZSxcbiAgICAnbnVtYmVyJzogZmFsc2UsXG4gICAgJ3N0cmluZyc6IGZhbHNlLFxuICAgICd1bmRlZmluZWQnOiBmYWxzZVxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzICovXG4gIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcdCc6ICd0JyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKi9cbiAgdmFyIHJvb3QgPSAob2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93KSB8fCB0aGlzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AgKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gb2JqZWN0VHlwZXNbdHlwZW9mIGV4cG9ydHNdICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAgKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYCAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cyAmJiBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlIGFuZCB1c2UgaXQgYXMgYHJvb3RgICovXG4gIHZhciBmcmVlR2xvYmFsID0gb2JqZWN0VHlwZXNbdHlwZW9mIGdsb2JhbF0gJiYgZ2xvYmFsO1xuICBpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpKSB7XG4gICAgcm9vdCA9IGZyZWVHbG9iYWw7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBiaW5hcnkgc2VhcmNoZXNcbiAgICogb3IgYGZyb21JbmRleGAgY29uc3RyYWludHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUgb3IgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gKGZyb21JbmRleCB8fCAwKSAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb250YWluc2AgZm9yIGNhY2hlIG9iamVjdHMgdGhhdCBtaW1pY3MgdGhlIHJldHVyblxuICAgKiBzaWduYXR1cmUgb2YgYF8uaW5kZXhPZmAgYnkgcmV0dXJuaW5nIGAwYCBpZiB0aGUgdmFsdWUgaXMgZm91bmQsIGVsc2UgYC0xYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgMGAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIGNhY2hlID0gY2FjaGUuY2FjaGU7XG5cbiAgICBpZiAodHlwZSA9PSAnYm9vbGVhbicgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlW3ZhbHVlXSA/IDAgOiAtMTtcbiAgICB9XG4gICAgaWYgKHR5cGUgIT0gJ251bWJlcicgJiYgdHlwZSAhPSAnc3RyaW5nJykge1xuICAgICAgdHlwZSA9ICdvYmplY3QnO1xuICAgIH1cbiAgICB2YXIga2V5ID0gdHlwZSA9PSAnbnVtYmVyJyA/IHZhbHVlIDoga2V5UHJlZml4ICsgdmFsdWU7XG4gICAgY2FjaGUgPSAoY2FjaGUgPSBjYWNoZVt0eXBlXSkgJiYgY2FjaGVba2V5XTtcblxuICAgIHJldHVybiB0eXBlID09ICdvYmplY3QnXG4gICAgICA/IChjYWNoZSAmJiBiYXNlSW5kZXhPZihjYWNoZSwgdmFsdWUpID4gLTEgPyAwIDogLTEpXG4gICAgICA6IChjYWNoZSA/IDAgOiAtMSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGdpdmVuIHZhbHVlIHRvIHRoZSBjb3JyZXNwb25kaW5nIGNhY2hlIG9iamVjdC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYWRkIHRvIHRoZSBjYWNoZS5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlUHVzaCh2YWx1ZSkge1xuICAgIHZhciBjYWNoZSA9IHRoaXMuY2FjaGUsXG4gICAgICAgIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PSAnYm9vbGVhbicgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgY2FjaGVbdmFsdWVdID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGUgIT0gJ251bWJlcicgJiYgdHlwZSAhPSAnc3RyaW5nJykge1xuICAgICAgICB0eXBlID0gJ29iamVjdCc7XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdHlwZSA9PSAnbnVtYmVyJyA/IHZhbHVlIDoga2V5UHJlZml4ICsgdmFsdWUsXG4gICAgICAgICAgdHlwZUNhY2hlID0gY2FjaGVbdHlwZV0gfHwgKGNhY2hlW3R5cGVdID0ge30pO1xuXG4gICAgICBpZiAodHlwZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAodHlwZUNhY2hlW2tleV0gfHwgKHR5cGVDYWNoZVtrZXldID0gW10pKS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGVDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5tYXhgIGFuZCBgXy5taW5gIGFzIHRoZSBkZWZhdWx0IGNhbGxiYWNrIHdoZW4gYSBnaXZlblxuICAgKiBjb2xsZWN0aW9uIGlzIGEgc3RyaW5nIHZhbHVlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIGNoYXJhY3RlciB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2RlIHVuaXQgb2YgZ2l2ZW4gY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhckF0Q2FsbGJhY2sodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBzb3J0QnlgIHRvIGNvbXBhcmUgdHJhbnNmb3JtZWQgYGNvbGxlY3Rpb25gIGVsZW1lbnRzLCBzdGFibGUgc29ydGluZ1xuICAgKiB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBjb21wYXJlIHRvIGBiYC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb21wYXJlIHRvIGBhYC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3Igb2YgYDFgIG9yIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKGEsIGIpIHtcbiAgICB2YXIgYWMgPSBhLmNyaXRlcmlhLFxuICAgICAgICBiYyA9IGIuY3JpdGVyaWEsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFjLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhY1tpbmRleF0sXG4gICAgICAgICAgb3RoZXIgPSBiY1tpbmRleF07XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgaWYgKHZhbHVlID4gb3RoZXIgfHwgdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIDwgb3RoZXIgfHwgdHlwZW9mIG90aGVyID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byByZXR1cm4gdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgLy8gYGFgIGFuZCBgYmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgLy9cbiAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgIC8vIFNlZSBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MFxuICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY2FjaGUgb2JqZWN0IHRvIG9wdGltaXplIGxpbmVhciBzZWFyY2hlcyBvZiBsYXJnZSBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICogQHJldHVybnMge251bGx8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBvYmplY3Qgb3IgYG51bGxgIGlmIGNhY2hpbmcgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQ2FjaGUoYXJyYXkpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBmaXJzdCA9IGFycmF5WzBdLFxuICAgICAgICBtaWQgPSBhcnJheVsobGVuZ3RoIC8gMikgfCAwXSxcbiAgICAgICAgbGFzdCA9IGFycmF5W2xlbmd0aCAtIDFdO1xuXG4gICAgaWYgKGZpcnN0ICYmIHR5cGVvZiBmaXJzdCA9PSAnb2JqZWN0JyAmJlxuICAgICAgbWlkICYmIHR5cGVvZiBtaWQgPT0gJ29iamVjdCcgJiYgbGFzdCAmJiB0eXBlb2YgbGFzdCA9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2FjaGUgPSBnZXRPYmplY3QoKTtcbiAgICBjYWNoZVsnZmFsc2UnXSA9IGNhY2hlWydudWxsJ10gPSBjYWNoZVsndHJ1ZSddID0gY2FjaGVbJ3VuZGVmaW5lZCddID0gZmFsc2U7XG5cbiAgICB2YXIgcmVzdWx0ID0gZ2V0T2JqZWN0KCk7XG4gICAgcmVzdWx0LmFycmF5ID0gYXJyYXk7XG4gICAgcmVzdWx0LmNhY2hlID0gY2FjaGU7XG4gICAgcmVzdWx0LnB1c2ggPSBjYWNoZVB1c2g7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaW5kZXhdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGB0ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZFxuICAgKiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaCBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIobWF0Y2gpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1ttYXRjaF07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBhcnJheSBmcm9tIHRoZSBhcnJheSBwb29sIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGlmIHRoZSBwb29sIGlzIGVtcHR5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBmcm9tIHRoZSBwb29sLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QXJyYXkoKSB7XG4gICAgcmV0dXJuIGFycmF5UG9vbC5wb3AoKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIG9iamVjdCBmcm9tIHRoZSBvYmplY3QgcG9vbCBvciBjcmVhdGVzIGEgbmV3IG9uZSBpZiB0aGUgcG9vbCBpcyBlbXB0eS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIG9iamVjdCBmcm9tIHRoZSBwb29sLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0T2JqZWN0KCkge1xuICAgIHJldHVybiBvYmplY3RQb29sLnBvcCgpIHx8IHtcbiAgICAgICAgJ2FycmF5JzogbnVsbCxcbiAgICAgICAgJ2NhY2hlJzogbnVsbCxcbiAgICAgICAgJ2NyaXRlcmlhJzogbnVsbCxcbiAgICAgICAgJ2ZhbHNlJzogZmFsc2UsXG4gICAgICAgICdpbmRleCc6IDAsXG4gICAgICAgICdudWxsJzogZmFsc2UsXG4gICAgICAgICdudW1iZXInOiBudWxsLFxuICAgICAgICAnb2JqZWN0JzogbnVsbCxcbiAgICAgICAgJ3B1c2gnOiBudWxsLFxuICAgICAgICAnc3RyaW5nJzogbnVsbCxcbiAgICAgICAgJ3RydWUnOiBmYWxzZSxcbiAgICAgICAgJ3VuZGVmaW5lZCc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBudWxsXG4gICAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgRE9NIG5vZGUgaW4gSUUgPCA5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgRE9NIG5vZGUsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzTm9kZSh2YWx1ZSkge1xuICAgIC8vIElFIDwgOSBwcmVzZW50cyBET00gbm9kZXMgYXMgYE9iamVjdGAgb2JqZWN0cyBleGNlcHQgdGhleSBoYXZlIGB0b1N0cmluZ2BcbiAgICAvLyBtZXRob2RzIHRoYXQgYXJlIGB0eXBlb2ZgIFwic3RyaW5nXCIgYW5kIHN0aWxsIGNhbiBjb2VyY2Ugbm9kZXMgdG8gc3RyaW5nc1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgKHZhbHVlICsgJycpID09ICdzdHJpbmcnO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHRoZSBnaXZlbiBhcnJheSBiYWNrIHRvIHRoZSBhcnJheSBwb29sLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byByZWxlYXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVsZWFzZUFycmF5KGFycmF5KSB7XG4gICAgYXJyYXkubGVuZ3RoID0gMDtcbiAgICBpZiAoYXJyYXlQb29sLmxlbmd0aCA8IG1heFBvb2xTaXplKSB7XG4gICAgICBhcnJheVBvb2wucHVzaChhcnJheSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHRoZSBnaXZlbiBvYmplY3QgYmFjayB0byB0aGUgb2JqZWN0IHBvb2wuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHJlbGVhc2UuXG4gICAqL1xuICBmdW5jdGlvbiByZWxlYXNlT2JqZWN0KG9iamVjdCkge1xuICAgIHZhciBjYWNoZSA9IG9iamVjdC5jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHJlbGVhc2VPYmplY3QoY2FjaGUpO1xuICAgIH1cbiAgICBvYmplY3QuYXJyYXkgPSBvYmplY3QuY2FjaGUgPSBvYmplY3QuY3JpdGVyaWEgPSBvYmplY3Qub2JqZWN0ID0gb2JqZWN0Lm51bWJlciA9IG9iamVjdC5zdHJpbmcgPSBvYmplY3QudmFsdWUgPSBudWxsO1xuICAgIGlmIChvYmplY3RQb29sLmxlbmd0aCA8IG1heFBvb2xTaXplKSB7XG4gICAgICBvYmplY3RQb29sLnB1c2gob2JqZWN0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2xpY2VzIHRoZSBgY29sbGVjdGlvbmAgZnJvbSB0aGUgYHN0YXJ0YCBpbmRleCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsXG4gICAqIHRoZSBgZW5kYCBpbmRleC5cbiAgICpcbiAgICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGluc3RlYWQgb2YgYEFycmF5I3NsaWNlYCB0byBzdXBwb3J0IG5vZGUgbGlzdHNcbiAgICogaW4gSUUgPCA5IGFuZCB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZSByZXR1cm5lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNsaWNlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IGluZGV4LlxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgaW5kZXguXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICBzdGFydCB8fCAoc3RhcnQgPSAwKTtcbiAgICBpZiAodHlwZW9mIGVuZCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQgfHwgMCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoIDwgMCA/IDAgOiBsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGdpdmVuIGNvbnRleHQgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgLy8gQXZvaWQgaXNzdWVzIHdpdGggc29tZSBFUzMgZW52aXJvbm1lbnRzIHRoYXQgYXR0ZW1wdCB0byB1c2UgdmFsdWVzLCBuYW1lZFxuICAgIC8vIGFmdGVyIGJ1aWx0LWluIGNvbnN0cnVjdG9ycyBsaWtlIGBPYmplY3RgLCBmb3IgdGhlIGNyZWF0aW9uIG9mIGxpdGVyYWxzLlxuICAgIC8vIEVTNSBjbGVhcnMgdGhpcyB1cCBieSBzdGF0aW5nIHRoYXQgbGl0ZXJhbHMgbXVzdCB1c2UgYnVpbHQtaW4gY29uc3RydWN0b3JzLlxuICAgIC8vIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDExLjEuNS5cbiAgICBjb250ZXh0ID0gY29udGV4dCA/IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpIDogcm9vdDtcblxuICAgIC8qKiBOYXRpdmUgY29uc3RydWN0b3IgcmVmZXJlbmNlcyAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIEJvb2xlYW4gPSBjb250ZXh0LkJvb2xlYW4sXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBOdW1iZXIgPSBjb250ZXh0Lk51bWJlcixcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBgQXJyYXlgIG1ldGhvZCByZWZlcmVuY2VzLlxuICAgICAqXG4gICAgICogTm9ybWFsbHkgYEFycmF5LnByb3RvdHlwZWAgd291bGQgc3VmZmljZSwgaG93ZXZlciwgdXNpbmcgYW4gYXJyYXkgbGl0ZXJhbFxuICAgICAqIGF2b2lkcyBpc3N1ZXMgaW4gTmFyd2hhbC5cbiAgICAgKi9cbiAgICB2YXIgYXJyYXlSZWYgPSBbXTtcblxuICAgIC8qKiBVc2VkIGZvciBuYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMgKi9cbiAgICB2YXIgZXJyb3JQcm90byA9IEVycm9yLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgICBzdHJpbmdQcm90byA9IFN0cmluZy5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBub0NvbmZsaWN0YCAqL1xuICAgIHZhciBvbGREYXNoID0gY29udGV4dC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgaW50ZXJuYWwgW1tDbGFzc11dIG9mIHZhbHVlcyAqL1xuICAgIHZhciB0b1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZSAqL1xuICAgIHZhciByZU5hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgU3RyaW5nKHRvU3RyaW5nKVxuICAgICAgICAucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKVxuICAgICAgICAucmVwbGFjZSgvdG9TdHJpbmd8IGZvciBbXlxcXV0rL2csICcuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogTmF0aXZlIG1ldGhvZCBzaG9ydGN1dHMgKi9cbiAgICB2YXIgY2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgY2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgZm5Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyxcbiAgICAgICAgZ2V0UHJvdG90eXBlT2YgPSBpc05hdGl2ZShnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZikgJiYgZ2V0UHJvdG90eXBlT2YsXG4gICAgICAgIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHksXG4gICAgICAgIHB1c2ggPSBhcnJheVJlZi5wdXNoLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0LFxuICAgICAgICBzcGxpY2UgPSBhcnJheVJlZi5zcGxpY2UsXG4gICAgICAgIHVuc2hpZnQgPSBhcnJheVJlZi51bnNoaWZ0O1xuXG4gICAgLyoqIFVzZWQgdG8gc2V0IG1ldGEgZGF0YSBvbiBmdW5jdGlvbnMgKi9cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAvLyBJRSA4IG9ubHkgYWNjZXB0cyBET00gZWxlbWVudHNcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBvID0ge30sXG4gICAgICAgICAgICBmdW5jID0gaXNOYXRpdmUoZnVuYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgJiYgZnVuYyxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMobywgbywgbykgJiYgZnVuYztcbiAgICAgIH0gY2F0Y2goZSkgeyB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0oKSk7XG5cbiAgICAvKiBOYXRpdmUgbWV0aG9kIHNob3J0Y3V0cyBmb3IgbWV0aG9kcyB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcyAqL1xuICAgIHZhciBuYXRpdmVDcmVhdGUgPSBpc05hdGl2ZShuYXRpdmVDcmVhdGUgPSBPYmplY3QuY3JlYXRlKSAmJiBuYXRpdmVDcmVhdGUsXG4gICAgICAgIG5hdGl2ZUlzQXJyYXkgPSBpc05hdGl2ZShuYXRpdmVJc0FycmF5ID0gQXJyYXkuaXNBcnJheSkgJiYgbmF0aXZlSXNBcnJheSxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVJc05hTiA9IGNvbnRleHQuaXNOYU4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBpc05hdGl2ZShuYXRpdmVLZXlzID0gT2JqZWN0LmtleXMpICYmIG5hdGl2ZUtleXMsXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCBhIGJ1aWx0LWluIGNvbnN0cnVjdG9yIGJ5IFtbQ2xhc3NdXSAqL1xuICAgIHZhciBjdG9yQnlDbGFzcyA9IHt9O1xuICAgIGN0b3JCeUNsYXNzW2FycmF5Q2xhc3NdID0gQXJyYXk7XG4gICAgY3RvckJ5Q2xhc3NbYm9vbENsYXNzXSA9IEJvb2xlYW47XG4gICAgY3RvckJ5Q2xhc3NbZGF0ZUNsYXNzXSA9IERhdGU7XG4gICAgY3RvckJ5Q2xhc3NbZnVuY0NsYXNzXSA9IEZ1bmN0aW9uO1xuICAgIGN0b3JCeUNsYXNzW29iamVjdENsYXNzXSA9IE9iamVjdDtcbiAgICBjdG9yQnlDbGFzc1tudW1iZXJDbGFzc10gPSBOdW1iZXI7XG4gICAgY3RvckJ5Q2xhc3NbcmVnZXhwQ2xhc3NdID0gUmVnRXhwO1xuICAgIGN0b3JCeUNsYXNzW3N0cmluZ0NsYXNzXSA9IFN0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGF2b2lkIGl0ZXJhdGluZyBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGluIElFIDwgOSAqL1xuICAgIHZhciBub25FbnVtUHJvcHMgPSB7fTtcbiAgICBub25FbnVtUHJvcHNbYXJyYXlDbGFzc10gPSBub25FbnVtUHJvcHNbZGF0ZUNsYXNzXSA9IG5vbkVudW1Qcm9wc1tudW1iZXJDbGFzc10gPSB7ICdjb25zdHJ1Y3Rvcic6IHRydWUsICd0b0xvY2FsZVN0cmluZyc6IHRydWUsICd0b1N0cmluZyc6IHRydWUsICd2YWx1ZU9mJzogdHJ1ZSB9O1xuICAgIG5vbkVudW1Qcm9wc1tib29sQ2xhc3NdID0gbm9uRW51bVByb3BzW3N0cmluZ0NsYXNzXSA9IHsgJ2NvbnN0cnVjdG9yJzogdHJ1ZSwgJ3RvU3RyaW5nJzogdHJ1ZSwgJ3ZhbHVlT2YnOiB0cnVlIH07XG4gICAgbm9uRW51bVByb3BzW2Vycm9yQ2xhc3NdID0gbm9uRW51bVByb3BzW2Z1bmNDbGFzc10gPSBub25FbnVtUHJvcHNbcmVnZXhwQ2xhc3NdID0geyAnY29uc3RydWN0b3InOiB0cnVlLCAndG9TdHJpbmcnOiB0cnVlIH07XG4gICAgbm9uRW51bVByb3BzW29iamVjdENsYXNzXSA9IHsgJ2NvbnN0cnVjdG9yJzogdHJ1ZSB9O1xuXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxlbmd0aCA9IHNoYWRvd2VkUHJvcHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBzaGFkb3dlZFByb3BzW2xlbmd0aF07XG4gICAgICAgIGZvciAodmFyIGNsYXNzTmFtZSBpbiBub25FbnVtUHJvcHMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChub25FbnVtUHJvcHMsIGNsYXNzTmFtZSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwobm9uRW51bVByb3BzW2NsYXNzTmFtZV0sIGtleSkpIHtcbiAgICAgICAgICAgIG5vbkVudW1Qcm9wc1tjbGFzc05hbWVdW2tleV0gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KCkpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIHRoZSBnaXZlbiB2YWx1ZSB0byBlbmFibGUgaW50dWl0aXZlXG4gICAgICogbWV0aG9kIGNoYWluaW5nLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gTG8tRGFzaCBtZXRob2RzLCB3cmFwcGVycyBhbHNvIGhhdmUgdGhlIGZvbGxvd2luZyBgQXJyYXlgIG1ldGhvZHM6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHJldmVyc2VgLCBgc2hpZnRgLCBgc2xpY2VgLCBgc29ydGAsIGBzcGxpY2VgLFxuICAgICAqIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGB2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBmdW5jdGlvbnMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhc3NpZ25gLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2hhaW5gLCBgY29tcGFjdGAsXG4gICAgICogYGNvbXBvc2VgLCBgY29uY2F0YCwgYGNvdW50QnlgLCBgY3JlYXRlYCwgYGNyZWF0ZUNhbGxiYWNrYCwgYGN1cnJ5YCxcbiAgICAgKiBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmZXJgLCBgZGVsYXlgLCBgZGlmZmVyZW5jZWAsIGBmaWx0ZXJgLCBgZmxhdHRlbmAsXG4gICAgICogYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCwgYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCxcbiAgICAgKiBgZnVuY3Rpb25zYCwgYGdyb3VwQnlgLCBgaW5kZXhCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnZlcnRgLFxuICAgICAqIGBpbnZva2VgLCBga2V5c2AsIGBtYXBgLCBgbWF4YCwgYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWluYCwgYG9iamVjdGAsIGBvbWl0YCxcbiAgICAgKiBgb25jZWAsIGBwYWlyc2AsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwaWNrYCwgYHBsdWNrYCwgYHB1bGxgLCBgcHVzaGAsXG4gICAgICogYHJhbmdlYCwgYHJlamVjdGAsIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNodWZmbGVgLCBgc2xpY2VgLCBgc29ydGAsXG4gICAgICogYHNvcnRCeWAsIGBzcGxpY2VgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRpbWVzYCwgYHRvQXJyYXlgLCBgdHJhbnNmb3JtYCxcbiAgICAgKiBgdW5pb25gLCBgdW5pcWAsIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHZhbHVlc2AsIGB3aGVyZWAsIGB3aXRob3V0YCwgYHdyYXBgLFxuICAgICAqIGFuZCBgemlwYFxuICAgICAqXG4gICAgICogVGhlIG5vbi1jaGFpbmFibGUgd3JhcHBlciBmdW5jdGlvbnMgYXJlOlxuICAgICAqIGBjbG9uZWAsIGBjbG9uZURlZXBgLCBgY29udGFpbnNgLCBgZXNjYXBlYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCxcbiAgICAgKiBgZmluZEtleWAsIGBmaW5kTGFzdGAsIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGhhc2AsIGBpZGVudGl0eWAsXG4gICAgICogYGluZGV4T2ZgLCBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0Jvb2xlYW5gLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsXG4gICAgICogYGlzRW1wdHlgLCBgaXNFcXVhbGAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzTmFOYCwgYGlzTnVsbGAsIGBpc051bWJlcmAsXG4gICAgICogYGlzT2JqZWN0YCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgam9pbmAsXG4gICAgICogYGxhc3RJbmRleE9mYCwgYG1peGluYCwgYG5vQ29uZmxpY3RgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLFxuICAgICAqIGByZWR1Y2VSaWdodGAsIGByZXN1bHRgLCBgc2hpZnRgLCBgc2l6ZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHJ1bkluQ29udGV4dGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYW5kIGB2YWx1ZWBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGZ1bmN0aW9ucyBgZmlyc3RgIGFuZCBgbGFzdGAgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIHdoZW4gYG5gIGlzXG4gICAgICogcHJvdmlkZWQsIG90aGVyd2lzZSB0aGV5IHJldHVybiB1bndyYXBwZWQgdmFsdWVzLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW5pbmcgY2FuIGJlIGVuYWJsZWQgYnkgdXNpbmcgdGhlIGBfLmNoYWluYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IENoYWluaW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyByZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZVxuICAgICAqIHdyYXBwZWQucmVkdWNlKGZ1bmN0aW9uKHN1bSwgbnVtKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbnVtO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIHJldHVybnMgYSB3cmFwcGVkIHZhbHVlXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChmdW5jdGlvbihudW0pIHtcbiAgICAgKiAgIHJldHVybiBudW0gKiBudW07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIC8vIGRvbid0IHdyYXAgaWYgYWxyZWFkeSB3cmFwcGVkLCBldmVuIGlmIHdyYXBwZWQgYnkgYSBkaWZmZXJlbnQgYGxvZGFzaGAgY29uc3RydWN0b3JcbiAgICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmICFpc0FycmF5KHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSlcbiAgICAgICAgPyB2YWx1ZVxuICAgICAgICA6IG5ldyBsb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGZhc3QgcGF0aCBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBjaGFpbkFsbCBBIGZsYWcgdG8gZW5hYmxlIGNoYWluaW5nIGZvciBhbGwgbWV0aG9kc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgIH1cbiAgICAvLyBlbnN1cmUgYG5ldyBsb2Rhc2hXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgbG9kYXNoYFxuICAgIGxvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gbG9kYXNoLnByb3RvdHlwZTtcblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCB1c2VkIHRvIGZsYWcgZW52aXJvbm1lbnRzIGZlYXR1cmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgT2JqZWN0XG4gICAgICovXG4gICAgdmFyIHN1cHBvcnQgPSBsb2Rhc2guc3VwcG9ydCA9IHt9O1xuXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN0b3IgPSBmdW5jdGlvbigpIHsgdGhpcy54ID0gMTsgfSxcbiAgICAgICAgICBvYmplY3QgPSB7ICcwJzogMSwgJ2xlbmd0aCc6IDEgfSxcbiAgICAgICAgICBwcm9wcyA9IFtdO1xuXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IHsgJ3ZhbHVlT2YnOiAxLCAneSc6IDEgfTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBuZXcgY3RvcikgeyBwcm9wcy5wdXNoKGtleSk7IH1cbiAgICAgIGZvciAoa2V5IGluIGFyZ3VtZW50cykgeyB9XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IGlmIGFuIGBhcmd1bWVudHNgIG9iamVjdCdzIFtbQ2xhc3NdXSBpcyByZXNvbHZhYmxlIChhbGwgYnV0IEZpcmVmb3ggPCA0LCBJRSA8IDkpLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC5hcmdzQ2xhc3MgPSB0b1N0cmluZy5jYWxsKGFyZ3VtZW50cykgPT0gYXJnc0NsYXNzO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIChhbGwgYnV0IE5hcndoYWwgYW5kIE9wZXJhIDwgMTAuNSkuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0LmFyZ3NPYmplY3QgPSBhcmd1bWVudHMuY29uc3RydWN0b3IgPT0gT2JqZWN0ICYmICEoYXJndW1lbnRzIGluc3RhbmNlb2YgQXJyYXkpO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBgbmFtZWAgb3IgYG1lc3NhZ2VgIHByb3BlcnRpZXMgb2YgYEVycm9yLnByb3RvdHlwZWAgYXJlXG4gICAgICAgKiBlbnVtZXJhYmxlIGJ5IGRlZmF1bHQuIChJRSA8IDksIFNhZmFyaSA8IDUuMSlcbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0XG4gICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgKi9cbiAgICAgIHN1cHBvcnQuZW51bUVycm9yUHJvcHMgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGVycm9yUHJvdG8sICdtZXNzYWdlJykgfHwgcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlcnJvclByb3RvLCAnbmFtZScpO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBgcHJvdG90eXBlYCBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhYmxlIGJ5IGRlZmF1bHQuXG4gICAgICAgKlxuICAgICAgICogRmlyZWZveCA8IDMuNiwgT3BlcmEgPiA5LjUwIC0gT3BlcmEgPCAxMS42MCwgYW5kIFNhZmFyaSA8IDUuMVxuICAgICAgICogKGlmIHRoZSBwcm90b3R5cGUgb3IgYSBwcm9wZXJ0eSBvbiB0aGUgcHJvdG90eXBlIGhhcyBiZWVuIHNldClcbiAgICAgICAqIGluY29ycmVjdGx5IHNldHMgYSBmdW5jdGlvbidzIGBwcm90b3R5cGVgIHByb3BlcnR5IFtbRW51bWVyYWJsZV1dXG4gICAgICAgKiB2YWx1ZSB0byBgdHJ1ZWAuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0LmVudW1Qcm90b3R5cGVzID0gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChjdG9yLCAncHJvdG90eXBlJyk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IGlmIGZ1bmN0aW9ucyBjYW4gYmUgZGVjb21waWxlZCBieSBgRnVuY3Rpb24jdG9TdHJpbmdgXG4gICAgICAgKiAoYWxsIGJ1dCBQUzMgYW5kIG9sZGVyIE9wZXJhIG1vYmlsZSBicm93c2VycyAmIGF2b2lkZWQgaW4gV2luZG93cyA4IGFwcHMpLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC5mdW5jRGVjb21wID0gIWlzTmF0aXZlKGNvbnRleHQuV2luUlRFcnJvcikgJiYgcmVUaGlzLnRlc3QocnVuSW5Db250ZXh0KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgaWYgYEZ1bmN0aW9uI25hbWVgIGlzIHN1cHBvcnRlZCAoYWxsIGJ1dCBJRSkuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0LmZ1bmNOYW1lcyA9IHR5cGVvZiBGdW5jdGlvbi5uYW1lID09ICdzdHJpbmcnO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBgYXJndW1lbnRzYCBvYmplY3QgaW5kZXhlcyBhcmUgbm9uLWVudW1lcmFibGVcbiAgICAgICAqIChGaXJlZm94IDwgNCwgSUUgPCA5LCBQaGFudG9tSlMsIFNhZmFyaSA8IDUuMSkuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0Lm5vbkVudW1BcmdzID0ga2V5ICE9IDA7XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IGlmIHByb3BlcnRpZXMgc2hhZG93aW5nIHRob3NlIG9uIGBPYmplY3QucHJvdG90eXBlYCBhcmUgbm9uLWVudW1lcmFibGUuXG4gICAgICAgKlxuICAgICAgICogSW4gSUUgPCA5IGFuIG9iamVjdHMgb3duIHByb3BlcnRpZXMsIHNoYWRvd2luZyBub24tZW51bWVyYWJsZSBvbmVzLCBhcmVcbiAgICAgICAqIG1hZGUgbm9uLWVudW1lcmFibGUgYXMgd2VsbCAoYS5rLmEgdGhlIEpTY3JpcHQgW1tEb250RW51bV1dIGJ1ZykuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0Lm5vbkVudW1TaGFkb3dzID0gIS92YWx1ZU9mLy50ZXN0KHByb3BzKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgaWYgb3duIHByb3BlcnRpZXMgYXJlIGl0ZXJhdGVkIGFmdGVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIChhbGwgYnV0IElFIDwgOSkuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0Lm93bkxhc3QgPSBwcm9wc1swXSAhPSAneCc7XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IGlmIGBBcnJheSNzaGlmdGAgYW5kIGBBcnJheSNzcGxpY2VgIGF1Z21lbnQgYXJyYXktbGlrZSBvYmplY3RzIGNvcnJlY3RseS5cbiAgICAgICAqXG4gICAgICAgKiBGaXJlZm94IDwgMTAsIElFIGNvbXBhdGliaWxpdHkgbW9kZSwgYW5kIElFIDwgOSBoYXZlIGJ1Z2d5IEFycmF5IGBzaGlmdCgpYFxuICAgICAgICogYW5kIGBzcGxpY2UoKWAgZnVuY3Rpb25zIHRoYXQgZmFpbCB0byByZW1vdmUgdGhlIGxhc3QgZWxlbWVudCwgYHZhbHVlWzBdYCxcbiAgICAgICAqIG9mIGFycmF5LWxpa2Ugb2JqZWN0cyBldmVuIHRob3VnaCB0aGUgYGxlbmd0aGAgcHJvcGVydHkgaXMgc2V0IHRvIGAwYC5cbiAgICAgICAqIFRoZSBgc2hpZnQoKWAgbWV0aG9kIGlzIGJ1Z2d5IGluIElFIDggY29tcGF0aWJpbGl0eSBtb2RlLCB3aGlsZSBgc3BsaWNlKClgXG4gICAgICAgKiBpcyBidWdneSByZWdhcmRsZXNzIG9mIG1vZGUgaW4gSUUgPCA5IGFuZCBidWdneSBpbiBjb21wYXRpYmlsaXR5IG1vZGUgaW4gSUUgOS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0XG4gICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgKi9cbiAgICAgIHN1cHBvcnQuc3BsaWNlT2JqZWN0cyA9IChhcnJheVJlZi5zcGxpY2UuY2FsbChvYmplY3QsIDAsIDEpLCAhb2JqZWN0WzBdKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgbGFjayBvZiBzdXBwb3J0IGZvciBhY2Nlc3Npbmcgc3RyaW5nIGNoYXJhY3RlcnMgYnkgaW5kZXguXG4gICAgICAgKlxuICAgICAgICogSUUgPCA4IGNhbid0IGFjY2VzcyBjaGFyYWN0ZXJzIGJ5IGluZGV4IGFuZCBJRSA4IGNhbiBvbmx5IGFjY2Vzc1xuICAgICAgICogY2hhcmFjdGVycyBieSBpbmRleCBvbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0LnVuaW5kZXhlZENoYXJzID0gKCd4J1swXSArIE9iamVjdCgneCcpWzBdKSAhPSAneHgnO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBhIERPTSBub2RlJ3MgW1tDbGFzc11dIGlzIHJlc29sdmFibGUgKGFsbCBidXQgSUUgPCA5KVxuICAgICAgICogYW5kIHRoYXQgdGhlIEpTIGVuZ2luZSBlcnJvcnMgd2hlbiBhdHRlbXB0aW5nIHRvIGNvZXJjZSBhbiBvYmplY3QgdG9cbiAgICAgICAqIGEgc3RyaW5nIHdpdGhvdXQgYSBgdG9TdHJpbmdgIGZ1bmN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3VwcG9ydC5ub2RlQ2xhc3MgPSAhKHRvU3RyaW5nLmNhbGwoZG9jdW1lbnQpID09IG9iamVjdENsYXNzICYmICEoeyAndG9TdHJpbmcnOiAwIH0gKyAnJykpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHN1cHBvcnQubm9kZUNsYXNzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KDEpKTtcblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgTG8tRGFzaCBhcmUgc2ltaWxhciB0byB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikuIENoYW5nZSB0aGUgZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZVxuICAgICAqIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSBSZWdFeHBcbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IC88JS0oW1xcc1xcU10rPyklPi9nLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIFJlZ0V4cFxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIFJlZ0V4cFxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRlbXBsYXRlIHVzZWQgdG8gY3JlYXRlIGl0ZXJhdG9yIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgb2JqZWN0IHVzZWQgdG8gcG9wdWxhdGUgdGhlIHRleHQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgaW50ZXJwb2xhdGVkIHRleHQuXG4gICAgICovXG4gICAgdmFyIGl0ZXJhdG9yVGVtcGxhdGUgPSBmdW5jdGlvbihvYmopIHtcblxuICAgICAgdmFyIF9fcCA9ICd2YXIgaW5kZXgsIGl0ZXJhYmxlID0gJyArXG4gICAgICAgIChvYmouZmlyc3RBcmcpICtcbiAgICAgICAgJywgcmVzdWx0ID0gJyArXG4gICAgICAgIChvYmouaW5pdCkgK1xuICAgICAgICAnO1xcbmlmICghaXRlcmFibGUpIHJldHVybiByZXN1bHQ7XFxuJyArXG4gICAgICAgIChvYmoudG9wKSArXG4gICAgICAgICc7JztcbiAgICAgIGlmIChvYmouYXJyYXkpIHtcbiAgICAgICAgX19wICs9ICdcXG52YXIgbGVuZ3RoID0gaXRlcmFibGUubGVuZ3RoOyBpbmRleCA9IC0xO1xcbmlmICgnICtcbiAgICAgICAgICAob2JqLmFycmF5KSArXG4gICAgICAgICAgJykgeyAgJztcbiAgICAgICAgaWYgKHN1cHBvcnQudW5pbmRleGVkQ2hhcnMpIHtcbiAgICAgICAgICBfX3AgKz0gJ1xcbiAgaWYgKGlzU3RyaW5nKGl0ZXJhYmxlKSkge1xcbiAgICBpdGVyYWJsZSA9IGl0ZXJhYmxlLnNwbGl0KFxcJ1xcJylcXG4gIH0gICc7XG4gICAgICAgIH1cbiAgICAgICAgX19wICs9ICdcXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XFxuICAgICcgK1xuICAgICAgICAgIChvYmoubG9vcCkgK1xuICAgICAgICAgICc7XFxuICB9XFxufVxcbmVsc2UgeyAgJztcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ub25FbnVtQXJncykge1xuICAgICAgICBfX3AgKz0gJ1xcbiAgdmFyIGxlbmd0aCA9IGl0ZXJhYmxlLmxlbmd0aDsgaW5kZXggPSAtMTtcXG4gIGlmIChsZW5ndGggJiYgaXNBcmd1bWVudHMoaXRlcmFibGUpKSB7XFxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XFxuICAgICAgaW5kZXggKz0gXFwnXFwnO1xcbiAgICAgICcgK1xuICAgICAgICAgIChvYmoubG9vcCkgK1xuICAgICAgICAgICc7XFxuICAgIH1cXG4gIH0gZWxzZSB7ICAnO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydC5lbnVtUHJvdG90eXBlcykge1xuICAgICAgICBfX3AgKz0gJ1xcbiAgdmFyIHNraXBQcm90byA9IHR5cGVvZiBpdGVyYWJsZSA9PSBcXCdmdW5jdGlvblxcJztcXG4gICc7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0LmVudW1FcnJvclByb3BzKSB7XG4gICAgICAgIF9fcCArPSAnXFxuICB2YXIgc2tpcEVycm9yUHJvcHMgPSBpdGVyYWJsZSA9PT0gZXJyb3JQcm90byB8fCBpdGVyYWJsZSBpbnN0YW5jZW9mIEVycm9yO1xcbiAgJztcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmRpdGlvbnMgPSBbXTsgICAgaWYgKHN1cHBvcnQuZW51bVByb3RvdHlwZXMpIHsgY29uZGl0aW9ucy5wdXNoKCchKHNraXBQcm90byAmJiBpbmRleCA9PSBcInByb3RvdHlwZVwiKScpOyB9ICAgIGlmIChzdXBwb3J0LmVudW1FcnJvclByb3BzKSAgeyBjb25kaXRpb25zLnB1c2goJyEoc2tpcEVycm9yUHJvcHMgJiYgKGluZGV4ID09IFwibWVzc2FnZVwiIHx8IGluZGV4ID09IFwibmFtZVwiKSknKTsgfVxuXG4gICAgICBpZiAob2JqLnVzZUhhcyAmJiBvYmoua2V5cykge1xuICAgICAgICBfX3AgKz0gJ1xcbiAgdmFyIG93bkluZGV4ID0gLTEsXFxuICAgICAgb3duUHJvcHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdICYmIGtleXMoaXRlcmFibGUpLFxcbiAgICAgIGxlbmd0aCA9IG93blByb3BzID8gb3duUHJvcHMubGVuZ3RoIDogMDtcXG5cXG4gIHdoaWxlICgrK293bkluZGV4IDwgbGVuZ3RoKSB7XFxuICAgIGluZGV4ID0gb3duUHJvcHNbb3duSW5kZXhdO1xcbic7XG4gICAgICAgIGlmIChjb25kaXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgIF9fcCArPSAnICAgIGlmICgnICtcbiAgICAgICAgICAgIChjb25kaXRpb25zLmpvaW4oJyAmJiAnKSkgK1xuICAgICAgICAgICAgJykge1xcbiAgJztcbiAgICAgICAgfVxuICAgICAgICBfX3AgKz1cbiAgICAgICAgICAob2JqLmxvb3ApICtcbiAgICAgICAgICAnOyAgICAnO1xuICAgICAgICBpZiAoY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICBfX3AgKz0gJ1xcbiAgICB9JztcbiAgICAgICAgfVxuICAgICAgICBfX3AgKz0gJ1xcbiAgfSAgJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9fcCArPSAnXFxuICBmb3IgKGluZGV4IGluIGl0ZXJhYmxlKSB7XFxuJztcbiAgICAgICAgaWYgKG9iai51c2VIYXMpIHsgY29uZGl0aW9ucy5wdXNoKFwiaGFzT3duUHJvcGVydHkuY2FsbChpdGVyYWJsZSwgaW5kZXgpXCIpOyB9ICAgIGlmIChjb25kaXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgIF9fcCArPSAnICAgIGlmICgnICtcbiAgICAgICAgICAgIChjb25kaXRpb25zLmpvaW4oJyAmJiAnKSkgK1xuICAgICAgICAgICAgJykge1xcbiAgJztcbiAgICAgICAgfVxuICAgICAgICBfX3AgKz1cbiAgICAgICAgICAob2JqLmxvb3ApICtcbiAgICAgICAgICAnOyAgICAnO1xuICAgICAgICBpZiAoY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICBfX3AgKz0gJ1xcbiAgICB9JztcbiAgICAgICAgfVxuICAgICAgICBfX3AgKz0gJ1xcbiAgfSAgICAnO1xuICAgICAgICBpZiAoc3VwcG9ydC5ub25FbnVtU2hhZG93cykge1xuICAgICAgICAgIF9fcCArPSAnXFxuXFxuICBpZiAoaXRlcmFibGUgIT09IG9iamVjdFByb3RvKSB7XFxuICAgIHZhciBjdG9yID0gaXRlcmFibGUuY29uc3RydWN0b3IsXFxuICAgICAgICBpc1Byb3RvID0gaXRlcmFibGUgPT09IChjdG9yICYmIGN0b3IucHJvdG90eXBlKSxcXG4gICAgICAgIGNsYXNzTmFtZSA9IGl0ZXJhYmxlID09PSBzdHJpbmdQcm90byA/IHN0cmluZ0NsYXNzIDogaXRlcmFibGUgPT09IGVycm9yUHJvdG8gPyBlcnJvckNsYXNzIDogdG9TdHJpbmcuY2FsbChpdGVyYWJsZSksXFxuICAgICAgICBub25FbnVtID0gbm9uRW51bVByb3BzW2NsYXNzTmFtZV07XFxuICAgICAgJztcbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgNzsgaysrKSB7XG4gICAgICAgICAgICBfX3AgKz0gJ1xcbiAgICBpbmRleCA9IFxcJycgK1xuICAgICAgICAgICAgICAob2JqLnNoYWRvd2VkUHJvcHNba10pICtcbiAgICAgICAgICAgICAgJ1xcJztcXG4gICAgaWYgKCghKGlzUHJvdG8gJiYgbm9uRW51bVtpbmRleF0pICYmIGhhc093blByb3BlcnR5LmNhbGwoaXRlcmFibGUsIGluZGV4KSknO1xuICAgICAgICAgICAgaWYgKCFvYmoudXNlSGFzKSB7XG4gICAgICAgICAgICAgIF9fcCArPSAnIHx8ICghbm9uRW51bVtpbmRleF0gJiYgaXRlcmFibGVbaW5kZXhdICE9PSBvYmplY3RQcm90b1tpbmRleF0pJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9fcCArPSAnKSB7XFxuICAgICAgJyArXG4gICAgICAgICAgICAgIChvYmoubG9vcCkgK1xuICAgICAgICAgICAgICAnO1xcbiAgICB9ICAgICAgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgX19wICs9ICdcXG4gIH0gICAgJztcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGlmIChvYmouYXJyYXkgfHwgc3VwcG9ydC5ub25FbnVtQXJncykge1xuICAgICAgICBfX3AgKz0gJ1xcbn0nO1xuICAgICAgfVxuICAgICAgX19wICs9XG4gICAgICAgIChvYmouYm90dG9tKSArXG4gICAgICAgICc7XFxucmV0dXJuIHJlc3VsdCc7XG5cbiAgICAgIHJldHVybiBfX3BcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5iaW5kYCB0aGF0IGNyZWF0ZXMgdGhlIGJvdW5kIGZ1bmN0aW9uIGFuZFxuICAgICAqIHNldHMgaXRzIG1ldGEgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYmluZERhdGEgVGhlIGJpbmQgZGF0YSBhcnJheS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQmluZChiaW5kRGF0YSkge1xuICAgICAgdmFyIGZ1bmMgPSBiaW5kRGF0YVswXSxcbiAgICAgICAgICBwYXJ0aWFsQXJncyA9IGJpbmREYXRhWzJdLFxuICAgICAgICAgIHRoaXNBcmcgPSBiaW5kRGF0YVs0XTtcblxuICAgICAgZnVuY3Rpb24gYm91bmQoKSB7XG4gICAgICAgIC8vIGBGdW5jdGlvbiNiaW5kYCBzcGVjXG4gICAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMy40LjVcbiAgICAgICAgaWYgKHBhcnRpYWxBcmdzKSB7XG4gICAgICAgICAgLy8gYXZvaWQgYGFyZ3VtZW50c2Agb2JqZWN0IGRlb3B0aW1pemF0aW9ucyBieSB1c2luZyBgc2xpY2VgIGluc3RlYWRcbiAgICAgICAgICAvLyBvZiBgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGxgIGFuZCBub3QgYXNzaWduaW5nIGBhcmd1bWVudHNgIHRvIGFcbiAgICAgICAgICAvLyB2YXJpYWJsZSBhcyBhIHRlcm5hcnkgZXhwcmVzc2lvblxuICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UocGFydGlhbEFyZ3MpO1xuICAgICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvclxuICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMlxuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGBuZXcgYm91bmRgIGlzIGFuIGluc3RhbmNlIG9mIGBmdW5jYFxuICAgICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoZnVuYy5wcm90b3R5cGUpLFxuICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzIHx8IGFyZ3VtZW50cyk7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzIHx8IGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBzZXRCaW5kRGF0YShib3VuZCwgYmluZERhdGEpO1xuICAgICAgcmV0dXJuIGJvdW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCB3aXRob3V0IGFyZ3VtZW50IGp1Z2dsaW5nIG9yIHN1cHBvcnRcbiAgICAgKiBmb3IgYHRoaXNBcmdgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcD1mYWxzZV0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyBjbG9uZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBpc0RlZXAsIGNhbGxiYWNrLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaW5zcGVjdCBbW0NsYXNzXV1cbiAgICAgIHZhciBpc09iaiA9IGlzT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmIChpc09iaikge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICAgIGlmICghY2xvbmVhYmxlQ2xhc3Nlc1tjbGFzc05hbWVdIHx8ICghc3VwcG9ydC5ub2RlQ2xhc3MgJiYgaXNOb2RlKHZhbHVlKSkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN0b3IgPSBjdG9yQnlDbGFzc1tjbGFzc05hbWVdO1xuICAgICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgICAgIGNhc2UgYm9vbENsYXNzOlxuICAgICAgICAgIGNhc2UgZGF0ZUNsYXNzOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKCt2YWx1ZSk7XG5cbiAgICAgICAgICBjYXNlIG51bWJlckNsYXNzOlxuICAgICAgICAgIGNhc2Ugc3RyaW5nQ2xhc3M6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGN0b3IodmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSByZWdleHBDbGFzczpcbiAgICAgICAgICAgIHJlc3VsdCA9IGN0b3IodmFsdWUuc291cmNlLCByZUZsYWdzLmV4ZWModmFsdWUpKTtcbiAgICAgICAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSB2YWx1ZS5sYXN0SW5kZXg7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBjb3JyZXNwb25kaW5nIGNsb25lXG4gICAgICAgIHZhciBpbml0ZWRTdGFjayA9ICFzdGFja0E7XG4gICAgICAgIHN0YWNrQSB8fCAoc3RhY2tBID0gZ2V0QXJyYXkoKSk7XG4gICAgICAgIHN0YWNrQiB8fCAoc3RhY2tCID0gZ2V0QXJyYXkoKSk7XG5cbiAgICAgICAgdmFyIGxlbmd0aCA9IHN0YWNrQS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIGlmIChzdGFja0FbbGVuZ3RoXSA9PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrQltsZW5ndGhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBpc0FyciA/IGN0b3IodmFsdWUubGVuZ3RoKSA6IHt9O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGlzQXJyID8gc2xpY2UodmFsdWUpIDogYXNzaWduKHt9LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICAvLyBhZGQgYXJyYXkgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgXG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdpbmRleCcpKSB7XG4gICAgICAgICAgcmVzdWx0LmluZGV4ID0gdmFsdWUuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdpbnB1dCcpKSB7XG4gICAgICAgICAgcmVzdWx0LmlucHV0ID0gdmFsdWUuaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGV4aXQgZm9yIHNoYWxsb3cgY2xvbmVcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBhZGQgdGhlIHNvdXJjZSB2YWx1ZSB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHNcbiAgICAgIC8vIGFuZCBhc3NvY2lhdGUgaXQgd2l0aCBpdHMgY2xvbmVcbiAgICAgIHN0YWNrQS5wdXNoKHZhbHVlKTtcbiAgICAgIHN0YWNrQi5wdXNoKHJlc3VsdCk7XG5cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cylcbiAgICAgIChpc0FyciA/IGJhc2VFYWNoIDogZm9yT3duKSh2YWx1ZSwgZnVuY3Rpb24ob2JqVmFsdWUsIGtleSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGJhc2VDbG9uZShvYmpWYWx1ZSwgaXNEZWVwLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChpbml0ZWRTdGFjaykge1xuICAgICAgICByZWxlYXNlQXJyYXkoc3RhY2tBKTtcbiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QocHJvdG90eXBlKSA/IG5hdGl2ZUNyZWF0ZShwcm90b3R5cGUpIDoge307XG4gICAgfVxuICAgIC8vIGZhbGxiYWNrIGZvciBicm93c2VycyB3aXRob3V0IGBPYmplY3QuY3JlYXRlYFxuICAgIGlmICghbmF0aXZlQ3JlYXRlKSB7XG4gICAgICBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICBmdW5jdGlvbiBPYmplY3QoKSB7fVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHByb3RvdHlwZSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0IHx8IGNvbnRleHQuT2JqZWN0KCk7XG4gICAgICAgIH07XG4gICAgICB9KCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZUNhbGxiYWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNyZWF0aW5nXG4gICAgICogXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPWlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBjYWxsYmFjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyZ0NvdW50XSBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0aGUgY2FsbGJhY2sgYWNjZXB0cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ3JlYXRlQ2FsbGJhY2soZnVuYywgdGhpc0FyZywgYXJnQ291bnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIC8vIGV4aXQgZWFybHkgZm9yIG5vIGB0aGlzQXJnYCBvciBhbHJlYWR5IGJvdW5kIGJ5IGBGdW5jdGlvbiNiaW5kYFxuICAgICAgaWYgKHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnIHx8ICEoJ3Byb3RvdHlwZScgaW4gZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9XG4gICAgICB2YXIgYmluZERhdGEgPSBmdW5jLl9fYmluZERhdGFfXztcbiAgICAgIGlmICh0eXBlb2YgYmluZERhdGEgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHN1cHBvcnQuZnVuY05hbWVzKSB7XG4gICAgICAgICAgYmluZERhdGEgPSAhZnVuYy5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGJpbmREYXRhID0gYmluZERhdGEgfHwgIXN1cHBvcnQuZnVuY0RlY29tcDtcbiAgICAgICAgaWYgKCFiaW5kRGF0YSkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBmblRvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgICAgaWYgKCFzdXBwb3J0LmZ1bmNOYW1lcykge1xuICAgICAgICAgICAgYmluZERhdGEgPSAhcmVGdW5jTmFtZS50ZXN0KHNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghYmluZERhdGEpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrcyBpZiBgZnVuY2AgcmVmZXJlbmNlcyB0aGUgYHRoaXNgIGtleXdvcmQgYW5kIHN0b3JlcyB0aGUgcmVzdWx0XG4gICAgICAgICAgICBiaW5kRGF0YSA9IHJlVGhpcy50ZXN0KHNvdXJjZSk7XG4gICAgICAgICAgICBzZXRCaW5kRGF0YShmdW5jLCBiaW5kRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBleGl0IGVhcmx5IGlmIHRoZXJlIGFyZSBubyBgdGhpc2AgcmVmZXJlbmNlcyBvciBgZnVuY2AgaXMgYm91bmRcbiAgICAgIGlmIChiaW5kRGF0YSA9PT0gZmFsc2UgfHwgKGJpbmREYXRhICE9PSB0cnVlICYmIGJpbmREYXRhWzFdICYgMSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGFyZ0NvdW50KSB7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGEsIGIpO1xuICAgICAgICB9O1xuICAgICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJpbmQoZnVuYywgdGhpc0FyZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGNyZWF0ZVdyYXBwZXJgIHRoYXQgY3JlYXRlcyB0aGUgd3JhcHBlciBhbmRcbiAgICAgKiBzZXRzIGl0cyBtZXRhIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGJpbmREYXRhIFRoZSBiaW5kIGRhdGEgYXJyYXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNyZWF0ZVdyYXBwZXIoYmluZERhdGEpIHtcbiAgICAgIHZhciBmdW5jID0gYmluZERhdGFbMF0sXG4gICAgICAgICAgYml0bWFzayA9IGJpbmREYXRhWzFdLFxuICAgICAgICAgIHBhcnRpYWxBcmdzID0gYmluZERhdGFbMl0sXG4gICAgICAgICAgcGFydGlhbFJpZ2h0QXJncyA9IGJpbmREYXRhWzNdLFxuICAgICAgICAgIHRoaXNBcmcgPSBiaW5kRGF0YVs0XSxcbiAgICAgICAgICBhcml0eSA9IGJpbmREYXRhWzVdO1xuXG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIDEsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIDIsXG4gICAgICAgICAgaXNDdXJyeSA9IGJpdG1hc2sgJiA0LFxuICAgICAgICAgIGlzQ3VycnlCb3VuZCA9IGJpdG1hc2sgJiA4LFxuICAgICAgICAgIGtleSA9IGZ1bmM7XG5cbiAgICAgIGZ1bmN0aW9uIGJvdW5kKCkge1xuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcztcbiAgICAgICAgaWYgKHBhcnRpYWxBcmdzKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShwYXJ0aWFsQXJncyk7XG4gICAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsUmlnaHRBcmdzIHx8IGlzQ3VycnkpIHtcbiAgICAgICAgICBhcmdzIHx8IChhcmdzID0gc2xpY2UoYXJndW1lbnRzKSk7XG4gICAgICAgICAgaWYgKHBhcnRpYWxSaWdodEFyZ3MpIHtcbiAgICAgICAgICAgIHB1c2guYXBwbHkoYXJncywgcGFydGlhbFJpZ2h0QXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0N1cnJ5ICYmIGFyZ3MubGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICAgIGJpdG1hc2sgfD0gMTYgJiB+MzI7XG4gICAgICAgICAgICByZXR1cm4gYmFzZUNyZWF0ZVdyYXBwZXIoW2Z1bmMsIChpc0N1cnJ5Qm91bmQgPyBiaXRtYXNrIDogYml0bWFzayAmIH4zKSwgYXJncywgbnVsbCwgdGhpc0FyZywgYXJpdHldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJncyB8fCAoYXJncyA9IGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChpc0JpbmRLZXkpIHtcbiAgICAgICAgICBmdW5jID0gdGhpc0JpbmRpbmdba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKGZ1bmMucHJvdG90eXBlKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICBzZXRCaW5kRGF0YShib3VuZCwgYmluZERhdGEpO1xuICAgICAgcmV0dXJuIGJvdW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRpZmZlcmVuY2VgIHRoYXQgYWNjZXB0cyBhIHNpbmdsZSBhcnJheVxuICAgICAqIG9mIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgYXJyYXkgb2YgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICBpc0xhcmdlID0gbGVuZ3RoID49IGxhcmdlQXJyYXlTaXplICYmIGluZGV4T2YgPT09IGJhc2VJbmRleE9mLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBpZiAoaXNMYXJnZSkge1xuICAgICAgICB2YXIgY2FjaGUgPSBjcmVhdGVDYWNoZSh2YWx1ZXMpO1xuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICBpbmRleE9mID0gY2FjaGVJbmRleE9mO1xuICAgICAgICAgIHZhbHVlcyA9IGNhY2hlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzTGFyZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoaW5kZXhPZih2YWx1ZXMsIHZhbHVlKSA8IDApIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0xhcmdlKSB7XG4gICAgICAgIHJlbGVhc2VPYmplY3QodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgb3IgYHRoaXNBcmdgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU2hhbGxvdz1mYWxzZV0gQSBmbGFnIHRvIHJlc3RyaWN0IGZsYXR0ZW5pbmcgdG8gYSBzaW5nbGUgbGV2ZWwuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3Q9ZmFsc2VdIEEgZmxhZyB0byByZXN0cmljdCBmbGF0dGVuaW5nIHRvIGFycmF5cyBhbmQgYGFyZ3VtZW50c2Agb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc3RhcnQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBpc1NoYWxsb3csIGlzU3RyaWN0LCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBpbmRleCA9IChmcm9tSW5kZXggfHwgMCkgLSAxLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PSAnbnVtYmVyJ1xuICAgICAgICAgICYmIChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgICAgLy8gcmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKVxuICAgICAgICAgIGlmICghaXNTaGFsbG93KSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VGbGF0dGVuKHZhbHVlLCBpc1NoYWxsb3csIGlzU3RyaWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHZhbEluZGV4ID0gLTEsXG4gICAgICAgICAgICAgIHZhbExlbmd0aCA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgICAgICAgcmVzSW5kZXggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICAgICAgcmVzdWx0Lmxlbmd0aCArPSB2YWxMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsrdmFsSW5kZXggPCB2YWxMZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlW3ZhbEluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgLCB3aXRob3V0IHN1cHBvcnQgZm9yIGB0aGlzQXJnYCBiaW5kaW5nLFxuICAgICAqIHRoYXQgYWxsb3dzIHBhcnRpYWwgXCJfLndoZXJlXCIgc3R5bGUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gYSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IGIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmluZyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2lzV2hlcmU9ZmFsc2VdIEEgZmxhZyB0byBpbmRpY2F0ZSBwZXJmb3JtaW5nIHBhcnRpYWwgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQT1bXV0gVHJhY2tzIHRyYXZlcnNlZCBgYWAgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tCPVtdXSBUcmFja3MgdHJhdmVyc2VkIGBiYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwoYSwgYiwgY2FsbGJhY2ssIGlzV2hlcmUsIHN0YWNrQSwgc3RhY2tCKSB7XG4gICAgICAvLyB1c2VkIHRvIGluZGljYXRlIHRoYXQgd2hlbiBjb21wYXJpbmcgb2JqZWN0cywgYGFgIGhhcyBhdCBsZWFzdCB0aGUgcHJvcGVydGllcyBvZiBgYmBcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soYSwgYik7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBleGl0IGVhcmx5IGZvciBpZGVudGljYWwgdmFsdWVzXG4gICAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICAvLyB0cmVhdCBgKzBgIHZzLiBgLTBgIGFzIG5vdCBlcXVhbFxuICAgICAgICByZXR1cm4gYSAhPT0gMCB8fCAoMSAvIGEgPT0gMSAvIGIpO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgYSxcbiAgICAgICAgICBvdGhlclR5cGUgPSB0eXBlb2YgYjtcblxuICAgICAgLy8gZXhpdCBlYXJseSBmb3IgdW5saWtlIHByaW1pdGl2ZSB2YWx1ZXNcbiAgICAgIGlmIChhID09PSBhICYmXG4gICAgICAgICEoYSAmJiBvYmplY3RUeXBlc1t0eXBlXSkgJiZcbiAgICAgICAgIShiICYmIG9iamVjdFR5cGVzW290aGVyVHlwZV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGV4aXQgZWFybHkgZm9yIGBudWxsYCBhbmQgYHVuZGVmaW5lZGAgYXZvaWRpbmcgRVMzJ3MgRnVuY3Rpb24jY2FsbCBiZWhhdmlvclxuICAgICAgLy8gaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS4zLjQuNFxuICAgICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgICB9XG4gICAgICAvLyBjb21wYXJlIFtbQ2xhc3NdXSBuYW1lc1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSksXG4gICAgICAgICAgb3RoZXJDbGFzcyA9IHRvU3RyaW5nLmNhbGwoYik7XG5cbiAgICAgIGlmIChjbGFzc05hbWUgPT0gYXJnc0NsYXNzKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IG9iamVjdENsYXNzO1xuICAgICAgfVxuICAgICAgaWYgKG90aGVyQ2xhc3MgPT0gYXJnc0NsYXNzKSB7XG4gICAgICAgIG90aGVyQ2xhc3MgPSBvYmplY3RDbGFzcztcbiAgICAgIH1cbiAgICAgIGlmIChjbGFzc05hbWUgIT0gb3RoZXJDbGFzcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgICBjYXNlIGJvb2xDbGFzczpcbiAgICAgICAgY2FzZSBkYXRlQ2xhc3M6XG4gICAgICAgICAgLy8gY29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1iZXJzLCBkYXRlcyB0byBtaWxsaXNlY29uZHMgYW5kIGJvb2xlYW5zXG4gICAgICAgICAgLy8gdG8gYDFgIG9yIGAwYCB0cmVhdGluZyBpbnZhbGlkIGRhdGVzIGNvZXJjZWQgdG8gYE5hTmAgYXMgbm90IGVxdWFsXG4gICAgICAgICAgcmV0dXJuICthID09ICtiO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyQ2xhc3M6XG4gICAgICAgICAgLy8gdHJlYXQgYE5hTmAgdnMuIGBOYU5gIGFzIGVxdWFsXG4gICAgICAgICAgcmV0dXJuIChhICE9ICthKVxuICAgICAgICAgICAgPyBiICE9ICtiXG4gICAgICAgICAgICAvLyBidXQgdHJlYXQgYCswYCB2cy4gYC0wYCBhcyBub3QgZXF1YWxcbiAgICAgICAgICAgIDogKGEgPT0gMCA/ICgxIC8gYSA9PSAxIC8gYikgOiBhID09ICtiKTtcblxuICAgICAgICBjYXNlIHJlZ2V4cENsYXNzOlxuICAgICAgICBjYXNlIHN0cmluZ0NsYXNzOlxuICAgICAgICAgIC8vIGNvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgKGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMTAuNi40KVxuICAgICAgICAgIC8vIHRyZWF0IHN0cmluZyBwcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCBpbnN0YW5jZXMgYXMgZXF1YWxcbiAgICAgICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBjbGFzc05hbWUgPT0gYXJyYXlDbGFzcztcbiAgICAgIGlmICghaXNBcnIpIHtcbiAgICAgICAgLy8gdW53cmFwIGFueSBgbG9kYXNoYCB3cmFwcGVkIHZhbHVlc1xuICAgICAgICB2YXIgYVdyYXBwZWQgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGEsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgYldyYXBwZWQgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChhV3JhcHBlZCB8fCBiV3JhcHBlZCkge1xuICAgICAgICAgIHJldHVybiBiYXNlSXNFcXVhbChhV3JhcHBlZCA/IGEuX193cmFwcGVkX18gOiBhLCBiV3JhcHBlZCA/IGIuX193cmFwcGVkX18gOiBiLCBjYWxsYmFjaywgaXNXaGVyZSwgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGV4aXQgZm9yIGZ1bmN0aW9ucyBhbmQgRE9NIG5vZGVzXG4gICAgICAgIGlmIChjbGFzc05hbWUgIT0gb2JqZWN0Q2xhc3MgfHwgKCFzdXBwb3J0Lm5vZGVDbGFzcyAmJiAoaXNOb2RlKGEpIHx8IGlzTm9kZShiKSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluIG9sZGVyIHZlcnNpb25zIG9mIE9wZXJhLCBgYXJndW1lbnRzYCBvYmplY3RzIGhhdmUgYEFycmF5YCBjb25zdHJ1Y3RvcnNcbiAgICAgICAgdmFyIGN0b3JBID0gIXN1cHBvcnQuYXJnc09iamVjdCAmJiBpc0FyZ3VtZW50cyhhKSA/IE9iamVjdCA6IGEuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBjdG9yQiA9ICFzdXBwb3J0LmFyZ3NPYmplY3QgJiYgaXNBcmd1bWVudHMoYikgPyBPYmplY3QgOiBiLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIG5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsXG4gICAgICAgIGlmIChjdG9yQSAhPSBjdG9yQiAmJlxuICAgICAgICAgICEoaXNGdW5jdGlvbihjdG9yQSkgJiYgY3RvckEgaW5zdGFuY2VvZiBjdG9yQSAmJiBpc0Z1bmN0aW9uKGN0b3JCKSAmJiBjdG9yQiBpbnN0YW5jZW9mIGN0b3JCKSAmJlxuICAgICAgICAgICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGFzc3VtZSBjeWNsaWMgc3RydWN0dXJlcyBhcmUgZXF1YWxcbiAgICAgIC8vIHRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWMgc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xXG4gICAgICAvLyBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gIChodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEyLjMpXG4gICAgICB2YXIgaW5pdGVkU3RhY2sgPSAhc3RhY2tBO1xuICAgICAgc3RhY2tBIHx8IChzdGFja0EgPSBnZXRBcnJheSgpKTtcbiAgICAgIHN0YWNrQiB8fCAoc3RhY2tCID0gZ2V0QXJyYXkoKSk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdGFja0EubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChzdGFja0FbbGVuZ3RoXSA9PSBhKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YWNrQltsZW5ndGhdID09IGI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzaXplID0gMDtcbiAgICAgIHJlc3VsdCA9IHRydWU7XG5cbiAgICAgIC8vIGFkZCBgYWAgYW5kIGBiYCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHNcbiAgICAgIHN0YWNrQS5wdXNoKGEpO1xuICAgICAgc3RhY2tCLnB1c2goYik7XG5cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cylcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICAvLyBjb21wYXJlIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeVxuICAgICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgICAgc2l6ZSA9IGIubGVuZ3RoO1xuICAgICAgICByZXN1bHQgPSBzaXplID09IGxlbmd0aDtcblxuICAgICAgICBpZiAocmVzdWx0IHx8IGlzV2hlcmUpIHtcbiAgICAgICAgICAvLyBkZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzXG4gICAgICAgICAgd2hpbGUgKHNpemUtLSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gYltzaXplXTtcblxuICAgICAgICAgICAgaWYgKGlzV2hlcmUpIHtcbiAgICAgICAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoKHJlc3VsdCA9IGJhc2VJc0VxdWFsKGFbaW5kZXhdLCB2YWx1ZSwgY2FsbGJhY2ssIGlzV2hlcmUsIHN0YWNrQSwgc3RhY2tCKSkpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghKHJlc3VsdCA9IGJhc2VJc0VxdWFsKGFbc2l6ZV0sIHZhbHVlLCBjYWxsYmFjaywgaXNXaGVyZSwgc3RhY2tBLCBzdGFja0IpKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBkZWVwIGNvbXBhcmUgb2JqZWN0cyB1c2luZyBgZm9ySW5gLCBpbnN0ZWFkIG9mIGBmb3JPd25gLCB0byBhdm9pZCBgT2JqZWN0LmtleXNgXG4gICAgICAgIC8vIHdoaWNoLCBpbiB0aGlzIGNhc2UsIGlzIG1vcmUgY29zdGx5XG4gICAgICAgIGZvckluKGIsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGIpIHtcbiAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXkpKSB7XG4gICAgICAgICAgICAvLyBjb3VudCB0aGUgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgICAvLyBkZWVwIGNvbXBhcmUgZWFjaCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgICAgICAgIHJldHVybiAocmVzdWx0ID0gaGFzT3duUHJvcGVydHkuY2FsbChhLCBrZXkpICYmIGJhc2VJc0VxdWFsKGFba2V5XSwgdmFsdWUsIGNhbGxiYWNrLCBpc1doZXJlLCBzdGFja0EsIHN0YWNrQikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCAmJiAhaXNXaGVyZSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBib3RoIG9iamVjdHMgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllc1xuICAgICAgICAgIGZvckluKGEsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGEpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGtleSkpIHtcbiAgICAgICAgICAgICAgLy8gYHNpemVgIHdpbGwgYmUgYC0xYCBpZiBgYWAgaGFzIG1vcmUgcHJvcGVydGllcyB0aGFuIGBiYFxuICAgICAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9IC0tc2l6ZSA+IC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tBLnBvcCgpO1xuICAgICAgc3RhY2tCLnBvcCgpO1xuXG4gICAgICBpZiAoaW5pdGVkU3RhY2spIHtcbiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQSk7XG4gICAgICAgIHJlbGVhc2VBcnJheShzdGFja0IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBhcmd1bWVudCBqdWdnbGluZyBvciBzdXBwb3J0XG4gICAgICogZm9yIGB0aGlzQXJnYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2luZyBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyB2YWx1ZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgY2FsbGJhY2ssIHN0YWNrQSwgc3RhY2tCKSB7XG4gICAgICAoaXNBcnJheShzb3VyY2UpID8gZm9yRWFjaCA6IGZvck93bikoc291cmNlLCBmdW5jdGlvbihzb3VyY2UsIGtleSkge1xuICAgICAgICB2YXIgZm91bmQsXG4gICAgICAgICAgICBpc0FycixcbiAgICAgICAgICAgIHJlc3VsdCA9IHNvdXJjZSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKHNvdXJjZSAmJiAoKGlzQXJyID0gaXNBcnJheShzb3VyY2UpKSB8fCBpc1BsYWluT2JqZWN0KHNvdXJjZSkpKSB7XG4gICAgICAgICAgLy8gYXZvaWQgbWVyZ2luZyBwcmV2aW91c2x5IG1lcmdlZCBjeWNsaWMgc291cmNlc1xuICAgICAgICAgIHZhciBzdGFja0xlbmd0aCA9IHN0YWNrQS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHN0YWNrTGVuZ3RoLS0pIHtcbiAgICAgICAgICAgIGlmICgoZm91bmQgPSBzdGFja0Fbc3RhY2tMZW5ndGhdID09IHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBzdGFja0Jbc3RhY2tMZW5ndGhdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgdmFyIGlzU2hhbGxvdztcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSwgc291cmNlKTtcbiAgICAgICAgICAgICAgaWYgKChpc1NoYWxsb3cgPSB0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzU2hhbGxvdykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGlzQXJyXG4gICAgICAgICAgICAgICAgPyAoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdKVxuICAgICAgICAgICAgICAgIDogKGlzUGxhaW5PYmplY3QodmFsdWUpID8gdmFsdWUgOiB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhZGQgYHNvdXJjZWAgYW5kIGFzc29jaWF0ZWQgYHZhbHVlYCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHNcbiAgICAgICAgICAgIHN0YWNrQS5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICBzdGFja0IucHVzaCh2YWx1ZSk7XG5cbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpXG4gICAgICAgICAgICBpZiAoIWlzU2hhbGxvdykge1xuICAgICAgICAgICAgICBiYXNlTWVyZ2UodmFsdWUsIHNvdXJjZSwgY2FsbGJhY2ssIHN0YWNrQSwgc3RhY2tCKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSwgc291cmNlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHNvdXJjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IGFyZ3VtZW50IGp1Z2dsaW5nIG9yIHN1cHBvcnRcbiAgICAgKiBmb3IgcmV0dXJuaW5nIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIG1pbmltdW0gcG9zc2libGUgdmFsdWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGEgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKG1pbiwgbWF4KSB7XG4gICAgICByZXR1cm4gbWluICsgZmxvb3IobmF0aXZlUmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAqIG9yIGB0aGlzQXJnYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1NvcnRlZD1mYWxzZV0gQSBmbGFnIHRvIGluZGljYXRlIHRoYXQgYGFycmF5YCBpcyBzb3J0ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgZHVwbGljYXRlLXZhbHVlLWZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGlzU29ydGVkLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHZhciBpc0xhcmdlID0gIWlzU29ydGVkICYmIGxlbmd0aCA+PSBsYXJnZUFycmF5U2l6ZSAmJiBpbmRleE9mID09PSBiYXNlSW5kZXhPZixcbiAgICAgICAgICBzZWVuID0gKGNhbGxiYWNrIHx8IGlzTGFyZ2UpID8gZ2V0QXJyYXkoKSA6IHJlc3VsdDtcblxuICAgICAgaWYgKGlzTGFyZ2UpIHtcbiAgICAgICAgdmFyIGNhY2hlID0gY3JlYXRlQ2FjaGUoc2Vlbik7XG4gICAgICAgIGluZGV4T2YgPSBjYWNoZUluZGV4T2Y7XG4gICAgICAgIHNlZW4gPSBjYWNoZTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gY2FsbGJhY2sgPyBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGFycmF5KSA6IHZhbHVlO1xuXG4gICAgICAgIGlmIChpc1NvcnRlZFxuICAgICAgICAgICAgPyAhaW5kZXggfHwgc2VlbltzZWVuLmxlbmd0aCAtIDFdICE9PSBjb21wdXRlZFxuICAgICAgICAgICAgOiBpbmRleE9mKHNlZW4sIGNvbXB1dGVkKSA8IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrIHx8IGlzTGFyZ2UpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzTGFyZ2UpIHtcbiAgICAgICAgcmVsZWFzZUFycmF5KHNlZW4uYXJyYXkpO1xuICAgICAgICByZWxlYXNlT2JqZWN0KHNlZW4pO1xuICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICByZWxlYXNlQXJyYXkoc2Vlbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYSBjb2xsZWN0aW9uLCBjcmVhdGluZyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBjb2xsZWN0aW9uXG4gICAgICogdGhyb3VnaCBhIGNhbGxiYWNrLiBUaGUgZ2l2ZW4gYHNldHRlcmAgZnVuY3Rpb24gc2V0cyB0aGUga2V5cyBhbmQgdmFsdWVzXG4gICAgICogb2YgdGhlIGNvbXBvc2VkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBzZXR0ZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbGxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgICAgc2V0dGVyKHJlc3VsdCwgdmFsdWUsIGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbiksIGNvbGxlY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICBzZXR0ZXIocmVzdWx0LCB2YWx1ZSwgY2FsbGJhY2sodmFsdWUsIGtleSwgY29sbGVjdGlvbiksIGNvbGxlY3Rpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2BcbiAgICAgKiB3aXRoIGFuIG9wdGlvbmFsIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgb2YgbWV0aG9kIGZsYWdzIHRvIGNvbXBvc2UuXG4gICAgICogIFRoZSBiaXRtYXNrIG1heSBiZSBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nIGZsYWdzOlxuICAgICAqICAxIC0gYF8uYmluZGBcbiAgICAgKiAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogIDQgLSBgXy5jdXJyeWBcbiAgICAgKiAgOCAtIGBfLmN1cnJ5YCAoYm91bmQpXG4gICAgICogIDE2IC0gYF8ucGFydGlhbGBcbiAgICAgKiAgMzIgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxBcmdzXSBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZVxuICAgICAqICBwcm92aWRlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsUmlnaHRBcmdzXSBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlXG4gICAgICogIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXBwZXIoZnVuYywgYml0bWFzaywgcGFydGlhbEFyZ3MsIHBhcnRpYWxSaWdodEFyZ3MsIHRoaXNBcmcsIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIDEsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIDIsXG4gICAgICAgICAgaXNDdXJyeSA9IGJpdG1hc2sgJiA0LFxuICAgICAgICAgIGlzQ3VycnlCb3VuZCA9IGJpdG1hc2sgJiA4LFxuICAgICAgICAgIGlzUGFydGlhbCA9IGJpdG1hc2sgJiAxNixcbiAgICAgICAgICBpc1BhcnRpYWxSaWdodCA9IGJpdG1hc2sgJiAzMjtcblxuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BhcnRpYWwgJiYgIXBhcnRpYWxBcmdzLmxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4xNjtcbiAgICAgICAgaXNQYXJ0aWFsID0gcGFydGlhbEFyZ3MgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BhcnRpYWxSaWdodCAmJiAhcGFydGlhbFJpZ2h0QXJncy5sZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+MzI7XG4gICAgICAgIGlzUGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0QXJncyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGJpbmREYXRhID0gZnVuYyAmJiBmdW5jLl9fYmluZERhdGFfXztcbiAgICAgIGlmIChiaW5kRGF0YSAmJiBiaW5kRGF0YSAhPT0gdHJ1ZSkge1xuICAgICAgICAvLyBjbG9uZSBgYmluZERhdGFgXG4gICAgICAgIGJpbmREYXRhID0gc2xpY2UoYmluZERhdGEpO1xuICAgICAgICBpZiAoYmluZERhdGFbMl0pIHtcbiAgICAgICAgICBiaW5kRGF0YVsyXSA9IHNsaWNlKGJpbmREYXRhWzJdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmluZERhdGFbM10pIHtcbiAgICAgICAgICBiaW5kRGF0YVszXSA9IHNsaWNlKGJpbmREYXRhWzNdKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgYHRoaXNCaW5kaW5nYCBpcyBub3QgcHJldmlvdXNseSBib3VuZFxuICAgICAgICBpZiAoaXNCaW5kICYmICEoYmluZERhdGFbMV0gJiAxKSkge1xuICAgICAgICAgIGJpbmREYXRhWzRdID0gdGhpc0FyZztcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgaWYgcHJldmlvdXNseSBib3VuZCBidXQgbm90IGN1cnJlbnRseSAoc3Vic2VxdWVudCBjdXJyaWVkIGZ1bmN0aW9ucylcbiAgICAgICAgaWYgKCFpc0JpbmQgJiYgYmluZERhdGFbMV0gJiAxKSB7XG4gICAgICAgICAgYml0bWFzayB8PSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vIHNldCBjdXJyaWVkIGFyaXR5IGlmIG5vdCB5ZXQgc2V0XG4gICAgICAgIGlmIChpc0N1cnJ5ICYmICEoYmluZERhdGFbMV0gJiA0KSkge1xuICAgICAgICAgIGJpbmREYXRhWzVdID0gYXJpdHk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwZW5kIHBhcnRpYWwgbGVmdCBhcmd1bWVudHNcbiAgICAgICAgaWYgKGlzUGFydGlhbCkge1xuICAgICAgICAgIHB1c2guYXBwbHkoYmluZERhdGFbMl0gfHwgKGJpbmREYXRhWzJdID0gW10pLCBwYXJ0aWFsQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwZW5kIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzXG4gICAgICAgIGlmIChpc1BhcnRpYWxSaWdodCkge1xuICAgICAgICAgIHVuc2hpZnQuYXBwbHkoYmluZERhdGFbM10gfHwgKGJpbmREYXRhWzNdID0gW10pLCBwYXJ0aWFsUmlnaHRBcmdzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBmbGFnc1xuICAgICAgICBiaW5kRGF0YVsxXSB8PSBiaXRtYXNrO1xuICAgICAgICByZXR1cm4gY3JlYXRlV3JhcHBlci5hcHBseShudWxsLCBiaW5kRGF0YSk7XG4gICAgICB9XG4gICAgICAvLyBmYXN0IHBhdGggZm9yIGBfLmJpbmRgXG4gICAgICB2YXIgY3JlYXRlciA9IChiaXRtYXNrID09IDEgfHwgYml0bWFzayA9PT0gMTcpID8gYmFzZUJpbmQgOiBiYXNlQ3JlYXRlV3JhcHBlcjtcbiAgICAgIHJldHVybiBjcmVhdGVyKFtmdW5jLCBiaXRtYXNrLCBwYXJ0aWFsQXJncywgcGFydGlhbFJpZ2h0QXJncywgdGhpc0FyZywgYXJpdHldKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGNvbXBpbGVkIGl0ZXJhdGlvbiBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbb3B0aW9uc10gVGhlIGNvbXBpbGUgb3B0aW9ucyBvYmplY3QocykuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFycmF5XSBDb2RlIHRvIGRldGVybWluZSBpZiB0aGUgaXRlcmFibGUgaXMgYW4gYXJyYXkgb3IgYXJyYXktbGlrZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZUhhc10gU3BlY2lmeSB1c2luZyBgaGFzT3duUHJvcGVydHlgIGNoZWNrcyBpbiB0aGUgb2JqZWN0IGxvb3AuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMua2V5c10gQSByZWZlcmVuY2UgdG8gYF8ua2V5c2AgZm9yIHVzZSBpbiBvd24gcHJvcGVydHkgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hcmdzXSBBIGNvbW1hIHNlcGFyYXRlZCBzdHJpbmcgb2YgaXRlcmF0aW9uIGZ1bmN0aW9uIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudG9wXSBDb2RlIHRvIGV4ZWN1dGUgYmVmb3JlIHRoZSBpdGVyYXRpb24gYnJhbmNoZXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvb3BdIENvZGUgdG8gZXhlY3V0ZSBpbiB0aGUgb2JqZWN0IGxvb3AuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJvdHRvbV0gQ29kZSB0byBleGVjdXRlIGFmdGVyIHRoZSBpdGVyYXRpb24gYnJhbmNoZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJdGVyYXRvcigpIHtcbiAgICAgIC8vIGRhdGEgcHJvcGVydGllc1xuICAgICAgaXRlcmF0b3JEYXRhLnNoYWRvd2VkUHJvcHMgPSBzaGFkb3dlZFByb3BzO1xuXG4gICAgICAvLyBpdGVyYXRvciBvcHRpb25zXG4gICAgICBpdGVyYXRvckRhdGEuYXJyYXkgPSBpdGVyYXRvckRhdGEuYm90dG9tID0gaXRlcmF0b3JEYXRhLmxvb3AgPSBpdGVyYXRvckRhdGEudG9wID0gJyc7XG4gICAgICBpdGVyYXRvckRhdGEuaW5pdCA9ICdpdGVyYWJsZSc7XG4gICAgICBpdGVyYXRvckRhdGEudXNlSGFzID0gdHJ1ZTtcblxuICAgICAgLy8gbWVyZ2Ugb3B0aW9ucyBpbnRvIGEgdGVtcGxhdGUgZGF0YSBvYmplY3RcbiAgICAgIGZvciAodmFyIG9iamVjdCwgaW5kZXggPSAwOyBvYmplY3QgPSBhcmd1bWVudHNbaW5kZXhdOyBpbmRleCsrKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBpdGVyYXRvckRhdGFba2V5XSA9IG9iamVjdFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IGl0ZXJhdG9yRGF0YS5hcmdzO1xuICAgICAgaXRlcmF0b3JEYXRhLmZpcnN0QXJnID0gL15bXixdKy8uZXhlYyhhcmdzKVswXTtcblxuICAgICAgLy8gY3JlYXRlIHRoZSBmdW5jdGlvbiBmYWN0b3J5XG4gICAgICB2YXIgZmFjdG9yeSA9IEZ1bmN0aW9uKFxuICAgICAgICAnYmFzZUNyZWF0ZUNhbGxiYWNrLCBlcnJvckNsYXNzLCBlcnJvclByb3RvLCBoYXNPd25Qcm9wZXJ0eSwgJyArXG4gICAgICAgICdpbmRpY2F0b3JPYmplY3QsIGlzQXJndW1lbnRzLCBpc0FycmF5LCBpc1N0cmluZywga2V5cywgb2JqZWN0UHJvdG8sICcgK1xuICAgICAgICAnb2JqZWN0VHlwZXMsIG5vbkVudW1Qcm9wcywgc3RyaW5nQ2xhc3MsIHN0cmluZ1Byb3RvLCB0b1N0cmluZycsXG4gICAgICAgICdyZXR1cm4gZnVuY3Rpb24oJyArIGFyZ3MgKyAnKSB7XFxuJyArIGl0ZXJhdG9yVGVtcGxhdGUoaXRlcmF0b3JEYXRhKSArICdcXG59J1xuICAgICAgKTtcblxuICAgICAgLy8gcmV0dXJuIHRoZSBjb21waWxlZCBmdW5jdGlvblxuICAgICAgcmV0dXJuIGZhY3RvcnkoXG4gICAgICAgIGJhc2VDcmVhdGVDYWxsYmFjaywgZXJyb3JDbGFzcywgZXJyb3JQcm90bywgaGFzT3duUHJvcGVydHksXG4gICAgICAgIGluZGljYXRvck9iamVjdCwgaXNBcmd1bWVudHMsIGlzQXJyYXksIGlzU3RyaW5nLCBpdGVyYXRvckRhdGEua2V5cywgb2JqZWN0UHJvdG8sXG4gICAgICAgIG9iamVjdFR5cGVzLCBub25FbnVtUHJvcHMsIHN0cmluZ0NsYXNzLCBzdHJpbmdQcm90bywgdG9TdHJpbmdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlSHRtbENoYXIobWF0Y2gpIHtcbiAgICAgIHJldHVybiBodG1sRXNjYXBlc1ttYXRjaF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpbmRleE9mXCIgZnVuY3Rpb24uIElmIHRoZSBgXy5pbmRleE9mYCBtZXRob2QgaXNcbiAgICAgKiBjdXN0b21pemVkLCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJuc1xuICAgICAqIHRoZSBgYmFzZUluZGV4T2ZgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIFwiaW5kZXhPZlwiIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEluZGV4T2YoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKHJlc3VsdCA9IGxvZGFzaC5pbmRleE9mKSA9PT0gaW5kZXhPZiA/IGJhc2VJbmRleE9mIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyAmJiByZU5hdGl2ZS50ZXN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGB0aGlzYCBiaW5kaW5nIGRhdGEgb24gYSBnaXZlbiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc2V0IGRhdGEgb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWUgVGhlIGRhdGEgYXJyYXkgdG8gc2V0LlxuICAgICAqL1xuICAgIHZhciBzZXRCaW5kRGF0YSA9ICFkZWZpbmVQcm9wZXJ0eSA/IG5vb3AgOiBmdW5jdGlvbihmdW5jLCB2YWx1ZSkge1xuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICAgICAgZGVmaW5lUHJvcGVydHkoZnVuYywgJ19fYmluZERhdGFfXycsIGRlc2NyaXB0b3IpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uIG9mIGBpc1BsYWluT2JqZWN0YCB3aGljaCBjaGVja3MgaWYgYSBnaXZlbiB2YWx1ZVxuICAgICAqIGlzIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3RvciwgYXNzdW1pbmcgb2JqZWN0cyBjcmVhdGVkXG4gICAgICogYnkgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yIGhhdmUgbm8gaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcyBhbmQgdGhhdFxuICAgICAqIHRoZXJlIGFyZSBubyBgT2JqZWN0LnByb3RvdHlwZWAgZXh0ZW5zaW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaGltSXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIGN0b3IsXG4gICAgICAgICAgcmVzdWx0O1xuXG4gICAgICAvLyBhdm9pZCBub24gT2JqZWN0IG9iamVjdHMsIGBhcmd1bWVudHNgIG9iamVjdHMsIGFuZCBET00gZWxlbWVudHNcbiAgICAgIGlmICghKHZhbHVlICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IG9iamVjdENsYXNzKSB8fFxuICAgICAgICAoY3RvciA9IHZhbHVlLmNvbnN0cnVjdG9yLCBpc0Z1bmN0aW9uKGN0b3IpICYmICEoY3RvciBpbnN0YW5jZW9mIGN0b3IpKSB8fFxuICAgICAgICAoIXN1cHBvcnQuYXJnc0NsYXNzICYmIGlzQXJndW1lbnRzKHZhbHVlKSkgfHxcbiAgICAgICAgKCFzdXBwb3J0Lm5vZGVDbGFzcyAmJiBpc05vZGUodmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBJRSA8IDkgaXRlcmF0ZXMgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIG93biBwcm9wZXJ0aWVzLiBJZiB0aGUgZmlyc3RcbiAgICAgIC8vIGl0ZXJhdGVkIHByb3BlcnR5IGlzIGFuIG9iamVjdCdzIG93biBwcm9wZXJ0eSB0aGVuIHRoZXJlIGFyZSBubyBpbmhlcml0ZWRcbiAgICAgIC8vIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgIGlmIChzdXBwb3J0Lm93bkxhc3QpIHtcbiAgICAgICAgZm9ySW4odmFsdWUsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICAgIHJlc3VsdCA9IGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQgIT09IGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gSW4gbW9zdCBlbnZpcm9ubWVudHMgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMgYXJlIGl0ZXJhdGVkIGJlZm9yZVxuICAgICAgLy8gaXRzIGluaGVyaXRlZCBwcm9wZXJ0aWVzLiBJZiB0aGUgbGFzdCBpdGVyYXRlZCBwcm9wZXJ0eSBpcyBhbiBvYmplY3Qnc1xuICAgICAgLy8gb3duIHByb3BlcnR5IHRoZW4gdGhlcmUgYXJlIG5vIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICBmb3JJbih2YWx1ZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0eXBlb2YgcmVzdWx0ID09ICd1bmRlZmluZWQnIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgdW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2ggVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGVIdG1sQ2hhcihtYXRjaCkge1xuICAgICAgcmV0dXJuIGh0bWxVbmVzY2FwZXNbbWF0Y2hdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8uaXNBcmd1bWVudHMoYXJndW1lbnRzKTsgfSkoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcmdzQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuICAgIC8vIGZhbGxiYWNrIGZvciBicm93c2VycyB0aGF0IGNhbid0IGRldGVjdCBgYXJndW1lbnRzYCBvYmplY3RzIGJ5IFtbQ2xhc3NdXVxuICAgIGlmICghc3VwcG9ydC5hcmdzQ2xhc3MpIHtcbiAgICAgIGlzQXJndW1lbnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09ICdudW1iZXInICYmXG4gICAgICAgICAgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgZmFsc2U7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAoZnVuY3Rpb24oKSB7IHJldHVybiBfLmlzQXJyYXkoYXJndW1lbnRzKTsgfSkoKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT0gJ251bWJlcicgJiZcbiAgICAgICAgICB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcnJheUNsYXNzIHx8IGZhbHNlO1xuICAgICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgZmFsbGJhY2sgaW1wbGVtZW50YXRpb24gb2YgYE9iamVjdC5rZXlzYCB3aGljaCBwcm9kdWNlcyBhbiBhcnJheSBvZiB0aGVcbiAgICAgKiBnaXZlbiBvYmplY3QncyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgdmFyIHNoaW1LZXlzID0gY3JlYXRlSXRlcmF0b3Ioe1xuICAgICAgJ2FyZ3MnOiAnb2JqZWN0JyxcbiAgICAgICdpbml0JzogJ1tdJyxcbiAgICAgICd0b3AnOiAnaWYgKCEob2JqZWN0VHlwZXNbdHlwZW9mIG9iamVjdF0pKSByZXR1cm4gcmVzdWx0JyxcbiAgICAgICdsb29wJzogJ3Jlc3VsdC5wdXNoKGluZGV4KSdcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY29tcG9zZWQgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtleXMoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSk7XG4gICAgICogLy8gPT4gWydvbmUnLCAndHdvJywgJ3RocmVlJ10gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpXG4gICAgICovXG4gICAgdmFyIGtleXMgPSAhbmF0aXZlS2V5cyA/IHNoaW1LZXlzIDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKChzdXBwb3J0LmVudW1Qcm90b3R5cGVzICYmIHR5cGVvZiBvYmplY3QgPT0gJ2Z1bmN0aW9uJykgfHxcbiAgICAgICAgKHN1cHBvcnQubm9uRW51bUFyZ3MgJiYgb2JqZWN0Lmxlbmd0aCAmJiBpc0FyZ3VtZW50cyhvYmplY3QpKSkge1xuICAgICAgICByZXR1cm4gc2hpbUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgfTtcblxuICAgIC8qKiBSZXVzYWJsZSBpdGVyYXRvciBvcHRpb25zIHNoYXJlZCBieSBgZWFjaGAsIGBmb3JJbmAsIGFuZCBgZm9yT3duYCAqL1xuICAgIHZhciBlYWNoSXRlcmF0b3JPcHRpb25zID0ge1xuICAgICAgJ2FyZ3MnOiAnY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcnLFxuICAgICAgJ3RvcCc6IFwiY2FsbGJhY2sgPSBjYWxsYmFjayAmJiB0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJyA/IGNhbGxiYWNrIDogYmFzZUNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKVwiLFxuICAgICAgJ2FycmF5JzogXCJ0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInXCIsXG4gICAgICAna2V5cyc6IGtleXMsXG4gICAgICAnbG9vcCc6ICdpZiAoY2FsbGJhY2soaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbikgPT09IGZhbHNlKSByZXR1cm4gcmVzdWx0J1xuICAgIH07XG5cbiAgICAvKiogUmV1c2FibGUgaXRlcmF0b3Igb3B0aW9ucyBmb3IgYGFzc2lnbmAgYW5kIGBkZWZhdWx0c2AgKi9cbiAgICB2YXIgZGVmYXVsdHNJdGVyYXRvck9wdGlvbnMgPSB7XG4gICAgICAnYXJncyc6ICdvYmplY3QsIHNvdXJjZSwgZ3VhcmQnLFxuICAgICAgJ3RvcCc6XG4gICAgICAndmFyIGFyZ3MgPSBhcmd1bWVudHMsXFxuJyArXG4gICAgICAnICAgIGFyZ3NJbmRleCA9IDAsXFxuJyArXG4gICAgICBcIiAgICBhcmdzTGVuZ3RoID0gdHlwZW9mIGd1YXJkID09ICdudW1iZXInID8gMiA6IGFyZ3MubGVuZ3RoO1xcblwiICtcbiAgICAgICd3aGlsZSAoKythcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XFxuJyArXG4gICAgICAnICBpdGVyYWJsZSA9IGFyZ3NbYXJnc0luZGV4XTtcXG4nICtcbiAgICAgICcgIGlmIChpdGVyYWJsZSAmJiBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdKSB7JyxcbiAgICAgICdrZXlzJzoga2V5cyxcbiAgICAgICdsb29wJzogXCJpZiAodHlwZW9mIHJlc3VsdFtpbmRleF0gPT0gJ3VuZGVmaW5lZCcpIHJlc3VsdFtpbmRleF0gPSBpdGVyYWJsZVtpbmRleF1cIixcbiAgICAgICdib3R0b20nOiAnICB9XFxufSdcbiAgICB9O1xuXG4gICAgLyoqIFJldXNhYmxlIGl0ZXJhdG9yIG9wdGlvbnMgZm9yIGBmb3JJbmAgYW5kIGBmb3JPd25gICovXG4gICAgdmFyIGZvck93bkl0ZXJhdG9yT3B0aW9ucyA9IHtcbiAgICAgICd0b3AnOiAnaWYgKCFvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdKSByZXR1cm4gcmVzdWx0O1xcbicgKyBlYWNoSXRlcmF0b3JPcHRpb25zLnRvcCxcbiAgICAgICdhcnJheSc6IGZhbHNlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXM6XG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIGA+YCBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZSBgPmAgYW5kIGAvYFxuICAgICAqIGRvbid0IHJlcXVpcmUgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmcgdW5sZXNzIHRoZXkncmUgcGFydFxuICAgICAqIG9mIGEgdGFnIG9yIGFuIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcyAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIilcbiAgICAgKi9cbiAgICB2YXIgaHRtbEVzY2FwZXMgPSB7XG4gICAgICAnJic6ICcmYW1wOycsXG4gICAgICAnPCc6ICcmbHQ7JyxcbiAgICAgICc+JzogJyZndDsnLFxuICAgICAgJ1wiJzogJyZxdW90OycsXG4gICAgICBcIidcIjogJyYjMzk7J1xuICAgIH07XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycyAqL1xuICAgIHZhciBodG1sVW5lc2NhcGVzID0gaW52ZXJ0KGh0bWxFc2NhcGVzKTtcblxuICAgIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycyAqL1xuICAgIHZhciByZUVzY2FwZWRIdG1sID0gUmVnRXhwKCcoJyArIGtleXMoaHRtbFVuZXNjYXBlcykuam9pbignfCcpICsgJyknLCAnZycpLFxuICAgICAgICByZVVuZXNjYXBlZEh0bWwgPSBSZWdFeHAoJ1snICsga2V5cyhodG1sRXNjYXBlcykuam9pbignJykgKyAnXScsICdnJyk7XG5cbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIGNvbXBpbGVkIHRvIGl0ZXJhdGUgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBvYmplY3RzLCBhbmRcbiAgICAgKiBzdHJpbmdzIGNvbnNpc3Rlbmx5IGFjcm9zcyBlbnZpcm9ubWVudHMsIGV4ZWN1dGluZyB0aGUgY2FsbGJhY2sgZm9yIGVhY2hcbiAgICAgKiBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4gQ2FsbGJhY2tzIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fHN0cmluZ30gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlSXRlcmF0b3IoZWFjaEl0ZXJhdG9yT3B0aW9ucyk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvblxuICAgICAqIG9iamVjdC4gU3Vic2VxdWVudCBzb3VyY2VzIHdpbGwgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzXG4gICAgICogc291cmNlcy4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHByb2R1Y2UgdGhlXG4gICAgICogYXNzaWduZWQgdmFsdWVzLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOyAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmluZyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICduYW1lJzogJ2ZyZWQnIH0sIHsgJ2VtcGxveWVyJzogJ3NsYXRlJyB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnLCAnZW1wbG95ZXInOiAnc2xhdGUnIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduLCBmdW5jdGlvbihhLCBiKSB7XG4gICAgICogICByZXR1cm4gdHlwZW9mIGEgPT0gJ3VuZGVmaW5lZCcgPyBiIDogYTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2Jhcm5leScgfTtcbiAgICAgKiBkZWZhdWx0cyhvYmplY3QsIHsgJ25hbWUnOiAnZnJlZCcsICdlbXBsb3llcic6ICdzbGF0ZScgfSk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdiYXJuZXknLCAnZW1wbG95ZXInOiAnc2xhdGUnIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlSXRlcmF0b3IoZGVmYXVsdHNJdGVyYXRvck9wdGlvbnMsIHtcbiAgICAgICd0b3AnOlxuICAgICAgICBkZWZhdWx0c0l0ZXJhdG9yT3B0aW9ucy50b3AucmVwbGFjZSgnOycsXG4gICAgICAgICAgJztcXG4nICtcbiAgICAgICAgICBcImlmIChhcmdzTGVuZ3RoID4gMyAmJiB0eXBlb2YgYXJnc1thcmdzTGVuZ3RoIC0gMl0gPT0gJ2Z1bmN0aW9uJykge1xcblwiICtcbiAgICAgICAgICAnICB2YXIgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soYXJnc1stLWFyZ3NMZW5ndGggLSAxXSwgYXJnc1thcmdzTGVuZ3RoLS1dLCAyKTtcXG4nICtcbiAgICAgICAgICBcIn0gZWxzZSBpZiAoYXJnc0xlbmd0aCA+IDIgJiYgdHlwZW9mIGFyZ3NbYXJnc0xlbmd0aCAtIDFdID09ICdmdW5jdGlvbicpIHtcXG5cIiArXG4gICAgICAgICAgJyAgY2FsbGJhY2sgPSBhcmdzWy0tYXJnc0xlbmd0aF07XFxuJyArXG4gICAgICAgICAgJ30nXG4gICAgICAgICksXG4gICAgICAnbG9vcCc6ICdyZXN1bHRbaW5kZXhdID0gY2FsbGJhY2sgPyBjYWxsYmFjayhyZXN1bHRbaW5kZXhdLCBpdGVyYWJsZVtpbmRleF0pIDogaXRlcmFibGVbaW5kZXhdJ1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB2YWx1ZWAuIElmIGBpc0RlZXBgIGlzIGB0cnVlYCBuZXN0ZWQgb2JqZWN0cyB3aWxsIGFsc29cbiAgICAgKiBiZSBjbG9uZWQsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgYXNzaWduZWQgYnkgcmVmZXJlbmNlLiBJZiBhIGNhbGxiYWNrXG4gICAgICogaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWVzLiBJZiB0aGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB1bmRlZmluZWRgIGNsb25pbmcgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC5cbiAgICAgKiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXA9ZmFsc2VdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShjaGFyYWN0ZXJzKTtcbiAgICAgKiBzaGFsbG93WzBdID09PSBjaGFyYWN0ZXJzWzBdO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZShjaGFyYWN0ZXJzLCB0cnVlKTtcbiAgICAgKiBkZWVwWzBdID09PSBjaGFyYWN0ZXJzWzBdO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLm1peGluKHtcbiAgICAgKiAgICdjbG9uZSc6IF8ucGFydGlhbFJpZ2h0KF8uY2xvbmUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgIHJldHVybiBfLmlzRWxlbWVudCh2YWx1ZSkgPyB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAqICAgfSlcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjbG9uZSA9IF8uY2xvbmUoZG9jdW1lbnQuYm9keSk7XG4gICAgICogY2xvbmUuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlLCBpc0RlZXAsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAvLyBhbGxvd3Mgd29ya2luZyB3aXRoIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzIHdpdGhvdXQgdXNpbmcgdGhlaXIgYGluZGV4YFxuICAgICAgLy8gYW5kIGBjb2xsZWN0aW9uYCBhcmd1bWVudHMgZm9yIGBpc0RlZXBgIGFuZCBgY2FsbGJhY2tgXG4gICAgICBpZiAodHlwZW9mIGlzRGVlcCAhPSAnYm9vbGVhbicgJiYgaXNEZWVwICE9IG51bGwpIHtcbiAgICAgICAgdGhpc0FyZyA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayA9IGlzRGVlcDtcbiAgICAgICAgaXNEZWVwID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBpc0RlZXAsIHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nICYmIGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWVwIGNsb25lIG9mIGB2YWx1ZWAuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZVxuICAgICAqIGV4ZWN1dGVkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZXMuIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogY2xvbmluZyB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG9cbiAgICAgKiBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZSBzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobS4gRnVuY3Rpb25zXG4gICAgICogYW5kIERPTSBub2RlcyBhcmUgKipub3QqKiBjbG9uZWQuIFRoZSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhbmRcbiAgICAgKiBvYmplY3RzIGNyZWF0ZWQgYnkgY29uc3RydWN0b3JzIG90aGVyIHRoYW4gYE9iamVjdGAgYXJlIGNsb25lZCB0byBwbGFpbiBgT2JqZWN0YCBvYmplY3RzLlxuICAgICAqIFNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmZyYXN0cnVjdHVyZS5odG1sI2ludGVybmFsLXN0cnVjdHVyZWQtY2xvbmluZy1hbGdvcml0aG0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGRlZXAgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKGNoYXJhY3RlcnMpO1xuICAgICAqIGRlZXBbMF0gPT09IGNoYXJhY3RlcnNbMF07XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ25vZGUnOiBlbGVtZW50XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjbG9uZSA9IF8uY2xvbmVEZWVwKHZpZXcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc0VsZW1lbnQodmFsdWUpID8gdmFsdWUuY2xvbmVOb2RlKHRydWUpIDogdW5kZWZpbmVkO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY2xvbmUubm9kZSA9PSB2aWV3Lm5vZGU7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCB0cnVlLCB0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyAmJiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGdpdmVuIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgcHJvdmlkZWQgaXRzIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGFzc2lnbmVkXG4gICAgICogdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHsgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPyBhc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdChzKSB0byB0aGUgZGVzdGluYXRpb25cbiAgICAgKiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gT25jZSBhXG4gICAgICogcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIGRlZmF1bHRzIG9mIHRoZSBzYW1lIHByb3BlcnR5IHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gQWxsb3dzIHdvcmtpbmcgd2l0aCBgXy5yZWR1Y2VgIHdpdGhvdXQgdXNpbmcgaXRzXG4gICAgICogIGBrZXlgIGFuZCBgb2JqZWN0YCBhcmd1bWVudHMgYXMgc291cmNlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2Jhcm5leScgfTtcbiAgICAgKiBfLmRlZmF1bHRzKG9iamVjdCwgeyAnbmFtZSc6ICdmcmVkJywgJ2VtcGxveWVyJzogJ3NsYXRlJyB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2Jhcm5leScsICdlbXBsb3llcic6ICdzbGF0ZScgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGNyZWF0ZUl0ZXJhdG9yKGRlZmF1bHRzSXRlcmF0b3JPcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudCB0aGF0IHBhc3NlcyB0aGUgY2FsbGJhY2sgY2hlY2ssIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyXG4gICAgICogIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG9cbiAgICAgKiAgY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiB7ICAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgICdmcmVkJzogeyAgICAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2Jsb2NrZWQnOiBmYWxzZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleShjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlIDwgNDA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRLZXkoY2hhcmFjdGVycywgeyAnYWdlJzogMSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZEtleShjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIGZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXJcbiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0b1xuICAgICAqICBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6IHsgICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6IHsgICAgJ2FnZSc6IDQwLCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYmxvY2tlZCc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KGNoYXJhY3RlcnMsIGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgcmV0dXJuIGNoci5hZ2UgPCA0MDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zIGBwZWJibGVzYCwgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyBgYmFybmV5YFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEtleShjaGFyYWN0ZXJzLCB7ICdhZ2UnOiA0MCB9KTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZExhc3RLZXkoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgZm9yT3duUmlnaHQob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0LFxuICAgICAqIGV4ZWN1dGluZyB0aGUgY2FsbGJhY2sgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBrZXksIG9iamVjdCkuIENhbGxiYWNrcyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBTaGFwZS5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHRoaXMueCArPSB4O1xuICAgICAqICAgdGhpcy55ICs9IHk7XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IFNoYXBlLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJ3gnLCAneScsIGFuZCAnbW92ZScgKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpXG4gICAgICovXG4gICAgdmFyIGZvckluID0gY3JlYXRlSXRlcmF0b3IoZWFjaEl0ZXJhdG9yT3B0aW9ucywgZm9yT3duSXRlcmF0b3JPcHRpb25zLCB7XG4gICAgICAndXNlSGFzJzogZmFsc2VcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBTaGFwZS5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHRoaXMueCArPSB4O1xuICAgICAqICAgdGhpcy55ICs9IHk7XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgU2hhcGUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAnbW92ZScsICd5JywgYW5kICd4JyBhc3N1bWluZyBgXy5mb3JJbiBgIGxvZ3MgJ3gnLCAneScsIGFuZCAnbW92ZSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBwYWlycyA9IFtdO1xuXG4gICAgICBmb3JJbihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcGFpcnMucHVzaChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMubGVuZ3RoO1xuICAgICAgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayhwYWlyc1tsZW5ndGgtLV0sIHBhaXJzW2xlbmd0aF0sIG9iamVjdCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCwgZXhlY3V0aW5nIHRoZSBjYWxsYmFja1xuICAgICAqIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM7ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBDYWxsYmFja3MgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5XG4gICAgICogZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKHsgJzAnOiAnemVybycsICcxJzogJ29uZScsICdsZW5ndGgnOiAyIH0sIGZ1bmN0aW9uKG51bSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJzAnLCAnMScsIGFuZCAnbGVuZ3RoJyAocHJvcGVydHkgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIGVudmlyb25tZW50cylcbiAgICAgKi9cbiAgICB2YXIgZm9yT3duID0gY3JlYXRlSXRlcmF0b3IoZWFjaEl0ZXJhdG9yT3B0aW9ucywgZm9yT3duSXRlcmF0b3JPcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYSBgY29sbGVjdGlvbmAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQoeyAnMCc6ICd6ZXJvJywgJzEnOiAnb25lJywgJ2xlbmd0aCc6IDIgfSwgZnVuY3Rpb24obnVtLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAnbGVuZ3RoJywgJzEnLCBhbmQgJzAnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnMCcsICcxJywgYW5kICdsZW5ndGgnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdO1xuICAgICAgICBpZiAoY2FsbGJhY2sob2JqZWN0W2tleV0sIGtleSwgb2JqZWN0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc29ydGVkIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIG9mIGFsbCBlbnVtZXJhYmxlIHByb3BlcnRpZXMsXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQsIG9mIGBvYmplY3RgIHRoYXQgaGF2ZSBmdW5jdGlvbiB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgbWV0aG9kc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIHRoYXQgaGF2ZSBmdW5jdGlvbiB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKF8pO1xuICAgICAqIC8vID0+IFsnYWxsJywgJ2FueScsICdiaW5kJywgJ2JpbmRBbGwnLCAnY2xvbmUnLCAnY29tcGFjdCcsICdjb21wb3NlJywgLi4uXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IG5hbWUgZXhpc3RzIGFzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLFxuICAgICAqIGluc3RlYWQgb2YgYW4gaW5oZXJpdGVkIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYga2V5IGlzIGEgZGlyZWN0IHByb3BlcnR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGFzKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCAnYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPyBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgdGhlIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjcmVhdGVkIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnZlcnQoeyAnZmlyc3QnOiAnZnJlZCcsICdzZWNvbmQnOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogJ2ZpcnN0JywgJ2Jhcm5leSc6ICdzZWNvbmQnIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnZlcnQob2JqZWN0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBwcm9wcyA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtvYmplY3Rba2V5XV0gPSBrZXk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgYm9vbGVhbiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYm9vbENsYXNzIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZGF0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgZGF0ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBkYXRlQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLm5vZGVUeXBlID09PSAxIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGVtcHR5LiBBcnJheXMsIHN0cmluZ3MsIG9yIGBhcmd1bWVudHNgIG9iamVjdHMgd2l0aCBhXG4gICAgICogbGVuZ3RoIG9mIGAwYCBhbmQgb2JqZWN0cyB3aXRoIG5vIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGNvbnNpZGVyZWRcbiAgICAgKiBcImVtcHR5XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgnJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwodmFsdWUpLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcblxuICAgICAgaWYgKChjbGFzc05hbWUgPT0gYXJyYXlDbGFzcyB8fCBjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MgfHxcbiAgICAgICAgKHN1cHBvcnQuYXJnc0NsYXNzID8gY2xhc3NOYW1lID09IGFyZ3NDbGFzcyA6IGlzQXJndW1lbnRzKHZhbHVlKSkpIHx8XG4gICAgICAgIChjbGFzc05hbWUgPT0gb2JqZWN0Q2xhc3MgJiYgdHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNwbGljZSkpKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yT3duKHZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChyZXN1bHQgPSBmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQgdG8gZWFjaCBvdGhlci4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkXG4gICAgICogdG8gY29tcGFyZSB2YWx1ZXMuIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGB1bmRlZmluZWRgIGNvbXBhcmlzb25zIHdpbGxcbiAgICAgKiBiZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmRcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czsgKGEsIGIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IGEgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBiIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICogdmFyIGNvcHkgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiBvYmplY3QgPT0gY29weTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgY29weSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHdvcmRzID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyV29yZHMgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbCh3b3Jkcywgb3RoZXJXb3JkcywgZnVuY3Rpb24oYSwgYikge1xuICAgICAqICAgdmFyIHJlR3JlZXQgPSAvXig/OmhlbGxvfGhpKSQvaSxcbiAgICAgKiAgICAgICBhR3JlZXQgPSBfLmlzU3RyaW5nKGEpICYmIHJlR3JlZXQudGVzdChhKSxcbiAgICAgKiAgICAgICBiR3JlZXQgPSBfLmlzU3RyaW5nKGIpICYmIHJlR3JlZXQudGVzdChiKTtcbiAgICAgKlxuICAgICAqICAgcmV0dXJuIChhR3JlZXQgfHwgYkdyZWV0KSA/IChhR3JlZXQgPT0gYkdyZWV0KSA6IHVuZGVmaW5lZDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbChhLCBiLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKGEsIGIsIHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nICYmIGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzLCBvciBjYW4gYmUgY29lcmNlZCB0bywgYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgbmF0aXZlIGBpc0Zpbml0ZWAgd2hpY2ggd2lsbCByZXR1cm4gdHJ1ZSBmb3JcbiAgICAgKiBib29sZWFucyBhbmQgZW1wdHkgc3RyaW5ncy4gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBmaW5pdGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgtMTAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCcxMCcpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUodHJ1ZSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlSXNGaW5pdGUodmFsdWUpICYmICFuYXRpdmVJc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbic7XG4gICAgfVxuICAgIC8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuICAgIGlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgICAgIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gZnVuY0NsYXNzO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGUgbGFuZ3VhZ2UgdHlwZSBvZiBPYmplY3QuXG4gICAgICogKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlIGlzIHRoZSBFQ01BU2NyaXB0IGxhbmd1YWdlIHR5cGUgb2YgT2JqZWN0XG4gICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDhcbiAgICAgIC8vIGFuZCBhdm9pZCBhIFY4IGJ1Z1xuICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MVxuICAgICAgcmV0dXJuICEhKHZhbHVlICYmIG9iamVjdFR5cGVzW3R5cGVvZiB2YWx1ZV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgbmF0aXZlIGBpc05hTmAgd2hpY2ggd2lsbCByZXR1cm4gYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtZXJpYyB2YWx1ZXMuIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi40LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBgTmFOYCBhcyBhIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGZcbiAgICAgIC8vIChwZXJmb3JtIHRoZSBbW0NsYXNzXV0gY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZSBob3N0IG9iamVjdHMgaW4gSUUpXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogTm90ZTogYE5hTmAgaXMgY29uc2lkZXJlZCBhIG51bWJlci4gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4OC41LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcig4LjQgKiA1KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IG51bWJlckNsYXNzIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IFNoYXBlKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICB2YXIgaXNQbGFpbk9iamVjdCA9ICFnZXRQcm90b3R5cGVPZiA/IHNoaW1Jc1BsYWluT2JqZWN0IDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghKHZhbHVlICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IG9iamVjdENsYXNzKSB8fCAoIXN1cHBvcnQuYXJnc0NsYXNzICYmIGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlT2YgPSB2YWx1ZS52YWx1ZU9mLFxuICAgICAgICAgIG9ialByb3RvID0gaXNOYXRpdmUodmFsdWVPZikgJiYgKG9ialByb3RvID0gZ2V0UHJvdG90eXBlT2YodmFsdWVPZikpICYmIGdldFByb3RvdHlwZU9mKG9ialByb3RvKTtcblxuICAgICAgcmV0dXJuIG9ialByb3RvXG4gICAgICAgID8gKHZhbHVlID09IG9ialByb3RvIHx8IGdldFByb3RvdHlwZU9mKHZhbHVlKSA9PSBvYmpQcm90bylcbiAgICAgICAgOiBzaGltSXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcmVndWxhciBleHByZXNzaW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvZnJlZC8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICYmIG9iamVjdFR5cGVzW3R5cGVvZiB2YWx1ZV0gJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gcmVnZXhwQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdmcmVkJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzdHJpbmdDbGFzcyB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkIGJ5XG4gICAgICogcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocm91Z2ggdGhlIGNhbGxiYWNrLlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBvYmplY3Qgd2l0aCB2YWx1ZXMgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXMoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzfSAsIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICogMzsgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDMsICdiJzogNiwgJ2MnOiA5IH1cbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcFZhbHVlcyhjaGFyYWN0ZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG5cbiAgICAgIGZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgbWVyZ2VzIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBvYmplY3QocyksIHRoYXRcbiAgICAgKiBkb24ndCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGludG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gU3Vic2VxdWVudCBzb3VyY2VzXG4gICAgICogd2lsbCBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy4gSWYgYSBjYWxsYmFjayBpc1xuICAgICAqIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb25cbiAgICAgKiBhbmQgc291cmNlIHByb3BlcnRpZXMuIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGB1bmRlZmluZWRgIG1lcmdpbmcgd2lsbFxuICAgICAqIGJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZFxuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOyAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdpbmcgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBuYW1lcyA9IHtcbiAgICAgKiAgICdjaGFyYWN0ZXJzJzogW1xuICAgICAqICAgICB7ICduYW1lJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgICAgeyAnbmFtZSc6ICdmcmVkJyB9XG4gICAgICogICBdXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBhZ2VzID0ge1xuICAgICAqICAgJ2NoYXJhY3RlcnMnOiBbXG4gICAgICogICAgIHsgJ2FnZSc6IDM2IH0sXG4gICAgICogICAgIHsgJ2FnZSc6IDQwIH1cbiAgICAgKiAgIF1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShuYW1lcywgYWdlcyk7XG4gICAgICogLy8gPT4geyAnY2hhcmFjdGVycyc6IFt7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LCB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV0gfVxuICAgICAqXG4gICAgICogdmFyIGZvb2QgPSB7XG4gICAgICogICAnZnJ1aXRzJzogWydhcHBsZSddLFxuICAgICAqICAgJ3ZlZ2V0YWJsZXMnOiBbJ2JlZXQnXVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXJGb29kID0ge1xuICAgICAqICAgJ2ZydWl0cyc6IFsnYmFuYW5hJ10sXG4gICAgICogICAndmVnZXRhYmxlcyc6IFsnY2Fycm90J11cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShmb29kLCBvdGhlckZvb2QsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzQXJyYXkoYSkgPyBhLmNvbmNhdChiKSA6IHVuZGVmaW5lZDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcnVpdHMnOiBbJ2FwcGxlJywgJ2JhbmFuYSddLCAndmVnZXRhYmxlcyc6IFsnYmVldCcsICdjYXJyb3RdIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZShvYmplY3QpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIGxlbmd0aCA9IDI7XG5cbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgLy8gYWxsb3dzIHdvcmtpbmcgd2l0aCBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAgd2l0aG91dCB1c2luZ1xuICAgICAgLy8gdGhlaXIgYGluZGV4YCBhbmQgYGNvbGxlY3Rpb25gIGFyZ3VtZW50c1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzJdICE9ICdudW1iZXInKSB7XG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+IDMgJiYgdHlwZW9mIGFyZ3NbbGVuZ3RoIC0gMl0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soYXJnc1stLWxlbmd0aCAtIDFdLCBhcmdzW2xlbmd0aC0tXSwgMik7XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgdHlwZW9mIGFyZ3NbbGVuZ3RoIC0gMV0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IGFyZ3NbLS1sZW5ndGhdO1xuICAgICAgfVxuICAgICAgdmFyIHNvdXJjZXMgPSBzbGljZShhcmd1bWVudHMsIDEsIGxlbmd0aCksXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBzdGFja0EgPSBnZXRBcnJheSgpLFxuICAgICAgICAgIHN0YWNrQiA9IGdldEFycmF5KCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZXNbaW5kZXhdLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgfVxuICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQSk7XG4gICAgICByZWxlYXNlQXJyYXkoc3RhY2tCKTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYG9iamVjdGAgZXhjbHVkaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZlxuICAgICAqIHByb3BlcnR5IG5hbWVzLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2hcbiAgICAgKiBwcm9wZXJ0eSBvZiBgb2JqZWN0YCBvbWl0dGluZyB0aGUgcHJvcGVydGllcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleVxuICAgICAqIGZvci4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50cztcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufC4uLnN0cmluZ3xzdHJpbmdbXX0gW2NhbGxiYWNrXSBUaGUgcHJvcGVydGllcyB0byBvbWl0IG9yIHRoZVxuICAgICAqICBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRob3V0IHRoZSBvbWl0dGVkIHByb3BlcnRpZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ub21pdCh7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSwgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnZnJlZCcgfVxuICAgICAqXG4gICAgICogXy5vbWl0KHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0KG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcHJvcHMgPSBbXTtcbiAgICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgcHJvcHMucHVzaChrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvcHMgPSBiYXNlRGlmZmVyZW5jZShwcm9wcywgYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSkpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IG9iamVjdFtrZXldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgICAgaWYgKCFjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0d28gZGltZW5zaW9uYWwgYXJyYXkgb2YgYW4gb2JqZWN0J3Mga2V5LXZhbHVlIHBhaXJzLFxuICAgICAqIGkuZS4gYFtba2V5MSwgdmFsdWUxXSwgW2tleTIsIHZhbHVlMl1dYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIG5ldyBhcnJheSBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFpcnMoeyAnYmFybmV5JzogMzYsICdmcmVkJzogNDAgfSk7XG4gICAgICogLy8gPT4gW1snYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCA0MF1dIChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhaXJzKG9iamVjdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGBvYmplY3RgIGNvbXBvc2VkIG9mIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZlxuICAgICAqIHByb3BlcnR5IG5hbWVzLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2hcbiAgICAgKiBwcm9wZXJ0eSBvZiBgb2JqZWN0YCBwaWNraW5nIHRoZSBwcm9wZXJ0aWVzIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5XG4gICAgICogZm9yLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzO1xuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258Li4uc3RyaW5nfHN0cmluZ1tdfSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyXG4gICAgICogIGl0ZXJhdGlvbiBvciBwcm9wZXJ0eSBuYW1lcyB0byBwaWNrLCBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBwcm9wZXJ0eVxuICAgICAqICBuYW1lcyBvciBhcnJheXMgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBpY2soeyAnbmFtZSc6ICdmcmVkJywgJ191c2VyaWQnOiAnZnJlZDEnIH0sICduYW1lJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdmcmVkJyB9XG4gICAgICpcbiAgICAgKiBfLnBpY2soeyAnbmFtZSc6ICdmcmVkJywgJ191c2VyaWQnOiAnZnJlZDEnIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkuY2hhckF0KDApICE9ICdfJztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrKG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIHByb3BzID0gYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSksXG4gICAgICAgICAgICBsZW5ndGggPSBpc09iamVjdChvYmplY3QpID8gcHJvcHMubGVuZ3RoIDogMDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYCB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyB0aHJvdWdoIGEgY2FsbGJhY2ssIHdpdGggZWFjaCBjYWxsYmFjayBleGVjdXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0b1xuICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOyAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogQ2FsbGJhY2tzIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNxdWFyZXMgPSBfLnRyYW5zZm9ybShbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdLCBmdW5jdGlvbihyZXN1bHQsIG51bSkge1xuICAgICAqICAgbnVtICo9IG51bTtcbiAgICAgKiAgIGlmIChudW0gJSAyKSB7XG4gICAgICogICAgIHJldHVybiByZXN1bHQucHVzaChudW0pIDwgMztcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgOSwgMjVdXG4gICAgICpcbiAgICAgKiB2YXIgbWFwcGVkID0gXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIGZ1bmN0aW9uKHJlc3VsdCwgbnVtLCBrZXkpIHtcbiAgICAgKiAgIHJlc3VsdFtrZXldID0gbnVtICogMztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMywgJ2InOiA2LCAnYyc6IDkgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGNhbGxiYWNrLCBhY2N1bXVsYXRvciwgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICAgIHByb3RvID0gY3RvciAmJiBjdG9yLnByb3RvdHlwZTtcblxuICAgICAgICAgIGFjY3VtdWxhdG9yID0gYmFzZUNyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgNCk7XG4gICAgICAgIChpc0FyciA/IGJhc2VFYWNoIDogZm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY29tcG9zZWQgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gb2JqZWN0W3Byb3BzW2luZGV4XV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5kZXhlcywgb3Iga2V5cywgb2YgdGhlXG4gICAgICogYGNvbGxlY3Rpb25gLiBJbmRleGVzIG1heSBiZSBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMgb3IgYXMgYXJyYXlzXG4gICAgICogb2YgaW5kZXhlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdfHN0cmluZ3xzdHJpbmdbXSl9IFtpbmRleF0gVGhlIGluZGV4ZXMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogICB0byByZXRyaWV2ZSwgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgaW5kZXhlcyBvciBhcnJheXMgb2YgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZWxlbWVudHMgY29ycmVzcG9uZGluZyB0byB0aGVcbiAgICAgKiAgcHJvdmlkZWQgaW5kZXhlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hdChbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddLCBbMCwgMiwgNF0pO1xuICAgICAqIC8vID0+IFsnYScsICdjJywgJ2UnXVxuICAgICAqXG4gICAgICogXy5hdChbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXSwgMCwgMik7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGF0KGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBiYXNlRmxhdHRlbihhcmdzLCB0cnVlLCBmYWxzZSwgMSksXG4gICAgICAgICAgbGVuZ3RoID0gKGFyZ3NbMl0gJiYgYXJnc1syXVthcmdzWzFdXSA9PT0gY29sbGVjdGlvbikgPyAxIDogcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIGlmIChzdXBwb3J0LnVuaW5kZXhlZENoYXJzICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLnNwbGl0KCcnKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGNvbGxlY3Rpb25bcHJvcHNbaW5kZXhdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gdmFsdWUgaXMgcHJlc2VudCBpbiBhIGNvbGxlY3Rpb24gdXNpbmcgc3RyaWN0IGVxdWFsaXR5XG4gICAgICogZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQgaXMgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGluY2x1ZGVcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBjaGVjayBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHRhcmdldGAgZWxlbWVudCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbnRhaW5zKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb250YWlucyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmNvbnRhaW5zKHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9LCAnZnJlZCcpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29udGFpbnMoJ3BlYmJsZXMnLCAnZWInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29udGFpbnMoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgoMCwgbGVuZ3RoICsgZnJvbUluZGV4KSA6IGZyb21JbmRleCkgfHwgMDtcbiAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGluZGV4T2YoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpID4gLTE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmVzdWx0ID0gKGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbi5pbmRleE9mKHRhcmdldCwgZnJvbUluZGV4KSA6IGluZGV4T2YoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpKSA+IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoKytpbmRleCA+PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAhKHJlc3VsdCA9IHZhbHVlID09PSB0YXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhyb3VnaCB0aGUgY2FsbGJhY2suIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlXG4gICAgICogb2YgZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2suXG4gICAgICogVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50cztcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzQuMywgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguZmxvb3IobnVtKTsgfSk7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzQuMywgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuZmxvb3IobnVtKTsgfSwgTWF0aCk7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XSsrIDogcmVzdWx0W2tleV0gPSAxKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gY2FsbGJhY2sgcmV0dXJucyB0cnVleSB2YWx1ZSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbi4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBhbGxcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzZWQgdGhlIGNhbGxiYWNrIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ldmVyeShjaGFyYWN0ZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ldmVyeShjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAzNiB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmICghKHJlc3VsdCA9ICEhY2FsbGJhY2soY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIChyZXN1bHQgPSAhIWNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBhIGNvbGxlY3Rpb24sIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleSBmb3IuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgc2VsZWN0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyB0aGF0IHBhc3NlZCB0aGUgY2FsbGJhY2sgY2hlY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBldmVucyA9IF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gJSAyID09IDA7IH0pO1xuICAgICAqIC8vID0+IFsyLCA0LCA2XVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiBmYWxzZSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmlsdGVyKGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbHRlcihjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAzNiB9KTtcbiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbGxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdFxuICAgICAqIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5IGZvci4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmRcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBkZXRlY3QsIGZpbmRXaGVyZVxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdibG9ja2VkJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQoY2hhcmFjdGVycywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gY2hyLmFnZSA8IDQwO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IGZhbHNlIH1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZChjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAxIH0pO1xuICAgICAqIC8vID0+ICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgJ2Jsb2NrZWQnOiBmYWxzZSB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmQoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3QoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBhIGNvbGxlY3Rpb24sIGV4ZWN1dGluZyB0aGUgY2FsbGJhY2sgZm9yIGVhY2hcbiAgICAgKiBlbGVtZW50LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzO1xuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4gQ2FsbGJhY2tzIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieVxuICAgICAqIGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBOb3RlOiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBgbGVuZ3RoYCBwcm9wZXJ0eVxuICAgICAqIGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciBgXy5mb3JJbmAgb3IgYF8uZm9yT3duYFxuICAgICAqIG1heSBiZSB1c2VkIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R8c3RyaW5nfSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLmZvckVhY2goZnVuY3Rpb24obnVtKSB7IGNvbnNvbGUubG9nKG51bSk7IH0pLmpvaW4oJywnKTtcbiAgICAgKiAvLyA9PiBsb2dzIGVhY2ggbnVtYmVyIGFuZCByZXR1cm5zICcxLDIsMydcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9LCBmdW5jdGlvbihudW0pIHsgY29uc29sZS5sb2cobnVtKTsgfSk7XG4gICAgICogLy8gPT4gbG9ncyBlYWNoIG51bWJlciBhbmQgcmV0dXJucyB0aGUgb2JqZWN0IChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJyAmJiBpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2soY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYSBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdHxzdHJpbmd9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkuZm9yRWFjaFJpZ2h0KGZ1bmN0aW9uKG51bSkgeyBjb25zb2xlLmxvZyhudW0pOyB9KS5qb2luKCcsJyk7XG4gICAgICogLy8gPT4gbG9ncyBlYWNoIG51bWJlciBmcm9tIHJpZ2h0IHRvIGxlZnQgYW5kIHJldHVybnMgJzMsMiwxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGl0ZXJhYmxlID0gY29sbGVjdGlvbixcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwO1xuXG4gICAgICBjYWxsYmFjayA9IGNhbGxiYWNrICYmIHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKGNvbGxlY3Rpb25bbGVuZ3RoXSwgbGVuZ3RoLCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT0gJ251bWJlcicpIHtcbiAgICAgICAgICB2YXIgcHJvcHMgPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnVuaW5kZXhlZENoYXJzICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgaXRlcmFibGUgPSBjb2xsZWN0aW9uLnNwbGl0KCcnKTtcbiAgICAgICAgfVxuICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAga2V5ID0gcHJvcHMgPyBwcm9wc1stLWxlbmd0aF0gOiAtLWxlbmd0aDtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soaXRlcmFibGVba2V5XSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYSBjb2xsZWN0aW9uIHRocm91Z2ggdGhlIGNhbGxiYWNrLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZVxuICAgICAqIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIHRoZSBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzQuMiwgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguZmxvb3IobnVtKTsgfSk7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuNF0gfVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs0LjIsIDYuMSwgNi40XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiB0aGlzLmZsb29yKG51bSk7IH0sIE1hdGgpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjRdIH1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSA/IHJlc3VsdFtrZXldIDogcmVzdWx0W2tleV0gPSBbXSkucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgdGhlIGNvbGxlY3Rpb24gdGhyb3VnaCB0aGUgZ2l2ZW4gY2FsbGJhY2suIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGtleXMgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleXMsICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleXMsIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShrZXkuY29kZSk7IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8uaW5kZXhCeShjaGFyYWN0ZXJzLCBmdW5jdGlvbihrZXkpIHsgdGhpcy5mcm9tQ2hhckNvZGUoa2V5LmNvZGUpOyB9LCBTdHJpbmcpO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIgaW5kZXhCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIG5hbWVkIGJ5IGBtZXRob2ROYW1lYCBvbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGBjb2xsZWN0aW9uYFxuICAgICAqIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIHdpbGwgYmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYG1ldGhvZE5hbWVgIGlzIGEgZnVuY3Rpb24gaXRcbiAgICAgKiB3aWxsIGJlIGludm9rZWQgZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gdGhlIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZShbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52b2tlKGNvbGxlY3Rpb24sIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzLCAyKSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBtZXRob2ROYW1lID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheSh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDogMCk7XG5cbiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gKGlzRnVuYyA/IG1ldGhvZE5hbWUgOiB2YWx1ZVttZXRob2ROYW1lXSkuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICogdGhyb3VnaCB0aGUgY2FsbGJhY2suIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgY29sbGVjdFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAqIDM7IH0pO1xuICAgICAqIC8vID0+IFszLCA2LCA5XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gKiAzOyB9KTtcbiAgICAgKiAvLyA9PiBbMywgNiwgOV0gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWFwKGNoYXJhY3RlcnMsICduYW1lJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgPyBsZW5ndGggOiAwKTtcblxuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FsbGJhY2soY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGNhbGxiYWNrKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGEgY29sbGVjdGlvbi4gSWYgdGhlIGNvbGxlY3Rpb24gaXMgZW1wdHkgb3JcbiAgICAgKiBmYWxzZXkgYC1JbmZpbml0eWAgaXMgcmV0dXJuZWQuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZFxuICAgICAqIGZvciBlYWNoIHZhbHVlIGluIHRoZSBjb2xsZWN0aW9uIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2ggdGhlIHZhbHVlXG4gICAgICogaXMgcmFua2VkLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1heChjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHsgcmV0dXJuIGNoci5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9O1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5tYXgoY2hhcmFjdGVycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGNvbXB1dGVkID0gLUluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IGNvbXB1dGVkO1xuXG4gICAgICAvLyBhbGxvd3Mgd29ya2luZyB3aXRoIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAgd2l0aG91dCB1c2luZ1xuICAgICAgLy8gdGhlaXIgYGluZGV4YCBhcmd1bWVudCBhcyBhIGNhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdmdW5jdGlvbicgJiYgdGhpc0FyZyAmJiB0aGlzQXJnW2NhbGxiYWNrXSA9PT0gY29sbGVjdGlvbikge1xuICAgICAgICBjYWxsYmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY2FsbGJhY2sgPT0gbnVsbCAmJiBpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb2xsZWN0aW9uW2luZGV4XTtcbiAgICAgICAgICBpZiAodmFsdWUgPiByZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgPSAoY2FsbGJhY2sgPT0gbnVsbCAmJiBpc1N0cmluZyhjb2xsZWN0aW9uKSlcbiAgICAgICAgICA/IGNoYXJBdENhbGxiYWNrXG4gICAgICAgICAgOiBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBjdXJyZW50ID0gY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgICBpZiAoY3VycmVudCA+IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICBjb21wdXRlZCA9IGN1cnJlbnQ7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYSBjb2xsZWN0aW9uLiBJZiB0aGUgY29sbGVjdGlvbiBpcyBlbXB0eSBvclxuICAgICAqIGZhbHNleSBgSW5maW5pdHlgIGlzIHJldHVybmVkLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWRcbiAgICAgKiBmb3IgZWFjaCB2YWx1ZSBpbiB0aGUgY29sbGVjdGlvbiB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoIHRoZSB2YWx1ZVxuICAgICAqIGlzIHJhbmtlZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5taW4oY2hhcmFjdGVycywgZnVuY3Rpb24oY2hyKSB7IHJldHVybiBjaHIuYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9O1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5taW4oY2hhcmFjdGVycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgY29tcHV0ZWQgPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBjb21wdXRlZDtcblxuICAgICAgLy8gYWxsb3dzIHdvcmtpbmcgd2l0aCBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgIHdpdGhvdXQgdXNpbmdcbiAgICAgIC8vIHRoZWlyIGBpbmRleGAgYXJndW1lbnQgYXMgYSBjYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnZnVuY3Rpb24nICYmIHRoaXNBcmcgJiYgdGhpc0FyZ1tjYWxsYmFja10gPT09IGNvbGxlY3Rpb24pIHtcbiAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwgJiYgaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07XG4gICAgICAgICAgaWYgKHZhbHVlIDwgcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrID0gKGNhbGxiYWNrID09IG51bGwgJiYgaXNTdHJpbmcoY29sbGVjdGlvbikpXG4gICAgICAgICAgPyBjaGFyQXRDYWxsYmFja1xuICAgICAgICAgIDogbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPCBjb21wdXRlZCkge1xuICAgICAgICAgICAgY29tcHV0ZWQgPSBjdXJyZW50O1xuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhIHNwZWNpZmllZCBwcm9wZXJ0eSBmcm9tIGFsbCBlbGVtZW50cyBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHBsdWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wbHVjayhjaGFyYWN0ZXJzLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIHZhciBwbHVjayA9IG1hcDtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYSBjb2xsZWN0aW9uIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uIHRocm91Z2ggdGhlIGNhbGxiYWNrLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBjYWxsYmFjayBleGVjdXRpb24gY29uc3VtZXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMgZXhlY3V0aW9uLiBJZlxuICAgICAqIGBhY2N1bXVsYXRvcmAgaXMgbm90IHByb3ZpZGVkIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBjb2xsZWN0aW9uIHdpbGwgYmVcbiAgICAgKiB1c2VkIGFzIHRoZSBpbml0aWFsIGBhY2N1bXVsYXRvcmAgdmFsdWUuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOyAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGZvbGRsLCBpbmplY3RcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBJbml0aWFsIHZhbHVlIG9mIHRoZSBhY2N1bXVsYXRvci5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzdW0gPSBfLnJlZHVjZShbMSwgMiwgM10sIGZ1bmN0aW9uKHN1bSwgbnVtKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbnVtO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIHZhciBtYXBwZWQgPSBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgZnVuY3Rpb24ocmVzdWx0LCBudW0sIGtleSkge1xuICAgICAqICAgcmVzdWx0W2tleV0gPSBudW0gKiAzO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnYSc6IDMsICdiJzogNiwgJ2MnOiA5IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgY2FsbGJhY2ssIGFjY3VtdWxhdG9yLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgbm9hY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDQpO1xuXG4gICAgICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgIGlmIChub2FjY3VtKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBjb2xsZWN0aW9uWysraW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBjYWxsYmFjayhhY2N1bXVsYXRvciwgY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBub2FjY3VtXG4gICAgICAgICAgICA/IChub2FjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICAgICAgOiBjYWxsYmFjayhhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBmb2xkclxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIEluaXRpYWwgdmFsdWUgb2YgdGhlIGFjY3VtdWxhdG9yLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxpc3QgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICogdmFyIGZsYXQgPSBfLnJlZHVjZVJpZ2h0KGxpc3QsIGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEuY29uY2F0KGIpOyB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgY2FsbGJhY2ssIGFjY3VtdWxhdG9yLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgbm9hY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDQpO1xuICAgICAgZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBhY2N1bXVsYXRvciA9IG5vYWNjdW1cbiAgICAgICAgICA/IChub2FjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICAgIDogY2FsbGJhY2soYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBhXG4gICAgICogY29sbGVjdGlvbiB0aGF0IHRoZSBjYWxsYmFjayBkb2VzICoqbm90KiogcmV0dXJuIHRydWV5IGZvci5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGZhaWxlZCB0aGUgY2FsbGJhY2sgY2hlY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvZGRzID0gXy5yZWplY3QoWzEsIDIsIDMsIDQsIDUsIDZdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAlIDIgPT0gMDsgfSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5yZWplY3QoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucmVqZWN0KGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDM2IH0pO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgcmV0dXJuIGZpbHRlcihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuICFjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgcmFuZG9tIGVsZW1lbnQgb3IgYG5gIHJhbmRvbSBlbGVtZW50cyBmcm9tIGEgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gQWxsb3dzIHdvcmtpbmcgd2l0aCBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgXG4gICAgICogIHdpdGhvdXQgdXNpbmcgdGhlaXIgYGluZGV4YCBhcmd1bWVudHMgYXMgYG5gLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIHNhbXBsZShzKSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uICYmIHR5cGVvZiBjb2xsZWN0aW9uLmxlbmd0aCAhPSAnbnVtYmVyJykge1xuICAgICAgICBjb2xsZWN0aW9uID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnVuaW5kZXhlZENoYXJzICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLnNwbGl0KCcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uW2Jhc2VSYW5kb20oMCwgY29sbGVjdGlvbi5sZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gc2h1ZmZsZShjb2xsZWN0aW9uKTtcbiAgICAgIHJlc3VsdC5sZW5ndGggPSBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIG4pLCByZXN1bHQubGVuZ3RoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGUgRmlzaGVyLVlhdGVzXG4gICAgICogc2h1ZmZsZS4gU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgc2h1ZmZsZWQgY29sbGVjdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0LCA1LCA2XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDYsIDMsIDUsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgPyBsZW5ndGggOiAwKTtcblxuICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oMCwgKytpbmRleCk7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSByZXN1bHRbcmFuZF07XG4gICAgICAgIHJlc3VsdFtyYW5kXSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgdGhlIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgYGNvbGxlY3Rpb24ubGVuZ3RoYCBmb3IgYXJyYXlzXG4gICAgICogYW5kIGFycmF5LWxpa2Ugb2JqZWN0cyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGBjb2xsZWN0aW9uLmxlbmd0aGAgb3IgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDoga2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjYWxsYmFjayByZXR1cm5zIGEgdHJ1ZXkgdmFsdWUgZm9yICoqYW55KiogZWxlbWVudCBvZiBhXG4gICAgICogY29sbGVjdGlvbi4gVGhlIGZ1bmN0aW9uIHJldHVybnMgYXMgc29vbiBhcyBpdCBmaW5kcyBhIHBhc3NpbmcgdmFsdWUgYW5kXG4gICAgICogZG9lcyBub3QgaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgY29sbGVjdGlvbi4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvXG4gICAgICogYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBhbnlcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlZCB0aGUgY2FsbGJhY2sgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5zb21lKGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5zb21lKGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKChyZXN1bHQgPSBjYWxsYmFjayhjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gIShyZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJvdWdoIHRoZSBjYWxsYmFjay4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCB3aWxsIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyXG4gICAgICogb2YgZXF1YWwgZWxlbWVudHMuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNvbGxlY3Rpb25cbiAgICAgKiB3aWxsIGJlIHNvcnRlZCBieSBlYWNoIHByb3BlcnR5IHZhbHVlLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIHNvcnRlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguc2luKG51bSk7IH0pO1xuICAgICAqIC8vID0+IFszLCAxLCAyXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuc2luKG51bSk7IH0sIE1hdGgpO1xuICAgICAqIC8vID0+IFszLCAxLCAyXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAgJ2FnZSc6IDI2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYWdlJzogMzAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcChfLnNvcnRCeShjaGFyYWN0ZXJzLCAnYWdlJyksIF8udmFsdWVzKTtcbiAgICAgKiAvLyA9PiBbWydiYXJuZXknLCAyNl0sIFsnZnJlZCcsIDMwXSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIC8vIHNvcnRpbmcgYnkgbXVsdGlwbGUgcHJvcGVydGllc1xuICAgICAqIF8ubWFwKF8uc29ydEJ5KGNoYXJhY3RlcnMsIFsnbmFtZScsICdhZ2UnXSksIF8udmFsdWVzKTtcbiAgICAgKiAvLyA9ID4gW1snYmFybmV5JywgMjZdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydEJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoY2FsbGJhY2spLFxuICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyA/IGxlbmd0aCA6IDApO1xuXG4gICAgICBpZiAoIWlzQXJyKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIH1cbiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgb2JqZWN0ID0gcmVzdWx0WysraW5kZXhdID0gZ2V0T2JqZWN0KCk7XG4gICAgICAgIGlmIChpc0Fycikge1xuICAgICAgICAgIG9iamVjdC5jcml0ZXJpYSA9IG1hcChjYWxsYmFjaywgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAob2JqZWN0LmNyaXRlcmlhID0gZ2V0QXJyYXkoKSlbMF0gPSBjYWxsYmFjayh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QuaW5kZXggPSBpbmRleDtcbiAgICAgICAgb2JqZWN0LnZhbHVlID0gdmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdC5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBvYmplY3QgPSByZXN1bHRbbGVuZ3RoXTtcbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBvYmplY3QudmFsdWU7XG4gICAgICAgIGlmICghaXNBcnIpIHtcbiAgICAgICAgICByZWxlYXNlQXJyYXkob2JqZWN0LmNyaXRlcmlhKTtcbiAgICAgICAgfVxuICAgICAgICByZWxlYXNlT2JqZWN0KG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBgY29sbGVjdGlvbmAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpLnNsaWNlKDEpOyB9KSgxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uICYmIHR5cGVvZiBjb2xsZWN0aW9uLmxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gKHN1cHBvcnQudW5pbmRleGVkQ2hhcnMgJiYgaXNTdHJpbmcoY29sbGVjdGlvbikpXG4gICAgICAgICAgPyBjb2xsZWN0aW9uLnNwbGl0KCcnKVxuICAgICAgICAgIDogc2xpY2UoY29sbGVjdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIG9mIGVhY2ggZWxlbWVudCBpbiBhIGBjb2xsZWN0aW9uYCB0byB0aGUgZ2l2ZW5cbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0LCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzIHRoYXQgaGF2ZSBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBmaWx0ZXIgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgZ2l2ZW4gcHJvcGVydGllcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ3BldHMnOiBbJ2hvcHB5J10gfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAncGV0cyc6IFsnYmFieSBwdXNzJywgJ2Rpbm8nXSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ud2hlcmUoY2hhcmFjdGVycywgeyAnYWdlJzogMzYgfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAncGV0cyc6IFsnaG9wcHknXSB9XVxuICAgICAqXG4gICAgICogXy53aGVyZShjaGFyYWN0ZXJzLCB7ICdwZXRzJzogWydkaW5vJ10gfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCwgJ3BldHMnOiBbJ2JhYnkgcHVzcycsICdkaW5vJ10gfV1cbiAgICAgKi9cbiAgICB2YXIgd2hlcmUgPSBmaWx0ZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgYWxsIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIHZhbHVlcyBvZiB0aGUgcHJvdmlkZWQgYXJyYXlzIHVzaW5nIHN0cmljdFxuICAgICAqIGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgYXJyYXlzIG9mIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMSwgMiwgMywgNCwgNV0sIFs1LCAyLCAxMF0pO1xuICAgICAqIC8vID0+IFsxLCAzLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpZmZlcmVuY2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IHRoYXQgcGFzc2VzIHRoZSBjYWxsYmFjayBjaGVjaywgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdibG9ja2VkJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleChjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlIDwgMjA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kSW5kZXgoY2hhcmFjdGVycywgeyAnYWdlJzogMzYgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kSW5kZXgoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdibG9ja2VkJzogdHJ1ZSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleChjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlID4gMzA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEluZGV4KGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDM2IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZExhc3RJbmRleChjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvciBmaXJzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGEgY2FsbGJhY2tcbiAgICAgKiBpcyBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheSBhcmUgcmV0dXJuZWQgYXMgbG9uZ1xuICAgICAqIGFzIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZFxuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGhlYWQsIHRha2VcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fG51bWJlcnxzdHJpbmd9IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgZWxlbWVudCBvciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJldHVybi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yXG4gICAgICogIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCJcbiAgICAgKiAgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudChzKSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpcnN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5maXJzdChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5maXJzdChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSA8IDM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICduYScgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpcnN0KGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgJ2Jsb2NrZWQnOiB0cnVlLCAnZW1wbG95ZXInOiAnc2xhdGUnIH1dXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZmlyc3QoY2hhcmFjdGVycywgeyAnZW1wbG95ZXInOiAnc2xhdGUnIH0pLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpcnN0KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIG4gPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGNhbGxiYWNrKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIG4rKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAobiA9PSBudWxsIHx8IHRoaXNBcmcpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIG4pLCBsZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBhIG5lc3RlZCBhcnJheSAodGhlIG5lc3RpbmcgY2FuIGJlIHRvIGFueSBkZXB0aCkuIElmIGBpc1NoYWxsb3dgXG4gICAgICogaXMgdHJ1ZXksIHRoZSBhcnJheSB3aWxsIG9ubHkgYmUgZmxhdHRlbmVkIGEgc2luZ2xlIGxldmVsLiBJZiBhIGNhbGxiYWNrXG4gICAgICogaXMgcHJvdmlkZWQgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSBpcyBwYXNzZWQgdGhyb3VnaCB0aGUgY2FsbGJhY2sgYmVmb3JlXG4gICAgICogZmxhdHRlbmluZy4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1NoYWxsb3c9ZmFsc2VdIEEgZmxhZyB0byByZXN0cmljdCBmbGF0dGVuaW5nIHRvIGEgc2luZ2xlIGxldmVsLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMl0sIFszLCBbWzRdXV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyXSwgWzMsIFtbNF1dXV0sIHRydWUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbWzRdXV07XG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDMwLCAncGV0cyc6IFsnaG9wcHknXSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAsICdwZXRzJzogWydiYWJ5IHB1c3MnLCAnZGlubyddIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5mbGF0dGVuKGNoYXJhY3RlcnMsICdwZXRzJyk7XG4gICAgICogLy8gPT4gWydob3BweScsICdiYWJ5IHB1c3MnLCAnZGlubyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSwgaXNTaGFsbG93LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgLy8ganVnZ2xlIGFyZ3VtZW50c1xuICAgICAgaWYgKHR5cGVvZiBpc1NoYWxsb3cgIT0gJ2Jvb2xlYW4nICYmIGlzU2hhbGxvdyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSAodHlwZW9mIGlzU2hhbGxvdyAhPSAnZnVuY3Rpb24nICYmIHRoaXNBcmcgJiYgdGhpc0FyZ1tpc1NoYWxsb3ddID09PSBhcnJheSkgPyBudWxsIDogaXNTaGFsbG93O1xuICAgICAgICBpc1NoYWxsb3cgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIGFycmF5ID0gbWFwKGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGlzU2hhbGxvdyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCB1c2luZ1xuICAgICAqIHN0cmljdCBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIHRoZSBhcnJheSBpcyBhbHJlYWR5IHNvcnRlZFxuICAgICAqIHByb3ZpZGluZyBgdHJ1ZWAgZm9yIGBmcm9tSW5kZXhgIHdpbGwgcnVuIGEgZmFzdGVyIGJpbmFyeSBzZWFyY2guXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tIG9yIGB0cnVlYFxuICAgICAqICB0byBwZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBvbiBhIHNvcnRlZCBhcnJheS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSBvciBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDMsIDEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDMsIDEsIDIsIDNdLCAyLCAzKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDEsIDIsIDIsIDMsIDNdLCAyLCB0cnVlKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgoMCwgbGVuZ3RoICsgZnJvbUluZGV4KSA6IGZyb21JbmRleCB8fCAwKTtcbiAgICAgIH0gZWxzZSBpZiAoZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpbmRleCA9IHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpbmRleF0gPT09IHZhbHVlID8gaW5kZXggOiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb3IgbGFzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGFcbiAgICAgKiBjYWxsYmFjayBpcyBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheSBhcmUgZXhjbHVkZWQgZnJvbVxuICAgICAqIHRoZSByZXN1bHQgYXMgbG9uZyBhcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleS4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kXG4gICAgICogdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8bnVtYmVyfHN0cmluZ30gW2NhbGxiYWNrPTFdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBleGNsdWRlLiBJZiBhIHByb3BlcnR5IG5hbWUgb3JcbiAgICAgKiAgb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIlxuICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHtcbiAgICAgKiAgIHJldHVybiBudW0gPiAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYmxvY2tlZCc6IGZhbHNlLCAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnbmEnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5pbml0aWFsKGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5pbml0aWFsKGNoYXJhY3RlcnMsIHsgJ2VtcGxveWVyJzogJ25hJyB9KSwgJ25hbWUnKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIG4gPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgICB3aGlsZSAoaW5kZXgtLSAmJiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICBuKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSAoY2FsbGJhY2sgPT0gbnVsbCB8fCB0aGlzQXJnKSA/IDEgOiBjYWxsYmFjayB8fCBuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIGxlbmd0aCAtIG4pLCBsZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgcHJlc2VudCBpbiBhbGwgcHJvdmlkZWQgYXJyYXlzIHVzaW5nXG4gICAgICogc3RyaWN0IGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXldIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzEsIDIsIDNdLCBbNSwgMiwgMSwgNF0sIFsyLCAxXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBnZXRBcnJheSgpLFxuICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksXG4gICAgICAgICAgdHJ1c3RJbmRleE9mID0gaW5kZXhPZiA9PT0gYmFzZUluZGV4T2YsXG4gICAgICAgICAgc2VlbiA9IGdldEFycmF5KCk7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzW2FyZ3NJbmRleF07XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpIHtcbiAgICAgICAgICBhcmdzLnB1c2godmFsdWUpO1xuICAgICAgICAgIGNhY2hlcy5wdXNoKHRydXN0SW5kZXhPZiAmJiB2YWx1ZS5sZW5ndGggPj0gbGFyZ2VBcnJheVNpemUgJiZcbiAgICAgICAgICAgIGNyZWF0ZUNhY2hlKGFyZ3NJbmRleCA/IGFyZ3NbYXJnc0luZGV4XSA6IHNlZW4pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGFycmF5ID0gYXJnc1swXSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzWzBdO1xuICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgICAgaWYgKChjYWNoZSA/IGNhY2hlSW5kZXhPZihjYWNoZSwgdmFsdWUpIDogaW5kZXhPZihzZWVuLCB2YWx1ZSkpIDwgMCkge1xuICAgICAgICAgICAgYXJnc0luZGV4ID0gYXJnc0xlbmd0aDtcbiAgICAgICAgICAgIChjYWNoZSB8fCBzZWVuKS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHdoaWxlICgtLWFyZ3NJbmRleCkge1xuICAgICAgICAgICAgICBjYWNoZSA9IGNhY2hlc1thcmdzSW5kZXhdO1xuICAgICAgICAgICAgICBpZiAoKGNhY2hlID8gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkgOiBpbmRleE9mKGFyZ3NbYXJnc0luZGV4XSwgdmFsdWUpKSA8IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICBjYWNoZSA9IGNhY2hlc1thcmdzTGVuZ3RoXTtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgcmVsZWFzZU9iamVjdChjYWNoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlbGVhc2VBcnJheShjYWNoZXMpO1xuICAgICAgcmVsZWFzZUFycmF5KHNlZW4pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb3IgbGFzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGEgY2FsbGJhY2sgaXNcbiAgICAgKiBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheSBhcmUgcmV0dXJuZWQgYXMgbG9uZyBhcyB0aGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIHRydWV5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxudW1iZXJ8c3RyaW5nfSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZXR1cm4uIElmIGEgcHJvcGVydHkgbmFtZSBvclxuICAgICAqICBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiXG4gICAgICogIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudChzKSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSA+IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICduYScgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8ubGFzdChjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubGFzdChjaGFyYWN0ZXJzLCB7ICdlbXBsb3llcic6ICduYScgfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgJ2VtcGxveWVyJzogJ25hJyB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgbiA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdudW1iZXInICYmIGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIHdoaWxlIChpbmRleC0tICYmIGNhbGxiYWNrKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIG4rKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAobiA9PSBudWxsIHx8IHRoaXNBcmcpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCBuYXRpdmVNYXgoMCwgbGVuZ3RoIC0gbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBsYXN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCB1c2luZyBzdHJpY3RcbiAgICAgKiBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkXG4gICAgICogYXMgdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSBvciBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAzLCAxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMywgMSwgMiwgM10sIDIsIDMpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGluZGV4ID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5kZXggPSAoZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heCgwLCBpbmRleCArIGZyb21JbmRleCkgOiBuYXRpdmVNaW4oZnJvbUluZGV4LCBpbmRleCAtIDEpKSArIDE7XG4gICAgICB9XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHByb3ZpZGVkIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBhcnJheSB1c2luZyBzdHJpY3QgZXF1YWxpdHkgZm9yXG4gICAgICogY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZV0gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCAxLCAyLCAzXTtcbiAgICAgKiBfLnB1bGwoYXJyYXksIDIsIDMpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsKGFycmF5KSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBhcmdzSW5kZXggPSAwLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LS0sIDEpO1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIGBlbmRgLiBJZiBgc3RhcnRgIGlzIGxlc3MgdGhhbiBgc3RvcGAgYVxuICAgICAqIHplcm8tbGVuZ3RoIHJhbmdlIGlzIGNyZWF0ZWQgdW5sZXNzIGEgbmVnYXRpdmUgYHN0ZXBgIGlzIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IHJhbmdlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgIHN0YXJ0ID0gK3N0YXJ0IHx8IDA7XG4gICAgICBzdGVwID0gdHlwZW9mIHN0ZXAgPT0gJ251bWJlcicgPyBzdGVwIDogKCtzdGVwIHx8IDEpO1xuXG4gICAgICBpZiAoZW5kID09IG51bGwpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIC8vIHVzZSBgQXJyYXkobGVuZ3RoKWAgc28gZW5naW5lcyBsaWtlIENoYWtyYSBhbmQgVjggYXZvaWQgc2xvd2VyIG1vZGVzXG4gICAgICAvLyBodHRwOi8veW91dHUuYmUvWEFxSXBHVThaWmsjdD0xN20yNXNcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heCgwLCBjZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSkpLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSB0aGF0IHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNCwgNSwgNl07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICUgMiA9PSAwOyB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNCwgNl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleC0tLCAxKTtcbiAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uaW5pdGlhbGAgdGhpcyBtZXRob2QgZ2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9yXG4gICAgICogZmlyc3QgYG5gIGVsZW1lbnRzIG9mIGFuIGFycmF5LiBJZiBhIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGVsZW1lbnRzXG4gICAgICogYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgYXJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJlc3VsdCBhcyBsb25nIGFzIHRoZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgdHJ1ZXkuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgZHJvcCwgdGFpbFxuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8bnVtYmVyfHN0cmluZ30gW2NhbGxiYWNrPTFdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBleGNsdWRlLiBJZiBhIHByb3BlcnR5IG5hbWUgb3JcbiAgICAgKiAgb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIlxuICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5yZXN0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnJlc3QoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHtcbiAgICAgKiAgIHJldHVybiBudW0gPCAzO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYmxvY2tlZCc6IGZhbHNlLCAgJ2VtcGxveWVyJzogJ3NsYXRlJyB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdwZWJibGVzJywgJ2Jsb2NrZWQnOiB0cnVlLCAnZW1wbG95ZXInOiAnbmEnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnJlc3QoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKSwgJ25hbWUnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnJlc3QoY2hhcmFjdGVycywgeyAnZW1wbG95ZXInOiAnc2xhdGUnIH0pO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ3BlYmJsZXMnLCAnYmxvY2tlZCc6IHRydWUsICdlbXBsb3llcic6ICduYScgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBuID0gMCxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICBuKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSAoY2FsbGJhY2sgPT0gbnVsbCB8fCB0aGlzQXJnKSA/IDEgOiBuYXRpdmVNYXgoMCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoIGEgdmFsdWVcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBhIGdpdmVuIHNvcnRlZCBhcnJheSBpbiBvcmRlciB0byBtYWludGFpbiB0aGUgc29ydFxuICAgICAqIG9yZGVyIG9mIHRoZSBhcnJheS4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkIGZvclxuICAgICAqIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXIgc29ydCByYW5raW5nLiBUaGVcbiAgICAgKiBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMjAsIDMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnNvcnRlZEluZGV4KFt7ICd4JzogMjAgfSwgeyAneCc6IDMwIH0sIHsgJ3gnOiA1MCB9XSwgeyAneCc6IDQwIH0sICd4Jyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogdmFyIGRpY3QgPSB7XG4gICAgICogICAnd29yZFRvTnVtYmVyJzogeyAndHdlbnR5JzogMjAsICd0aGlydHknOiAzMCwgJ2ZvdXJ0eSc6IDQwLCAnZmlmdHknOiA1MCB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWyd0d2VudHknLCAndGhpcnR5JywgJ2ZpZnR5J10sICdmb3VydHknLCBmdW5jdGlvbih3b3JkKSB7XG4gICAgICogICByZXR1cm4gZGljdC53b3JkVG9OdW1iZXJbd29yZF07XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbJ3R3ZW50eScsICd0aGlydHknLCAnZmlmdHknXSwgJ2ZvdXJ0eScsIGZ1bmN0aW9uKHdvcmQpIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLndvcmRUb051bWJlclt3b3JkXTtcbiAgICAgKiB9LCBkaWN0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogbG93O1xuXG4gICAgICAvLyBleHBsaWNpdGx5IHJlZmVyZW5jZSBgaWRlbnRpdHlgIGZvciBiZXR0ZXIgaW5saW5pbmcgaW4gRmlyZWZveFxuICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayA/IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMSkgOiBpZGVudGl0eTtcbiAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUpO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxO1xuICAgICAgICAoY2FsbGJhY2soYXJyYXlbbWlkXSkgPCB2YWx1ZSlcbiAgICAgICAgICA/IGxvdyA9IG1pZCArIDFcbiAgICAgICAgICA6IGhpZ2ggPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG93O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIG9mIHRoZSBwcm92aWRlZCBhcnJheXMgdXNpbmdcbiAgICAgKiBzdHJpY3QgZXF1YWxpdHkgZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheV0gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzEsIDIsIDNdLCBbNSwgMiwgMSwgNF0sIFsyLCAxXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDUsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pb24oKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS12YWx1ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXkgdXNpbmcgc3RyaWN0IGVxdWFsaXR5XG4gICAgICogZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLiBJZiB0aGUgYXJyYXkgaXMgc29ydGVkLCBwcm92aWRpbmdcbiAgICAgKiBgdHJ1ZWAgZm9yIGBpc1NvcnRlZGAgd2lsbCB1c2UgYSBmYXN0ZXIgYWxnb3JpdGhtLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgaXMgcGFzc2VkIHRocm91Z2ggdGhlIGNhbGxiYWNrIGJlZm9yZSB1bmlxdWVuZXNzXG4gICAgICogaXMgY29tcHV0ZWQuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdW5pcXVlXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU29ydGVkPWZhbHNlXSBBIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBgYXJyYXlgIGlzIHNvcnRlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIGR1cGxpY2F0ZS12YWx1ZS1mcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzEsIDIsIDEsIDMsIDFdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udW5pcShbMSwgMSwgMiwgMiwgM10sIHRydWUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy51bmlxKFsnQScsICdiJywgJ0MnLCAnYScsICdCJywgJ2MnXSwgZnVuY3Rpb24obGV0dGVyKSB7IHJldHVybiBsZXR0ZXIudG9Mb3dlckNhc2UoKTsgfSk7XG4gICAgICogLy8gPT4gWydBJywgJ2InLCAnQyddXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzEsIDIuNSwgMywgMS41LCAyLCAzLjVdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuZmxvb3IobnVtKTsgfSwgTWF0aCk7XG4gICAgICogLy8gPT4gWzEsIDIuNSwgM11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8udW5pcShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSwgaXNTb3J0ZWQsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAvLyBqdWdnbGUgYXJndW1lbnRzXG4gICAgICBpZiAodHlwZW9mIGlzU29ydGVkICE9ICdib29sZWFuJyAmJiBpc1NvcnRlZCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSAodHlwZW9mIGlzU29ydGVkICE9ICdmdW5jdGlvbicgJiYgdGhpc0FyZyAmJiB0aGlzQXJnW2lzU29ydGVkXSA9PT0gYXJyYXkpID8gbnVsbCA6IGlzU29ydGVkO1xuICAgICAgICBpc1NvcnRlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGFycmF5LCBpc1NvcnRlZCwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBwcm92aWRlZCB2YWx1ZXMgdXNpbmcgc3RyaWN0IGVxdWFsaXR5IGZvclxuICAgICAqIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWx0ZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzEsIDIsIDEsIDAsIDMsIDEsIDRdLCAwLCAxKTtcbiAgICAgKiAvLyA9PiBbMiwgMywgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3aXRob3V0KGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZURpZmZlcmVuY2UoYXJyYXksIHNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgc3ltbWV0cmljIGRpZmZlcmVuY2Ugb2YgdGhlIHByb3ZpZGVkIGFycmF5cy5cbiAgICAgKiBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXldIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMSwgMiwgM10sIFs1LCAyLCAxLCA0XSk7XG4gICAgICogLy8gPT4gWzMsIDUsIDRdXG4gICAgICpcbiAgICAgKiBfLnhvcihbMSwgMiwgNV0sIFsyLCAzLCA1XSwgWzMsIDQsIDVdKTtcbiAgICAgKiAvLyA9PiBbMSwgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB4b3IoKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICBpZiAoaXNBcnJheShhcnJheSkgfHwgaXNBcmd1bWVudHMoYXJyYXkpKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3VsdFxuICAgICAgICAgICAgPyBiYXNlVW5pcShiYXNlRGlmZmVyZW5jZShyZXN1bHQsIGFycmF5KS5jb25jYXQoYmFzZURpZmZlcmVuY2UoYXJyYXksIHJlc3VsdCkpKVxuICAgICAgICAgICAgOiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCB8fCBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdW56aXBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5XSBBcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snZnJlZCcsIDMwLCB0cnVlXSwgWydiYXJuZXknLCA0MCwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcCgpIHtcbiAgICAgIHZhciBhcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzIDogYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBtYXgocGx1Y2soYXJyYXksICdsZW5ndGgnKSkgOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCA8IDAgPyAwIDogbGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHBsdWNrKGFycmF5LCBpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIGZyb20gYXJyYXlzIG9mIGBrZXlzYCBhbmQgYHZhbHVlc2AuIFByb3ZpZGVcbiAgICAgKiBlaXRoZXIgYSBzaW5nbGUgdHdvIGRpbWVuc2lvbmFsIGFycmF5LCBpLmUuIGBbW2tleTEsIHZhbHVlMV0sIFtrZXkyLCB2YWx1ZTJdXWBcbiAgICAgKiBvciB0d28gYXJyYXlzLCBvbmUgb2YgYGtleXNgIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBvYmplY3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0ga2V5cyBUaGUgYXJyYXkgb2Yga2V5cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBnaXZlbiBrZXlzIGFuZFxuICAgICAqICBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDMwLCAnYmFybmV5JzogNDAgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGtleXMgPyBrZXlzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIGlmICghdmFsdWVzICYmIGxlbmd0aCAmJiAhaXNBcnJheShrZXlzWzBdKSkge1xuICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkpIHtcbiAgICAgICAgICByZXN1bHRba2V5WzBdXSA9IGtleVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIGBmdW5jYCwgd2l0aCAgdGhlIGB0aGlzYCBiaW5kaW5nIGFuZFxuICAgICAqIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgb25seSBhZnRlciBiZWluZyBjYWxsZWQgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGJlZm9yZVxuICAgICAqICBgZnVuY2AgaXMgZXhlY3V0ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdEb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJ0RvbmUgc2F2aW5nIScsIGFmdGVyIGFsbCBzYXZlcyBoYXZlIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgcHJlcGVuZHMgYW55IGFkZGl0aW9uYWwgYGJpbmRgIGFyZ3VtZW50cyB0byB0aG9zZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBib3VuZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnXSBBcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMubmFtZTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZnVuYyA9IF8uYmluZChmdW5jLCB7ICduYW1lJzogJ2ZyZWQnIH0sICdoaScpO1xuICAgICAqIGZ1bmMoKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiaW5kKGZ1bmMsIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMlxuICAgICAgICA/IGNyZWF0ZVdyYXBwZXIoZnVuYywgMTcsIHNsaWNlKGFyZ3VtZW50cywgMiksIG51bGwsIHRoaXNBcmcpXG4gICAgICAgIDogY3JlYXRlV3JhcHBlcihmdW5jLCAxLCBudWxsLCBudWxsLCB0aGlzQXJnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLiBNZXRob2QgbmFtZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50cyBvciBhcyBhcnJheXNcbiAgICAgKiBvZiBtZXRob2QgbmFtZXMuIElmIG5vIG1ldGhvZCBuYW1lcyBhcmUgcHJvdmlkZWQgYWxsIHRoZSBmdW5jdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAgd2lsbCBiZSBib3VuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uc3RyaW5nfSBbbWV0aG9kTmFtZV0gVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG9cbiAgICAgKiAgYmluZCwgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgbWV0aG9kIG5hbWVzIG9yIGFycmF5cyBvZiBtZXRob2QgbmFtZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnb25DbGljayc6IGZ1bmN0aW9uKCkgeyBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7IH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcpO1xuICAgICAqIGpRdWVyeSgnI2RvY3MnKS5vbignY2xpY2snLCB2aWV3Lm9uQ2xpY2spO1xuICAgICAqIC8vID0+IGxvZ3MgJ2NsaWNrZWQgZG9jcycsIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmluZEFsbChvYmplY3QpIHtcbiAgICAgIHZhciBmdW5jcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSkgOiBmdW5jdGlvbnMob2JqZWN0KSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgb2JqZWN0W2tleV0gPSBjcmVhdGVXcmFwcGVyKG9iamVjdFtrZXldLCAxLCBudWxsLCBudWxsLCBvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gXG4gICAgICogYW5kIHByZXBlbmRzIGFueSBhZGRpdGlvbmFsIGBiaW5kS2V5YCBhcmd1bWVudHMgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGJvdW5kXG4gICAgICogZnVuY3Rpb24uIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG9cbiAgICAgKiByZWZlcmVuY2UgbWV0aG9kcyB0aGF0IHdpbGwgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC5cbiAgICAgKiBTZWUgaHR0cDovL21pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRoZSBtZXRob2QgYmVsb25ncyB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICduYW1lJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy5uYW1lO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGZ1bmMoKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMubmFtZSArICchJztcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZnVuYygpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJpbmRLZXkob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMlxuICAgICAgICA/IGNyZWF0ZVdyYXBwZXIoa2V5LCAxOSwgc2xpY2UoYXJndW1lbnRzLCAyKSwgbnVsbCwgb2JqZWN0KVxuICAgICAgICA6IGNyZWF0ZVdyYXBwZXIoa2V5LCAzLCBudWxsLCBudWxsLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiB0aGUgcHJvdmlkZWQgZnVuY3Rpb25zLFxuICAgICAqIHdoZXJlIGVhY2ggZnVuY3Rpb24gY29uc3VtZXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICAgICAqIEZvciBleGFtcGxlLCBjb21wb3NpbmcgdGhlIGZ1bmN0aW9ucyBgZigpYCwgYGcoKWAsIGFuZCBgaCgpYCBwcm9kdWNlcyBgZihnKGgoKSkpYC5cbiAgICAgKiBFYWNoIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjb21wb3NlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBbZnVuY10gRnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFsTmFtZU1hcCA9IHtcbiAgICAgKiAgICdwZWJibGVzJzogJ3BlbmVsb3BlJ1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZm9ybWF0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAqICAgbmFtZSA9IHJlYWxOYW1lTWFwW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgbmFtZTtcbiAgICAgKiAgIHJldHVybiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihmb3JtYXR0ZWQpIHtcbiAgICAgKiAgIHJldHVybiAnSGl5YSAnICsgZm9ybWF0dGVkICsgJyEnO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgd2VsY29tZSA9IF8uY29tcG9zZShncmVldCwgZm9ybWF0KTtcbiAgICAgKiB3ZWxjb21lKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ0hpeWEgUGVuZWxvcGUhJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gICAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgbGVuZ3RoID0gZnVuY3MubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmNzW2xlbmd0aF0pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzID0gW2Z1bmNzW2xlbmd0aF0uYXBwbHkodGhpcywgYXJncyldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0cyBvbmUgb3IgbW9yZSBhcmd1bWVudHMgb2YgYGZ1bmNgIHRoYXQgd2hlblxuICAgICAqIGludm9rZWQgZWl0aGVyIGV4ZWN1dGVzIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYWxsIGBmdW5jYCBhcmd1bWVudHNcbiAgICAgKiBoYXZlIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIG9yIG1vcmUgb2YgdGhlXG4gICAgICogcmVtYWluaW5nIGBmdW5jYCBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBjYW4gYmUgc3BlY2lmaWVkXG4gICAgICogaWYgYGZ1bmMubGVuZ3RoYCBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhhICsgYiArIGMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gNlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5KSB7XG4gICAgICBhcml0eSA9IHR5cGVvZiBhcml0eSA9PSAnbnVtYmVyJyA/IGFyaXR5IDogKCthcml0eSB8fCBmdW5jLmxlbmd0aCk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcHBlcihmdW5jLCA0LCBudWxsLCBudWxsLCBudWxsLCBhcml0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWxheSB0aGUgZXhlY3V0aW9uIG9mIGBmdW5jYCB1bnRpbCBhZnRlclxuICAgICAqIGB3YWl0YCBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgd2FzIGludm9rZWQuXG4gICAgICogUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvblxuICAgICAqIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gU3Vic2VxdWVudCBjYWxsc1xuICAgICAqIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgY2FsbC5cbiAgICAgKlxuICAgICAqIE5vdGU6IElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAgYGZ1bmNgIHdpbGwgYmUgY2FsbGVkXG4gICAgICogb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBpc1xuICAgICAqIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdIFNwZWNpZnkgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBjYWxsZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIGF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXhcbiAgICAgKiB2YXIgbGF6eUxheW91dCA9IF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApO1xuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBsYXp5TGF5b3V0KTtcbiAgICAgKlxuICAgICAqIC8vIGV4ZWN1dGUgYHNlbmRNYWlsYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzXG4gICAgICogalF1ZXJ5KCcjcG9zdGJveCcpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIGVuc3VyZSBgYmF0Y2hMb2dgIGlzIGV4ZWN1dGVkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzXG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7XG4gICAgICogICAnbWF4V2FpdCc6IDEwMDBcbiAgICAgKiB9LCBmYWxzZSk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MsXG4gICAgICAgICAgbWF4VGltZW91dElkLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBzdGFtcCxcbiAgICAgICAgICB0aGlzQXJnLFxuICAgICAgICAgIHRpbWVvdXRJZCxcbiAgICAgICAgICB0cmFpbGluZ0NhbGwsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDAsXG4gICAgICAgICAgbWF4V2FpdCA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgICB9XG4gICAgICB3YWl0ID0gbmF0aXZlTWF4KDAsIHdhaXQpIHx8IDA7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgbGVhZGluZyA9IHRydWU7XG4gICAgICAgIHRyYWlsaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSBvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heFdhaXQgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucyAmJiAobmF0aXZlTWF4KHdhaXQsIG9wdGlvbnMubWF4V2FpdCkgfHwgMCk7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGRlbGF5ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93KCkgLSBzdGFtcCk7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPD0gMCkge1xuICAgICAgICAgIGlmIChtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChtYXhUaW1lb3V0SWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaXNDYWxsZWQgPSB0cmFpbGluZ0NhbGw7XG4gICAgICAgICAgbWF4VGltZW91dElkID0gdGltZW91dElkID0gdHJhaWxpbmdDYWxsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChpc0NhbGxlZCkge1xuICAgICAgICAgICAgbGFzdENhbGxlZCA9IG5vdygpO1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICghdGltZW91dElkICYmICFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgYXJncyA9IHRoaXNBcmcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGRlbGF5ZWQsIHJlbWFpbmluZyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBtYXhEZWxheWVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhUaW1lb3V0SWQgPSB0aW1lb3V0SWQgPSB0cmFpbGluZ0NhbGwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0cmFpbGluZyB8fCAobWF4V2FpdCAhPT0gd2FpdCkpIHtcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gbm93KCk7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXRJZCAmJiAhbWF4VGltZW91dElkKSB7XG4gICAgICAgICAgICBhcmdzID0gdGhpc0FyZyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN0YW1wID0gbm93KCk7XG4gICAgICAgIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICB0cmFpbGluZ0NhbGwgPSB0cmFpbGluZyAmJiAodGltZW91dElkIHx8ICFsZWFkaW5nKTtcblxuICAgICAgICBpZiAobWF4V2FpdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB2YXIgbGVhZGluZ0NhbGwgPSBsZWFkaW5nICYmICF0aW1lb3V0SWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFtYXhUaW1lb3V0SWQgJiYgIWxlYWRpbmcpIHtcbiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlbWFpbmluZyA9IG1heFdhaXQgLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKSxcbiAgICAgICAgICAgICAgaXNDYWxsZWQgPSByZW1haW5pbmcgPD0gMDtcblxuICAgICAgICAgIGlmIChpc0NhbGxlZCkge1xuICAgICAgICAgICAgaWYgKG1heFRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICBtYXhUaW1lb3V0SWQgPSBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIG1heFRpbWVvdXRJZCA9IHNldFRpbWVvdXQobWF4RGVsYXllZCwgcmVtYWluaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2FsbGVkICYmIHRpbWVvdXRJZCkge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aW1lb3V0SWQgJiYgd2FpdCAhPT0gbWF4V2FpdCkge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZGVsYXllZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlYWRpbmdDYWxsKSB7XG4gICAgICAgICAgaXNDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2FsbGVkICYmICF0aW1lb3V0SWQgJiYgIW1heFRpbWVvdXRJZCkge1xuICAgICAgICAgIGFyZ3MgPSB0aGlzQXJnID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgZXhlY3V0aW5nIHRoZSBgZnVuY2AgZnVuY3Rpb24gdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC5cbiAgICAgKiBBZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0IGlzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnXSBBcmd1bWVudHMgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHsgY29uc29sZS5sb2codGV4dCk7IH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vIGxvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgb3IgbW9yZSBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZlcihmdW5jKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBgZnVuY2AgZnVuY3Rpb24gYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiB3aWxsIGJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0IGlzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgZXhlY3V0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7IGNvbnNvbGUubG9nKHRleHQpOyB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBsb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlbGF5KGZ1bmMsIHdhaXQpIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMsIDIpO1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdFxuICAgICAqIGJhc2VkIG9uIHRoZSBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGVcbiAgICAgKiBmaXJzdCBhcmd1bWVudCBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgY2FjaGUga2V5LlxuICAgICAqIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIFRoZSByZXN1bHQgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gQSBmdW5jdGlvbiB1c2VkIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXppbmcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmaWJvbmFjY2kgPSBfLm1lbW9pemUoZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gPCAyID8gbiA6IGZpYm9uYWNjaShuIC0gMSkgKyBmaWJvbmFjY2kobiAtIDIpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmlib25hY2NpKDkpXG4gICAgICogLy8gPT4gMzRcbiAgICAgKlxuICAgICAqIHZhciBkYXRhID0ge1xuICAgICAqICAgJ2ZyZWQnOiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyBtb2RpZnlpbmcgdGhlIHJlc3VsdCBjYWNoZVxuICAgICAqIHZhciBnZXQgPSBfLm1lbW9pemUoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gZGF0YVtuYW1lXTsgfSwgXy5pZGVudGl0eSk7XG4gICAgICogZ2V0KCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqXG4gICAgICogZ2V0LmNhY2hlLnBlYmJsZXMubmFtZSA9ICdwZW5lbG9wZSc7XG4gICAgICogZ2V0KCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdwZW5lbG9wZScsICdhZ2UnOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBtZW1vaXplZC5jYWNoZSxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleVByZWZpeCArIGFyZ3VtZW50c1swXTtcblxuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZSwga2V5KVxuICAgICAgICAgID8gY2FjaGVba2V5XVxuICAgICAgICAgIDogKGNhY2hlW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSB7fTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGV4ZWN1dGUgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxscyB0b1xuICAgICAqIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGNhbGwuIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWRcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyBgaW5pdGlhbGl6ZWAgZXhlY3V0ZXMgYGNyZWF0ZUFwcGxpY2F0aW9uYCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICB2YXIgcmFuLFxuICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChyYW4pIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICAvLyBjbGVhciB0aGUgYGZ1bmNgIHZhcmlhYmxlIHNvIHRoZSBmdW5jdGlvbiBtYXkgYmUgZ2FyYmFnZSBjb2xsZWN0ZWRcbiAgICAgICAgZnVuYyA9IG51bGw7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgaW52b2tlcyBgZnVuY2Agd2l0aCBhbnkgYWRkaXRpb25hbFxuICAgICAqIGBwYXJ0aWFsYCBhcmd1bWVudHMgcHJlcGVuZGVkIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uIFRoaXNcbiAgICAgKiBtZXRob2QgaXMgc2ltaWxhciB0byBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgbmFtZSkgeyByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lOyB9O1xuICAgICAqIHZhciBoaSA9IF8ucGFydGlhbChncmVldCwgJ2hpJyk7XG4gICAgICogaGkoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJ0aWFsKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsIDE2LCBzbGljZShhcmd1bWVudHMsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IGBwYXJ0aWFsYCBhcmd1bWVudHMgYXJlXG4gICAgICogYXBwZW5kZWQgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHNEZWVwID0gXy5wYXJ0aWFsUmlnaHQoXy5tZXJnZSwgXy5kZWZhdWx0cyk7XG4gICAgICpcbiAgICAgKiB2YXIgb3B0aW9ucyA9IHtcbiAgICAgKiAgICd2YXJpYWJsZSc6ICdkYXRhJyxcbiAgICAgKiAgICdpbXBvcnRzJzogeyAnanEnOiAkIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZGVmYXVsdHNEZWVwKG9wdGlvbnMsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG4gICAgICpcbiAgICAgKiBvcHRpb25zLnZhcmlhYmxlXG4gICAgICogLy8gPT4gJ2RhdGEnXG4gICAgICpcbiAgICAgKiBvcHRpb25zLmltcG9ydHNcbiAgICAgKiAvLyA9PiB7ICdfJzogXywgJ2pxJzogJCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFydGlhbFJpZ2h0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsIDMyLCBudWxsLCBzbGljZShhcmd1bWVudHMsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBleGVjdXRlZCwgd2lsbCBvbmx5IGNhbGwgdGhlIGBmdW5jYCBmdW5jdGlvblxuICAgICAqIGF0IG1vc3Qgb25jZSBwZXIgZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0b1xuICAgICAqIGluZGljYXRlIHRoYXQgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlXG4gICAgICogb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbFxuICAgICAqIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBjYWxsLlxuICAgICAqXG4gICAgICogTm90ZTogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCBgZnVuY2Agd2lsbCBiZSBjYWxsZWRcbiAgICAgKiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGlzXG4gICAgICogaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGV4ZWN1dGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdIFNwZWNpZnkgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIGF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmdcbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKTtcbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIGV4ZWN1dGUgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlc1xuICAgICAqIGpRdWVyeSgnLmludGVyYWN0aXZlJykub24oJ2NsaWNrJywgXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHtcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGxlYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZU9wdGlvbnMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICBkZWJvdW5jZU9wdGlvbnMubWF4V2FpdCA9IHdhaXQ7XG4gICAgICBkZWJvdW5jZU9wdGlvbnMudHJhaWxpbmcgPSB0cmFpbGluZztcblxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGRlYm91bmNlT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byB0aGUgd3JhcHBlciBmdW5jdGlvbiBhcyBpdHNcbiAgICAgKiBmaXJzdCBhcmd1bWVudC4gQWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSB3cmFwcGVyIGZ1bmN0aW9uLiBUaGUgd3JhcHBlciBpcyBleGVjdXRlZCB3aXRoXG4gICAgICogdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdGcmVkLCBXaWxtYSwgJiBQZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPkZyZWQsIFdpbG1hLCAmYW1wOyBQZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcHBlcih3cmFwcGVyLCAxNiwgW3ZhbHVlXSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ25hbWUnOiAnZnJlZCcgfTtcbiAgICAgKiB2YXIgZ2V0dGVyID0gXy5jb25zdGFudChvYmplY3QpO1xuICAgICAqIGdldHRlcigpID09PSBvYmplY3Q7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSBjYWxsYmFjayBib3VuZCB0byBhbiBvcHRpb25hbCBgdGhpc0FyZ2AuIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5XG4gICAgICogbmFtZSB0aGUgY3JlYXRlZCBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKiBJZiBgZnVuY2AgaXMgYW4gb2JqZWN0IHRoZSBjcmVhdGVkIGNhbGxiYWNrIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHNcbiAgICAgKiB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnQgb2JqZWN0IHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCB3aWxsIHJldHVybiBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9aWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJnQ291bnRdIFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRoZSBjYWxsYmFjayBhY2NlcHRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHdyYXAgdG8gY3JlYXRlIGN1c3RvbSBjYWxsYmFjayBzaG9ydGhhbmRzXG4gICAgICogXy5jcmVhdGVDYWxsYmFjayA9IF8ud3JhcChfLmNyZWF0ZUNhbGxiYWNrLCBmdW5jdGlvbihmdW5jLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAqICAgdmFyIG1hdGNoID0gL14oLis/KV9fKFtnbF10KSguKykkLy5leGVjKGNhbGxiYWNrKTtcbiAgICAgKiAgIHJldHVybiAhbWF0Y2ggPyBmdW5jKGNhbGxiYWNrLCB0aGlzQXJnKSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAqICAgICByZXR1cm4gbWF0Y2hbMl0gPT0gJ2d0JyA/IG9iamVjdFttYXRjaFsxXV0gPiBtYXRjaFszXSA6IG9iamVjdFttYXRjaFsxXV0gPCBtYXRjaFszXTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihjaGFyYWN0ZXJzLCAnYWdlX19ndDM4Jyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhbGxiYWNrKGZ1bmMsIHRoaXNBcmcsIGFyZ0NvdW50KSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBmdW5jO1xuICAgICAgaWYgKGZ1bmMgPT0gbnVsbCB8fCB0eXBlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDcmVhdGVDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCk7XG4gICAgICB9XG4gICAgICAvLyBoYW5kbGUgXCJfLnBsdWNrXCIgc3R5bGUgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAgaWYgKHR5cGUgIT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5KGZ1bmMpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0ga2V5cyhmdW5jKSxcbiAgICAgICAgICBrZXkgPSBwcm9wc1swXSxcbiAgICAgICAgICBhID0gZnVuY1trZXldO1xuXG4gICAgICAvLyBoYW5kbGUgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAgaWYgKHByb3BzLmxlbmd0aCA9PSAxICYmIGEgPT09IGEgJiYgIWlzT2JqZWN0KGEpKSB7XG4gICAgICAgIC8vIGZhc3QgcGF0aCB0aGUgY29tbW9uIGNhc2Ugb2YgcHJvdmlkaW5nIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlXG4gICAgICAgIC8vIHByb3BlcnR5IGNvbnRhaW5pbmcgYSBwcmltaXRpdmUgdmFsdWVcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgIHZhciBiID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgcmV0dXJuIGEgPT09IGIgJiYgKGEgIT09IDAgfHwgKDEgLyBhID09IDEgLyBiKSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBiYXNlSXNFcXVhbChvYmplY3RbcHJvcHNbbGVuZ3RoXV0sIGZ1bmNbcHJvcHNbbGVuZ3RoXV0sIG51bGwsIHRydWUpKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIGAmYCwgYDxgLCBgPmAsIGBcImAsIGFuZCBgJ2AgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ0ZyZWQsIFdpbG1hLCAmIFBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCwgV2lsbWEsICZhbXA7IFBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IHByb3ZpZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICogXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3Q7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24gbWV0aG9kcyB3aWxsIGJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIHRoZSBmdW5jdGlvbnMgYWRkZWQgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ2NhcGl0YWxpemUnOiBjYXBpdGFsaXplIH0pO1xuICAgICAqIF8uY2FwaXRhbGl6ZSgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXygnZnJlZCcpLmNhcGl0YWxpemUoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy5taXhpbih7ICdjYXBpdGFsaXplJzogY2FwaXRhbGl6ZSB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS5jYXBpdGFsaXplKCk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjaGFpbiA9IHRydWUsXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBzb3VyY2UgJiYgZnVuY3Rpb25zKHNvdXJjZSk7XG5cbiAgICAgIGlmICghc291cmNlIHx8ICghb3B0aW9ucyAmJiAhbWV0aG9kTmFtZXMubGVuZ3RoKSkge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBjdG9yID0gbG9kYXNoV3JhcHBlcjtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSBsb2Rhc2g7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gZnVuY3Rpb25zKHNvdXJjZSk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY2hhaW4gPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGNoYWluID0gb3B0aW9ucy5jaGFpbjtcbiAgICAgIH1cbiAgICAgIHZhciBjdG9yID0gb2JqZWN0LFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24oY3Rvcik7XG5cbiAgICAgIGZvckVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBvYmplY3RbbWV0aG9kTmFtZV0gPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBbdmFsdWVdO1xuXG4gICAgICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseShvYmplY3QsIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gcmVzdWx0ICYmIGlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgY3RvcihyZXN1bHQpO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlICdfJyB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBjb250ZXh0Ll8gPSBvbGREYXNoO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBuby1vcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICogXy5ub29wKG9iamVjdCkgPT09IHVuZGVmaW5lZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIG5vIG9wZXJhdGlvbiBwZXJmb3JtZWRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBVbml4IGVwb2NoXG4gICAgICogKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzdGFtcCA9IF8ubm93KCk7XG4gICAgICogXy5kZWZlcihmdW5jdGlvbigpIHsgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTsgfSk7XG4gICAgICogLy8gPT4gbG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGlzTmF0aXZlKG5vdyA9IERhdGUubm93KSAmJiBub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguXG4gICAgICogSWYgYHJhZGl4YCBpcyBgdW5kZWZpbmVkYCBvciBgMGAgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgdGhlXG4gICAgICogYHZhbHVlYCBpcyBhIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBhdm9pZHMgZGlmZmVyZW5jZXMgaW4gbmF0aXZlIEVTMyBhbmQgRVM1IGBwYXJzZUludGBcbiAgICAgKiBpbXBsZW1lbnRhdGlvbnMuIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5pby8jRS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHBhcnNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXhdIFRoZSByYWRpeCB1c2VkIHRvIGludGVycHJldCB0aGUgdmFsdWUgdG8gcGFyc2UuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbmV3IGludGVnZXIgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqL1xuICAgIHZhciBwYXJzZUludCA9IG5hdGl2ZVBhcnNlSW50KHdoaXRlc3BhY2UgKyAnMDgnKSA9PSA4ID8gbmF0aXZlUGFyc2VJbnQgOiBmdW5jdGlvbih2YWx1ZSwgcmFkaXgpIHtcbiAgICAgIC8vIEZpcmVmb3ggPCAyMSBhbmQgT3BlcmEgPCAxNSBmb2xsb3cgdGhlIEVTMyBzcGVjaWZpZWQgaW1wbGVtZW50YXRpb24gb2YgYHBhcnNlSW50YFxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KGlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnJlcGxhY2UocmVMZWFkaW5nU3BhY2VzQW5kWmVyb3MsICcnKSA6IHZhbHVlLCByYWRpeCB8fCAwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFwiXy5wbHVja1wiIHN0eWxlIGZ1bmN0aW9uLCB3aGljaCByZXR1cm5zIHRoZSBga2V5YCB2YWx1ZSBvZiBhXG4gICAgICogZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHJldHJpZXZlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciBnZXROYW1lID0gXy5wcm9wZXJ0eSgnbmFtZScpO1xuICAgICAqXG4gICAgICogXy5tYXAoY2hhcmFjdGVycywgZ2V0TmFtZSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeShjaGFyYWN0ZXJzLCBnZXROYW1lKTtcbiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSwgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShrZXkpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAgKGluY2x1c2l2ZSkuIElmIG9ubHkgb25lXG4gICAgICogYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXIgd2lsbCBiZVxuICAgICAqIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIHRydWV5IG9yIGVpdGhlciBgbWluYCBvciBgbWF4YCBhcmUgZmxvYXRzIGFcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXIgd2lsbCBiZSByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttaW49MF0gVGhlIG1pbmltdW0gcG9zc2libGUgdmFsdWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttYXg9MV0gVGhlIG1heGltdW0gcG9zc2libGUgdmFsdWUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmc9ZmFsc2VdIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgZmxvYXRpbmcpIHtcbiAgICAgIHZhciBub01pbiA9IG1pbiA9PSBudWxsLFxuICAgICAgICAgIG5vTWF4ID0gbWF4ID09IG51bGw7XG5cbiAgICAgIGlmIChmbG9hdGluZyA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWluID09ICdib29sZWFuJyAmJiBub01heCkge1xuICAgICAgICAgIGZsb2F0aW5nID0gbWluO1xuICAgICAgICAgIG1pbiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW5vTWF4ICYmIHR5cGVvZiBtYXggPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBtYXg7XG4gICAgICAgICAgbm9NYXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobm9NaW4gJiYgbm9NYXgpIHtcbiAgICAgICAgbWF4ID0gMTtcbiAgICAgIH1cbiAgICAgIG1pbiA9ICttaW4gfHwgMDtcbiAgICAgIGlmIChub01heCkge1xuICAgICAgICBtYXggPSBtaW47XG4gICAgICAgIG1pbiA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXggPSArbWF4IHx8IDA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbWluICUgMSB8fCBtYXggJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obWluICsgKHJhbmQgKiAobWF4IC0gbWluICsgcGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArJycpLmxlbmd0aCAtIDEpKSkpLCBtYXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obWluLCBtYXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmVzIHRoZSB2YWx1ZSBvZiBwcm9wZXJ0eSBga2V5YCBvbiBgb2JqZWN0YC4gSWYgYGtleWAgaXMgYSBmdW5jdGlvblxuICAgICAqIGl0IHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgb2JqZWN0YCBhbmQgaXRzIHJlc3VsdCByZXR1cm5lZCxcbiAgICAgKiBlbHNlIHRoZSBwcm9wZXJ0eSB2YWx1ZSBpcyByZXR1cm5lZC4gSWYgYG9iamVjdGAgaXMgZmFsc2V5IHRoZW4gYHVuZGVmaW5lZGBcbiAgICAgKiBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdjaGVlc2UnOiAnY3J1bXBldHMnLFxuICAgICAqICAgJ3N0dWZmJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIHJldHVybiAnbm9uc2Vuc2UnO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdjaGVlc2UnKTtcbiAgICAgKiAvLyA9PiAnY3J1bXBldHMnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdzdHVmZicpO1xuICAgICAqIC8vID0+ICdub25zZW5zZSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSA/IG9iamVjdFtrZXldKCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIG1pY3JvLXRlbXBsYXRpbmcgbWV0aG9kIHRoYXQgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzXG4gICAgICogd2hpdGVzcGFjZSwgYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4gICAgICpcbiAgICAgKiBOb3RlOiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQsIGBfLnRlbXBsYXRlYCB1dGlsaXplcyBzb3VyY2VVUkxzIGZvciBlYXNpZXJcbiAgICAgKiBkZWJ1Z2dpbmcuIFNlZSBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZTpcbiAgICAgKiBodHRwOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWU6XG4gICAgICogaHR0cDovL2RldmVsb3Blci5jaHJvbWUuY29tL3N0YWJsZS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsLmh0bWxcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgZGF0YSBvYmplY3QgdXNlZCB0byBwb3B1bGF0ZSB0aGUgdGV4dC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlXSBUaGUgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlXSBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0c10gQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBsb2NhbCB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlXSBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NvdXJjZVVSTF0gVGhlIHNvdXJjZVVSTCBvZiB0aGUgdGVtcGxhdGUncyBjb21waWxlZCBzb3VyY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt2YXJpYWJsZV0gVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufHN0cmluZ30gUmV0dXJucyBhIGNvbXBpbGVkIGZ1bmN0aW9uIHdoZW4gbm8gYGRhdGFgIG9iamVjdFxuICAgICAqICBpcyBnaXZlbiwgZWxzZSBpdCByZXR1cm5zIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGVcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gbmFtZSAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ25hbWUnOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIEhUTUwgaW4gZGF0YSBwcm9wZXJ0eSB2YWx1ZXNcbiAgICAgKiBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+JywgeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBnZW5lcmF0ZSBIVE1MXG4gICAgICogdmFyIGxpc3QgPSAnPCUgXy5mb3JFYWNoKHBlb3BsZSwgZnVuY3Rpb24obmFtZSkgeyAlPjxsaT48JS0gbmFtZSAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiBfLnRlbXBsYXRlKGxpc3QsIHsgJ3Blb3BsZSc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBFUzYgZGVsaW1pdGVyIGFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSBkZWZhdWx0IFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJcbiAgICAgKiBfLnRlbXBsYXRlKCdoZWxsbyAkeyBuYW1lIH0nLCB7ICduYW1lJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnNcbiAgICAgKiBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgbmFtZSk7ICU+IScsIHsgJ25hbWUnOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGEgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnNcbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgICogICAnaW50ZXJwb2xhdGUnOiAve3soW1xcc1xcU10rPyl9fS9nXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8udGVtcGxhdGUoJ2hlbGxvIHt7IG5hbWUgfX0hJywgeyAnbmFtZSc6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBqUXVlcnlcbiAgICAgKiB2YXIgbGlzdCA9ICc8JSBqcS5lYWNoKHBlb3BsZSwgZnVuY3Rpb24obmFtZSkgeyAlPjxsaT48JS0gbmFtZSAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiBfLnRlbXBsYXRlKGxpc3QsIHsgJ3Blb3BsZSc6IFsnZnJlZCcsICdiYXJuZXknXSB9LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZVxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSBuYW1lICU+JywgbnVsbCwgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IGZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3JcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZVxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLm5hbWUgJT4hJywgbnVsbCwgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAgIHZhciBfX3QsIF9fcCA9ICcnLCBfX2UgPSBfLmVzY2FwZTtcbiAgICAgKiAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLm5hbWUgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAgIHJldHVybiBfX3A7XG4gICAgICogfVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIGEgc3RhY2sgdHJhY2VcbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihjd2QsICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUodGV4dCwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgLy8gYmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy9cbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanNcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1RcbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuICAgICAgdGV4dCA9IFN0cmluZyh0ZXh0IHx8ICcnKTtcblxuICAgICAgLy8gYXZvaWQgbWlzc2luZyBkZXBlbmRlbmNpZXMgd2hlbiBgaXRlcmF0b3JUZW1wbGF0ZWAgaXMgbm90IGRlZmluZWRcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0cyh7fSwgb3B0aW9ucywgc2V0dGluZ3MpO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGRlZmF1bHRzKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gdmFsdWVzKGltcG9ydHMpO1xuXG4gICAgICB2YXIgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gY29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgICAsICdnJyk7XG5cbiAgICAgIHRleHQucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gZXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW5ub3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzXG4gICAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIHJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgcmVxdWlyZXMgcmV0dXJuaW5nIHRoZSBgbWF0Y2hgXG4gICAgICAgIC8vIHN0cmluZyBpbiBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBpZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQsIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluXG4gICAgICB2YXIgdmFyaWFibGUgPSBvcHRpb25zLnZhcmlhYmxlLFxuICAgICAgICAgIGhhc1ZhcmlhYmxlID0gdmFyaWFibGU7XG5cbiAgICAgIGlmICghaGFzVmFyaWFibGUpIHtcbiAgICAgICAgdmFyaWFibGUgPSAnb2JqJztcbiAgICAgICAgc291cmNlID0gJ3dpdGggKCcgKyB2YXJpYWJsZSArICcpIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gY2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIGZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHlcbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgdmFyaWFibGUgKyAnKSB7XFxuJyArXG4gICAgICAgIChoYXNWYXJpYWJsZSA/ICcnIDogdmFyaWFibGUgKyAnIHx8ICgnICsgdmFyaWFibGUgKyAnID0ge30pO1xcbicpICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJywgX19lID0gXy5lc2NhcGVcIiArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmxcbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnXFxuLypcXG4vLyMgc291cmNlVVJMPScgKyAob3B0aW9ucy5zb3VyY2VVUkwgfHwgJy9sb2Rhc2gvdGVtcGxhdGUvc291cmNlWycgKyAodGVtcGxhdGVDb3VudGVyKyspICsgJ10nKSArICdcXG4qLyc7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbihpbXBvcnRzS2V5cywgJ3JldHVybiAnICsgc291cmNlICsgc291cmNlVVJMKS5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdChkYXRhKTtcbiAgICAgIH1cbiAgICAgIC8vIHByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCwgaW5cbiAgICAgIC8vIHN1cHBvcnRlZCBlbnZpcm9ubWVudHMsIG9yIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvclxuICAgICAgLy8gaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzIGR1cmluZyB0aGUgYnVpbGQgcHJvY2Vzc1xuICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNhbGxiYWNrIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzXG4gICAgICogb2YgZWFjaCBjYWxsYmFjayBleGVjdXRpb24uIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGV4ZWN1dGUgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGRpY2VSb2xscyA9IF8udGltZXMoMywgXy5wYXJ0aWFsKF8ucmFuZG9tLCAxLCA2KSk7XG4gICAgICogLy8gPT4gWzMsIDYsIDRdXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIGZ1bmN0aW9uKG4pIHsgbWFnZS5jYXN0U3BlbGwobik7IH0pO1xuICAgICAqIC8vID0+IGNhbGxzIGBtYWdlLmNhc3RTcGVsbChuKWAgdGhyZWUgdGltZXMsIHBhc3NpbmcgYG5gIG9mIGAwYCwgYDFgLCBhbmQgYDJgIHJlc3BlY3RpdmVseVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBmdW5jdGlvbihuKSB7IHRoaXMuY2FzdChuKTsgfSwgbWFnZSk7XG4gICAgICogLy8gPT4gYWxzbyBjYWxscyBgbWFnZS5jYXN0U3BlbGwobilgIHRocmVlIHRpbWVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIG4gPSAobiA9ICtuKSA+IC0xID8gbiA6IDA7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICAgICAgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDEpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBjYWxsYmFjayhpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWAgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuZXNjYXBlKCdGcmVkLCBCYXJuZXkgJmFtcDsgUGViYmxlcycpO1xuICAgICAqIC8vID0+ICdGcmVkLCBCYXJuZXkgJiBQZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgcHJvdmlkZWQgdGhlIElEIHdpbGwgYmUgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXhdIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gU3RyaW5nKHByZWZpeCA9PSBudWxsID8gJycgOiBwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHRoYXQgd3JhcHMgdGhlIGdpdmVuIHZhbHVlIHdpdGggZXhwbGljaXRcbiAgICAgKiBtZXRob2QgY2hhaW5pbmcgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpbmluZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gXy5jaGFpbihjaGFyYWN0ZXJzKVxuICAgICAqICAgICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgICAubWFwKGZ1bmN0aW9uKGNocikgeyByZXR1cm4gY2hyLm5hbWUgKyAnIGlzICcgKyBjaHIuYWdlOyB9KVxuICAgICAqICAgICAuZmlyc3QoKVxuICAgICAqICAgICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IG5ldyBsb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICAgIHZhbHVlLl9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgaW50ZXJjZXB0b3JgIHdpdGggdGhlIGB2YWx1ZWAgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IGFuZCB0aGVuXG4gICAgICogcmV0dXJucyBgdmFsdWVgLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2RcbiAgICAgKiBjaGFpbiBpbiBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluXG4gICAgICogdGhlIGNoYWluLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluaW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgMywgNF0pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHsgYXJyYXkucG9wKCk7IH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgZXhwbGljaXQgbWV0aG9kIGNoYWluaW5nIG9uIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5pbmdcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZ1xuICAgICAqIF8oY2hhcmFjdGVycykuZmlyc3QoKTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyB3aXRoIGV4cGxpY2l0IGNoYWluaW5nXG4gICAgICogXyhjaGFyYWN0ZXJzKS5jaGFpbigpXG4gICAgICogICAuZmlyc3QoKVxuICAgICAqICAgLnBpY2soJ2FnZScpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICdhZ2UnOiAzNiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgdGhpcy5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgdGhlIGB0b1N0cmluZ2AgcmVzdWx0IG9mIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdG9TdHJpbmdcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpbmluZ1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZyByZXN1bHQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS50b1N0cmluZygpO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKHRoaXMuX193cmFwcGVkX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVPZlxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIHZhbHVlXG4gICAgICogQGNhdGVnb3J5IENoYWluaW5nXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZU9mKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlT2YoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3dyYXBwZWRfXztcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIGFkZCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgd2hlbiBjaGFpbmluZ1xuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb21wb3NlID0gY29tcG9zZTtcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3JlYXRlQ2FsbGJhY2sgPSBjcmVhdGVDYWxsYmFjaztcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluZGV4QnkgPSBpbmRleEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gucGFpcnMgPSBwYWlycztcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBsdWNrID0gcGx1Y2s7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gud2hlcmUgPSB3aGVyZTtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuXG4gICAgLy8gYWRkIGFsaWFzZXNcbiAgICBsb2Rhc2guY29sbGVjdCA9IG1hcDtcbiAgICBsb2Rhc2guZHJvcCA9IHJlc3Q7XG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbjtcbiAgICBsb2Rhc2gubWV0aG9kcyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2gub2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC5zZWxlY3QgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLnRhaWwgPSByZXN0O1xuICAgIGxvZGFzaC51bmlxdWUgPSB1bmlxO1xuICAgIGxvZGFzaC51bnppcCA9IHppcDtcblxuICAgIC8vIGFkZCBmdW5jdGlvbnMgdG8gYGxvZGFzaC5wcm90b3R5cGVgXG4gICAgbWl4aW4obG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gYWRkIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIHdoZW4gY2hhaW5pbmdcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jb250YWlucyA9IGNvbnRhaW5zO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcblxuICAgIC8vIGFkZCBhbGlhc2VzXG4gICAgbG9kYXNoLmFsbCA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5hbnkgPSBzb21lO1xuICAgIGxvZGFzaC5kZXRlY3QgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kV2hlcmUgPSBmaW5kO1xuICAgIGxvZGFzaC5mb2xkbCA9IHJlZHVjZTtcbiAgICBsb2Rhc2guZm9sZHIgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2guaW5jbHVkZSA9IGNvbnRhaW5zO1xuICAgIGxvZGFzaC5pbmplY3QgPSByZWR1Y2U7XG5cbiAgICBtaXhpbihmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fVxuICAgICAgZm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpLCBmYWxzZSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIGFkZCBmdW5jdGlvbnMgY2FwYWJsZSBvZiByZXR1cm5pbmcgd3JhcHBlZCBhbmQgdW53cmFwcGVkIHZhbHVlcyB3aGVuIGNoYWluaW5nXG4gICAgbG9kYXNoLmZpcnN0ID0gZmlyc3Q7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG5cbiAgICAvLyBhZGQgYWxpYXNlc1xuICAgIGxvZGFzaC50YWtlID0gZmlyc3Q7XG4gICAgbG9kYXNoLmhlYWQgPSBmaXJzdDtcblxuICAgIGZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjYWxsYmFja2FibGUgPSBtZXRob2ROYW1lICE9PSAnc2FtcGxlJztcbiAgICAgIGlmICghbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdPSBmdW5jdGlvbihuLCBndWFyZCkge1xuICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jKHRoaXMuX193cmFwcGVkX18sIG4sIGd1YXJkKTtcblxuICAgICAgICAgIHJldHVybiAhY2hhaW5BbGwgJiYgKG4gPT0gbnVsbCB8fCAoZ3VhcmQgJiYgIShjYWxsYmFja2FibGUgJiYgdHlwZW9mIG4gPT0gJ2Z1bmN0aW9uJykpKVxuICAgICAgICAgICAgPyByZXN1bHRcbiAgICAgICAgICAgIDogbmV3IGxvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gJzIuNC4xJztcblxuICAgIC8vIGFkZCBcIkNoYWluaW5nXCIgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyXG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvU3RyaW5nID0gd3JhcHBlclRvU3RyaW5nO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWVPZjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSB3cmFwcGVyVmFsdWVPZjtcblxuICAgIC8vIGFkZCBgQXJyYXlgIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzXG4gICAgYmFzZUVhY2goWydqb2luJywgJ3BvcCcsICdzaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UmVmW21ldGhvZE5hbWVdO1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcy5fX3dyYXBwZWRfXywgYXJndW1lbnRzKTtcblxuICAgICAgICByZXR1cm4gY2hhaW5BbGxcbiAgICAgICAgICA/IG5ldyBsb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpXG4gICAgICAgICAgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIGBBcnJheWAgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHRoZSBleGlzdGluZyB3cmFwcGVkIHZhbHVlXG4gICAgYmFzZUVhY2goWydwdXNoJywgJ3JldmVyc2UnLCAnc29ydCcsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlSZWZbbWV0aG9kTmFtZV07XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmMuYXBwbHkodGhpcy5fX3dyYXBwZWRfXywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIGBBcnJheWAgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIG5ldyB3cmFwcGVkIHZhbHVlc1xuICAgIGJhc2VFYWNoKFsnY29uY2F0JywgJ3NsaWNlJywgJ3NwbGljZSddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UmVmW21ldGhvZE5hbWVdO1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IGxvZGFzaFdyYXBwZXIoZnVuYy5hcHBseSh0aGlzLl9fd3JhcHBlZF9fLCBhcmd1bWVudHMpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gYXZvaWQgYXJyYXktbGlrZSBvYmplY3QgYnVncyB3aXRoIGBBcnJheSNzaGlmdGAgYW5kIGBBcnJheSNzcGxpY2VgXG4gICAgLy8gaW4gSUUgPCA5LCBGaXJlZm94IDwgMTAsIE5hcndoYWwsIGFuZCBSaW5nb0pTXG4gICAgaWYgKCFzdXBwb3J0LnNwbGljZU9iamVjdHMpIHtcbiAgICAgIGJhc2VFYWNoKFsncG9wJywgJ3NoaWZ0JywgJ3NwbGljZSddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gYXJyYXlSZWZbbWV0aG9kTmFtZV0sXG4gICAgICAgICAgICBpc1NwbGljZSA9IG1ldGhvZE5hbWUgPT0gJ3NwbGljZSc7XG5cbiAgICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgdmFsdWVbMF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAoY2hhaW5BbGwgfHwgaXNTcGxpY2UpXG4gICAgICAgICAgICA/IG5ldyBsb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpXG4gICAgICAgICAgICA6IHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBleHBvc2UgTG8tRGFzaFxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIHNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMgbGlrZSByLmpzIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZSB0aGUgZm9sbG93aW5nOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG8tRGFzaCB0byB0aGUgZ2xvYmFsIG9iamVjdCBldmVuIHdoZW4gYW4gQU1EIGxvYWRlciBpcyBwcmVzZW50IGluXG4gICAgLy8gY2FzZSBMby1EYXNoIGlzIGxvYWRlZCB3aXRoIGEgUmVxdWlyZUpTIHNoaW0gY29uZmlnLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2FwaS5odG1sI2NvbmZpZy1zaGltXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIGRlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gY2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgYW4gYGV4cG9ydHNgIG9iamVjdFxuICBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG4gICAgLy8gaW4gTm9kZS5qcyBvciBSaW5nb0pTXG4gICAgaWYgKG1vZHVsZUV4cG9ydHMpIHtcbiAgICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICB9XG4gICAgLy8gaW4gTmFyd2hhbCBvciBSaGlubyAtcmVxdWlyZVxuICAgIGVsc2Uge1xuICAgICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIC8vIGluIGEgYnJvd3NlciBvciBSaGlub1xuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIoZnVuY3Rpb24gKHdpbmRvdywgdW5kZWZpbmVkKSB7XG4gIHZhciBvdmVycmlkZUZpZWxkcyA9IHtcbiAgICAgICAgcHJvZHVjdDoge1xuICAgICAgICAgIHByb2R1Y3ROYW1lOiAnbmFtZScsXG4gICAgICAgICAgYnJhbmROYW1lICA6ICdicmFuZE5hbWUnLFxuICAgICAgICAgIHBhcnRuZXJOYW1lOiAncGFydG5lck5hbWUnXG4gICAgICAgIH0sXG4gICAgICAgIHZhcmlhbnQ6IHtcbiAgICAgICAgICBjb2xvciA6ICdjb2xvcicsXG4gICAgICAgICAgc2l6ZSAgOiAnc2l6ZScsXG4gICAgICAgICAgaW1hZ2VzOiAnaW1hZ2VzJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgLCBzdXBlclNldEl0ZW0gICA9IHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbVxuICAgIDtcbiAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3N5bnRoZXRpY1N0b3JhZ2UnLCB7XG4gICAgICBkZXRhaWw6IHtcbiAgICAgICAga2V5ICAgICA6IGtleSxcbiAgICAgICAgb2xkVmFsdWU6IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpLFxuICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICBzdXBlclNldEl0ZW0uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9O1xuXG4gIHZhciBwbXJwYyAgPSByZXF1aXJlKCcuLi9penV6YWsvcG1ycGMnKVxuICAgICwgZmlsdGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vd2lkZ2V0L2FwcC9sb2FkZXIvZmlsdGVyJykoJ2ZpbHRlcicpXG4gICAgO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzeW50aGV0aWNTdG9yYWdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKC9zaG9wYmVhbV9hZGQtdG8tY2FydF8uKy8udGVzdChldmVudC5kZXRhaWwua2V5KSkge1xuXG4gICAgICB2YXIgaXRlbXMgICAgICA9IEpTT04ucGFyc2UoZXZlbnQuZGV0YWlsLm5ld1ZhbHVlKVxuICAgICAgICAsIHZhcmlhbnRJZHMgPSBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmlkO1xuICAgICAgICAgIH0pXG4gICAgICAgICwgcmVxdWVzdCAgICA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgICAgICwgZGF0YVxuICAgICAgICA7XG5cbiAgICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgICAgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KVxuICAgICAgICAgICAgICAsIHByb2R1Y3QgPSBmaWx0ZXIoZGF0YSwge3ZhcmlhbnRzOiB7aWQ6IGl0ZW0uaWR9fSlbMF1cbiAgICAgICAgICAgICAgLCB2YXJpYW50ID0gZmlsdGVyKHByb2R1Y3QudmFyaWFudHMsIHtpZDogaXRlbS5pZH0pWzBdXG4gICAgICAgICAgICAgIDtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVGaWVsZHMucHJvZHVjdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG92ZXJyaWRlRmllbGRzLnByb2R1Y3Rba2V5XTtcbiAgICAgICAgICAgICAgcHJvZHVjdFt2YWx1ZV0gPSBpdGVtW292ZXJyaWRlRmllbGRzLnByb2R1Y3Rba2V5XV07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVGaWVsZHMudmFyaWFudCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG92ZXJyaWRlRmllbGRzLnZhcmlhbnRba2V5XTtcbiAgICAgICAgICAgICAgdmFyaWFudFt2YWx1ZV0gPSBpdGVtW292ZXJyaWRlRmllbGRzLnZhcmlhbnRba2V5XV07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcG1ycGMuY2FsbCh7XG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uICAgICAgICA6ICdwdWJsaXNoJyxcbiAgICAgICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ2FkZFRvQ2FydCcsXG4gICAgICAgICAgICAgIHBhcmFtcyAgICAgICAgICAgICA6IFt7XG4gICAgICAgICAgICAgICAgcHJvZHVjdCAgOiBwcm9kdWN0LFxuICAgICAgICAgICAgICAgIHZhcmlhbnQgIDogdmFyaWFudCxcbiAgICAgICAgICAgICAgICBxdWFudGl0eSA6IGl0ZW0ucXVhbnRpdHksXG4gICAgICAgICAgICAgICAgc291cmNlT2JqOiB7XG4gICAgICAgICAgICAgICAgICBzb3VyY2VVcmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgICAgICAgICAgd2lkZ2V0SWQgOiBpdGVtLndpZGdldFV1aWQsXG4gICAgICAgICAgICAgICAgICBhcGlLZXkgICA6IGl0ZW0uYXBpS2V5LFxuICAgICAgICAgICAgICAgICAgZGF0YVVybCAgOiAnL3YxL3Byb2R1Y3RzP2lkPScgKyBpdGVtLmlkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGV2ZW50LmRldGFpbC5rZXkpO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcG1ycGMuY2FsbCh7XG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uICAgICAgICA6ICdwdWJsaXNoJyxcbiAgICAgICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ2ZsYXNoQ2FydCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdXZSB3ZXJlIHVuYWJsZSB0byBhZGQgeW91ciBpdGVtcyB0byB0aGUgY2FydC4gRXJyb3IgZm9sbG93czonKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9wZW4oJ2dldCcsIFNob3BiZWFtLkhPU1QgKyAnL3YxL3Byb2R1Y3RzP2lkPScgKyB2YXJpYW50SWRzLmpvaW4oJywnKSk7XG4gICAgICByZXF1ZXN0LnNlbmQoKTtcbiAgICB9XG4gIH0pXG59KHdpbmRvdykpOyIsInZhciBxID0gcmVxdWlyZSgnLi4vLi4vLi4vc2hhcmVkL2xpYi9rcmlza293YWwvcS5qcycpO1xubW9kdWxlLmV4cG9ydHMgPSBFbGVtZW50RGVjb3JhdG9yO1xuXG4vKipcbiAqIGBFbGVtZW50YCBkZWNvcmF0b3IgY2xhc3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBCcm93c2VyIERPTSBFbGVtZW50IHRvIGRlY29yYXRlLlxuICogQHJldHVybiB7RWxlbWVudERlY29yYXRvcn0gYHRoaXNgIEVsZW1lbnREZWNvcmF0b3IgaW5zdGFuY2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBFbGVtZW50RGVjb3JhdG9yKGVsZW1lbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCBhbmltYXRpb25RdWV1ZSA9IFtdXG4gICAgO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gIC8vRGVsZWdhdGUgc2VsZWN0IG1ldGhvZHMgZGlyZWN0bHkgdG8gYHRoaXMuZWxlbWVudGBcbiAgWydyZW1vdmUnXVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgc2VsZltmdW5jdGlvbk5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhcmFtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpO1xuICAgICAgICBzZWxmLmVsZW1lbnRbZnVuY3Rpb25OYW1lXS5hcHBseShzZWxmLmVsZW1lbnQsIHBhcmFtcylcbiAgICAgIH1cbiAgICB9KTtcblxuICAvKipcbiAgICogRGVsZWdhdGVzIHRvIHNldEF0dHJzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhdHRycyBpLmUuIHtpZDogJ2VsZW1lbnQtaWQnLCBzcmM6ICdodHRwOi8vLi4nfVxuICAgKiBAcmV0dXJuIHtFbGVtZW50RGVjb3JhdG9yfSBgdGhpc2AgRWxlbWVudERlY29yYXRvciBpbnN0YW5jZVxuICAgKi9cbiAgdGhpcy5hdHRyID0gZnVuY3Rpb24oYXR0cnMpIHtcbiAgICBzZXRBdHRycyhhdHRycywgdGhpcy5lbGVtZW50KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgXG4gIHRoaXMuYXR0cnMgPSB0aGlzLmF0dHI7XG5cbiAgLyoqXG4gICAqIERlbGVnYXRlcyB0byBzZXRDc3Mgb3IgZ2V0Q3NzIGRlcGVuZGluZyBvbiBhcmd1bWVudCB0eXBlXG4gICAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fSBjc3MgaS5lLiB7Ym9yZGVyOiAnMXB4IHNvbGlkIHJlZCcsIHBhZGRpbmc6ICcxMHB4J31cbiAgICogQHJldHVybiB7RWxlbWVudERlY29yYXRvcnxvYmplY3R9IGB0aGlzYCBFbGVtZW50RGVjb3JhdG9yIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLmNzcyA9IGZ1bmN0aW9uKGNzcykge1xuICAgIGlmIChjc3MgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcmV0dXJuIGdldENvbXB1dGVkQ3NzKGNzcywgdGhpcy5lbGVtZW50KVxuICAgIH1cbiAgICBzZXRDc3MoY3NzLCB0aGlzLmVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbnNlcnQvbW92ZSBwYXNzZWQgYGVsZW1lbnRgIGFmdGVyIGB0aGlzLmVsZW1lbnRgIGFzIGEgc2libGluZ1xuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgQnJvd3NlciBET00gRWxlbWVudFxuICAgKiBAcmV0dXJuIHtFbGVtZW50RGVjb3JhdG9yfSBgdGhpc2AgRWxlbWVudERlY29yYXRvciBpbnN0YW5jZVxuICAgKi9cbi8vICB0aGlzLmFmdGVyID0gZnVuY3Rpb24oZWxlbWVudCkge1xuLy8gICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50IGluc3RhbmNlb2YoRWxlbWVudERlY29yYXRvcilcbi8vICAgICAgICA/IGVsZW1lbnQuZWxlbWVudFxuLy8gICAgICAgIDogZWxlbWVudFxuLy8gICAgICA7XG4vLyAgICBcbi8vICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCBgdGhpcy5lbGVtZW50YCBiZWZvcmUgcGFzc2VkIGB0YXJnZXRgIEVsZW1lbnRcbiAgICogICAgKG9yIEVsZW1lbnREZWNvcmF0b3IncyBlbGVtZW50KVxuICAgKiBAcGFyYW0ge0VsZW1lbnR8RWxlbWVudERlY29yYXRvcn0gdGFyZ2V0IEVsZW1lbnQgdG8gcHV0IGB0aGlzLmVsZW1lbnRgIGJlZm9yZVxuICAgKiBAcmV0dXJuIHtFbGVtZW50RGVjb3JhdG9yfSBgdGhpc2AgRWxlbWVudERlY29yYXRvciBpbnN0YW5jZVxuICAgKi9cbiAgdGhpcy5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICB0YXJnZXQgPSB0YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50RGVjb3JhdG9yXG4gICAgICA/IHRhcmdldC5lbGVtZW50XG4gICAgICA6IHRhcmdldFxuICAgIDtcbiAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5lbGVtZW50LCB0YXJnZXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBcHBlbmQgdGhlIHBhc3NlZCBFbGVtZW50IG9yIEVsZW1lbnREZWNvcmF0b3IgdG8gYHRoaXMuZWxlbWVudGBcbiAgICogQHBhcmFtIHtFbGVtZW50fEVsZW1lbnREZWNvcmF0b3J9IGVsZW1lbnQgSFRNTCBET00gRWxlbWVudCBvclxuICAgKiAgICBFbGVtZW50RGVjb3JhdG9yIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0VsZW1lbnREZWNvcmF0b3J9IGB0aGlzYCBFbGVtZW50RGVjb3JhdG9yIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLmFwcGVuZCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnREZWNvcmF0b3JcbiAgICAgID8gZWxlbWVudC5lbGVtZW50XG4gICAgICA6IGVsZW1lbnRcbiAgICA7XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBcHBlbmQgdGhlIGB0aGlzLmVsZW1lbnRgIHRvIHBhc3NlZCBFbGVtZW50IG9yIEVsZW1lbnREZWNvcmF0b3JcbiAgICogQHBhcmFtIHtFbGVtZW50fEVsZW1lbnREZWNvcmF0b3J9IGVsZW1lbnQgSFRNTCBET00gRWxlbWVudCBvclxuICAgKiAgICBFbGVtZW50RGVjb3JhdG9yIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0VsZW1lbnREZWNvcmF0b3J9IGB0aGlzYCBFbGVtZW50RGVjb3JhdG9yIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLmFwcGVuZFRvID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudERlY29yYXRvclxuICAgICAgPyBlbGVtZW50LmVsZW1lbnRcbiAgICAgIDogZWxlbWVudFxuICAgIDtcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICB0aGlzLmFuaW1hdGUgPSBmdW5jdGlvbihwcm9wZXJ0aWVzLCBkdXJhdGlvbikge1xuICAgIGR1cmF0aW9uID0gZHVyYXRpb24gfHwgJzIwMG1zJztcbiAgICB2YXIgbGFzdEluUXVldWUgPSBhbmltYXRpb25RdWV1ZVthbmltYXRpb25RdWV1ZS5sZW5ndGggLSAxXTtcblxuICAgIHJldHVybiBsYXN0SW5RdWV1ZVxuICAgICAgPyBsYXN0SW5RdWV1ZS50aGVuKGFuaW1hdGUpXG4gICAgICA6IGFuaW1hdGUoKVxuICAgICAgO1xuXG4gICAgLy9UT0RPOiBtYWtlIHRoaXMgd29yayB3aXRoIGRlY2ltYWwgZHVyYXRpb25zISEgZS5nLiBgMS4xNXNgXG4gICAgZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICAgIHZhciBvcmlnaW5hbFRyYW5zaXRpb24gPSBzZWxmLmVsZW1lbnQuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNpdGlvbicpIHx8ICcnXG4gICAgICAgICwgdHJhbnNpdGlvbnMgPSBvcmlnaW5hbFRyYW5zaXRpb24uc3BsaXQoJywgJylcbiAgICAgICAgLCBkZWZlcnJlZCA9IHEuZGVmZXIoKVxuICAgICAgICAsIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlXG4gICAgICAgICwgZHVyYXRpb25NYXRjaCA9IGR1cmF0aW9uLm1hdGNoKC8oXFxkKykobSk/cy8pXG4gICAgICAgIDtcblxuICAgICAgYW5pbWF0aW9uUXVldWUucHVzaChwcm9taXNlKTtcblxuICAgICAgLy9gdHJhbnNpdGlvbmAgcHJvcGVydHkgdGVzdGVkIGFuZCB3b3JraW5nIG9uOlxuICAgICAgLy8gIENocm9tZSAzMC4wLjE1OTkuMTAxXG4gICAgICAvLyAgRmlyZWZveCAyNC4wXG4gICAgICAvLyAgU2FmYXJpIDcuMCAoOTUzNy43MSlcbiAgICAgIC8vICAobm8gbmVlZCBmb3IgLW1vei10cmFuc2l0aW9uLCBldGMuKVxuICAgICAgT2JqZWN0LmtleXMocHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBpZiAodHJhbnNpdGlvbnNbMF0gIT09ICcnKSB7XG4gICAgICAgICAgdmFyIGluY2x1ZGVkID0gdHJhbnNpdGlvbnMuc29tZShmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvbi5zcGxpdCgnICcpWzBdO1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eSA9PT0gcHJvcGVydHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIWluY2x1ZGVkKSB0cmFuc2l0aW9ucy5wdXNoKHByb3BlcnR5ICsgJyAnICsgZHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYW5zaXRpb25zLnNoaWZ0KCk7XG4gICAgICAgICAgdHJhbnNpdGlvbnMucHVzaChwcm9wZXJ0eSArICcgJyArIGR1cmF0aW9uKVxuICAgICAgICB9XG5cbiAgICAgIH0pO1xuLy8gICAgICBzZWxmLmVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25zLmpvaW4oJywgJyk7XG4gICAgICBzZWxmLmNzcyh7dHJhbnNpdGlvbjogdHJhbnNpdGlvbnMuam9pbignLCAnKX0pO1xuICAgICAgc2VsZi5jc3MocHJvcGVydGllcyk7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgc2VsZi5lbGVtZW50LnN0eWxlLnRyYW5zaXRpb24gPSBvcmlnaW5hbFRyYW5zaXRpb247XG4gICAgICAgIHNlbGYuY3NzKHt0cmFuc2l0aW9uOiBvcmlnaW5hbFRyYW5zaXRpb259KTtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgdmFyIG9sZFByb21pc2UgPSBhbmltYXRpb25RdWV1ZS5zcGxpY2UoYW5pbWF0aW9uUXVldWUubGFzdEluZGV4T2YocHJvbWlzZSksIDEpWzBdO1xuICAgICAgICBpZiAob2xkUHJvbWlzZSAhPT0gcHJvbWlzZSAmJiAhb2xkUHJvbWlzZS5pc1BlbmRpbmcoKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvbWlzZXMgZGlkblxcJ3QgbWF0Y2ggb3Igb2xkUHJvbWlzZSBpcyBzdGlsbCBwZW5kaW5nIScpXG4gICAgICAgIH1cbiAgICAgIH0sIGR1cmF0aW9uTWF0Y2hbMl0gPyBwYXJzZUludChkdXJhdGlvbk1hdGNoWzFdLCAxMCkgOiAocGFyc2VJbnQoZHVyYXRpb25NYXRjaFsxXSwgMTApICogMTAwMCkpO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCBhIGNzcyB0cmFuc2l0aW9uIG9uIG9wYWNpdHkgKHVubGVzcyBpdCBleGlzdHMgYWxyZWFkeSlcbiAgICogICAgd2l0aCBhIGR1cmF0aW9uICh3aXRoIG1lYXN1cmVtZW50IGkuZS4gJ21zJyBvciAncycpIGVxdWFsXG4gICAqICAgIHRvIHRoZSBhcmd1bWVudCAob3IgMjAwbXMgYnkgZGVmYXVsdCkuIFRoZW4gc2V0IHZpc2liaWxpdHkgdG9cbiAgICogICAgdmlzaWJsZSBhbmQgb3BhY2l0eSB0byAxLiBXYWl0IHRoZSBkdXJhdGlvbiBhbmQgZmluYWxseSxcbiAgICogICAgcmVtb3ZlIHRoZSB0cmFuc2l0aW9uICh1bmxlc3MgaXQgd2FzIHByZS1leGlzdGluZykuXG4gICAqXG4gICAqICAgIE5PVEU6IHRoaXMgZG9lcyBub3QgcHJldmVudCB0aGUgZWxlbWVudCBmcm9tIHRha2luZyB1cCAvXG4gICAqICAgIGJsb2NraW5nIG91dCBzcGFjZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGR1cmF0aW9uIER1cmF0aW9uIHRvIHB1dCBvbiBDU1MgdHJhbnNpdGlvblxuICAgKi9cbiAgdGhpcy5mYWRlSW4gPSBmdW5jdGlvbihkdXJhdGlvbikge1xuLy8gICAgdGhpcy5lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgdGhpcy5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xuICAgIHJldHVybiB0aGlzLmFuaW1hdGUoe29wYWNpdHk6IDF9LCBkdXJhdGlvbilcbiAgfTtcblxuICAvKipcbiAgICogU2V0IGEgY3NzIHRyYW5zaXRpb24gb24gb3BhY2l0eSAodW5sZXNzIGl0IGV4aXN0cyBhbHJlYWR5KVxuICAgKiAgICB3aXRoIGEgZHVyYXRpb24gKHdpdGggbWVhc3VyZW1lbnQgaS5lLiAnbXMnIG9yICdzJykgZXF1YWxcbiAgICogICAgdG8gdGhlIGFyZ3VtZW50IChvciAyMDBtcyBieSBkZWZhdWx0KS4gVGhlbiBzZXQgb3BhY2l0eSB0byAwLlxuICAgKiAgICBXYWl0IHRoZSBkdXJhdGlvbiBhbmQgZmluYWxseSwgcmVtb3ZlIHRoZSB0cmFuc2l0aW9uICh1bmxlc3NcbiAgICogICAgaXQgd2FzIHByZS1leGlzdGluZykgYW5kIHNldCB2aXNpYmlsaXR5IHRvIGhpZGRlbi5cbiAgICpcbiAgICogICAgTk9URTogdGhpcyBkb2VzIG5vdCBwcmV2ZW50IHRoZSBlbGVtZW50IGZyb20gdGFraW5nIHVwIC9cbiAgICogICAgYmxvY2tpbmcgb3V0IHNwYWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZHVyYXRpb24gRHVyYXRpb24gdG8gcHV0IG9uIENTUyB0cmFuc2l0aW9uXG4gICAqL1xuICB0aGlzLmZhZGVPdXQgPSBmdW5jdGlvbihkdXJhdGlvbikge1xuICAgIHJldHVybiB0aGlzLmFuaW1hdGUoe29wYWNpdHk6IDB9LCBkdXJhdGlvbilcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuLy8gICAgICAgIHNlbGYuZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbidcbiAgICAgICAgc2VsZi5jc3Moe3Zpc2liaWxpdHk6ICdoaWRkZW4nfSlcbiAgICAgIH0pXG4gIH07XG59XG5cbi8qKlxuICogU2V0IGVsZW1lbnQgYXR0cmlidXRlc1xuICogQHBhcmFtIHtvYmplY3R9IGF0dHJzIGkuZS4ge2lkOiAnZWxlbWVudC1pZCcsIHNyYzogJ2h0dHA6Ly8uLid9XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJzKGF0dHJzLCBlbGVtZW50KSB7XG4gIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uKGF0dHJOYW1lKSB7XG4gICAgZWxlbWVudFthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBlbGVtZW50IGNzcyBwcm9wZXJ0aWVzICh2aWEgc3R5bGUgYXR0cilcbiAqIEBwYXJhbSB7b2JqZWN0fSBjc3MgaS5lLiB7Ym9yZGVyOiAnMXB4IHNvbGlkIHJlZCcsIHBhZGRpbmc6ICcxMHB4J31cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBIVE1MIERPTSBFbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldENzcyhjc3MsIGVsZW1lbnQpIHtcbiAgT2JqZWN0LmtleXMoY3NzKS5mb3JFYWNoKGZ1bmN0aW9uKGF0dHJOYW1lKSB7XG4gICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShhdHRyTmFtZSwgY3NzW2F0dHJOYW1lXSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBjb21wdXRlZCBjc3MgcHJvcGVydHkgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb3BlcnR5IG5hbWVzIGFycmF5XG4gKiBAcGFyYW0ge2FycmF5fSBwcm9wZXJ0eU5hbWVzIEFycmF5IG9mIGNzcyBwcm9wZXJ0eSBuYW1lc1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEhUTUwgRG9tIEVsZW1lbnQgb24gd2hpY2ggdGhlIHByb3BlcnRpZXNcbiAqICAgYXJlIHRvIGJlIHJldHJpZXZlZFxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgb2YgY3NzIHByb3BlcnR5IG5hbWVzIGFuZCB2YWx1ZXNcbiAqICAgKHVzYWJsZSB3aXRoIC5jc3MgZnVuY3Rpb24gZm9yIHNldHRpbmcgdG8gdGhlIHJldHJpZXZlZCB2YWx1ZXMpXG4gKi9cbmZ1bmN0aW9uIGdldENvbXB1dGVkQ3NzKHByb3BlcnR5TmFtZXMsIGVsZW1lbnQpIHtcbiAgdmFyIHByb3BlcnRpZXMgPSB7fTtcbiAgdmFyIGNvbXB1dGVkUHJvcGVydGllcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gIHByb3BlcnR5TmFtZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wZXJ0eU5hbWUpIHtcbi8vICAgIHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSA9IGNvbXB1dGVkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdIHx8ICcnO1xuICAgIHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSA9IGNvbXB1dGVkUHJvcGVydGllcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5TmFtZSk7Ly8gfHwgJyc7XG4gIH0pO1xuICByZXR1cm4gcHJvcGVydGllcztcbn1cbiIsInZhciBfID0gcmVxdWlyZSgnbG9kYXNoJylcbiAgLCBFbGVtZW50RGVjb3JhdG9yID0gcmVxdWlyZSgnLi9FbGVtZW50RGVjb3JhdG9yJylcbiAgLCBmaWx0ZXIgPSByZXF1aXJlKCcuL2ZpbHRlcicpXG4gIDtcbm1vZHVsZS5leHBvcnRzID0gZGVjb3JhdGU7XG5cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgZm9yIEVsZW1lbnREZWNvcmF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfEVsZW1lbnR9IHRhZ05hbWVPckVsZW1lbnQgRWxlbWVudCBpbnN0YW5jZSB0byBkZWNvcmF0ZVxuICogICAgb3IgbmFtZSBvZiBIVE1MIHRhZyB0byBjcmVhdGUgYW5kIGRlY29yYXRlLlxuICogQHJldHVybiB7RWxlbWVudERlY29yYXRvcn0gTmV3IEVsZW1lbnREZWNvcmF0b3IgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gZGVjb3JhdGUodGFnTmFtZU9yRWxlbWVudCkge1xuICB2YXIgZWxlbWVudCA9IHRhZ05hbWVPckVsZW1lbnQgaW5zdGFuY2VvZihFbGVtZW50KVxuICAgICAgPyB0YWdOYW1lT3JFbGVtZW50XG4gICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZU9yRWxlbWVudClcbiAgICA7XG4gIHJldHVybiBuZXcgRWxlbWVudERlY29yYXRvcihlbGVtZW50KTtcbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBwYXNzZWQgYXJyYXkgZWxlbWVudHMgb3Igb2JqZWN0IHRvXG4gKiB0aGUgcGFzc2VkIG9iamVjdFxuICogQHBhcmFtIHtvYmplY3R8YXJyYXl9IGV4dGVuZGVlIG9iamVjdCB0byBleHRlbmRcbiAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fHVuZGVmaW5lZH0gZXh0ZW5kZXIgb2JqZWN0cyB0byBleHRlbmQgZXh0ZW5kZWUgd2l0aFxuICogQHJldHVybiB7b2JqZWN0fSBleHRlbmRlZCBvYmplY3RcbiAqL1xuZGVjb3JhdGUuZXh0ZW5kID0gZnVuY3Rpb24oZXh0ZW5kZWUsIGV4dGVuZGVyKSB7XG4gIGlmICghZXh0ZW5kZXIpIHtcbiAgICBleHRlbmRlciA9IGV4dGVuZGVlO1xuICAgIGV4dGVuZGVlID0ge307XG4gIH1cblxuICBpZiAoZXh0ZW5kZXIgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGV4dGVuZGVyLmZvckVhY2goZnVuY3Rpb24oZXh0ZW5kZXIpIHtcbiAgICAgIGRlY29yYXRlLmNvcHkoZXh0ZW5kZWUsIGV4dGVuZGVyKVxuICAgIH0pO1xuICAgIHJldHVybiBleHRlbmRlZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWNvcmF0ZS5jb3B5KGV4dGVuZGVlLCBleHRlbmRlcilcbiAgfVxufTtcblxuLyoqXG4gKiBJZiAyIGFyZ3M6IEFkZHMgcHJvcGVydGllcyBmbyB0aGUgc2Vjb25kIG9iamVjdCB0byB0aGUgZmlyc3RcbiAqICAgb2JqZWN0IGFuZCByZXR1cm5zIHRoZSBmaXJzdCBvYmplY3QuXG4gKiBJZiAxIGFyZzogQWRkcyBwcm9wZXJ0aWVzIGZvIHRoZSBhcmd1bWVudCBvYmplY3QgdG8gYSBuZXdcbiAqICBvYmplY3QgYW5kIHJldHVybnMgdGhhdCBvYmplY3QuXG4gKiBAcGFyYW0ge29iamVjdH0gZXh0ZW5kZWUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge29iamVjdHx1bmRlZmluZWR9IGV4dGVuZGVyIG9iamVjdCB0byBleHRlbmQgZXh0ZW5kZWUgd2l0aFxuICogQHJldHVybiB7b2JqZWN0fSBleHRlbmRlZCBvYmplY3RcbiAqL1xuZGVjb3JhdGUuY29weSA9IGZ1bmN0aW9uKGV4dGVuZGVlLCBleHRlbmRlcikge1xuICBpZiAoIWV4dGVuZGVyKSB7XG4gICAgZXh0ZW5kZXIgPSBleHRlbmRlZTtcbiAgICBleHRlbmRlZSA9IHt9O1xuICB9XG5cbiAgT2JqZWN0LmtleXMoZXh0ZW5kZXIpLmZvckVhY2goZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICBleHRlbmRlZVtwcm9wZXJ0eV0gPSBleHRlbmRlcltwcm9wZXJ0eV1cbiAgfSk7XG4gIHJldHVybiBleHRlbmRlZVxufTtcblxuZGVjb3JhdGUuZmlsdGVyID0gZmlsdGVyO1xuZGVjb3JhdGUuY29tcGFjdCA9IF8uY29tcGFjdDtcbmRlY29yYXRlLm1lcmdlID0gXy5tZXJnZTtcbiIsIi8qKlxuICogQ0FSVCBCVUlMREVSXG4gKi9cblxudmFyICQgPSByZXF1aXJlKCcuL2J1aWxkJylcbiAgLCBwbXJwYyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NoYXJlZC9saWIvaXp1emFrL3BtcnBjJylcbiAgLCB0aHJvdHRsZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3NoYXJlZC9hcHAvc2VydmljZXMvdGhyb3R0bGUnKVxuICA7XG5cbmV4cG9ydHMuYnVpbGQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoZW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0LnNob3BiZWFtLXNjcmlwdCcpLmdldEF0dHJpYnV0ZSgnZGF0YS1zaG9wYmVhbS10aGVtZScpXG4gICAgLCB0aGVtZV9wYXJhbWV0ZXIgPSAoKHR5cGVvZiB0aGVtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhlbWUpID8gdGhlbWUgOiAnJyk7XG5cbiAgZnVuY3Rpb24gY2xvc2VDYXJ0KCkge1xuICAgIHJlc2l6ZUNhcnQoJ0NMT1NFRCcpXG4gIH1cblxuICBmdW5jdGlvbiBvcGVuQ2FydCgpIHtcbiAgICByZXNpemVDYXJ0KCdWSVNJQkxFJylcbiAgfVxuXG4gIGlmIChTaG9wYmVhbS5UT1BfV0lORE9XKSB7XG4gICAgdmFyIG1vYmlsZVRocmVzaG9sZCA9IDc2OFxuICAgICAgLCAkY2FydCA9ICQoJ2lmcmFtZScpXG4gICAgICAgIC5hdHRyKHtcbiAgICAgICAgICBpZCA6ICdzaG9wYmVhbS1jYXJ0JyxcbiAgICAgICAgICBzcmM6IFNob3BiZWFtLkhPU1QgKyAnL2FwcC9jYXJ0P3RoZW1lPScgKyB0aGVtZV9wYXJhbWV0ZXJcbiAgICAgICAgfSlcbiAgICAgICwgY3NzRm9yID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIFNob3BiZWFtWydDQVJUXycgKyBzdGF0ZSArICdfQ1NTJ11cbiAgICAgIH1cblxuICAgIC8vLS0gaW5pdGlhbGl6ZSBjYXJ0U3RhdGUgdG8gJ0hJRERFTidcbiAgICAgICwgY2FydFN0YXRlID0gJ0hJRERFTidcbiAgICAgICwgcmVzaXplQ2FydCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkgY2FydFN0YXRlID0gc3RhdGU7XG4gICAgICAgICRjYXJ0LmNzcygkLmV4dGVuZChbY3NzRm9yKCdERUZBVUxUJyksIGNzc0ZvcihjYXJ0U3RhdGUpXSkpO1xuICAgICAgfVxuICAgICAgO1xuXG4gICAgU2hvcGJlYW0uRE9DVU1FTlRfQk9EWS50aGVuKGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICRjYXJ0LmFwcGVuZFRvKGJvZHkpO1xuXG4gICAgICAvLy0tIGluaXRpYWwgc2l6aW5nXG4gICAgICByZXNpemVDYXJ0KCk7XG4gICAgfSk7XG5cbiAgICBwbXJwYy5yZWdpc3Rlcih7XG4gICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAncmVzaXplQ2FydCcsXG4gICAgICBwcm9jZWR1cmUgICAgICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXNpemVDYXJ0KCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBwbXJwYy5yZWdpc3Rlcih7XG4gICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnb3BlbkNhcnQnLFxuICAgICAgcHJvY2VkdXJlICAgICAgICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb3BlbkNhcnQoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBwbXJwYy5yZWdpc3Rlcih7XG4gICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnY2xvc2VDYXJ0JyxcbiAgICAgIHByb2NlZHVyZSAgICAgICAgICA6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VDYXJ0KHN0YXRlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBwbXJwYy5yZWdpc3Rlcih7XG4gICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnZmxhc2hDYXJ0JyxcbiAgICAgIHByb2NlZHVyZSAgICAgICAgICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9wZW5DYXJ0KCk7XG4gICAgICAgICAgLy8ga2VlcCB0aGUgY2FydCBvcGVuIGZvciA5IHNlY29uZHNcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2xvc2VDYXJ0KClcbiAgICAgICAgICB9LCA0NTAwKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHBtcnBjLnJlZ2lzdGVyKHtcbiAgICAgIHB1YmxpY1Byb2NlZHVyZU5hbWU6ICdoaWRlQ2FydCcsXG4gICAgICBwcm9jZWR1cmUgICAgICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXNpemVDYXJ0KCdISURERU4nKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIi8qKlxuICogQ0hFQ0tPVVQgQlVJTERFUlxuICovXG5cbnZhciAkID0gcmVxdWlyZSgnLi9idWlsZCcpXG4gICwgcG1ycGMgPSByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvbGliL2l6dXphay9wbXJwYycpXG4gICwgem9vbSA9IHJlcXVpcmUoJy4vem9vbScpXG4gICwgYm9keVNjcm9sbCA9IHJlcXVpcmUoJy4uLy4uLy4uL3NoYXJlZC9hcHAvYnJvd3Nlci9ib2R5LXNjcm9sbCcpO1xuICA7XG5cbmV4cG9ydHMuYnVpbGQgPSBmdW5jdGlvbigpIHtcblxuICB2YXIgdGhlbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzY3JpcHQuc2hvcGJlYW0tc2NyaXB0JykuZ2V0QXR0cmlidXRlKCdkYXRhLXNob3BiZWFtLXRoZW1lJylcbiAgICAsIHRoZW1lX3BhcmFtZXRlciA9ICgodHlwZW9mIHRoZW1lICE9PSAndW5kZWZpbmVkJyAmJiB0aGVtZSkgPyB0aGVtZSA6ICcnKTtcblxuICBpZiAoU2hvcGJlYW0uVE9QX1dJTkRPVykge1xuICAgIHZhciAkY2hlY2tvdXQgPSAkKCdpZnJhbWUnKVxuICAgICAgICAuY3NzKCQuZXh0ZW5kKFtcbiAgICAgICAgICBTaG9wYmVhbS5DSEVDS09VVF9ERUZBVUxUX0NTUyxcbiAgICAgICAgICBTaG9wYmVhbS5DSEVDS09VVF9ISURERU5fQ1NTXG4gICAgICAgIF0pKVxuICAgICAgICAuYXR0cih7XG4gICAgICAgICAgc3JjOiBTaG9wYmVhbS5IT1NUICsgJy9hcHAvY2hlY2tvdXQ/dGhlbWU9JyArIHRoZW1lX3BhcmFtZXRlciArICcjL3Jldmlldz9tb2RlPWNvcHBlcicsXG4gICAgICAgICAgaWQgOiAnc2hvcGJlYW0tY2hlY2tvdXQnXG4gICAgICAgIH0pXG4gICAgICAsICRjaGVja291dENvbnRhaW5lciA9ICQoJ2RpdicpXG4gICAgICAgIC5jc3MoJC5leHRlbmQoW1xuICAgICAgICAgIFNob3BiZWFtLkNIRUNLT1VUX0JBQ0tEUk9QX0RFRkFVTFRfQ1NTLFxuICAgICAgICAgIFNob3BiZWFtLkNIRUNLT1VUX0JBQ0tEUk9QX0hJRERFTl9DU1NcbiAgICAgICAgXSkpXG4gICAgICAgIC5hdHRyKHtpZDogJ3Nob3BiZWFtLWNoZWNrb3V0LWJhY2tkcm9wJ30pXG4gICAgICA7XG5cbiAgICBTaG9wYmVhbS5ET0NVTUVOVF9CT0RZLnRoZW4oZnVuY3Rpb24oYm9keSkge1xuICAgICAgJGNoZWNrb3V0Q29udGFpbmVyLmFwcGVuZFRvKGJvZHkpO1xuICAgICAgJGNoZWNrb3V0LmFwcGVuZFRvKGJvZHkpO1xuICAgIH0pO1xuXG4gICAgcG1ycGMucmVnaXN0ZXIoe1xuICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ29wZW5DaGVja291dCcsXG4gICAgICBwcm9jZWR1cmUgICAgICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB6b29tLmRpc2FibGUoKTtcbiAgICAgICAgICAkY2hlY2tvdXRDb250YWluZXIuYW5pbWF0ZShTaG9wYmVhbS5DSEVDS09VVF9CQUNLRFJPUF9WSVNJQkxFX0NTUywgJzExNTBtcycpO1xuICAgICAgICAgICRjaGVja291dC5hbmltYXRlKFNob3BiZWFtLkNIRUNLT1VUX1ZJU0lCTEVfQ1NTLCAnMXMnKTtcbiAgICAgICAgICBib2R5U2Nyb2xsLmxvY2soKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBwbXJwYy5yZWdpc3Rlcih7XG4gICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnY2xvc2VDaGVja291dCcsXG4gICAgICBwcm9jZWR1cmUgICAgICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB6b29tLnJlc2V0KCk7XG4gICAgICAgICAgJGNoZWNrb3V0LmFuaW1hdGUoU2hvcGJlYW0uQ0hFQ0tPVVRfSElEREVOX0NTUywgJzFzJyk7XG4gICAgICAgICAgJGNoZWNrb3V0Q29udGFpbmVyLmFuaW1hdGUoU2hvcGJlYW0uQ0hFQ0tPVVRfQkFDS0RST1BfSElEREVOX0NTUywgJzExNTBtcycpO1xuICAgICAgICAgIGJvZHlTY3JvbGwudW5sb2NrKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuIiwidmFyIGRhdGFPdmVycmlkZVBhcnNlciA9IHt9XG4gICwgXyAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnbG9kYXNoJylcbiAgLCBmaWx0ZXIgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2ZpbHRlcicpKCdmaWx0ZXInKVxuICA7XG5cbm1vZHVsZS5leHBvcnRzID0gZGF0YU92ZXJyaWRlUGFyc2VyO1xuXG5kYXRhT3ZlcnJpZGVQYXJzZXIucGFyc2UgPSBmdW5jdGlvbiBwYXJzZShkYXRhRWxlbWVudHMpIHtcbiAgaWYgKHR5cGVvZihkYXRhRWxlbWVudHMpID09PSAndW5kZWZpbmVkJyB8fCBkYXRhRWxlbWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuO1xuICBpZiAoIShkYXRhRWxlbWVudHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgL3ZhcmlhbnRzLy50ZXN0KGRhdGFFbGVtZW50cy5jbGFzc05hbWUpOlxuICAgICAgICByZXR1cm4gW10uc2xpY2UuYXBwbHkoZGF0YUVsZW1lbnRzLmNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gXy5tZXJnZShcbiAgICAgICAgICAgIHtpZDogd2luZG93LnBhcnNlSW50KGVsZW1lbnQuY2xhc3NOYW1lLm1hdGNoKC9pZC0oXFxkKykvKVsxXSwgMTApfSxcbiAgICAgICAgICAgIGRhdGFPdmVycmlkZVBhcnNlci5wYXJzZShlbGVtZW50KVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAvaW1hZ2VzLy50ZXN0KGRhdGFFbGVtZW50cy5jbGFzc05hbWUpOlxuICAgICAgICByZXR1cm4gW10uc2xpY2UuYXBwbHkoZGF0YUVsZW1lbnRzLmNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQgOiBudWxsLFxuICAgICAgICAgICAgdXJsOiBlbGVtZW50LmlubmVySFRNTFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBkYXRhRWxlbWVudHMgPSBbZGF0YUVsZW1lbnRzXTtcbiAgICB9XG4gIH1cblxuICBkYXRhTm9kZXMgPSBkYXRhRWxlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyZW50KSB7XG4gICAgcHJldi5jb25jYXQoW10uc2xpY2UuYXBwbHkoY3VycmVudC5jaGlsZHJlbikpO1xuICAgIHJldHVybiBwcmV2XG4gIH0sIFtdLnNsaWNlLmFwcGx5KGRhdGFFbGVtZW50c1swXS5jaGlsZHJlbikpO1xuXG4gIHJldHVybiBfLnppcE9iamVjdChkYXRhTm9kZXMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5jbGFzc05hbWUpIHtcbiAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICBjYXNlIC92YXJpYW50cy8udGVzdChlbGVtZW50LmNsYXNzTmFtZSk6XG4gICAgICAgICAgdmFyIHZhcmlhbnRzID0gZGF0YU92ZXJyaWRlUGFyc2VyLnBhcnNlKGVsZW1lbnQpO1xuICAgICAgICAgIHJldHVybiBbJ3ZhcmlhbnRzJywgdmFyaWFudHNdO1xuICAgICAgICBjYXNlIC9pbWFnZXMvLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpOlxuICAgICAgICAgIHZhciBpbWFnZXMgPSBkYXRhT3ZlcnJpZGVQYXJzZXIucGFyc2UoZWxlbWVudCk7XG4gICAgICAgICAgcmV0dXJuIFsnaW1hZ2VzJywgaW1hZ2VzXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gW2VsZW1lbnQuY2xhc3NOYW1lLCBlbGVtZW50LmlubmVySFRNTF07XG4gICAgICB9XG4gICAgfVxuICB9KSk7XG59O1xuXG5kYXRhT3ZlcnJpZGVQYXJzZXIub3ZlcnJpZGUgPSBmdW5jdGlvbiAob3JpZ2luYWwsIHBhcnNlZCkge1xuICBpZiAocGFyc2VkKSB7XG4gICAgaWYgKHR5cGVvZihwYXJzZWQudmFyaWFudHMpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgb3JpZ2luYWwudmFyaWFudHMgPSBfLmNvbXBhY3Qob3JpZ2luYWwudmFyaWFudHMubWFwKGZ1bmN0aW9uIChvcmlnaW5hbFZhcmlhbnQpIHtcbiAgICAgICAgdmFyIHBhcnNlZFZhcmlhbnQgPSBmaWx0ZXIocGFyc2VkLnZhcmlhbnRzLCB7aWQ6IG9yaWdpbmFsVmFyaWFudC5pZH0pWzBdO1xuICAgICAgICBpZiAocGFyc2VkVmFyaWFudCkge1xuICAgICAgICAgIGlmICh0eXBlb2YocGFyc2VkVmFyaWFudC5pbWFnZXMpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgb3JpZ2luYWxWYXJpYW50LmltYWdlcyA9IHBhcnNlZFZhcmlhbnQuaW1hZ2VzO1xuICAgICAgICAgICAgLy8gdmFyaWFudCBpbWFnZXMgYWxyZWFkeSBtZXJnZWQsIGRvbid0IG1lcmdlIGFnYWluXG4gICAgICAgICAgICBkZWxldGUgcGFyc2VkVmFyaWFudC5pbWFnZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGRvbid0IGFjY2lkZW50YWxseSBvdmVycmlkZSB2YXJpYW50IGlkIGluIGNhc2Ugb2YgYnVnc1xuICAgICAgICAgIGRlbGV0ZSBwYXJzZWRWYXJpYW50LmlkO1xuICAgICAgICAgIHJldHVybiBfLm1lcmdlKG9yaWdpbmFsVmFyaWFudCwgcGFyc2VkVmFyaWFudClcbiAgICAgICAgfSBlbHNlIHJldHVybiBvcmlnaW5hbFZhcmlhbnQ7XG4gICAgICB9KSk7XG5cbiAgICAgIC8vIHZhcmlhbnQgZGF0YSBhbHJlYWR5IG1lcmdlZCwgZG9uJ3QgbWVyZ2UgYWdhaW5cbiAgICAgIGRlbGV0ZSBwYXJzZWQudmFyaWFudHNcbiAgICB9XG5cbiAgICByZXR1cm4gXy5tZXJnZSh7fSwgb3JpZ2luYWwsIHBhcnNlZCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsO1xuICB9XG59O1xuXG5kYXRhT3ZlcnJpZGVQYXJzZXIucGFyc2VBbmRNZXJnZSA9IGZ1bmN0aW9uIChvcmlnaW5hbERhdGEsIGRhdGFFbGVtZW50cykge1xuICAvL1RPRE86IHRoaXMgaXMgd2hlcmUgd2UgY2FuIGFsbG93IGZvciB3aWRnZXRzIHdpdGggZGF0YSBvdmVycmlkZXMgdG8gc3RpbGwgb3BlblxuICAvLyB0aGUgbGlnaHRib3ggZXZlbiB3aGVuIG91dCBvZiBzdG9jayEhIVxuICBpZiAob3JpZ2luYWxEYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMub3ZlcnJpZGUob3JpZ2luYWxEYXRhLCB0aGlzLnBhcnNlKGRhdGFFbGVtZW50cykpXG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbHRlcihuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgdW5pcXVlOiB1bmlxdWVGaWx0ZXIsXG4gICAgZmlsdGVyOiBkeW5hbWljRmlsdGVyXG4gIH1bbmFtZV07XG59O1xuXG4vKipcbiAqIEZpbHRlciBhbiBhcnJheSBieSBhIGZ1bmN0aW9uIG9yIGJ5IGEgbWFwIG9iamVjdFxuICogQHBhcmFtIHthcnJheX0gYXJyYXkgQXJyYXkgdG8gYmUgZmlsdGVyZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb258b2JqZWN0fSBmaWx0ZXJCeSBJZiBhIGZ1bmN0aW9uLCBpdCdzIHBhc3NlZFxuICogICAgdG8gQXJyYXkucHJvcm90eXBlLmZpbHRlcjsgaWYgYW4gb2JqZWN0LCBlbGVtZW50cyB3aGljaCBoYXZlXG4gKiAgICBtYXRjaGluZyBrZXkvdmFsdWUgcGFpcnMgYXJlIGluY2x1ZGVkIGluIHRoZSByZXR1cm4gYXJyYXkuXG4gKiBAcmV0dXJuIHthcnJheX0gRmlsdGVyZWQgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZHluYW1pY0ZpbHRlcihhcnJheSwgZmlsdGVyQnkpIHtcbiAgaWYgKHR5cGVvZihmaWx0ZXJCeSkgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZpbHRlckJ5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YoZmlsdGVyQnkpID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGZpbHRlckJ5KS5ldmVyeShmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgICAgIGlmIChlbGVtZW50W2tleV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIHJldHVybiAhIWR5bmFtaWNGaWx0ZXIoZWxlbWVudFtrZXldLCBmaWx0ZXJCeVtrZXldKVswXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgZmlsdGVyQnlba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mKGVsZW1lbnRba2V5XSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gISFkeW5hbWljRmlsdGVyKFtlbGVtZW50W2tleV1dLCBmaWx0ZXJCeVtrZXldKVswXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudFtrZXldID09PSBmaWx0ZXJCeVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZUZpbHRlcihhcnJheSwgdGFyZ2V0UHJvcGVydHkpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgdGVzdCA9IHJlc3VsdC5zb21lKGZ1bmN0aW9uKHRlc3RFbGVtZW50KSB7XG4gICAgICByZXR1cm4gdGVzdEVsZW1lbnRbdGFyZ2V0UHJvcGVydHldID09PSBlbGVtZW50W3RhcmdldFByb3BlcnR5XTtcbiAgICB9KTtcblxuICAgIGlmICghdGVzdCkge1xuICAgICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogSU1BR0UgV0lER0VUIENMQVNTXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBJbWFnZVdpZGdldDtcblxudmFyICQgPSByZXF1aXJlKCcuL2J1aWxkJylcbiAgLCBxID0gcmVxdWlyZSgnLi4vLi4vLi4vc2hhcmVkL2xpYi9rcmlza293YWwvcScpXG4gICwgV2lkZ2V0ID0gcmVxdWlyZSgnLi93aWRnZXQnKVxuICA7XG5cbmZ1bmN0aW9uIEltYWdlV2lkZ2V0KGluaXRpYWxJbWFnZSkge1xuICAvL3RoZSBpZCBhdHRyaWJ1dGUgdGhhdCB3aWxsIGJlIHNldCBvbiB0aGUgJHdpZGdldCBpZnJhbWUgZWxlbWVudFxuICB2YXIgd2lkZ2V0VGFnSWQgPSBpbml0aWFsSW1hZ2UuaWQucmVwbGFjZShTaG9wYmVhbS5XSURHRVRfVEFHX0lEX0VYQ0xVREVfUkVHRVgsICcnKVxuICAvL3RoZSB1dWlkLW9ubHkgb2YgdGhpcyB3aWRnZXQ7IHVzZWQgZm9yIHVuaXF1ZW5lc3MgYmV0d2VlbiBtdWx0aXBsZSB3aWRnZXRzXG4gICAgLCB3aWRnZXRVdWlkID0gd2lkZ2V0VGFnSWQubWF0Y2goU2hvcGJlYW0uV0lER0VUX1VVSURfUkVHRVgpWzFdXG4gIC8vcHJvZHVjdHMgcmVzb3VyZWNlIHVybCB3aXRoIHF1ZXJ5LXN0cmluZyBwYXJhbXMgZm9yIHRoaXMgcGFydGljdWxhciB3aWRnZXRcbiAgICAsIGRhdGFVcmxcbiAgLy9ob3ZlckFjdGlvbjogZGVzY3JpYmVzIGhvdmVyIGJlaGF2aW9yIG9mIHdpZGdldFxuICAgICwgaG92ZXJBY3Rpb25cbiAgICA7XG5cbiAgaWYgKGluaXRpYWxJbWFnZS5kYXRhc2V0KSB7XG4gICAgZGF0YVVybCA9IFNob3BiZWFtLkhPU1QgKyBpbml0aWFsSW1hZ2UuZGF0YXNldC5zaG9wYmVhbVVybDtcbiAgICBob3ZlckFjdGlvbiA9IGluaXRpYWxJbWFnZS5kYXRhc2V0LnNob3BiZWFtSG92ZXJBY3Rpb247XG4gIH0gZWxzZSB7XG4gICAgZGF0YVVybCA9IFNob3BiZWFtLkhPU1QgKyBpbml0aWFsSW1hZ2UuYXR0cmlidXRlc1snZGF0YS1zaG9wYmVhbS11cmwnXS52YWx1ZTtcbiAgICB2YXIgaG92ZXJBdHRyaWJ1dGUgPSBpbml0aWFsSW1hZ2UuYXR0cmlidXRlc1snZGF0YS1zaG9wYmVhbS1ob3Zlci1hY3Rpb24nXTtcbiAgICBpZiAoaG92ZXJBdHRyaWJ1dGUpIGhvdmVyQWN0aW9uID0gaG92ZXJBdHRyaWJ1dGUudmFsdWU7XG4gIH1cblxuICB0aGlzLmRhdGFVcmwgPSBkYXRhVXJsO1xuXG4gIHZhciBpbWFnZVdpZHRoID0gaW5pdGlhbEltYWdlLndpZHRoXG4gICAgLCBpbWFnZUhlaWdodCA9IGluaXRpYWxJbWFnZS5oZWlnaHRcbiAgICAsICRpbml0aWFsSW1hZ2UgPSAkKGluaXRpYWxJbWFnZSlcblxuICAvL2NvcHkgYWxsIGNvbXB1dGVkIGJvcmRlcnMsIHBhZGRpbmdzLCBhbmQgbWFyZ2lucyBmcm9tICRpbml0aWFsSW1hZ2UgdG8gYmUgYXBwbGllZCB0b1xuICAvLyAgdGhlIGNvbnRhaW5lciB0aGF0IHdpbGwgdGFrZSBpdCdzIHBsYWNlIGFuZCBcImVhdFwiIGl0XG4gICAgLCBjb3BpZWRCb3JkZXJzID0gJGluaXRpYWxJbWFnZS5jc3MoWydib3JkZXItbGVmdCcsICdib3JkZXItcmlnaHQnLCAnYm9yZGVyLXRvcCcsICdib3JkZXItYm90dG9tJ10pXG4gICAgLCBjb3BpZWRNYXJnaW5zID0gJGluaXRpYWxJbWFnZS5jc3MoWydtYXJnaW4tbGVmdCcsICdtYXJnaW4tcmlnaHQnLCAnbWFyZ2luLXRvcCcsICdtYXJnaW4tYm90dG9tJ10pXG4gICAgLCBjb3BpZWRQYWRkaW5ncyA9ICRpbml0aWFsSW1hZ2UuY3NzKFsncGFkZGluZy1sZWZ0JywgJ3BhZGRpbmctcmlnaHQnLCAncGFkZGluZy10b3AnLCAncGFkZGluZy1ib3R0b20nXSlcblxuICAvL21lcmdlIHdpZHRoIGFuZCBoZWlnaHQgd2l0aCB0aGUgY29waWVkIGJvcmRlcnMsIHBhZGRpbmdzLCBhbmQgbWFyZ2luc1xuICAgICwgY29waWVkQ3NzID0gJC5leHRlbmQoJGluaXRpYWxJbWFnZS5jc3MoWyd3aWR0aCcsICdoZWlnaHQnLCAnZmxvYXQnLCAnei1pbmRleCddKSwgW1xuICAgICAgY29waWVkQm9yZGVycywgY29waWVkTWFyZ2lucyxcbiAgICAgIGNvcGllZFBhZGRpbmdzXG4gICAgXSlcblxuICAvL2NyZWF0ZSAkd2lkZ2V0Q29udGFpbmVyIGRpdiwgc2V0IGl0J3MgY3NzXG4gICAgLCAkd2lkZ2V0Q29udGFpbmVyID0gJCgnZGl2JylcbiAgICAgIC8vaW5saW5lLWJsb2NrIHRvIG5vdCBmb3JjZSBsaW5lLWJyZWFrOyByZWxhdGl2ZSBwb3NpdGlvbiBiZWNhdXNlIG9mXG4gICAgICAvLyAgYWJzb2x1dGVseSBwb3NpdGlvbmVkIGNoaWxkIGVsZW1lbnQocylcbiAgICAgIC5jc3Moe1xuICAgICAgICBkaXNwbGF5IDogJ2lubGluZS1ibG9jaycsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9KVxuXG4gIC8vY3JlYXRlICR3aWRnZXQgaWZyYW1lOyBzZXQgaXQncyBjc3MgdG8gdGhlIGRlZmF1bHQgcGx1cyAkaW5pdGlhbEltYWdlJ3Mgd2lkdGhcbiAgLy8gIGFuZCBoZWlnaHQuIGFsc28gc2V0IGl0cyBpZCBhdHRyaWJ1dGVcbiAgICAsICR3aWRnZXQgPSAkKCdpZnJhbWUnKVxuICAgICAgLmNzcygkLmV4dGVuZChbXG4gICAgICAgIFNob3BiZWFtLldJREdFVF9ERUZBVUxUX0NTUyxcbiAgICAgICAgU2hvcGJlYW0uV0lER0VUX0hJRERFTl9DU1MsXG4gICAgICAgIHtcbiAgICAgICAgICB3aWR0aCA6IGltYWdlV2lkdGggKyAncHgnLFxuICAgICAgICAgIGhlaWdodDogaW1hZ2VIZWlnaHQgKyAncHgnXG4gICAgICAgIH1cbiAgICAgIF0pKS5hdHRyKFNob3BiZWFtLldJREdFVF9BVFRSUylcbiAgICAgIC5hdHRyKHtpZDogd2lkZ2V0VGFnSWR9KVxuXG4gIC8vY3JlYXRlIGRlZmVycmVkIGFuZCBwcm9taXNlIGZvciBwcm9kdWN0cyByZXNvdXJjZSByZXF1ZXN0LlxuICAvLyAgYW55dGhpbmcgdGhhdCBkZXBlbmRzIG9uIHByb2R1Y3RzIGRhdGEgdG8gYmUgbG9hZGVkIHdpbGwgLnRoZW4gb24gSlNPTlByb21pc2VcbiAgICAsIGRlZmVycmVkSlNPTiA9IHEuZGVmZXIoKVxuICAgICwgSlNPTlByb21pc2UgPSBkZWZlcnJlZEpTT04ucHJvbWlzZVxuICAgIDtcblxuICAgIHRoaXMuZGF0YUNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICB3aWRnZXRJZCAgICAgICAgICA6IHdpZGdldFV1aWQsXG4gICAgICAgICAgaG92ZXJBY3Rpb24gICAgICAgOiBob3ZlckFjdGlvbixcbiAgICAgICAgICB3aWR0aCAgICAgICAgICAgICA6IGltYWdlV2lkdGgsXG4gICAgICAgICAgcHJvZHVjdHNVcmwgICAgICAgOiBkYXRhVXJsLFxuICAgICAgICAgIGluaXRpYWxJbWFnZVNvdXJjZTogaW5pdGlhbEltYWdlLnNyY1xuICAgICAgICB9XG4gICAgICAgICwgZGF0YSA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZVRleHQpXG4gICAgICAgIDtcbiAgICAgIGRlZmVycmVkSlNPTi5yZXNvbHZlKHtkYXRhOiBkYXRhLCBvcHRpb25zOiBvcHRpb25zfSk7XG4gICAgfTtcblxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbigpIHtcbiAgICAvL0luc2VydCAkd2lkZ2V0Q29udGFpbmVyIGp1c3QgYmVmb3JlIHRoZSBpbWFnZSBpdCB3aWxsIGNvbnRhaW4gYW5kIHRoZW4gcmVwbGFjZVxuICAgICR3aWRnZXRDb250YWluZXIuaW5zZXJ0QmVmb3JlKCRpbml0aWFsSW1hZ2UpO1xuXG4gICAgLy9tb3ZlIGJvcmRlcnMsIHBhZGRpbmdzICYgbWFyZ2lucyBmcm9tICRpbml0aWFsSW1hZ2UgdG8gJHdpZGdldENvbnRhaW5lclxuICAgIC8vICBhbmQgbW92ZSAkaW5pdGlhbEltYWdlICYgJHdpZGdldCB0byBiZSBjaGlsZHJlbiBvZiAkd2lkZ3RDb250YWluZXIuXG4gICAgLy8gIEFsc28gYWJzb2x1dGVseSBwb3NpdGlvbiAkaW5pdGlhbEltYWdlIHNvIHdoZW4gJHdpZGdldCBmYWRlcyBpbiBvdmVyIGl0LFxuICAgIC8vICB0aGV5J3JlIGRpcmVjdGx5IG92ZXItdG9wIG9uZSBhbm90aGVyIChubyBET00gd2VpcmRuZXNzIG9yIGVsZW1lbnRzIGJvdW5jaW5nKS5cbiAgICAkaW5pdGlhbEltYWdlLmNzcyh7Ym9yZGVyOiAnbm9uZScsIHBhZGRpbmc6IDAsIG1hcmdpbjogMCwgcG9zaXRpb246ICdhYnNvbHV0ZScsIHRvcDogMCwgbGVmdDogMH0pO1xuICAgICR3aWRnZXRDb250YWluZXIuY3NzKGNvcGllZENzcylcbiAgICAgIC5hcHBlbmQoJGluaXRpYWxJbWFnZSlcbiAgICAgIC5hcHBlbmQoJHdpZGdldCk7XG5cbiAgICAvL2FmdGVyICR3aWRnZXQgaGFzIGJlZW4gYWRkZWQgdG8gRE9NLCB3ZSBjYW4gaW50ZXJhY3Qgd2l0aCBpdCdzIGBjb250ZW50V2luZG93YCBhbmQgYGNvbnRlbnREb2N1bWVudGBcbiAgICAvL3dyaXRlIHRoZSB3aWRnZXQgaW5kZXggbWFya3VwIHRvICR3aWRnZXQncyBkb2N1bWVudFxuICAgIHZhciB3aWRnZXRXaW5kb3cgPSAkd2lkZ2V0LmVsZW1lbnQuY29udGVudFdpbmRvd1xuICAgICAgLCB3aWRnZXREb2N1bWVudCA9IHdpZGdldFdpbmRvdy5kb2N1bWVudFxuICAgICAgO1xuXG4gICAgLyoqXG4gICAgICogTk9URTogLm9wZW4gTVVTVCBiZSBjYWxsZWQgQkVGT1JFIGFzc2lnbmluZyBhbnkgcHJvcGVydGllcyBvbiB0aGUgaWZyYW1lIHdpbmRvdy5cbiAgICAgKiAgICBJRSBzZWVtcyB0byBlaXRoZXIgY3JlYXRlIGEgbmV3IHdpbmRvdyBhZnRlciAub3BlbiBpcyBjYWxsZWQgb3IgZGVsZXRlIHByb3BlcnRpZXNcbiAgICAgKiAgICBzZXQgb24gaXQuXG4gICAgICovXG4gICAgd2lkZ2V0RG9jdW1lbnQub3BlbigpO1xuICAgIHdpZGdldFdpbmRvdy5TaG9wYmVhbVdpZGdldCA9IHRoaXM7XG4gICAgd2lkZ2V0RG9jdW1lbnQud3JpdGUoYXBwSW5kZXhlcy53aWRnZXQoU2hvcGJlYW0pKTtcbiAgICB3aWRnZXREb2N1bWVudC5jbG9zZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGYWRlIHdpZGdldCBpbiwgb3Zlci10b3Agb2YgaXRzIHJlc3BlY3RpdmUgaW5pdGlhbEltYWdlO1xuICAgKiAgICB0aGVuLCB3aGVuIGZhZGluZyBpcyBjb21wbGV0ZSwgcmVtb3ZlICRpbml0aWFsSW1hZ2UgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJHdpZGdldC5mYWRlSW4oJzFzJykudGhlbigkaW5pdGlhbEltYWdlLnJlbW92ZSk7XG4gIH07XG5cbiAgdGhpcy51dWlkID0gd2lkZ2V0VXVpZDtcbiAgdGhpcy5KU09OUHJvbWlzZSA9IEpTT05Qcm9taXNlO1xuXG4gIC8vSW5oZXJpdCBmcm9tIFdpZGdldCBDbGFzc1xuICBXaWRnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvL0ZvciBzdGF0c1xuICB0aGlzLnRyYWNrV2lkZ2V0TG9hZChkYXRhVXJsLCdpbWFnZScpO1xufVxuIiwiLyoqXG4gKiBJTUFHRSBXSURHRVQgQ0xBU1NcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluRnJhbWVJbWFnZVdpZGdldDtcblxudmFyICQgPSByZXF1aXJlKCcuL2J1aWxkJylcbiAgLCBxID0gcmVxdWlyZSgnLi4vLi4vLi4vc2hhcmVkL2xpYi9rcmlza293YWwvcScpXG4gICwgV2lkZ2V0ID0gcmVxdWlyZSgnLi93aWRnZXQnKVxuICAsIF8gPSByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvbGliL2xvZGFzaC9sb2Rhc2gnKVxuICA7XG5cbmZ1bmN0aW9uIEluRnJhbWVJbWFnZVdpZGdldChpbml0aWFsSW1hZ2UpIHtcbiAgLy90aGUgaWQgYXR0cmlidXRlIHRoYXQgd2lsbCBiZSBzZXQgb24gdGhlICR3aWRnZXQgaWZyYW1lIGVsZW1lbnRcbiAgdmFyIHdpZGdldFRhZ0lkID0gaW5pdGlhbEltYWdlLmlkLnJlcGxhY2UoU2hvcGJlYW0uV0lER0VUX1RBR19JRF9FWENMVURFX1JFR0VYLCAnJylcbiAgLy90aGUgdXVpZC1vbmx5IG9mIHRoaXMgd2lkZ2V0OyB1c2VkIGZvciB1bmlxdWVuZXNzIGJldHdlZW4gbXVsdGlwbGUgd2lkZ2V0c1xuICAgICwgd2lkZ2V0VXVpZCA9IHdpZGdldFRhZ0lkLm1hdGNoKFNob3BiZWFtLldJREdFVF9VVUlEX1JFR0VYKVsxXVxuICAvL3Byb2R1Y3RzIHJlc291cmVjZSB1cmwgd2l0aCBxdWVyeS1zdHJpbmcgcGFyYW1zIGZvciB0aGlzIHBhcnRpY3VsYXIgd2lkZ2V0XG4gICAgLCBkYXRhVXJsXG4gIC8vaG92ZXJBY3Rpb246IGRlc2NyaWJlcyBob3ZlciBiZWhhdmlvciBvZiB3aWRnZXRcbiAgICAsIGhvdmVyQWN0aW9uXG4gICAgO1xuXG4gIGlmIChpbml0aWFsSW1hZ2UuZGF0YXNldCkge1xuICAgIGRhdGFVcmwgPSBTaG9wYmVhbS5IT1NUICsgaW5pdGlhbEltYWdlLmRhdGFzZXQuc2hvcGJlYW1Vcmw7XG4gICAgaG92ZXJBY3Rpb24gPSBpbml0aWFsSW1hZ2UuZGF0YXNldC5zaG9wYmVhbUhvdmVyQWN0aW9uO1xuICB9IGVsc2Uge1xuICAgIGRhdGFVcmwgPSBTaG9wYmVhbS5IT1NUICsgaW5pdGlhbEltYWdlLmF0dHJpYnV0ZXNbJ2RhdGEtc2hvcGJlYW0tdXJsJ10udmFsdWU7XG4gICAgdmFyIGhvdmVyQXR0cmlidXRlID0gaW5pdGlhbEltYWdlLmF0dHJpYnV0ZXNbJ2RhdGEtc2hvcGJlYW0taG92ZXItYWN0aW9uJ107XG4gICAgaWYgKGhvdmVyQXR0cmlidXRlKSBob3ZlckFjdGlvbiA9IGhvdmVyQXR0cmlidXRlLnZhbHVlO1xuICB9XG5cbiAgdGhpcy5kYXRhVXJsID0gZGF0YVVybDtcblxuICB2YXIgaW1hZ2VXaWR0aCA9IGluaXRpYWxJbWFnZS53aWR0aFxuICAgICwgaW1hZ2VIZWlnaHQgPSBpbml0aWFsSW1hZ2UuaGVpZ2h0XG4gICAgLCAkaW5pdGlhbEltYWdlID0gJChpbml0aWFsSW1hZ2UpXG5cbiAgLy9jb3B5IGFsbCBjb21wdXRlZCBib3JkZXJzLCBwYWRkaW5ncywgYW5kIG1hcmdpbnMgZnJvbSAkaW5pdGlhbEltYWdlIHRvIGJlIGFwcGxpZWQgdG9cbiAgLy8gIHRoZSBjb250YWluZXIgdGhhdCB3aWxsIHRha2UgaXQncyBwbGFjZSBhbmQgXCJlYXRcIiBpdFxuICAgICwgY29waWVkQm9yZGVycyA9ICRpbml0aWFsSW1hZ2UuY3NzKFsnYm9yZGVyLWxlZnQnLCAnYm9yZGVyLXJpZ2h0JywgJ2JvcmRlci10b3AnLCAnYm9yZGVyLWJvdHRvbSddKVxuICAgICwgY29waWVkTWFyZ2lucyA9ICRpbml0aWFsSW1hZ2UuY3NzKFsnbWFyZ2luLWxlZnQnLCAnbWFyZ2luLXJpZ2h0JywgJ21hcmdpbi10b3AnLCAnbWFyZ2luLWJvdHRvbSddKVxuICAgICwgY29waWVkUGFkZGluZ3MgPSAkaW5pdGlhbEltYWdlLmNzcyhbJ3BhZGRpbmctbGVmdCcsICdwYWRkaW5nLXJpZ2h0JywgJ3BhZGRpbmctdG9wJywgJ3BhZGRpbmctYm90dG9tJ10pXG5cbiAgLy9tZXJnZSB3aWR0aCBhbmQgaGVpZ2h0IHdpdGggdGhlIGNvcGllZCBib3JkZXJzLCBwYWRkaW5ncywgYW5kIG1hcmdpbnNcbiAgICAsIGNvcGllZENzcyA9ICQuZXh0ZW5kKCRpbml0aWFsSW1hZ2UuY3NzKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ2Zsb2F0JywgJ3otaW5kZXgnXSksIFtcbiAgICAgIGNvcGllZEJvcmRlcnMsIGNvcGllZE1hcmdpbnMsXG4gICAgICBjb3BpZWRQYWRkaW5nc1xuICAgIF0pXG5cbiAgLy9jcmVhdGUgJHdpZGdldENvbnRhaW5lciBkaXYsIHNldCBpdCdzIGNzc1xuICAgICwgJHdpZGdldENvbnRhaW5lciA9ICQoJ2RpdicpXG4gICAgICAvL2lubGluZS1ibG9jayB0byBub3QgZm9yY2UgbGluZS1icmVhazsgcmVsYXRpdmUgcG9zaXRpb24gYmVjYXVzZSBvZlxuICAgICAgLy8gIGFic29sdXRlbHkgcG9zaXRpb25lZCBjaGlsZCBlbGVtZW50KHMpXG4gICAgICAuY3NzKHtcbiAgICAgICAgZGlzcGxheSA6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSlcblxuICAvL2NyZWF0ZSAkd2lkZ2V0IGlmcmFtZTsgc2V0IGl0J3MgY3NzIHRvIHRoZSBkZWZhdWx0IHBsdXMgJGluaXRpYWxJbWFnZSdzIHdpZHRoXG4gIC8vICBhbmQgaGVpZ2h0LiBhbHNvIHNldCBpdHMgaWQgYXR0cmlidXRlXG4gICAgLCAkd2lkZ2V0ID0gJCgnaWZyYW1lJylcbiAgICAgIC5jc3MoJC5leHRlbmQoW1xuICAgICAgICBTaG9wYmVhbS5XSURHRVRfREVGQVVMVF9DU1MsXG4gICAgICAgIFNob3BiZWFtLldJREdFVF9ISURERU5fQ1NTLFxuICAgICAgICB7XG4gICAgICAgICAgd2lkdGggOiBpbWFnZVdpZHRoICsgJ3B4JyxcbiAgICAgICAgICBoZWlnaHQ6IGltYWdlSGVpZ2h0ICsgJ3B4J1xuICAgICAgICB9XG4gICAgICBdKSkuYXR0cihTaG9wYmVhbS5XSURHRVRfQVRUUlMpXG4gICAgICAuYXR0cih7aWQ6IHdpZGdldFRhZ0lkfSlcblxuICAvL2NyZWF0ZSAkc2VjdXJlQ2hlY2tvdXRGcmFtZSBpZnJhbWUgYW5kIG1ha2UgaXQncyBkaW1lbnNpb25zIDAgYnV0IGFsbG93IGl0IHRvIHJlbmRlcjtcbiAgLy8gb25seSB1c2VkIGZvciBwbXJwYyBhcGlcbiAgICAsICRzZWN1cmVDaGVja291dEZyYW1lID0gJCgnZnJhbWUnKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICBoZWlnaHQgOiAwLFxuICAgICAgICAgIHdpZHRoICA6IDAsXG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKHtcbiAgICAgICAgICBzcmM6IFNob3BiZWFtLkhPU1QgKyAnL2FwcC9zZWN1cmVDaGVja291dEZyYW1lJyxcbiAgICAgICAgICBpZCA6ICdzaG9wYmVhbS1zZWN1cmUtY2hlY2tvdXQtZnJhbWUnXG4gICAgICAgIH0pXG5cbiAgLy9jcmVhdGUgZGVmZXJyZWQgYW5kIHByb21pc2UgZm9yIHByb2R1Y3RzIHJlc291cmNlIHJlcXVlc3QuXG4gIC8vICBhbnl0aGluZyB0aGF0IGRlcGVuZHMgb24gcHJvZHVjdHMgZGF0YSB0byBiZSBsb2FkZWQgd2lsbCAudGhlbiBvbiBKU09OUHJvbWlzZVxuICAgICwgZGVmZXJyZWRKU09OID0gcS5kZWZlcigpXG4gICAgLCBKU09OUHJvbWlzZSA9IGRlZmVycmVkSlNPTi5wcm9taXNlXG4gICAgO1xuXG4gICAgdGhpcy5kYXRhQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHdpZGdldElkICAgICAgICAgIDogd2lkZ2V0VXVpZCxcbiAgICAgICAgICBob3ZlckFjdGlvbiAgICAgICA6IGhvdmVyQWN0aW9uLFxuICAgICAgICAgIHdpZHRoICAgICAgICAgICAgIDogaW1hZ2VXaWR0aCxcbiAgICAgICAgICBwcm9kdWN0c1VybCAgICAgICA6IGRhdGFVcmwsXG4gICAgICAgICAgaW5pdGlhbEltYWdlU291cmNlOiBpbml0aWFsSW1hZ2Uuc3JjXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHRoaXMucmVzcG9uc2VUZXh0KVxuICAgICAgICA7XG4gICAgICBkZWZlcnJlZEpTT04ucmVzb2x2ZSh7ZGF0YTogZGF0YSwgb3B0aW9uczogb3B0aW9uc30pO1xuICAgIH07XG5cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24oKSB7XG4gICAgLy9JbnNlcnQgJHdpZGdldENvbnRhaW5lciBqdXN0IGJlZm9yZSB0aGUgaW1hZ2UgaXQgd2lsbCBjb250YWluIGFuZCB0aGVuIHJlcGxhY2VcbiAgICAkd2lkZ2V0Q29udGFpbmVyLmluc2VydEJlZm9yZSgkaW5pdGlhbEltYWdlKTtcblxuICAgIC8vbW92ZSBib3JkZXJzLCBwYWRkaW5ncyAmIG1hcmdpbnMgZnJvbSAkaW5pdGlhbEltYWdlIHRvICR3aWRnZXRDb250YWluZXJcbiAgICAvLyAgYW5kIG1vdmUgJGluaXRpYWxJbWFnZSAmICR3aWRnZXQgdG8gYmUgY2hpbGRyZW4gb2YgJHdpZGd0Q29udGFpbmVyLlxuICAgIC8vICBBbHNvIGFic29sdXRlbHkgcG9zaXRpb24gJGluaXRpYWxJbWFnZSBzbyB3aGVuICR3aWRnZXQgZmFkZXMgaW4gb3ZlciBpdCxcbiAgICAvLyAgdGhleSdyZSBkaXJlY3RseSBvdmVyLXRvcCBvbmUgYW5vdGhlciAobm8gRE9NIHdlaXJkbmVzcyBvciBlbGVtZW50cyBib3VuY2luZykuXG4gICAgJGluaXRpYWxJbWFnZS5jc3Moe2JvcmRlcjogJ25vbmUnLCBwYWRkaW5nOiAwLCBtYXJnaW46IDAsIHBvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6IDAsIGxlZnQ6IDB9KTtcbiAgICAkd2lkZ2V0Q29udGFpbmVyLmNzcyhjb3BpZWRDc3MpXG4gICAgICAuYXBwZW5kKCRpbml0aWFsSW1hZ2UpXG4gICAgICAuYXBwZW5kKCR3aWRnZXQpXG4gICAgICAuYXBwZW5kKCRzZWN1cmVDaGVja291dEZyYW1lKVxuICAgIDtcblxuICAgIC8vYWZ0ZXIgJHdpZGdldCBoYXMgYmVlbiBhZGRlZCB0byBET00sIHdlIGNhbiBpbnRlcmFjdCB3aXRoIGl0J3MgYGNvbnRlbnRXaW5kb3dgIGFuZCBgY29udGVudERvY3VtZW50YFxuICAgIC8vd3JpdGUgdGhlIHdpZGdldCBpbmRleCBtYXJrdXAgdG8gJHdpZGdldCdzIGRvY3VtZW50XG4gICAgdmFyIHdpZGdldFdpbmRvdyA9ICR3aWRnZXQuZWxlbWVudC5jb250ZW50V2luZG93XG4gICAgICAsIHdpZGdldERvY3VtZW50ID0gd2lkZ2V0V2luZG93LmRvY3VtZW50XG4gICAgICA7XG5cbiAgICB2YXIgdGhlbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzY3JpcHQuc2hvcGJlYW0tc2NyaXB0JykuZ2V0QXR0cmlidXRlKCdkYXRhLXNob3BiZWFtLXRoZW1lJyk7XG5cbiAgICAvKipcbiAgICAgKiBOT1RFOiAub3BlbiBNVVNUIGJlIGNhbGxlZCBCRUZPUkUgYXNzaWduaW5nIGFueSBwcm9wZXJ0aWVzIG9uIHRoZSBpZnJhbWUgd2luZG93LlxuICAgICAqICAgIElFIHNlZW1zIHRvIGVpdGhlciBjcmVhdGUgYSBuZXcgd2luZG93IGFmdGVyIC5vcGVuIGlzIGNhbGxlZCBvciBkZWxldGUgcHJvcGVydGllc1xuICAgICAqICAgIHNldCBvbiBpdC5cbiAgICAgKi9cbiAgICB3aWRnZXREb2N1bWVudC5vcGVuKCk7XG4gICAgd2lkZ2V0V2luZG93LlNob3BiZWFtV2lkZ2V0ID0gdGhpcztcblxuICAgIHZhciBkZWZhdWx0UGF0aCA9ICdpbkZyYW1lV2lkZ2V0L2luZGV4J1xuICAgICAgLCB0aGVtZWRQYXRoICA9ICdpbkZyYW1lV2lkZ2V0LycgKyB0aGVtZVxuICAgICAgLCBtYXRjaGVkUGF0aCA9ICh0aGVtZSAhPT0gbnVsbCAmJiB0eXBlb2YoYXBwSW5kZXhlc1t0aGVtZWRQYXRoXSkgIT09ICd1bmRlZmluZWQnKSA/XG4gICAgICAgICAgdGhlbWVkUGF0aCA6IGRlZmF1bHRQYXRoO1xuXG4gICAgd2lkZ2V0RG9jdW1lbnQud3JpdGUoYXBwSW5kZXhlc1ttYXRjaGVkUGF0aF0oU2hvcGJlYW0pKTtcbiAgICB3aWRnZXREb2N1bWVudC5jbG9zZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGYWRlIHdpZGdldCBpbiwgb3Zlci10b3Agb2YgaXRzIHJlc3BlY3RpdmUgaW5pdGlhbEltYWdlO1xuICAgKiAgICB0aGVuLCB3aGVuIGZhZGluZyBpcyBjb21wbGV0ZSwgcmVtb3ZlICRpbml0aWFsSW1hZ2UgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJHdpZGdldC5mYWRlSW4oJzFzJykudGhlbigkaW5pdGlhbEltYWdlLnJlbW92ZSk7XG4gIH07XG5cbiAgdGhpcy51dWlkID0gd2lkZ2V0VXVpZDtcbiAgdGhpcy5KU09OUHJvbWlzZSA9IEpTT05Qcm9taXNlO1xuXG4gIC8vSW5oZXJpdCBmcm9tIFdpZGdldCBDbGFzc1xuICBXaWRnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvL0ZvciBzdGF0c1xuICB0aGlzLnRyYWNrV2lkZ2V0TG9hZChkYXRhVXJsLCdpbWFnZScpO1xufVxuIiwidmFyIGdsb2JhbD10eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30sQnVmZmVyPXJlcXVpcmUoXCJfX2Jyb3dzZXJpZnlfQnVmZmVyXCIpLkJ1ZmZlcjshZnVuY3Rpb24oZSl7dmFyIGphZGUgPSBlKCk7aWYoXCJvYmplY3RcIj09dHlwZW9mIGVja3Nwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHV3ZWwpbW9kdWxlLmV4cG9ydHM9amFkZTsgdmFyIGY7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz9mPXdpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2Y9Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiYoZj1zZWxmKSxmLmphZGU9amFkZX0oZnVuY3Rpb24oKXt2YXIgbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblxuLyohXG4gKiBKYWRlIC0gcnVudGltZVxuICogQ29weXJpZ2h0KGMpIDIwMTAgVEogSG9sb3dheWNodWsgPHRqQHZpc2lvbi1tZWRpYS5jYT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogTGFtZSBBcnJheS5pc0FycmF5KCkgcG9seWZpbGwgZm9yIG5vdy5cbiAqL1xuXG5pZiAoIUFycmF5LmlzQXJyYXkpIHtcbiAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uKGFycil7XG4gICAgcmV0dXJuICdbb2JqZWN0IEFycmF5XScgPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycik7XG4gIH07XG59XG5cbi8qKlxuICogTGFtZSBPYmplY3Qua2V5cygpIHBvbHlmaWxsIGZvciBub3cuXG4gKi9cblxuaWYgKCFPYmplY3Qua2V5cykge1xuICBPYmplY3Qua2V5cyA9IGZ1bmN0aW9uKG9iail7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBhcnIucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIGF0dHJpYnV0ZSBvYmplY3RzIGdpdmluZyBwcmVjZWRlbmNlXG4gKiB0byB2YWx1ZXMgaW4gb2JqZWN0IGBiYC4gQ2xhc3NlcyBhcmUgc3BlY2lhbC1jYXNlZFxuICogYWxsb3dpbmcgZm9yIGFycmF5cyBhbmQgbWVyZ2luZy9qb2luaW5nIGFwcHJvcHJpYXRlbHlcbiAqIHJlc3VsdGluZyBpbiBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYVxuICogQHBhcmFtIHtPYmplY3R9IGJcbiAqIEByZXR1cm4ge09iamVjdH0gYVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKGEsIGIpIHtcbiAgdmFyIGFjID0gYVsnY2xhc3MnXTtcbiAgdmFyIGJjID0gYlsnY2xhc3MnXTtcblxuICBpZiAoYWMgfHwgYmMpIHtcbiAgICBhYyA9IGFjIHx8IFtdO1xuICAgIGJjID0gYmMgfHwgW107XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFjKSkgYWMgPSBbYWNdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShiYykpIGJjID0gW2JjXTtcbiAgICBhWydjbGFzcyddID0gYWMuY29uY2F0KGJjKS5maWx0ZXIobnVsbHMpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGIpIHtcbiAgICBpZiAoa2V5ICE9ICdjbGFzcycpIHtcbiAgICAgIGFba2V5XSA9IGJba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYTtcbn07XG5cbi8qKlxuICogRmlsdGVyIG51bGwgYHZhbGBzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbnVsbHModmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbCAmJiB2YWwgIT09ICcnO1xufVxuXG4vKipcbiAqIGpvaW4gYXJyYXkgYXMgY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gam9pbkNsYXNzZXModmFsKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyB2YWwubWFwKGpvaW5DbGFzc2VzKS5maWx0ZXIobnVsbHMpLmpvaW4oJyAnKSA6IHZhbDtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGhlIGdpdmVuIGF0dHJpYnV0ZXMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlc2NhcGVkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmF0dHJzID0gZnVuY3Rpb24gYXR0cnMob2JqLCBlc2NhcGVkKXtcbiAgdmFyIGJ1ZiA9IFtdXG4gICAgLCB0ZXJzZSA9IG9iai50ZXJzZTtcblxuICBkZWxldGUgb2JqLnRlcnNlO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iailcbiAgICAsIGxlbiA9IGtleXMubGVuZ3RoO1xuXG4gIGlmIChsZW4pIHtcbiAgICBidWYucHVzaCgnJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICAgICAgLCB2YWwgPSBvYmpba2V5XTtcblxuICAgICAgaWYgKCdib29sZWFuJyA9PSB0eXBlb2YgdmFsIHx8IG51bGwgPT0gdmFsKSB7XG4gICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICB0ZXJzZVxuICAgICAgICAgICAgPyBidWYucHVzaChrZXkpXG4gICAgICAgICAgICA6IGJ1Zi5wdXNoKGtleSArICc9XCInICsga2V5ICsgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoMCA9PSBrZXkuaW5kZXhPZignZGF0YScpICYmICdzdHJpbmcnICE9IHR5cGVvZiB2YWwpIHtcbiAgICAgICAgYnVmLnB1c2goa2V5ICsgXCI9J1wiICsgSlNPTi5zdHJpbmdpZnkodmFsKSArIFwiJ1wiKTtcbiAgICAgIH0gZWxzZSBpZiAoJ2NsYXNzJyA9PSBrZXkpIHtcbiAgICAgICAgaWYgKGVzY2FwZWQgJiYgZXNjYXBlZFtrZXldKXtcbiAgICAgICAgICBpZiAodmFsID0gZXhwb3J0cy5lc2NhcGUoam9pbkNsYXNzZXModmFsKSkpIHtcbiAgICAgICAgICAgIGJ1Zi5wdXNoKGtleSArICc9XCInICsgdmFsICsgJ1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2YWwgPSBqb2luQ2xhc3Nlcyh2YWwpKSB7XG4gICAgICAgICAgICBidWYucHVzaChrZXkgKyAnPVwiJyArIHZhbCArICdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlc2NhcGVkICYmIGVzY2FwZWRba2V5XSkge1xuICAgICAgICBidWYucHVzaChrZXkgKyAnPVwiJyArIGV4cG9ydHMuZXNjYXBlKHZhbCkgKyAnXCInKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1Zi5wdXNoKGtleSArICc9XCInICsgdmFsICsgJ1wiJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1Zi5qb2luKCcgJyk7XG59O1xuXG4vKipcbiAqIEVzY2FwZSB0aGUgZ2l2ZW4gc3RyaW5nIG9mIGBodG1sYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaHRtbFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lc2NhcGUgPSBmdW5jdGlvbiBlc2NhcGUoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG5cbi8qKlxuICogUmUtdGhyb3cgdGhlIGdpdmVuIGBlcnJgIGluIGNvbnRleHQgdG8gdGhlXG4gKiB0aGUgamFkZSBpbiBgZmlsZW5hbWVgIGF0IHRoZSBnaXZlbiBgbGluZW5vYC5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IGxpbmVub1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZXRocm93ID0gZnVuY3Rpb24gcmV0aHJvdyhlcnIsIGZpbGVuYW1lLCBsaW5lbm8sIHN0cil7XG4gIGlmICghKGVyciBpbnN0YW5jZW9mIEVycm9yKSkgdGhyb3cgZXJyO1xuICBpZiAoKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgfHwgIWZpbGVuYW1lKSAmJiAhc3RyKSB7XG4gICAgZXJyLm1lc3NhZ2UgKz0gJyBvbiBsaW5lICcgKyBsaW5lbm87XG4gICAgdGhyb3cgZXJyO1xuICB9XG4gIHRyeSB7XG4gICAgc3RyID0gIHN0ciB8fCByZXF1aXJlKCdmcycpLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0ZjgnKVxuICB9IGNhdGNoIChleCkge1xuICAgIHJldGhyb3coZXJyLCBudWxsLCBsaW5lbm8pXG4gIH1cbiAgdmFyIGNvbnRleHQgPSAzXG4gICAgLCBsaW5lcyA9IHN0ci5zcGxpdCgnXFxuJylcbiAgICAsIHN0YXJ0ID0gTWF0aC5tYXgobGluZW5vIC0gY29udGV4dCwgMClcbiAgICAsIGVuZCA9IE1hdGgubWluKGxpbmVzLmxlbmd0aCwgbGluZW5vICsgY29udGV4dCk7XG5cbiAgLy8gRXJyb3IgY29udGV4dFxuICB2YXIgY29udGV4dCA9IGxpbmVzLnNsaWNlKHN0YXJ0LCBlbmQpLm1hcChmdW5jdGlvbihsaW5lLCBpKXtcbiAgICB2YXIgY3VyciA9IGkgKyBzdGFydCArIDE7XG4gICAgcmV0dXJuIChjdXJyID09IGxpbmVubyA/ICcgID4gJyA6ICcgICAgJylcbiAgICAgICsgY3VyclxuICAgICAgKyAnfCAnXG4gICAgICArIGxpbmU7XG4gIH0pLmpvaW4oJ1xcbicpO1xuXG4gIC8vIEFsdGVyIGV4Y2VwdGlvbiBtZXNzYWdlXG4gIGVyci5wYXRoID0gZmlsZW5hbWU7XG4gIGVyci5tZXNzYWdlID0gKGZpbGVuYW1lIHx8ICdKYWRlJykgKyAnOicgKyBsaW5lbm9cbiAgICArICdcXG4nICsgY29udGV4dCArICdcXG5cXG4nICsgZXJyLm1lc3NhZ2U7XG4gIHRocm93IGVycjtcbn07XG5cbn0se1wiZnNcIjoyfV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cbn0se31dfSx7fSxbMV0pKDEpXG59KTtcbihmdW5jdGlvbigpeyBcbnZhciBhc3NldHMgPSB7IFxuICAgIGFzc2V0czoge1wiL2pzL3dpZGdldC90ZW1wbGF0ZXMuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvd2lkZ2V0L3RlbXBsYXRlcy01NTE1OTA3NGMzOTRlZmFmZGQwZjQzZTkzZGJmN2M0Yi5qc1wiLFwiL2pzL2luRnJhbWVXaWRnZXQvdGVtcGxhdGVzLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2luRnJhbWVXaWRnZXQvdGVtcGxhdGVzLWE5ZmEzNDY1M2QwMWNiZTE0ODVhMjc5NDY4YmQ3MGFkLmpzXCIsXCIvanMvbGlnaHRib3gvdGVtcGxhdGVzLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpZ2h0Ym94L3RlbXBsYXRlcy1jZTZmMDNjMzA0MmRiYzVmZWI3Y2QwMjI3MjNiMThiZi5qc1wiLFwiL2pzL3NoYXJlZC90ZW1wbGF0ZXMuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvc2hhcmVkL3RlbXBsYXRlcy00OWU2ODhlYTdmY2NhNTE0Y2ExZTU5Yzc2NzhkOWY1YS5qc1wiLFwiL2Nyb3NzZG9tYWluLnhtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jcm9zc2RvbWFpbi54bWxcIixcIi9lbXB0eS50eHRcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvZW1wdHkudHh0XCIsXCIvY3NzL2Jvb3RzdHJhcC1yZXNwb25zaXZlLmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvYm9vdHN0cmFwLXJlc3BvbnNpdmUtZTI2ZjJjNzFmYTY5ZmZhOGM1ZDM1NzAzMzM3YzJlODguY3NzXCIsXCIvY3NzL2Jvb3RzdHJhcC5jc3NcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2Jvb3RzdHJhcC00YjZjZjlkOTgyZGE2NGYxMDkyMmMzMDg5MTkwMTk0MS5jc3NcIixcIi9jc3MvaWNvbW9vbi5zdHlsXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9pY29tb29uLTU1YWIyMGExNmZkY2RmM2I5YWI4NTdjMTdlOTdjYjU0LnN0eWxcIixcIi9jc3MvanF1ZXJ5Lm5vdWlzbGlkZXIuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9qcXVlcnkubm91aXNsaWRlci05NDBmMDRjMDAwMDIxYzE1OTEwODE1YmIwNjc3NmY1My5jc3NcIixcIi9qcy9mcmllbmRseS5pZnJhbWUubG9hZGVyLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2ZyaWVuZGx5LmlmcmFtZS5sb2FkZXIuanNcIixcIi9pbWcvYWpheC1sb2FkZXItZ3JlZW4uZ2lmXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9hamF4LWxvYWRlci1ncmVlbi00M2ZjYTExMTU5MDJkZDE3MDU4Nzc3ZDBjNGM1NTA4MC5naWZcIixcIi9pbWcvYWpheC1sb2FkZXItcmVkLmdpZlwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYWpheC1sb2FkZXItcmVkLWZiMTM0MDIwZWFjNWEzNjgwMzZiNjliYjMwMjU4MGQ1LmdpZlwiLFwiL2ltZy9hbGV4LnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYWxleC1mMzQ2Y2RlM2VhYWJkYjNkNDJhZTE4YmYzNTZlZGIzMy5wbmdcIixcIi9pbWcvYmFieV9kYXJrLnN2Z1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYmFieV9kYXJrLTUzOWI4MTIxYWI0MzFlZWY3ODFkMTc3M2ZkZDQxNjEwLnN2Z1wiLFwiL2ltZy9iYWJ5X2dyZXkuc3ZnXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9iYWJ5X2dyZXktYTI0MWQwM2VmZTUxOWZiYTJiZDc4NTI4NmI2ZTQ1ZmYuc3ZnXCIsXCIvaW1nL2JhZy1ncmV5LnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYmFnLWdyZXktYWQ3MjMyNWY4MjJhMzdlZTAxZWZkNDljOWQyOTA1NTEucG5nXCIsXCIvaW1nL2JhZy1sb2dvLWdyZXkucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9iYWctbG9nby1ncmV5LTg0NTg5ZDU2ZWI2YTAyNzI2NjZiZWFhYTJmYjlhYjQ5LnBuZ1wiLFwiL2ltZy9iYWctbG9nby13aGl0ZS5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2JhZy1sb2dvLXdoaXRlLTkxZWQ0MTBjYjg0MzQwZjczZmMwODY5MzEyN2U5MjFhLnBuZ1wiLFwiL2ltZy9iYWctd2hpdGUucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9iYWctd2hpdGUtYTY5NGZmYmM2ZGFiMTY2NTBiMDRjNTlhZDVlOTdmNzIucG5nXCIsXCIvaW1nL2JlYXV0eV9kYXJrLnN2Z1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYmVhdXR5X2RhcmstZGE4YjkyNDI5ZTY5MmE5OTU1NzNkOTExMTRmZGI1MDkuc3ZnXCIsXCIvaW1nL2JlYXV0eV9ncmV5LnN2Z1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYmVhdXR5X2dyZXktMjJkOGQ0ZGU5ZDQ3NDMyNGU4NjlkNjM1NGNiOTNhNGMuc3ZnXCIsXCIvaW1nL2JsYW5rLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYmxhbmstZDM4ZjU1MTYwZTY5NDMxMDg5NTEyNzViZjkxZDZkMGYucG5nXCIsXCIvaW1nL2JvcmlzLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYm9yaXMtNjU5YWZiYzA2ODBlMzU3YmJkYzQ0MzhmNDA0NzkwNTgucG5nXCIsXCIvaW1nL2Jyb2tlbi1oZWVsLmpwZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYnJva2VuLWhlZWwtMjVjMTliODViY2IxZjkwMmYxMDQ3ZjY1NjgzOGJlYWQuanBnXCIsXCIvaW1nL2JyeWFuLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvYnJ5YW4tMzE3MzkxMzQzYTUyZDFjYmY4YTcxZjcyODk2ZWZjMjYucG5nXCIsXCIvaW1nL2NyZWRpdC1jYXJkLWxvZ29zLmdpZlwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvY3JlZGl0LWNhcmQtbG9nb3MtNzYyMDFmMDI0MTI4Y2Y0ODZjZDI2NDAzZGFkNzdhMzkuZ2lmXCIsXCIvaW1nL2N2di1pbmZvZ3JhcGhpYy5naWZcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2N2di1pbmZvZ3JhcGhpYy1jZGYzOWNiOTNlN2VhMjVhYTg0YmE5NGJjNmJhMGViZC5naWZcIixcIi9pbWcvZGFuLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvZGFuLTYzYmI2YWE0MWJmZDk1ZDM5MmQ0NDlmZGU3MDE4NzY3LnBuZ1wiLFwiL2ltZy9mYWNlYm9va19zaGFyZS5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2ZhY2Vib29rX3NoYXJlLWJkOTIxMTdkODA1YTY1Yjc2YWRlMzZkMzM1ZTg1NzkzLnBuZ1wiLFwiL2ltZy9mYXNoaW9uX2Rhcmsuc3ZnXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9mYXNoaW9uX2RhcmstNDRkZmE0ODcxODAwYjc4ZjViNDMzNTJmZmQ2NzFjMTUuc3ZnXCIsXCIvaW1nL2Zhc2hpb25fZ3JleS5zdmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2Zhc2hpb25fZ3JleS0yOGM4OGFkNjRmMDlmZjg2ZDg2ZTRjZGI5N2RlNzYzYS5zdmdcIixcIi9pbWcvZmF2aWNvbi5pY29cIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2Zhdmljb24tNzAxYjc2YTQyMTQ4OGRmOWViNThlMWRiMmJjNjc3ZWQuaWNvXCIsXCIvaW1nL2ZpbHRlci1iYXItY2xvc2VyLWJ1dHRvbi1vcGVuLmpwZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvZmlsdGVyLWJhci1jbG9zZXItYnV0dG9uLW9wZW4tNDJkMjFjMWYyZjlhZjYwZWQyZGM1ZDBkMDRiYTNmZjkuanBnXCIsXCIvaW1nL2ZpbHRlci1iYXItY2xvc2VyLWJ1dHRvbi5qcGdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2ZpbHRlci1iYXItY2xvc2VyLWJ1dHRvbi02YWFkMjE2OWJlY2E0ZmU1ODgxZjk5NGNkYTYyMDUzNy5qcGdcIixcIi9pbWcvZm9vdGVyLXNvY2lhbC5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2Zvb3Rlci1zb2NpYWwtZjQ1NTZlYzcwZmUzODk5ZmYzYTIzMDdlN2Q5NjA2NmMucG5nXCIsXCIvaW1nL2dlb3JnaWUucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9nZW9yZ2llLWVkMmEwNjNlYjc0NzgzMGYwNmJjOTI2YTc4Mzc3MDk2LnBuZ1wiLFwiL2ltZy9nbHlwaGljb25zLWhhbGZsaW5ncy13aGl0ZS5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2dseXBoaWNvbnMtaGFsZmxpbmdzLXdoaXRlLTliYmM2ZTk2MDI5OThhMzg1YzJlYTEzZGY1NjQ3MGZkLnBuZ1wiLFwiL2ltZy9nbHlwaGljb25zLWhhbGZsaW5ncy5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2dseXBoaWNvbnMtaGFsZmxpbmdzLTI1MTYzMzk5NzBkNzEwODE5NTg1ZjkwNzczYWViZTBhLnBuZ1wiLFwiL2ltZy9oYW5nZXIuanBnXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9oYW5nZXItYzk5Y2NkOGVhN2Q2YjA3M2EyMWJhNTdhZWIxZjQxNmEuanBnXCIsXCIvaW1nL2hvbWVfZGFyay5zdmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2hvbWVfZGFyay1iYmY3ZDI3Njg3NGU0YTdlYTUxZTMwZWFiMjJiMjRhYS5zdmdcIixcIi9pbWcvaG9tZV9ncmV5LnN2Z1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvaG9tZV9ncmV5LTNiOTczZmRlMTg5ZDJmYWE1NTkwZWZlZGY5ZDMzZjM3LnN2Z1wiLFwiL2ltZy9pY28tYWRkLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvaWNvLWFkZC1mZjA3NjA4MjU2NTZhZWJiMjFhMjgyNzI2ZmZhOWQ2ZS5wbmdcIixcIi9pbWcvaWNvLWFkZHJlc3MucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9pY28tYWRkcmVzcy1kYmU5MjU4Nzg5N2Q5MmFlMmZhODI1ZTliODc4N2RlOS5wbmdcIixcIi9pbWcvaWNvLWFycm93LnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvaWNvLWFycm93LTJlOWM5N2MwOGJmZDRiNThlOGI5Yjc1NmQyMGQ2OWQwLnBuZ1wiLFwiL2ltZy9pY28tYm9vay5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2ljby1ib29rLWFkMTQwNzc5MGM4NTA0YTMxYmYyMDIwOTMyN2I5MWU3LnBuZ1wiLFwiL2ltZy9pY28tY2FsbC5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2ljby1jYWxsLWQ3N2MzMmFlZTUzNWJjNzRmYjIxNDE5ZGY0NWQxYzM1LnBuZ1wiLFwiL2ltZy9pY28tY3Jvc3Mtd2hpdGUucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9pY28tY3Jvc3Mtd2hpdGUtZjllNTU5MTljZDQwNGY2M2JlMjkxNDY1NGIxMWI3ZjEucG5nXCIsXCIvaW1nL2ljby1lbWFpbC5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2ljby1lbWFpbC02YTI3ZDgzNzM0MWM3ZWU4MTBkNTY0ODEwMDBiODhlZC5wbmdcIixcIi9pbWcvaWNvLWdpZnQucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9pY28tZ2lmdC0xMzdkZjhjMTA2ZTY3YjQxNmFiNTY2MDcyM2M5YzY3OS5wbmdcIixcIi9pbWcvaWNvLWxvdmUucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9pY28tbG92ZS04M2ZlMDhjNzQ2YjQxNjNiZGQ2ZjJlODdiYzEzOWMxNy5wbmdcIixcIi9pbWcvaWNvLW9wZW4tY2xvc2UucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9pY28tb3Blbi1jbG9zZS00ZTAyZTkyNzcyZWM0YzA3OGUwNDEwNDM2MjZhNTc0NC5wbmdcIixcIi9pbWcvaWNvLXRhZy5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2ljby10YWctNDQ0Y2JjNjMwNDg3MDA4ZmY3YmM0MzU0NDJkYWUxZTYucG5nXCIsXCIvaW1nL2ljby10aWNrLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvaWNvLXRpY2stZWYxNzM1NTc4YTY1NWQ1M2FlNzhkMTIxOTNjZmFmNGUucG5nXCIsXCIvaW1nL2ljby10cmlhbmdsZS5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2ljby10cmlhbmdsZS0xNzRmZjYwYmQ3YTZmYjQxYWQwYTBkZmYyYTVlYjkwOC5wbmdcIixcIi9pbWcvaXBhZC1mcmFtZS5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2lwYWQtZnJhbWUtMWUwOWQ2ZWMwN2JkYzQxMjEyMWE3NmJjOTEwOTc0NzgucG5nXCIsXCIvaW1nL2phY2tseW4ucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9qYWNrbHluLWNhMmUyZmIyYjMxOGE0MDA5MmRmNmU1NzU3ODJmOWNmLnBuZ1wiLFwiL2ltZy9qYWsucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9qYWstNzQ0ZWU5ZDYzYWE5ZDhjMWQ1NzMwNWY3MGY2YTQxODkucG5nXCIsXCIvaW1nL2plc3NlLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvamVzc2UtYTUwYjE3MmIxMmNiYzcyOTc1NzY2YzQ5ZGY5N2ZhYWUucG5nXCIsXCIvaW1nL2ppbW15LnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvamltbXktNDM3NzEyYTI2ODA0YzcyOWNjMTM5NDFiMDg2ZDBhYzAucG5nXCIsXCIvaW1nL2xhbmRpbmdfaGVyby5qcGdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2xhbmRpbmdfaGVyby1jY2MxNzIxNmU1NjljMTkxNzQzMzllZjYzNGJmYmEyMS5qcGdcIixcIi9pbWcvbGlzdC13b3Jrcy5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2xpc3Qtd29ya3MtNGU2MDhhMzE2YjQzMjNlNDc0N2ZkYjMxNTQ5ZmM0M2UucG5nXCIsXCIvaW1nL2xvYWRpbmdfbW9yZV9wcm9kdWN0cy5naWZcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2xvYWRpbmdfbW9yZV9wcm9kdWN0cy0yMzZiZjNiZjQyMjRlNTEwNDAyOTZlOTIxMzdjNWNmNy5naWZcIixcIi9pbWcvbG9nby1ibGFjay5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2xvZ28tYmxhY2stZTY5NWYwNzQ1MzQ1YmZjZjRhYWY2Mjc0ODYxZDRhMDQucG5nXCIsXCIvaW1nL2xvZ28td2hpdGUucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9sb2dvLXdoaXRlLTRiOWE0ZmM4M2VkNjc1NjY1ZDNjYmExN2NjZGE2NWFiLnBuZ1wiLFwiL2ltZy9ub3J0b24tYmxhY2sucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9ub3J0b24tYmxhY2stYzVjODc2MGQ3NDkzNDA4YjIyZmQyODRiZGEwYzk5ZWQucG5nXCIsXCIvaW1nL3Blb3BsZS1kb24tZHJhcGVyLmpwZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvcGVvcGxlLWRvbi1kcmFwZXItYWY0ODUzNzMyMGVkMWEwZTllZWI3MDM4OWUxZTE4YzguanBnXCIsXCIvaW1nL3Blb3BsZS1sbmstaW4ucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9wZW9wbGUtbG5rLWluLTg4OWIzMmQ4MDFmZjczYThjN2ZlNDFmYjIzNTI4ZjI2LnBuZ1wiLFwiL2ltZy9waW50ZXJlc3Rfc2hhcmUucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9waW50ZXJlc3Rfc2hhcmUtMTdmNDkxNWI4MjJkMjk4MWJiOGJmMDk1ZTdjOTAwNmIucG5nXCIsXCIvaW1nL3JpY2hhcmQucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9yaWNoYXJkLTI3N2Q0ZDZmNmUzOTJjZDZlNGY4MTdkMjdjODhjZThmLnBuZ1wiLFwiL2ltZy9zYW0ucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zYW0tY2VmZmRmMGJmNzE1MzE0NGE1YzE1MDliNWQ1ZjUyYmIucG5nXCIsXCIvaW1nL3NlYXJjaC5zdmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL3NlYXJjaC0zN2IyZDg3Mzg5ZWUwYTA1NzQ4N2M2NjZjNjJiOTI1NS5zdmdcIixcIi9pbWcvc2hvcGJlYW0tY2lyY2xlcy1oaXJlcy5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL3Nob3BiZWFtLWNpcmNsZXMtaGlyZXMtZTZiNmUyMzVhZmYzMTI4YmEwZTNiNDdiMjFiN2NlYmIucG5nXCIsXCIvaW1nL3Nob3BiZWFtLWNpcmNsZXMucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zaG9wYmVhbS1jaXJjbGVzLWY2ZDQ1MjRlMTIzNjA5ODIwNmFkODM4OWQ4NDA4ODA1LnBuZ1wiLFwiL2ltZy9zaG9wYmVhbS1sb2dvLWJsYWNrLWxhcmdlLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvc2hvcGJlYW0tbG9nby1ibGFjay1sYXJnZS1hZDdmZmU3MWI0ZDc1Y2U2YThiMTUxODcxODBiYWRmYy5wbmdcIixcIi9pbWcvc2hvcGJlYW0tbG9nby1ub3RleHQuc3ZnXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zaG9wYmVhbS1sb2dvLW5vdGV4dC01YWM5NzA5MTA3ZjU3NzkyNTY1NWZiMzg1MDk0MjlkOC5zdmdcIixcIi9pbWcvc2hvcGJlYW0tbG9nby1vbGQuc3ZnXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zaG9wYmVhbS1sb2dvLW9sZC0wNzEzZmE0MzU4MDY5NmJhOGYwZmU5ZTZlYzVjZjgwYy5zdmdcIixcIi9pbWcvc2hvcGJlYW0tbG9nby13aGl0ZS5zdmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL3Nob3BiZWFtLWxvZ28td2hpdGUtNDNlMzU2MGE0MzhhY2EwZTFkMDcxODQ4NzgyZjJiMmEuc3ZnXCIsXCIvaW1nL3Nob3BiZWFtLWxvZ28uc3ZnXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zaG9wYmVhbS1sb2dvLTBhMzc1NjJmMGI2NDQ0MjA5NGNhZjdjOWE2YWQ5NDJlLnN2Z1wiLFwiL2ltZy9zaG9wYmVhbS10ZXh0LWdyZXkucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zaG9wYmVhbS10ZXh0LWdyZXktODZhZjc0ZDdhNDEyZTNkYzAxODg4MjMwYTM1ODJhZmUucG5nXCIsXCIvaW1nL3Nob3BiZWFtLXRleHQtd2hpdGUucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zaG9wYmVhbS10ZXh0LXdoaXRlLTJhMmM5ODM2MzE4NzUxY2ZmZmJiNDYyODUzNGEwZmVjLnBuZ1wiLFwiL2ltZy9zbGlkZXItaGludC5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL3NsaWRlci1oaW50LWEyYTc5ODlhZWVkZDAwZDcwODNhNGY0MDYwOTliMmNmLnBuZ1wiLFwiL2ltZy9zdGVwLTEucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zdGVwLTEtZjZkNDUyNGUxMjM2MDk4MjA2YWQ4Mzg5ZDg0MDg4MDUucG5nXCIsXCIvaW1nL3N0ZXAtMi5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL3N0ZXAtMi1hMmU1NzVlNmMwYWEzYmZjNzMxOTQ5ODhmZmUxMjJlZC5wbmdcIixcIi9pbWcvc3RlcC0zLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvc3RlcC0zLTFmMDZiMGEzYzY5NWY3MTQzMzY5NGZhMTc1ZWE5OWUyLnBuZ1wiLFwiL2ltZy9zdGVwLTQucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zdGVwLTQtODM4NGU1NmQ5MzM3M2I1ODg0YTQ1OGZiMDgyODJhYTIucG5nXCIsXCIvaW1nL3N0ZXBzLWFycm93LWIucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9zdGVwcy1hcnJvdy1iLTQ3NzJkNjQxNWI3ZjdjNWE3ZGJiNjI2OWYwZjMyODdiLnBuZ1wiLFwiL2ltZy9zdGVwcy1hcnJvdy1ibC5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL3N0ZXBzLWFycm93LWJsLTRmMTk0NTgyOGZkNjFmZTgxOTRhNDI2NWQ4MzIwMTgzLnBuZ1wiLFwiL2ltZy9zdGVwcy1hcnJvdy1yLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvc3RlcHMtYXJyb3ctci0xNDgyYjg4MjYyYzAzZDY5NGM5ZDgxNWMyZmY3MGMwMS5wbmdcIixcIi9pbWcvdmlzdWFsLmpwZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvdmlzdWFsLWZhMzNlZTcyOGFkMzcyZjFmNDkyMjNiZTVhNzgxY2M3LmpwZ1wiLFwiL2ltZy96b29taW4uc3ZnXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy96b29taW4tM2QzNWE3ZDcxOTk4MjI0NmQ2YWUzNjIxZDhjNjc5OGYuc3ZnXCIsXCIvY3NzL2FuZ3VsYXIvYW5ndWxhci1jc3AuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9hbmd1bGFyL2FuZ3VsYXItY3NwLWRlNjExMDQ2M2VkNTAwMWRkOTVhYTNiYmJjN2MxMjljLmNzc1wiLFwiL2Nzcy9hbmd1bGFyL2FuZ3VsYXItbWF0ZXJpYWwuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9hbmd1bGFyL2FuZ3VsYXItbWF0ZXJpYWwtYmI0NWQ2MmUyYzBjZGQxNjhlMTdhODk3YmJjM2MwNDQuY3NzXCIsXCIvY3NzL2FuZ3VsYXIvYW5ndWxhci1tYXRlcmlhbC5taW4uY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9hbmd1bGFyL2FuZ3VsYXItbWF0ZXJpYWwubWluLTNmYTA3MzBmMzgyMzQ2MmVlMjU5MjdmZDQ3NDBhZDE2LmNzc1wiLFwiL2Nzcy9hbmd1bGFyL2RlZmF1bHQtdGhlbWUuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9hbmd1bGFyL2RlZmF1bHQtdGhlbWUtOWFkM2QzOTZiOGYxZTM1YjFlMDMzNDE1N2E0MDdjMTUuY3NzXCIsXCIvY3NzL2ZvbnRzL2ljb21vb24uZGV2LnN2Z1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvZm9udHMvaWNvbW9vbi5kZXYtMDZjZmQzNDg5YmEyMjMzYTVjZWY3NjBiNDM3Mzk4YzMuc3ZnXCIsXCIvY3NzL2ZvbnRzL2ljb21vb24uZW90XCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9mb250cy9pY29tb29uLWQ3NTFiY2U0NjBiOGU3YjVmMGMwYzgyODQ5YjM2NzRjLmVvdFwiLFwiL2Nzcy9mb250cy9pY29tb29uLnN2Z1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvZm9udHMvaWNvbW9vbi0wN2Q5M2UwZmNlYjYxYzBhMzVhYWU3OWJkY2I3ZTc2MC5zdmdcIixcIi9jc3MvZm9udHMvaWNvbW9vbi50dGZcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2ZvbnRzL2ljb21vb24tZWMzZmI3MDFkZjM1MDNhY2NjOTE3NzJkNTU2NzRjOWMudHRmXCIsXCIvY3NzL2ZvbnRzL2ljb21vb24ud29mZlwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvZm9udHMvaWNvbW9vbi00ZTRmNmYwNjU2YWViNTdmMTEwMmNhYjBkMDkxZjEwNi53b2ZmXCIsXCIvY3NzL2ljb21vb24vc2VsZWN0aW9uLmpzb25cIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2ljb21vb24vc2VsZWN0aW9uLTczOGVkMTU4MDMwNzIyMjcxODA2NGZjMWFhMDYwZTc2Lmpzb25cIixcIi9jc3MvaWNvbW9vbi9zdHlsZS5jc3NcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2ljb21vb24vc3R5bGUtYzFmZDdkMTM0ZGI4NjllODBmMGJmYjUzYjNmNTBmNzUuY3NzXCIsXCIvY3NzL21haWxlci9tYWluLnN0eWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL21haWxlci9tYWluLWVlMTZhY2I2NGJkMjIwZjU1MjAwYjcyNTgyMTQwNWY0LnN0eWxcIixcIi9jc3Mvc2VsZWN0Mi9zZWxlY3QyLXNwaW5uZXIuZ2lmXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9zZWxlY3QyL3NlbGVjdDItc3Bpbm5lci03Yjk3NzYwNzZkNWZjZWVmNDk5M2I1NWM5MzgzZGVkZC5naWZcIixcIi9jc3Mvc2VsZWN0Mi9zZWxlY3QyLmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3Mvc2VsZWN0Mi9zZWxlY3QyLTJiMTgyNjU2YzVkNzc4MDIzZDNhZThlMTg1Mjk5YjNlLmNzc1wiLFwiL2Nzcy9zZWxlY3QyL3NlbGVjdDIucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9zZWxlY3QyL3NlbGVjdDItMmNhNjFiNzZlMjIwNTM1NzFkZDg2MTFlNWFhYzQ5MDAucG5nXCIsXCIvY3NzL3NlbGVjdDIvc2VsZWN0MngyLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3Mvc2VsZWN0Mi9zZWxlY3QyeDItNDllM2YwMDYwMTg2NjJmNjBmMWRiMmFlYzBiMmNjYTkucG5nXCIsXCIvY3NzL3NpbHZpb21vcmV0by9ib290c3RyYXAtc2VsZWN0LmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3Mvc2lsdmlvbW9yZXRvL2Jvb3RzdHJhcC1zZWxlY3QtYWVjZDcxZDFiNzBmODM5MjU0OGVmMDhmMWI2YmIxN2QuY3NzXCIsXCIvc3dmL3N3Zm9iamVjdC9leHByZXNzSW5zdGFsbC5zd2ZcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvc3dmL3N3Zm9iamVjdC9leHByZXNzSW5zdGFsbC5zd2ZcIixcIi9zd2Yvd2lkZ2V0cy9zaW5nbGUtdmFyaWFudC5zd2ZcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvc3dmL3dpZGdldHMvc2luZ2xlLXZhcmlhbnQuc3dmXCIsXCIvc3dmL3dpZGdldHMvdGV4dExheW91dF8xLjAuMC41OTUuc3d6XCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL3N3Zi93aWRnZXRzL3RleHRMYXlvdXRfMS4wLjAuNTk1LnN3elwiLFwiL2ltZy9lbWFpbC9mYWNlYm9vay5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2VtYWlsL2ZhY2Vib29rLTY0YTc0ZWI3MjcxMTU2YTM1ZGI0NGI1OWFlMjEwOGQwLnBuZ1wiLFwiL2ltZy9lbWFpbC9oZWFkZXItc2hvcGJlYW0ucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9lbWFpbC9oZWFkZXItc2hvcGJlYW0tYzViNDA0NmE2Mjc3ODJlODk5NTI1OTc3NTQ1NGI5NTkucG5nXCIsXCIvaW1nL2VtYWlsL2hlYWRlci10aGFuay15b3Utd2hpdGUucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9lbWFpbC9oZWFkZXItdGhhbmsteW91LXdoaXRlLTIzOWQ4NGZiYWYyMGM0NjJhZTA0MzUxMzA1NjFjZWU1LnBuZ1wiLFwiL2ltZy9lbWFpbC9waW50ZXJlc3QucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9lbWFpbC9waW50ZXJlc3QtN2I2MzVjNjNjODJhNjI1NGJmY2U4YWJlOTliNDM5NzcucG5nXCIsXCIvaW1nL2VtYWlsL3NhbXBsZTEucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9lbWFpbC9zYW1wbGUxLTEyMGQ1YTQxNTY4ZGQzMzZiZDFkODkyNjE1YjY4N2Q3LnBuZ1wiLFwiL2ltZy9lbWFpbC9zYW1wbGUyLnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvZW1haWwvc2FtcGxlMi0xNmI3NDg2NTgwNDk3Mjg5N2QxYjg1Y2JjYjg5YTU2NC5wbmdcIixcIi9pbWcvZW1haWwvc2hvcC1zZWFtbGVzc2x5LnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9pbWcvZW1haWwvc2hvcC1zZWFtbGVzc2x5LWY2MzFmYjFmZDBhYTM3YWE0YzY0NDYyZTg1MzJjYWQ0LnBuZ1wiLFwiL2ltZy9lbWFpbC9zaG9wYmVhbS5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2VtYWlsL3Nob3BiZWFtLTk4ZGI0ZDFlYTY1MTMwNjE3NDQwZTMyYzdkNDA5MGRmLnBuZ1wiLFwiL2ltZy9lbWFpbC90aGFuay15b3UtYmxhY2sucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9lbWFpbC90aGFuay15b3UtYmxhY2stZWI1NGRjZjJmNTAxYWQ2N2NmOTc0MTAwNmYzMmE2YzQucG5nXCIsXCIvaW1nL2VtYWlsL3R3aXR0ZXIucG5nXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2ltZy9lbWFpbC90d2l0dGVyLTQxZGJiMGU0YTU0OTg5MDZkZTAzOGU2OTA4MDkwYzllLnBuZ1wiLFwiL2ltZy9lbWFpbC92aW1lby5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvaW1nL2VtYWlsL3ZpbWVvLWI4YWNiN2Q5ODg3MTVlOTk4NGUzZmYzMjAwMmIyNGE1LnBuZ1wiLFwiL2Nzcy9pY29tb29uL2ZvbnRzL3Nob3BiZWFtLXNldC5lb3RcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2ljb21vb24vZm9udHMvc2hvcGJlYW0tc2V0LTBkOGFlZmI3MWUxMDI3MmI0Mjc5ZTFlMTE0MDAyMzA1LmVvdFwiLFwiL2Nzcy9pY29tb29uL2ZvbnRzL3Nob3BiZWFtLXNldC5zdmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2ljb21vb24vZm9udHMvc2hvcGJlYW0tc2V0LTY2MzRmYTgzYzQ2NjM5NDkwNzdjYmIyNGE1NDUzMTg0LnN2Z1wiLFwiL2Nzcy9pY29tb29uL2ZvbnRzL3Nob3BiZWFtLXNldC50dGZcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2ljb21vb24vZm9udHMvc2hvcGJlYW0tc2V0LTQzOTE1OTQ4ZTA0ODI1ZDIzZWQ1YzJiMGUyMGIxODBmLnR0ZlwiLFwiL2Nzcy9pY29tb29uL2ZvbnRzL3Nob3BiZWFtLXNldC53b2ZmXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9pY29tb29uL2ZvbnRzL3Nob3BiZWFtLXNldC1mNWZlYjQyNzA2MzBkMjVhMDJkMmM1NmU2NTRhNGUwMC53b2ZmXCIsXCIvY3NzL2xhbmRpbmcvZmFuY3lib3gvYmxhbmsuZ2lmXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9sYW5kaW5nL2ZhbmN5Ym94L2JsYW5rLTMyNTQ3MjYwMTU3MWYzMWUxYmYwMDY3NGMzNjhkMzM1LmdpZlwiLFwiL2Nzcy9sYW5kaW5nL2ZhbmN5Ym94L2ZhbmN5Ym94X2xvYWRpbmcuZ2lmXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9sYW5kaW5nL2ZhbmN5Ym94L2ZhbmN5Ym94X2xvYWRpbmctMzI4Y2MwZjZjNzgyMTE0ODUwNThkNDYwZTgwZjRmYTguZ2lmXCIsXCIvY3NzL2xhbmRpbmcvZmFuY3lib3gvZmFuY3lib3hfbG9hZGluZ0AyeC5naWZcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2xhbmRpbmcvZmFuY3lib3gvZmFuY3lib3hfbG9hZGluZ0AyeC1mOTI5Mzg2MzlmYTg5NGEwZThkZWQxYzMzNjhhYmU5OC5naWZcIixcIi9jc3MvbGFuZGluZy9mYW5jeWJveC9mYW5jeWJveF9vdmVybGF5LnBuZ1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvbGFuZGluZy9mYW5jeWJveC9mYW5jeWJveF9vdmVybGF5LTc3YWVhYTUyNzE1Yjg5OGI3M2M3NGQ2OGM2MzAzMzBlLnBuZ1wiLFwiL2Nzcy9sYW5kaW5nL2ZhbmN5Ym94L2ZhbmN5Ym94X3Nwcml0ZS5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2xhbmRpbmcvZmFuY3lib3gvZmFuY3lib3hfc3ByaXRlLTc4M2Q0MDMxZmU1MGMzZDgzYzk2MDkxMWUxZmJjNzA1LnBuZ1wiLFwiL2Nzcy9sYW5kaW5nL2ZhbmN5Ym94L2ZhbmN5Ym94X3Nwcml0ZUAyeC5wbmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2xhbmRpbmcvZmFuY3lib3gvZmFuY3lib3hfc3ByaXRlQDJ4LWVkOTk3MGNlMjIyNDI0MjFlNjZmZjE1MGFhOTdmZTVmLnBuZ1wiLFwiL2Nzcy9sYW5kaW5nL2ZvbnRzL1JlYWQtTWUudHh0XCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9sYW5kaW5nL2ZvbnRzL1JlYWQtTWUtMTY0YWJkNjczZDBjMWJiYTE2MGM4Y2ZmYmE0ZjQ0NWMudHh0XCIsXCIvY3NzL2xhbmRpbmcvZm9udHMvaWNvbW9vbi5kZXYuc3ZnXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9sYW5kaW5nL2ZvbnRzL2ljb21vb24uZGV2LWM5MzhhNmM2YzVlMjQ4NWZiYzhjYTI0ZWYwODJjZTJhLnN2Z1wiLFwiL2Nzcy9sYW5kaW5nL2ZvbnRzL2ljb21vb24uZW90XCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9sYW5kaW5nL2ZvbnRzL2ljb21vb24tZjFjOTRhODcwMGI2MTM4NzdjZDUyYjdmZDEwZTYwZjAuZW90XCIsXCIvY3NzL2xhbmRpbmcvZm9udHMvaWNvbW9vbi5zdmdcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2xhbmRpbmcvZm9udHMvaWNvbW9vbi0zMWZhN2RhNmE5NTU1ZDMzY2I4Y2U2MjMzMzM0NTkxZi5zdmdcIixcIi9jc3MvbGFuZGluZy9mb250cy9pY29tb29uLnR0ZlwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvbGFuZGluZy9mb250cy9pY29tb29uLWUwMGFmZDg5MDg5MDRhOWZhYTk1MjkzMGRlZmZiNjIxLnR0ZlwiLFwiL2Nzcy9sYW5kaW5nL2ZvbnRzL2ljb21vb24ud29mZlwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvbGFuZGluZy9mb250cy9pY29tb29uLWQ1NjJmMTk5ZTE0YmUwNTNkNjdmMTFhNTQ4ODlhMGM2LndvZmZcIixcIi9jc3MvbGFuZGluZy9mb250cy9pbmRleC5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9sYW5kaW5nL2ZvbnRzL2luZGV4LTVkNDVlMjFiMjE0NzNkN2ZmN2Q0ZDg5OTI0YjZiZjVhLmh0bWxcIixcIi9qcy9saWIvYWdydWJsZXYvYW5ndWxhckxvY2FsU3RvcmFnZS5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvYWdydWJsZXYvYW5ndWxhckxvY2FsU3RvcmFnZS00M2UxNmUxZGQxNzRlZmJmOTU1OTJmZWViYzRkZmMzZC5qc1wiLFwiL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4yLjMtY3VzdG9tLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4yLjMtY3VzdG9tLTYyNTg0NjMzMTgyYzAwNzJmY2JkMzQyNmMyZDkzZGYyLmpzXCIsXCIvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4yLjMtY3VzdG9tLm1pbi0wMTRiY2E2ZTJhYzdjYjA1ODhmZTg1MjgxYjE0ZTVmMS5qc1wiLFwiL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4zLjEzLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4zLjEzLTJlZDFhODliNzcyN2I0OWExYjk5ZGU1ZGRjMWYwYjY0LmpzXCIsXCIvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjMuMTMubWluLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4zLjEzLm1pbi00YTAzMWNlNGJjY2Q5YzVjNDA1YjQwNTY3MjU1YmJlNC5qc1wiLFwiL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItYW5pbWF0ZS5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvYW5ndWxhci9hbmd1bGFyLWFuaW1hdGUtNDgzMDNmZjAzNzkxYjJmMDVmZDNjMjY1YmM1OGM2Y2MuanNcIixcIi9qcy9saWIvYW5ndWxhci9hbmd1bGFyLWFuaW1hdGUubWluLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItYW5pbWF0ZS5taW4tZTE4OWVmM2JhZjEyMzkxZmE1MDliMjNjZmJkMDUzMDkuanNcIixcIi9qcy9saWIvYW5ndWxhci9hbmd1bGFyLWFyaWEuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1hcmlhLWJhNWIyMDc4NWU5YThiOTc4YzY4NDhhNzRiMjMzZmFjLmpzXCIsXCIvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1hcmlhLm1pbi5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvYW5ndWxhci9hbmd1bGFyLWFyaWEubWluLWEzNzAzMzQ5ZjAxZGI5ZjcyZGU3OGQ0MDg4NzRiY2VhLmpzXCIsXCIvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1jb29raWVzLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItY29va2llcy02NWI1YmE2YzFjNThmZDA1N2EyZjk1ZTBlMzZhYWRmMi5qc1wiLFwiL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItbWF0ZXJpYWwuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1tYXRlcmlhbC0wMGFhZTk4MmZjMzIzZTg2YmY4ZGIwNWFiZGYwMjFhNi5qc1wiLFwiL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItbWF0ZXJpYWwubWluLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItbWF0ZXJpYWwubWluLWIwN2Y3YjQ3N2QzMTAzMzUzMGMyZmYyOTVkZGNmNWU2LmpzXCIsXCIvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1tb2Nrcy5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvYW5ndWxhci9hbmd1bGFyLW1vY2tzLTVhOGM2NzcxYmRmMzgyYjdhNjVhYjhmZGVkN2NjOGY2LmpzXCIsXCIvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yZXNvdXJjZS5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvYW5ndWxhci9hbmd1bGFyLXJlc291cmNlLTRjNGVjZjZmMzY0MDRhZWMzNDY3YzZmMGJjMTcyODJhLmpzXCIsXCIvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvYW5ndWxhci9hbmd1bGFyLXJvdXRlLWFkMGMyNDA0YTMxNDg2ZmNlMWNlZjNkZDNmOTViYmUyLmpzXCIsXCIvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4tZjIxZjM5MzhkZmNlM2Y4MDI5YzE0ZTNhMDJlNTM2YTguanNcIixcIi9qcy9saWIvYW5ndWxhci9hbmd1bGFyLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItYzYwYmZlYzg0NjBjYTFkMGM3ZjY1ZTM0NDVmOTE3Y2UuanNcIixcIi9qcy9saWIvYW5ndWxhci9hbmd1bGFyLm1pbi5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvYW5ndWxhci9hbmd1bGFyLm1pbi1iOTU1MmExZTk0NTEzMGVmNWRhZDQ1MjQ4NThlMWU0Zi5qc1wiLFwiL2pzL2xpYi9ib290c3RyYXAvYm9vdHN0cmFwLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9ib290c3RyYXAvYm9vdHN0cmFwLWNiYmY4MGUxNzMzZDQzNzk1YzJiZWI0MWRmZjgwNjhhLmpzXCIsXCIvanMvbGliL2Vhc3lYRE0vTUlULWxpY2Vuc2UudHh0XCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL01JVC1saWNlbnNlLnR4dFwiLFwiL2pzL2xpYi9lYXN5WERNL2Vhc3lYRE0uV2lkZ2V0cy5kZWJ1Zy5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9lYXN5WERNLldpZGdldHMuZGVidWcuanNcIixcIi9qcy9saWIvZWFzeVhETS9lYXN5WERNLldpZGdldHMuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZWFzeVhETS5XaWRnZXRzLmpzXCIsXCIvanMvbGliL2Vhc3lYRE0vZWFzeVhETS5XaWRnZXRzLm1pbi5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9lYXN5WERNLldpZGdldHMubWluLmpzXCIsXCIvanMvbGliL2Vhc3lYRE0vZWFzeVhETS5kZWJ1Zy5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9lYXN5WERNLmRlYnVnLmpzXCIsXCIvanMvbGliL2Vhc3lYRE0vZWFzeVhETS5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9lYXN5WERNLmpzXCIsXCIvanMvbGliL2Vhc3lYRE0vZWFzeVhETS5taW4uanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZWFzeVhETS5taW4uanNcIixcIi9qcy9saWIvZWFzeVhETS9lYXN5eGRtLnN3ZlwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9lYXN5eGRtLnN3ZlwiLFwiL2pzL2xpYi9lYXN5WERNL2pzb24yLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2pzb24yLmpzXCIsXCIvanMvbGliL2Vhc3lYRE0vbmFtZS5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL25hbWUuaHRtbFwiLFwiL2pzL2xpYi9qZXNzZUNsaXBib2FyZC9jb3B5LnN3ZlwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvamVzc2VDbGlwYm9hcmQvY29weS5zd2ZcIixcIi9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2pxdWVyeS9qcXVlcnktMS4xMC4yLTkxNTE1NzcwY2U4YzU1ZGUyM2IzMDY0NDRkOGVhOTk4LmpzXCIsXCIvanMvbGliL2pxdWVyeS9qcXVlcnktMS4xMC4yLm1pbi5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLTYyODA3MmU3MjEyZGIxZThjZGFjYjIyYjIxNzUyY2RhLmpzXCIsXCIvanMvbGliL2pxdWVyeS9qcXVlcnkuYXV0by1udW1lcmljLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9qcXVlcnkvanF1ZXJ5LmF1dG8tbnVtZXJpYy01MTdjYmZiNThlNGQwMGZhZjljZjBkMjE4ODc3OTVmYS5qc1wiLFwiL2pzL2xpYi9qcXVlcnkvanF1ZXJ5Lm5vdWlzbGlkZXIuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2pxdWVyeS9qcXVlcnkubm91aXNsaWRlci1iYTlhODA0ODIwNDI1YmE0NWI4NTM0NTlmOTljZjM0Yi5qc1wiLFwiL2pzL2xpYi9qcXVlcnkvanF1ZXJ5Lm51bWJlci5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvanF1ZXJ5L2pxdWVyeS5udW1iZXItMmYyM2JhN2UwMjFlNWQ1YTE0YWQ3NjhkODkzZjkxMjUuanNcIixcIi9qcy9saWIvc2VsZWN0Mi9zZWxlY3QyLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9zZWxlY3QyL3NlbGVjdDItYTU2MWEyY2QwOGZlYjlhYmExMGMyNTQ4YzA3YzQ4ZTYuanNcIixcIi9qcy9saWIvc2hpdi9ET01QYXJzZXIuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL3NoaXYvRE9NUGFyc2VyLTAwMjljNTFhYjI3MjA3MTk0ZTQ0OTY3M2MwZTQwYTlkLmpzXCIsXCIvanMvbGliL3NoaXYvY3VzdG9tRXZlbnRzLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy03NDA0NzhkOGJlZGM5ZjY1ZDU5OTc0OThiMDU4MTU5ZS5qc1wiLFwiL2pzL2xpYi9zaGl2L2ZpbHRlci5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvc2hpdi9maWx0ZXItMDVmMTBiMzhjNTNmOWQxNGI2YmQ5ZGI5M2VjMDRkMGMuanNcIixcIi9qcy9saWIvc2hpdi9tYXAuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL3NoaXYvbWFwLWIwMzg5M2JiYzEwN2ZmMzBlZThmNTgzZjkwYzYxYWE4LmpzXCIsXCIvanMvbGliL3NoaXYvc29tZS5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvc2hpdi9zb21lLTg3ZDNhNjIzOTQ4YTg4Y2JlYTE4YmY5NmFmZDJmZjQzLmpzXCIsXCIvanMvbGliL3NoaXYvc3RyaW5nLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9zaGl2L3N0cmluZy05Zjg1YmM3NzhiOTdlMDdkZDBlMTkzNDY1MzYxZmFmMi5qc1wiLFwiL2pzL2xpYi9zaWx2aW9tb3JldG8vYm9vdHN0cmFwLXNlbGVjdC5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvc2lsdmlvbW9yZXRvL2Jvb3RzdHJhcC1zZWxlY3QtNDcxYWQ4MzcwZWY2NmY2M2UxMzE2N2EwNmZmMzU3ZjIuanNcIixcIi9qcy9saWIvemVyb2NsaXBib2FyZC9aZXJvQ2xpcGJvYXJkLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi96ZXJvY2xpcGJvYXJkL1plcm9DbGlwYm9hcmQtYTZkMDBlOTZkMWRhNTJiNTdkZjM4YjMwMGRmMjg4ZTcuanNcIixcIi9qcy9saWIvemVyb2NsaXBib2FyZC9aZXJvQ2xpcGJvYXJkLnN3ZlwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvemVyb2NsaXBib2FyZC9aZXJvQ2xpcGJvYXJkLnN3ZlwiLFwiL2pzL2xpYi9lYXN5WERNL2NvcnMvaW5kZXguaHRtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9jb3JzL2luZGV4Lmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS9leGFtcGxlL2JsYW5rLmh0bWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9ibGFuay5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9ib29rbWFyay5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvYm9va21hcmsuaHRtbFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvYm9va21hcmsuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9ib29rbWFyay5qc1wiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvYnJpZGdlLmh0bWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9icmlkZ2UuaHRtbFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvZGF0YS5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvZGF0YS5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9nbG9zc2FyeS5hc3B4XCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvZ2xvc3NhcnkuYXNweFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvaW5kZXguaHRtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9leGFtcGxlL2luZGV4Lmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS9leGFtcGxlL21ldGhvZHMuaHRtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9leGFtcGxlL21ldGhvZHMuaHRtbFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVtb3RlLmh0bWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9yZW1vdGUuaHRtbFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVtb3RlYXBwLmh0bWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9yZW1vdGVhcHAuaHRtbFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVtb3RlZGF0YS5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVtb3RlZGF0YS5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9yZW1vdGVtZXRob2RzLmh0bWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9yZW1vdGVtZXRob2RzLmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS9leGFtcGxlL3JlbW90ZXJwY2JhY2tlbmQuaHRtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9leGFtcGxlL3JlbW90ZXJwY2JhY2tlbmQuaHRtbFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVtb3RldHJhbnNwb3J0Lmh0bWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9yZW1vdGV0cmFuc3BvcnQuaHRtbFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVzaXplX2lmcmFtZS5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVzaXplX2lmcmFtZS5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9yZXNpemVfaW50ZXJtZWRpYXRlLmh0bWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS9yZXNpemVfaW50ZXJtZWRpYXRlLmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS9leGFtcGxlL3Jlc2l6ZWRfaWZyYW1lXzEuaHRtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9leGFtcGxlL3Jlc2l6ZWRfaWZyYW1lXzEuaHRtbFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVzaXplZF9pZnJhbWVfMi5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvcmVzaXplZF9pZnJhbWVfMi5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS90cmFuc3BvcnQuaHRtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9leGFtcGxlL3RyYW5zcG9ydC5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS91cGxvYWQuaHRtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9leGFtcGxlL3VwbG9hZC5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS91cGxvYWRfaGFuZGxlci5hc3B4XCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvdXBsb2FkX2hhbmRsZXIuYXNweFwiLFwiL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvdXBsb2FkX3JwYy5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUvdXBsb2FkX3JwYy5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS93aWRnZXQuaHRtbFwiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS9leGFtcGxlL3dpZGdldC5odG1sXCIsXCIvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS93aWRnZXRzLmh0bWxcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vZXhhbXBsZS93aWRnZXRzLmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS9leGFtcGxlL3hoci5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL2V4YW1wbGUveGhyLmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS90ZXN0cy9lYXN5VGVzdC5jc3NcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vdGVzdHMvZWFzeVRlc3QuY3NzXCIsXCIvanMvbGliL2Vhc3lYRE0vdGVzdHMvZWFzeVRlc3QuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvbGliL2Vhc3lYRE0vdGVzdHMvZWFzeVRlc3QuanNcIixcIi9qcy9saWIvZWFzeVhETS90ZXN0cy9lYXN5WERNLmRlYnVnLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL3Rlc3RzL2Vhc3lYRE0uZGVidWcuanNcIixcIi9qcy9saWIvZWFzeVhETS90ZXN0cy9pbmRleC5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL3Rlc3RzL2luZGV4Lmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS90ZXN0cy90ZXN0X25hbWVzcGFjZS5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL3Rlc3RzL3Rlc3RfbmFtZXNwYWNlLmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS90ZXN0cy90ZXN0X3JwYy5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL3Rlc3RzL3Rlc3RfcnBjLmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS90ZXN0cy90ZXN0X3RyYW5zcG9ydC5odG1sXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpYi9lYXN5WERNL3Rlc3RzL3Rlc3RfdHJhbnNwb3J0Lmh0bWxcIixcIi9qcy9saWIvZWFzeVhETS90ZXN0cy90ZXN0cy5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9saWIvZWFzeVhETS90ZXN0cy90ZXN0cy5qc1wiLFwiL2pzL3JlZ2lzdGVyLmJ1bmRsZS5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9yZWdpc3Rlci5idW5kbGUtZjY3Y2RmZGU5MWM3MDEzMDE5ODcyOTJlY2FhZTk5MzIuanNcIixcIi9qcy9sYW5kaW5nLmJ1bmRsZS5qc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9qcy9sYW5kaW5nLmJ1bmRsZS00ZWIzYmI1YTkyYzA2MWZhMGEzZTMwNTg0MTdjYTY1My5qc1wiLFwiL2pzL2Rhc2hib2FyZC5idW5kbGUuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvZGFzaGJvYXJkLmJ1bmRsZS03MmVmMWZkYmRjMzZhZDJjZDJhNjMxZTg3NDMyYTRmNS5qc1wiLFwiL2pzL3dpZGdldC5idW5kbGUuanNcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvanMvd2lkZ2V0LmJ1bmRsZS1hNWY4NTA0MmZkM2Q3NTU1MjFkYzY2ZDhlNmUxOGEzMi5qc1wiLFwiL2pzL2luRnJhbWVXaWRnZXQuYnVuZGxlLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2luRnJhbWVXaWRnZXQuYnVuZGxlLTNhYzIwZGEwNWQwZWE5MjVjZWFmMmI4MDY0ZmQyMGI0LmpzXCIsXCIvanMvbGlnaHRib3guYnVuZGxlLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2xpZ2h0Ym94LmJ1bmRsZS1kNWIzNTVlMjc4MWM4MDQwMTZiNDM4MjE3MzM5MzFkZC5qc1wiLFwiL2pzL2NhcnQuYnVuZGxlLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2NhcnQuYnVuZGxlLWZiY2M0N2Q2MzU4MThiYzg1ZjUxOTgwNDM2ZjFjY2ZiLmpzXCIsXCIvanMvY2hlY2tvdXQuYnVuZGxlLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL2NoZWNrb3V0LmJ1bmRsZS0xZjgxMDIwNjU3OGExYzBlZDM4MDE0MTQxMDZhYzA4NC5qc1wiLFwiL2pzL3NlY3VyZUNoZWNrb3V0RnJhbWUuYnVuZGxlLmpzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2pzL3NlY3VyZUNoZWNrb3V0RnJhbWUuYnVuZGxlLWZhZmIyYjcxNjRjNjc5NGIxZjQ3MTY0Y2UxMTg1OWMyLmpzXCIsXCIvY3NzL2Rhc2hib2FyZC5jc3NcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2Rhc2hib2FyZC1hMmQxMTI1MjgyMTE2ZTdiMmZhNjY2OTg3ODY5ODc0Ny5jc3NcIixcIi9jc3Mvd2lkZ2V0LmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3Mvd2lkZ2V0LWI0MmI1ZWZhN2Y0YTgwOWQ5M2JjYTk2MTlkMGQzYTliLmNzc1wiLFwiL2Nzcy93aWRnZXQtaGVhbHRoeS1lc3NlbnRpYWxzLmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3Mvd2lkZ2V0LWhlYWx0aHktZXNzZW50aWFscy1iNDJiNWVmYTdmNGE4MDlkOTNiY2E5NjE5ZDBkM2E5Yi5jc3NcIixcIi9jc3Mvd2lkZ2V0LXJvZ2FpbmUuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy93aWRnZXQtcm9nYWluZS1iNDJiNWVmYTdmNGE4MDlkOTNiY2E5NjE5ZDBkM2E5Yi5jc3NcIixcIi9jc3MvaW5GcmFtZVdpZGdldC5jc3NcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2luRnJhbWVXaWRnZXQtOTdmMTA5MDk2ZTVmM2JiMzM5ODI3MzM0N2MwNGM5M2IuY3NzXCIsXCIvY3NzL2luRnJhbWVXaWRnZXQtcm9nYWluZS5jc3NcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2luRnJhbWVXaWRnZXQtcm9nYWluZS1hNWQ3MDU1M2MzNzY2YzU4MDYxOGQ1NTg2OWJlNmVmNy5jc3NcIixcIi9jc3MvbGlnaHRib3guY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9saWdodGJveC0wMWJjNWFhY2IxMmY1NTkyNWM1ZjBhY2JkNGYzNzNjOS5jc3NcIixcIi9jc3MvbGlnaHRib3gtaGVhbHRoeS1lc3NlbnRpYWxzLmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvbGlnaHRib3gtaGVhbHRoeS1lc3NlbnRpYWxzLTI0Zjc3ZGM5MWM4OGQwNGFkNGVkN2IyY2U4MWUxMzlhLmNzc1wiLFwiL2Nzcy9saWdodGJveC1yb2dhaW5lLmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvbGlnaHRib3gtcm9nYWluZS00ZDQ5YzE0MjE2Y2E2MGViZDU3YTE0YWYxZjE4MDBhYS5jc3NcIixcIi9jc3MvbGlnaHRib3gtcm9nYWluZS1hZC1tZW4uY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9saWdodGJveC1yb2dhaW5lLWFkLW1lbi00ZjY3NTBkODkxZjAyMWFkM2Y0ODgyMzFkOWUxYmYwYy5jc3NcIixcIi9jc3MvY2FydC1kZWZhdWx0LmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvY2FydC1kZWZhdWx0LTUzYTEzNGYxMGRiYmViN2I2ZmM3MGFmYTA3MDBjNTIyLmNzc1wiLFwiL2Nzcy9jYXJ0LXJvZ2FpbmUuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9jYXJ0LXJvZ2FpbmUtNTNhMTM0ZjEwZGJiZWI3YjZmYzcwYWZhMDcwMGM1MjIuY3NzXCIsXCIvY3NzL2NhcnQtaGVhbHRoeS1lc3NlbnRpYWxzLmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvY2FydC1oZWFsdGh5LWVzc2VudGlhbHMtNWRhZmI1YWUxNTcyMWRhYjAyM2ViYWM1YjhlYzQ4YmQuY3NzXCIsXCIvY3NzL2NoZWNrb3V0LWRlZmF1bHQuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9jaGVja291dC1kZWZhdWx0LTQ0MDQxNDk1MTQzMDQwZDY1ZTIxYWMzYjc0MTVlOGQ1LmNzc1wiLFwiL2Nzcy9jaGVja291dC1oZWFsdGh5LWVzc2VudGlhbHMuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9jaGVja291dC1oZWFsdGh5LWVzc2VudGlhbHMtMDE1MzAxYjUyMGQxMDIxMWQ5Y2JkMjg4NjllYzc0YTQuY3NzXCIsXCIvY3NzL2NoZWNrb3V0LXJvZ2FpbmUuY3NzXCI6XCJodHRwczovL2xvY2FsaG9zdDo0MDAwL2Nzcy9jaGVja291dC1yb2dhaW5lLTIyN2FiZmY3M2Y1NjgwZGJjZTkzNjA1YzRjOTAwMjUyLmNzc1wiLFwiL2Nzcy9jaGVja291dC1sYWNvc3RlLmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvY2hlY2tvdXQtbGFjb3N0ZS1kZmE5YjQ3NDQxODFhODc2NTgwZDc0YjAzZGE5YjMyMS5jc3NcIixcIi9jc3MvbGFuZGluZy5jc3NcIjpcImh0dHBzOi8vbG9jYWxob3N0OjQwMDAvY3NzL2xhbmRpbmctOGIzNDYwNDI5NWY4MWI0NWEyZTVhY2FiOTcyYTVmMWMuY3NzXCIsXCIvY3NzL3JlZ2lzdGVyLmNzc1wiOlwiaHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC9jc3MvcmVnaXN0ZXItYjljZjNmNjU2ZmM4MGQ0ZmY1Yjc1Y2VhNWZlM2MyOWYuY3NzXCJ9LFxuICAgIHVybDogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0c1t1cmxdO1xuICAgICAgICB9XG59O3dpbmRvdy5hcHBJbmRleGVzID0ge1xuJ2NhcnQvaGVhbHRoeS1lc3NlbnRpYWxzJzogZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgbG9jYWxzID0gbG9jYWxzIHx8IHt9O1xuICAgIGxvY2Fsc1snYXNzZXRzJ10gPSBhc3NldHM7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgbG9jYWxzXyA9IChsb2NhbHMgfHwge30pLEhPU1QgPSBsb2NhbHNfLkhPU1QsYXNzZXRzID0gbG9jYWxzXy5hc3NldHM7YnVmLnB1c2goXCI8IURPQ1RZUEUgaHRtbD48aHRtbCBsYW5nPVxcXCJlblxcXCI+PGhlYWQ+PHRpdGxlPlNob3BiZWFtIENhcnQ8L3RpdGxlPjxtZXRhIGh0dHAtZXF1aXY9XFxcIkNvbnRlbnQtVHlwZVxcXCIgY29udGVudD1cXFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XFxcIj48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFxcXCI+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPGxpbmtcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdyZWwnOihcInN0eWxlc2hlZXRcIiksICdocmVmJzooXCJcIiArIChhc3NldHMudXJsKCcvY3NzL2NhcnQtaGVhbHRoeS1lc3NlbnRpYWxzLmNzcycpKSArIFwiXCIpIH0sIHtcInJlbFwiOnRydWUsXCJocmVmXCI6dHJ1ZX0pKSArIFwiPjwhLS1baWYgbHQgSUUgMTBdPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9jdXN0b21FdmVudHMuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9maWx0ZXIuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9tYXAuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zb21lLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc3RyaW5nLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48IVtlbmRpZl0tLT48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2pxdWVyeS9qcXVlcnktMS4xMC4yLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4yLjMtY3VzdG9tLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItcm91dGUubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+KGZ1bmN0aW9uKCkge1xcbiAgZnVuY3Rpb24gUXVldWVGYWNhZGUobWVtYmVycykge1xcbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xcbiAgICB0aGlzLl9kZWZpbmUobWVtYmVycyk7XFxuICB9XFxuICB2YXIgcHJvdG8gPSBRdWV1ZUZhY2FkZS5wcm90b3R5cGU7XFxuICBcXG4gIHByb3RvLl9kZWZpbmUgPSBmdW5jdGlvbihtZW1iZXJzKSB7XFxuICAgIGlmICghbWVtYmVycykgeyByZXR1cm4gdGhpczsgfVxcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuICAgIGZ1bmN0aW9uIGFkZE1lbWJlcihuYW1lKSB7XFxuICAgICAgaWYgKCFuYW1lKSB7IHJldHVybjsgfVxcbiAgICAgIHNlbGZbbmFtZV0gPSBmdW5jdGlvbigpIHtcXG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goWyBuYW1lLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKSBdKTtcXG4gICAgICB9O1xcbiAgICB9XFxuICAgIHZhciBuYW1lcyA9IG1lbWJlcnMgaW5zdGFuY2VvZiBBcnJheSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShtZW1iZXJzKSA6IG1lbWJlcnMuc3BsaXQoLyAqLCAqL2cpO1xcbiAgICB3aGlsZSAobmFtZXMubGVuZ3RoKSB7XFxuICAgICAgYWRkTWVtYmVyKG5hbWVzLnNoaWZ0KCkpO1xcbiAgICB9XFxuICAgIHJldHVybiB0aGlzO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8ucHVzaCA9IGZ1bmN0aW9uKCkge1xcbiAgICB0aGlzLl9xdWV1ZS5wdXNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmdzKSk7XFxuICB9O1xcbiAgXFxuICBwcm90by5fZGVxdWV1ZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xcbiAgICB3aGlsZSAodGhpcy5fcXVldWUubGVuZ3RoKSB7XFxuICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xcbiAgICAgIHRyeSB7XFxuICAgICAgICB0YXJnZXRbbWVzc2FnZVswXV0uYXBwbHkodGFyZ2V0LCBtZXNzYWdlWzFdKTtcXG4gICAgICB9IGNhdGNoKGVycikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gdGFyZ2V0O1xcbiAgfTtcXG4gIFxcbiAgLy8gcXVldWUgZmFjYWRlc1xcbiAgd2luZG93LmFuYWx5dGljcyA9IG5ldyBRdWV1ZUZhY2FkZSgnaWRlbnRpZnksdHJhY2sscGFnZSxhbGlhcyxvbixvbmNlLHJlbW92ZUxpc3RlbmVyLGVtaXQscmVhZHksc2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlJyk7XFxufSkoKTs8L3NjcmlwdD48L2hlYWQ+PGJvZHkgbmctY29udHJvbGxlcj1cXFwiTWFpbkN0cmxcXFwiIHN5bGU9XFxcImJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBuZy1jbGFzcz1cXFwieydvcGVuJzogY2FydE9wZW4sICdjbG9zZWQnOiAhY2FydE9wZW59XFxcIiBjbGFzcz1cXFwiYm9vdHN0cmFwLWJ1dHRvbi1vdmVycmlkZVxcXCI+PGRpdiBjbGFzcz1cXFwiZnVsbC1oZWlnaHRcXFwiPjxkaXYgaWQ9XFxcImNoZWNrb3V0LWJ1dHRvblxcXCIgbmctY2xpY2s9XFxcImdvVG9DaGVja291dCgpXFxcIj48ZGl2IGNsYXNzPVxcXCJiYWctY29udGFpbmVyIHo0XFxcIj48ZGl2IGNsYXNzPVxcXCJpY29uLWJhZy1vdXRsaW5lXFxcIj48ZGl2IGNsYXNzPVxcXCJpdGVtLWNvdW50XFxcIj57e2NhcnQuaXRlbUNvdW50fX08L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ6MlxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyIGl0ZW1zLWluLWNhcnRcXFwiPjxoNCBuZy1jbGFzcz1cXFwie2FjdGl2ZTogY2FydE9wZW59XFxcIiBuZy1wbHVyYWxpemUgY291bnQ9XFxcImNhcnQuaXRlbUNvdW50XFxcIiB3aGVuPVxcXCJ7J29uZSc6ICdJdGVtIGluIG15IGNhcnQnLCAnb3RoZXInOiAnSXRlbXMgaW4gbXkgY2FydCd9XFxcIiBjbGFzcz1cXFwic2FmYXJpLWZvbnQtd2VpZ2h0LW92ZXJyaWRlXFxcIj48L2g0PjwvZGl2PjwvZGl2PjxkaXYgY2FydC1pdGVtcy1oZSBzaWRlYmFyIHJlY2VudCBjbGFzcz1cXFwiY2FydC1pdGVtcyB6MCBzY3JvbGwtc2hhZG93LW91dGVyIGZ1bGwtaGVpZ2h0XFxcIj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ6MSB2ZXJ0aWNhbC1hbGlnbi1taWRkbGUgbm9ydG9uLWNvbnRhaW5lclxcXCI+PGRpdiBjbGFzcz1cXFwibm9ydG9uXFxcIj48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgc3JjPVxcXCJodHRwczovL3NlYWwudmVyaXNpZ24uY29tL2dldHNlYWw/aG9zdF9uYW1lPXd3dy5zaG9wYmVhbS5jb20mYW1wO2FtcDtzaXplPVhTJmFtcDthbXA7dXNlX2ZsYXNoPU5PJmFtcDthbXA7dXNlX3RyYW5zcGFyZW50PVlFUyZhbXA7YW1wO2xhbmc9ZW5cXFwiPjwvc2NyaXB0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInRhZ2xpbmUtY29udGFpbmVyXFxcIj48aDQ+UG93ZXJlZCBieVwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyAnKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8YSBocmVmPVxcXCJodHRwOi8vd3d3LnNob3BiZWFtLmNvbVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIGNsYXNzPVxcXCJib2xkXFxcIj5TaG9wYmVhbTwvYT48L2g0PjxoNCBjbGFzcz1cXFwidXBwZXJjYXNlIGl0YWxpY1xcXCI+c2hvcCBzZWFtbGVzc2x5PC9oND48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ0aXRsZS1iYXIgY2hlY2tvdXQgejNcXFwiPjxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeSBuby1wb2ludGVyLWV2ZW50cyB2aWV3LWJhZyB6MCBhY3RpdmVcXFwiPjxoMyBjbGFzcz1cXFwic2FmYXJpLWZvbnQtd2VpZ2h0LW92ZXJyaWRlXFxcIj5DaGVja291dDwvaDM+PC9idXR0b24+PC9kaXY+PC9kaXY+PC9kaXY+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2NhcnQuYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2JvZHk+PC9odG1sPlwiKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufSkobG9jYWxzKVxufSwnY2FydC9pbmRleCc6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxIT1NUID0gbG9jYWxzXy5IT1NULGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzLHRoZW1lID0gbG9jYWxzXy50aGVtZTtidWYucHVzaChcIjwhRE9DVFlQRSBodG1sPjxodG1sIGxhbmc9XFxcImVuXFxcIj48aGVhZD48dGl0bGU+U2hvcGJlYW0gQ2FydDwvdGl0bGU+PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcXFwiPjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIj5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8bGlua1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3JlbCc6KCdzdHlsZXNoZWV0JyksICdocmVmJzooXCJcIiArIChhc3NldHMudXJsKCcvY3NzL2NhcnQtZGVmYXVsdC5jc3MnKSkgKyBcIlwiKSB9LCB7XCJyZWxcIjp0cnVlLFwiaHJlZlwiOnRydWV9KSkgKyBcIj5cIik7XG5pZiAoYXNzZXRzLnVybCgnL2Nzcy9jYXJ0LScgKyB0aGVtZSArICcuY3NzJykpXG57XG5idWYucHVzaChcIjxsaW5rXCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAncmVsJzooJ3N0eWxlc2hlZXQnKSwgJ2hyZWYnOihcIlwiICsgKGFzc2V0cy51cmwoJy9jc3MvY2FydC0nICsgdGhlbWUgKyAnLmNzcycpKSArIFwiXCIpIH0sIHtcInJlbFwiOnRydWUsXCJocmVmXCI6dHJ1ZX0pKSArIFwiPlwiKTtcbn1cbmJ1Zi5wdXNoKFwiPCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBuZy1jb250cm9sbGVyPVxcXCJNYWluQ3RybFxcXCIgc3lsZT1cXFwiYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IG1hcmdpbjogMDsgcGFkZGluZzogMDtcXFwiIG5nLWNsYXNzPVxcXCJ7J29wZW4nOiBjYXJ0T3BlbiwgJ2Nsb3NlZCc6ICFjYXJ0T3Blbn1cXFwiIGNsYXNzPVxcXCJib290c3RyYXAtYnV0dG9uLW92ZXJyaWRlXFxcIj48ZGl2IGNsYXNzPVxcXCJmdWxsLWhlaWdodFxcXCI+PGRpdiBpZD1cXFwiY2hlY2tvdXQtYnV0dG9uXFxcIiBuZy1jbGljaz1cXFwiZ29Ub0NoZWNrb3V0KClcXFwiPjxkaXYgY2xhc3M9XFxcImJhZy1jb250YWluZXIgejRcXFwiPjxkaXYgY2xhc3M9XFxcImljb24tYmFnLW91dGxpbmVcXFwiPjxkaXYgY2xhc3M9XFxcIml0ZW0tY291bnRcXFwiPnt7Y2FydC5pdGVtQ291bnR9fTwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInoyXFxcIj48ZGl2IGNsYXNzPVxcXCJ0aXRsZS1iYXIgaXRlbXMtaW4tY2FydFxcXCI+PGg0IG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBjYXJ0T3Blbn1cXFwiIG5nLXBsdXJhbGl6ZSBjb3VudD1cXFwiY2FydC5pdGVtQ291bnRcXFwiIHdoZW49XFxcInsnb25lJzogJ0l0ZW0gaW4gbXkgY2FydCcsICdvdGhlcic6ICdJdGVtcyBpbiBteSBjYXJ0J31cXFwiIGNsYXNzPVxcXCJzYWZhcmktZm9udC13ZWlnaHQtb3ZlcnJpZGVcXFwiPjwvaDQ+PC9kaXY+PC9kaXY+PGRpdiBjYXJ0LWl0ZW1zIHNpZGViYXIgcmVjZW50IGNsYXNzPVxcXCJjYXJ0LWl0ZW1zIHowIHNjcm9sbC1zaGFkb3ctb3V0ZXIgZnVsbC1oZWlnaHRcXFwiPjwvZGl2PjxkaXYgY2xhc3M9XFxcInoxIHZlcnRpY2FsLWFsaWduLW1pZGRsZSBub3J0b24tY29udGFpbmVyXFxcIj48ZGl2IGNsYXNzPVxcXCJub3J0b25cXFwiPjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcImh0dHBzOi8vc2VhbC52ZXJpc2lnbi5jb20vZ2V0c2VhbD9ob3N0X25hbWU9d3d3LnNob3BiZWFtLmNvbSZhbXA7YW1wO3NpemU9WFMmYW1wO2FtcDt1c2VfZmxhc2g9Tk8mYW1wO2FtcDt1c2VfdHJhbnNwYXJlbnQ9WUVTJmFtcDthbXA7bGFuZz1lblxcXCI+PC9zY3JpcHQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwidGFnbGluZS1jb250YWluZXJcXFwiPjxoND5Qb3dlcmVkIGJ5XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnICcpID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxhIGhyZWY9XFxcImh0dHA6Ly93d3cuc2hvcGJlYW0uY29tXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgY2xhc3M9XFxcImJvbGRcXFwiPlNob3BiZWFtPC9hPjwvaDQ+PGg0IGNsYXNzPVxcXCJ1cHBlcmNhc2UgaXRhbGljXFxcIj5zaG9wIHNlYW1sZXNzbHk8L2g0PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInRpdGxlLWJhciBjaGVja291dCB6M1xcXCI+PGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IG5vLXBvaW50ZXItZXZlbnRzIHZpZXctYmFnIHowIGFjdGl2ZVxcXCI+PGgzIGNsYXNzPVxcXCJzYWZhcmktZm9udC13ZWlnaHQtb3ZlcnJpZGVcXFwiPkNoZWNrb3V0PC9oMz48L2J1dHRvbj48L2Rpdj48L2Rpdj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvY2FydC5idW5kbGUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwvYm9keT48L2h0bWw+XCIpOztyZXR1cm4gYnVmLmpvaW4oXCJcIik7XG59KShsb2NhbHMpXG59LCdjYXJ0L3JvZ2FpbmUtYWQtbWVuJzogZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgbG9jYWxzID0gbG9jYWxzIHx8IHt9O1xuICAgIGxvY2Fsc1snYXNzZXRzJ10gPSBhc3NldHM7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgbG9jYWxzXyA9IChsb2NhbHMgfHwge30pLEhPU1QgPSBsb2NhbHNfLkhPU1QsYXNzZXRzID0gbG9jYWxzXy5hc3NldHM7YnVmLnB1c2goXCI8IURPQ1RZUEUgaHRtbD48aHRtbCBsYW5nPVxcXCJlblxcXCI+PGhlYWQ+PHRpdGxlPlNob3BiZWFtIENhcnQ8L3RpdGxlPjxtZXRhIGh0dHAtZXF1aXY9XFxcIkNvbnRlbnQtVHlwZVxcXCIgY29udGVudD1cXFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XFxcIj48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFxcXCI+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPGxpbmtcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdyZWwnOihcInN0eWxlc2hlZXRcIiksICdocmVmJzooXCJcIiArIChhc3NldHMudXJsKCcvY3NzL2NhcnQtcm9nYWluZS5jc3MnKSkgKyBcIlwiKSB9LCB7XCJyZWxcIjp0cnVlLFwiaHJlZlwiOnRydWV9KSkgKyBcIj48IS0tW2lmIGx0IElFIDEwXT5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvY3VzdG9tRXZlbnRzLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvZmlsdGVyLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvbWFwLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc29tZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3N0cmluZy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9qcXVlcnkvanF1ZXJ5LTEuMTAuMi5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLTEuMi4zLWN1c3RvbS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLXJvdXRlLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPihmdW5jdGlvbigpIHtcXG4gIGZ1bmN0aW9uIFF1ZXVlRmFjYWRlKG1lbWJlcnMpIHtcXG4gICAgdGhpcy5fcXVldWUgPSBbXTtcXG4gICAgdGhpcy5fZGVmaW5lKG1lbWJlcnMpO1xcbiAgfVxcbiAgdmFyIHByb3RvID0gUXVldWVGYWNhZGUucHJvdG90eXBlO1xcbiAgXFxuICBwcm90by5fZGVmaW5lID0gZnVuY3Rpb24obWVtYmVycykge1xcbiAgICBpZiAoIW1lbWJlcnMpIHsgcmV0dXJuIHRoaXM7IH1cXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcbiAgICBmdW5jdGlvbiBhZGRNZW1iZXIobmFtZSkge1xcbiAgICAgIGlmICghbmFtZSkgeyByZXR1cm47IH1cXG4gICAgICBzZWxmW25hbWVdID0gZnVuY3Rpb24oKSB7XFxuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKFsgbmFtZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykgXSk7XFxuICAgICAgfTtcXG4gICAgfVxcbiAgICB2YXIgbmFtZXMgPSBtZW1iZXJzIGluc3RhbmNlb2YgQXJyYXkgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkobWVtYmVycykgOiBtZW1iZXJzLnNwbGl0KC8gKiwgKi9nKTtcXG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCkge1xcbiAgICAgIGFkZE1lbWJlcihuYW1lcy5zaGlmdCgpKTtcXG4gICAgfVxcbiAgICByZXR1cm4gdGhpcztcXG4gIH07XFxuICBcXG4gIHByb3RvLnB1c2ggPSBmdW5jdGlvbigpIHtcXG4gICAgdGhpcy5fcXVldWUucHVzaChBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJncykpO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8uX2RlcXVldWUgPSBmdW5jdGlvbih0YXJnZXQpIHtcXG4gICAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCkge1xcbiAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcXG4gICAgICB0cnkge1xcbiAgICAgICAgdGFyZ2V0W21lc3NhZ2VbMF1dLmFwcGx5KHRhcmdldCwgbWVzc2FnZVsxXSk7XFxuICAgICAgfSBjYXRjaChlcnIpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHRhcmdldDtcXG4gIH07XFxuICBcXG4gIC8vIHF1ZXVlIGZhY2FkZXNcXG4gIHdpbmRvdy5hbmFseXRpY3MgPSBuZXcgUXVldWVGYWNhZGUoJ2lkZW50aWZ5LHRyYWNrLHBhZ2UsYWxpYXMsb24sb25jZSxyZW1vdmVMaXN0ZW5lcixlbWl0LHJlYWR5LHNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZScpO1xcbn0pKCk7PC9zY3JpcHQ+PC9oZWFkPjxib2R5IG5nLWNvbnRyb2xsZXI9XFxcIk1haW5DdHJsXFxcIiBzeWxlPVxcXCJiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwO1xcXCIgbmctY2xhc3M9XFxcInsnb3Blbic6IGNhcnRPcGVuLCAnY2xvc2VkJzogIWNhcnRPcGVufVxcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1idXR0b24tb3ZlcnJpZGVcXFwiPjxkaXYgY2xhc3M9XFxcImZ1bGwtaGVpZ2h0XFxcIj48ZGl2IGlkPVxcXCJjaGVja291dC1idXR0b25cXFwiIG5nLWNsaWNrPVxcXCJnb1RvQ2hlY2tvdXQoKVxcXCI+PGRpdiBjbGFzcz1cXFwiYmFnLWNvbnRhaW5lciB6NFxcXCI+PGRpdiBjbGFzcz1cXFwiaWNvbi1iYWctb3V0bGluZVxcXCI+PGRpdiBjbGFzcz1cXFwiaXRlbS1jb3VudFxcXCI+e3tjYXJ0Lml0ZW1Db3VudH19PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwiejJcXFwiPjxkaXYgY2xhc3M9XFxcInRpdGxlLWJhciBpdGVtcy1pbi1jYXJ0XFxcIj48aDQgbmctY2xhc3M9XFxcInthY3RpdmU6IGNhcnRPcGVufVxcXCIgbmctcGx1cmFsaXplIGNvdW50PVxcXCJjYXJ0Lml0ZW1Db3VudFxcXCIgd2hlbj1cXFwieydvbmUnOiAnSXRlbSBpbiBteSBjYXJ0JywgJ290aGVyJzogJ0l0ZW1zIGluIG15IGNhcnQnfVxcXCIgY2xhc3M9XFxcInNhZmFyaS1mb250LXdlaWdodC1vdmVycmlkZVxcXCI+PC9oND48L2Rpdj48L2Rpdj48ZGl2IGNhcnQtaXRlbXMtcm9nYWluZSBzaWRlYmFyIHJlY2VudCBjbGFzcz1cXFwiY2FydC1pdGVtcyB6MCBzY3JvbGwtc2hhZG93LW91dGVyIGZ1bGwtaGVpZ2h0XFxcIj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ6MSB2ZXJ0aWNhbC1hbGlnbi1taWRkbGUgbm9ydG9uLWNvbnRhaW5lclxcXCI+PGRpdiBjbGFzcz1cXFwibm9ydG9uXFxcIj48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgc3JjPVxcXCJodHRwczovL3NlYWwudmVyaXNpZ24uY29tL2dldHNlYWw/aG9zdF9uYW1lPXd3dy5zaG9wYmVhbS5jb20mYW1wO2FtcDtzaXplPVhTJmFtcDthbXA7dXNlX2ZsYXNoPU5PJmFtcDthbXA7dXNlX3RyYW5zcGFyZW50PVlFUyZhbXA7YW1wO2xhbmc9ZW5cXFwiPjwvc2NyaXB0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInRhZ2xpbmUtY29udGFpbmVyXFxcIj48aDQ+UG93ZXJlZCBieVwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyAnKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8YSBocmVmPVxcXCJodHRwOi8vd3d3LnNob3BiZWFtLmNvbVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIGNsYXNzPVxcXCJib2xkXFxcIj5TaG9wYmVhbTwvYT48L2g0PjxoNCBjbGFzcz1cXFwidXBwZXJjYXNlIGl0YWxpY1xcXCI+c2hvcCBzZWFtbGVzc2x5PC9oND48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ0aXRsZS1iYXIgY2hlY2tvdXQgejNcXFwiPjxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeSBuby1wb2ludGVyLWV2ZW50cyB2aWV3LWJhZyB6MCBhY3RpdmVcXFwiPjxoMyBjbGFzcz1cXFwic2FmYXJpLWZvbnQtd2VpZ2h0LW92ZXJyaWRlXFxcIj5DaGVja291dDwvaDM+PC9idXR0b24+PC9kaXY+PC9kaXY+PC9kaXY+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2NhcnQuYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2JvZHk+PC9odG1sPlwiKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufSkobG9jYWxzKVxufSwnY2FydC9yb2dhaW5lLW1lbic6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxIT1NUID0gbG9jYWxzXy5IT1NULGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBDYXJ0PC90aXRsZT48bWV0YSBodHRwLWVxdWl2PVxcXCJDb250ZW50LVR5cGVcXFwiIGNvbnRlbnQ9XFxcInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxcXCI+PG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxsaW5rXCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAncmVsJzooXCJzdHlsZXNoZWV0XCIpLCAnaHJlZic6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2Nzcy9jYXJ0LXJvZ2FpbmUuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBuZy1jb250cm9sbGVyPVxcXCJNYWluQ3RybFxcXCIgc3lsZT1cXFwiYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IG1hcmdpbjogMDsgcGFkZGluZzogMDtcXFwiIG5nLWNsYXNzPVxcXCJ7J29wZW4nOiBjYXJ0T3BlbiwgJ2Nsb3NlZCc6ICFjYXJ0T3Blbn1cXFwiIGNsYXNzPVxcXCJib290c3RyYXAtYnV0dG9uLW92ZXJyaWRlXFxcIj48ZGl2IGNsYXNzPVxcXCJmdWxsLWhlaWdodFxcXCI+PGRpdiBpZD1cXFwiY2hlY2tvdXQtYnV0dG9uXFxcIiBuZy1jbGljaz1cXFwiZ29Ub0NoZWNrb3V0KClcXFwiPjxkaXYgY2xhc3M9XFxcImJhZy1jb250YWluZXIgejRcXFwiPjxkaXYgY2xhc3M9XFxcImljb24tYmFnLW91dGxpbmVcXFwiPjxkaXYgY2xhc3M9XFxcIml0ZW0tY291bnRcXFwiPnt7Y2FydC5pdGVtQ291bnR9fTwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInoyXFxcIj48ZGl2IGNsYXNzPVxcXCJ0aXRsZS1iYXIgaXRlbXMtaW4tY2FydFxcXCI+PGg0IG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBjYXJ0T3Blbn1cXFwiIG5nLXBsdXJhbGl6ZSBjb3VudD1cXFwiY2FydC5pdGVtQ291bnRcXFwiIHdoZW49XFxcInsnb25lJzogJ0l0ZW0gaW4gbXkgY2FydCcsICdvdGhlcic6ICdJdGVtcyBpbiBteSBjYXJ0J31cXFwiIGNsYXNzPVxcXCJzYWZhcmktZm9udC13ZWlnaHQtb3ZlcnJpZGVcXFwiPjwvaDQ+PC9kaXY+PC9kaXY+PGRpdiBjYXJ0LWl0ZW1zLXJvZ2FpbmUgc2lkZWJhciByZWNlbnQgY2xhc3M9XFxcImNhcnQtaXRlbXMgejAgc2Nyb2xsLXNoYWRvdy1vdXRlciBmdWxsLWhlaWdodFxcXCI+PC9kaXY+PGRpdiBjbGFzcz1cXFwiejEgdmVydGljYWwtYWxpZ24tbWlkZGxlIG5vcnRvbi1jb250YWluZXJcXFwiPjxkaXYgY2xhc3M9XFxcIm5vcnRvblxcXCI+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIHNyYz1cXFwiaHR0cHM6Ly9zZWFsLnZlcmlzaWduLmNvbS9nZXRzZWFsP2hvc3RfbmFtZT13d3cuc2hvcGJlYW0uY29tJmFtcDthbXA7c2l6ZT1YUyZhbXA7YW1wO3VzZV9mbGFzaD1OTyZhbXA7YW1wO3VzZV90cmFuc3BhcmVudD1ZRVMmYW1wO2FtcDtsYW5nPWVuXFxcIj48L3NjcmlwdD48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ0YWdsaW5lLWNvbnRhaW5lclxcXCI+PGg0PlBvd2VyZWQgYnlcIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgJykgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGEgaHJlZj1cXFwiaHR0cDovL3d3dy5zaG9wYmVhbS5jb21cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBjbGFzcz1cXFwiYm9sZFxcXCI+U2hvcGJlYW08L2E+PC9oND48aDQgY2xhc3M9XFxcInVwcGVyY2FzZSBpdGFsaWNcXFwiPnNob3Agc2VhbWxlc3NseTwvaDQ+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyIGNoZWNrb3V0IHozXFxcIj48YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgbm8tcG9pbnRlci1ldmVudHMgdmlldy1iYWcgejAgYWN0aXZlXFxcIj48aDMgY2xhc3M9XFxcInNhZmFyaS1mb250LXdlaWdodC1vdmVycmlkZVxcXCI+Q2hlY2tvdXQ8L2gzPjwvYnV0dG9uPjwvZGl2PjwvZGl2PjwvZGl2PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9jYXJ0LmJ1bmRsZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PC9ib2R5PjwvaHRtbD5cIik7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn0pKGxvY2Fscylcbn0sJ2NhcnQvcm9nYWluZS13b21lbic6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxIT1NUID0gbG9jYWxzXy5IT1NULGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBDYXJ0PC90aXRsZT48bWV0YSBodHRwLWVxdWl2PVxcXCJDb250ZW50LVR5cGVcXFwiIGNvbnRlbnQ9XFxcInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxcXCI+PG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxsaW5rXCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAncmVsJzooXCJzdHlsZXNoZWV0XCIpLCAnaHJlZic6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2Nzcy9jYXJ0LXJvZ2FpbmUuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBuZy1jb250cm9sbGVyPVxcXCJNYWluQ3RybFxcXCIgc3lsZT1cXFwiYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IG1hcmdpbjogMDsgcGFkZGluZzogMDtcXFwiIG5nLWNsYXNzPVxcXCJ7J29wZW4nOiBjYXJ0T3BlbiwgJ2Nsb3NlZCc6ICFjYXJ0T3Blbn1cXFwiIGNsYXNzPVxcXCJib290c3RyYXAtYnV0dG9uLW92ZXJyaWRlXFxcIj48ZGl2IGNsYXNzPVxcXCJmdWxsLWhlaWdodFxcXCI+PGRpdiBpZD1cXFwiY2hlY2tvdXQtYnV0dG9uXFxcIiBuZy1jbGljaz1cXFwiZ29Ub0NoZWNrb3V0KClcXFwiPjxkaXYgY2xhc3M9XFxcImJhZy1jb250YWluZXIgejRcXFwiPjxkaXYgY2xhc3M9XFxcImljb24tYmFnLW91dGxpbmVcXFwiPjxkaXYgY2xhc3M9XFxcIml0ZW0tY291bnRcXFwiPnt7Y2FydC5pdGVtQ291bnR9fTwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInoyXFxcIj48ZGl2IGNsYXNzPVxcXCJ0aXRsZS1iYXIgaXRlbXMtaW4tY2FydFxcXCI+PGg0IG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBjYXJ0T3Blbn1cXFwiIG5nLXBsdXJhbGl6ZSBjb3VudD1cXFwiY2FydC5pdGVtQ291bnRcXFwiIHdoZW49XFxcInsnb25lJzogJ0l0ZW0gaW4gbXkgY2FydCcsICdvdGhlcic6ICdJdGVtcyBpbiBteSBjYXJ0J31cXFwiIGNsYXNzPVxcXCJzYWZhcmktZm9udC13ZWlnaHQtb3ZlcnJpZGVcXFwiPjwvaDQ+PC9kaXY+PC9kaXY+PGRpdiBjYXJ0LWl0ZW1zLXJvZ2FpbmUgc2lkZWJhciByZWNlbnQgY2xhc3M9XFxcImNhcnQtaXRlbXMgejAgc2Nyb2xsLXNoYWRvdy1vdXRlciBmdWxsLWhlaWdodFxcXCI+PC9kaXY+PGRpdiBjbGFzcz1cXFwiejEgdmVydGljYWwtYWxpZ24tbWlkZGxlIG5vcnRvbi1jb250YWluZXJcXFwiPjxkaXYgY2xhc3M9XFxcIm5vcnRvblxcXCI+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIHNyYz1cXFwiaHR0cHM6Ly9zZWFsLnZlcmlzaWduLmNvbS9nZXRzZWFsP2hvc3RfbmFtZT13d3cuc2hvcGJlYW0uY29tJmFtcDthbXA7c2l6ZT1YUyZhbXA7YW1wO3VzZV9mbGFzaD1OTyZhbXA7YW1wO3VzZV90cmFuc3BhcmVudD1ZRVMmYW1wO2FtcDtsYW5nPWVuXFxcIj48L3NjcmlwdD48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ0YWdsaW5lLWNvbnRhaW5lclxcXCI+PGg0PlBvd2VyZWQgYnlcIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgJykgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGEgaHJlZj1cXFwiaHR0cDovL3d3dy5zaG9wYmVhbS5jb21cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBjbGFzcz1cXFwiYm9sZFxcXCI+U2hvcGJlYW08L2E+PC9oND48aDQgY2xhc3M9XFxcInVwcGVyY2FzZSBpdGFsaWNcXFwiPnNob3Agc2VhbWxlc3NseTwvaDQ+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyIGNoZWNrb3V0IHozXFxcIj48YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgbm8tcG9pbnRlci1ldmVudHMgdmlldy1iYWcgejAgYWN0aXZlXFxcIj48aDMgY2xhc3M9XFxcInNhZmFyaS1mb250LXdlaWdodC1vdmVycmlkZVxcXCI+Q2hlY2tvdXQ8L2gzPjwvYnV0dG9uPjwvZGl2PjwvZGl2PjwvZGl2PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9jYXJ0LmJ1bmRsZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PC9ib2R5PjwvaHRtbD5cIik7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn0pKGxvY2Fscylcbn0sJ2NoZWNrb3V0L2hlYWx0aHktZXNzZW50aWFscyc6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxyb2xsYmFyRW5hYmxlZCA9IGxvY2Fsc18ucm9sbGJhckVuYWJsZWQscm9sbGJhckNsaWVudEFjY2Vzc1Rva2VuID0gbG9jYWxzXy5yb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4sYXNzZXRzID0gbG9jYWxzXy5hc3NldHMsSE9TVCA9IGxvY2Fsc18uSE9TVDtidWYucHVzaChcIjwhRE9DVFlQRSBodG1sPjxodG1sIGxhbmc9XFxcImVuXFxcIj48aGVhZD48dGl0bGU+U2hvcGJlYW0gQ2hlY2tvdXQ8L3RpdGxlPjxtZXRhIGh0dHAtZXF1aXY9XFxcIkNvbnRlbnQtVHlwZVxcXCIgY29udGVudD1cXFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XFxcIj48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAgdXNlci1zY2FsYWJsZT1ub1xcXCI+XCIpO1xuaWYgKCByb2xsYmFyRW5hYmxlZClcbntcbmJ1Zi5wdXNoKFwiPCEtLSBSb2xsYmFyIC0tPjxzY3JpcHQ+dmFyIF9yb2xsYmFyQ29uZmlnID0ge1xcbiAgYWNjZXNzVG9rZW46ICdcIiArIChqYWRlLmVzY2FwZSgoamFkZS5pbnRlcnAgPSByb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4pID09IG51bGwgPyAnJyA6IGphZGUuaW50ZXJwKSkgKyBcIicsXFxuICBjYXB0dXJlVW5jYXVnaHQ6IHRydWUsXFxuICBwYXlsb2FkOiB7XFxuICAgIGVudmlyb25tZW50OiBcXFwicHJvZHVjdGlvblxcXCJcXG4gIH1cXG59O1xcbiFmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYil7dGhpcy5zaGltSWQ9KytoLHRoaXMubm90aWZpZXI9bnVsbCx0aGlzLnBhcmVudFNoaW09Yix0aGlzLmxvZ2dlcj1mdW5jdGlvbigpe30sYS5jb25zb2xlJiZ2b2lkIDA9PT1hLmNvbnNvbGUuc2hpbUlkJiYodGhpcy5sb2dnZXI9YS5jb25zb2xlLmxvZyl9ZnVuY3Rpb24gZChiLGMsZCl7IWRbNF0mJmEuX3JvbGxiYXJXcmFwcGVkRXJyb3ImJihkWzRdPWEuX3JvbGxiYXJXcmFwcGVkRXJyb3IsYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1udWxsKSxiLnVuY2F1Z2h0RXJyb3IuYXBwbHkoYixkKSxjJiZjLmFwcGx5KGEsZCl9ZnVuY3Rpb24gZShiKXt2YXIgZD1jO3JldHVybiBnKGZ1bmN0aW9uKCl7aWYodGhpcy5ub3RpZmllcilyZXR1cm4gdGhpcy5ub3RpZmllcltiXS5hcHBseSh0aGlzLm5vdGlmaWVyLGFyZ3VtZW50cyk7dmFyIGM9dGhpcyxlPVxcXCJzY29wZVxcXCI9PT1iO2UmJihjPW5ldyBkKHRoaXMpKTt2YXIgZj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCksZz17c2hpbTpjLG1ldGhvZDpiLGFyZ3M6Zix0czpuZXcgRGF0ZX07cmV0dXJuIGEuX3JvbGxiYXJTaGltUXVldWUucHVzaChnKSxlP2M6dm9pZCAwfSl9ZnVuY3Rpb24gZihhLGIpe2lmKGIuaGFzT3duUHJvcGVydHkmJmIuaGFzT3duUHJvcGVydHkoXFxcImFkZEV2ZW50TGlzdGVuZXJcXFwiKSl7dmFyIGM9Yi5hZGRFdmVudExpc3RlbmVyO2IuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihiLGQsZSl7Yy5jYWxsKHRoaXMsYixhLndyYXAoZCksZSl9O3ZhciBkPWIucmVtb3ZlRXZlbnRMaXN0ZW5lcjtiLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMpe2QuY2FsbCh0aGlzLGEsYiYmYi5fd3JhcHBlZD9iLl93cmFwcGVkOmIsYyl9fX1mdW5jdGlvbiBnKGEsYil7cmV0dXJuIGI9Ynx8dGhpcy5sb2dnZXIsZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGMpe2IoXFxcIlJvbGxiYXIgaW50ZXJuYWwgZXJyb3I6XFxcIixjKX19fXZhciBoPTA7Yy5pbml0PWZ1bmN0aW9uKGEsYil7dmFyIGU9Yi5nbG9iYWxBbGlhc3x8XFxcIlJvbGxiYXJcXFwiO2lmKFxcXCJvYmplY3RcXFwiPT10eXBlb2YgYVtlXSlyZXR1cm4gYVtlXTthLl9yb2xsYmFyU2hpbVF1ZXVlPVtdLGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9bnVsbCxiPWJ8fHt9O3ZhciBoPW5ldyBjO3JldHVybiBnKGZ1bmN0aW9uKCl7aWYoaC5jb25maWd1cmUoYiksYi5jYXB0dXJlVW5jYXVnaHQpe3ZhciBjPWEub25lcnJvcjthLm9uZXJyb3I9ZnVuY3Rpb24oKXt2YXIgYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7ZChoLGMsYSl9O3ZhciBnLGksaj1bXFxcIkV2ZW50VGFyZ2V0XFxcIixcXFwiV2luZG93XFxcIixcXFwiTm9kZVxcXCIsXFxcIkFwcGxpY2F0aW9uQ2FjaGVcXFwiLFxcXCJBdWRpb1RyYWNrTGlzdFxcXCIsXFxcIkNoYW5uZWxNZXJnZXJOb2RlXFxcIixcXFwiQ3J5cHRvT3BlcmF0aW9uXFxcIixcXFwiRXZlbnRTb3VyY2VcXFwiLFxcXCJGaWxlUmVhZGVyXFxcIixcXFwiSFRNTFVua25vd25FbGVtZW50XFxcIixcXFwiSURCRGF0YWJhc2VcXFwiLFxcXCJJREJSZXF1ZXN0XFxcIixcXFwiSURCVHJhbnNhY3Rpb25cXFwiLFxcXCJLZXlPcGVyYXRpb25cXFwiLFxcXCJNZWRpYUNvbnRyb2xsZXJcXFwiLFxcXCJNZXNzYWdlUG9ydFxcXCIsXFxcIk1vZGFsV2luZG93XFxcIixcXFwiTm90aWZpY2F0aW9uXFxcIixcXFwiU1ZHRWxlbWVudEluc3RhbmNlXFxcIixcXFwiU2NyZWVuXFxcIixcXFwiVGV4dFRyYWNrXFxcIixcXFwiVGV4dFRyYWNrQ3VlXFxcIixcXFwiVGV4dFRyYWNrTGlzdFxcXCIsXFxcIldlYlNvY2tldFxcXCIsXFxcIldlYlNvY2tldFdvcmtlclxcXCIsXFxcIldvcmtlclxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0XFxcIixcXFwiWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldFxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0VXBsb2FkXFxcIl07Zm9yKGc9MDtnPGoubGVuZ3RoOysrZylpPWpbZ10sYVtpXSYmYVtpXS5wcm90b3R5cGUmJmYoaCxhW2ldLnByb3RvdHlwZSl9cmV0dXJuIGFbZV09aCxofSxoLmxvZ2dlcikoKX0sYy5wcm90b3R5cGUubG9hZEZ1bGw9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZyhmdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcXFwic2NyaXB0XFxcIiksZT1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJzY3JpcHRcXFwiKVswXTthLnNyYz1kLnJvbGxiYXJKc1VybCxhLmFzeW5jPSFjLGEub25sb2FkPWYsZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGUpfSx0aGlzLmxvZ2dlciksZj1nKGZ1bmN0aW9uKCl7aWYodm9pZCAwPT09YS5fcm9sbGJhclBheWxvYWRRdWV1ZSlmb3IodmFyIGIsYyxkLGUsZj1uZXcgRXJyb3IoXFxcInJvbGxiYXIuanMgZGlkIG5vdCBsb2FkXFxcIik7Yj1hLl9yb2xsYmFyU2hpbVF1ZXVlLnNoaWZ0KCk7KWZvcihkPWIuYXJncyxlPTA7ZTxkLmxlbmd0aDsrK2UpaWYoYz1kW2VdLFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBjKXtjKGYpO2JyZWFrfX0sdGhpcy5sb2dnZXIpO2coZnVuY3Rpb24oKXtjP2UoKTphLmFkZEV2ZW50TGlzdGVuZXI/YS5hZGRFdmVudExpc3RlbmVyKFxcXCJsb2FkXFxcIixlLCExKTphLmF0dGFjaEV2ZW50KFxcXCJvbmxvYWRcXFwiLGUpfSx0aGlzLmxvZ2dlcikoKX0sYy5wcm90b3R5cGUud3JhcD1mdW5jdGlvbihiKXt0cnl7aWYoXFxcImZ1bmN0aW9uXFxcIiE9dHlwZW9mIGIpcmV0dXJuIGI7aWYoYi5faXNXcmFwKXJldHVybiBiO2lmKCFiLl93cmFwcGVkKXtiLl93cmFwcGVkPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChjKXt0aHJvdyBhLl9yb2xsYmFyV3JhcHBlZEVycm9yPWMsY319LGIuX3dyYXBwZWQuX2lzV3JhcD0hMDtmb3IodmFyIGMgaW4gYiliLmhhc093blByb3BlcnR5KGMpJiYoYi5fd3JhcHBlZFtjXT1iW2NdKX1yZXR1cm4gYi5fd3JhcHBlZH1jYXRjaChkKXtyZXR1cm4gYn19O2Zvcih2YXIgaT1cXFwibG9nLGRlYnVnLGluZm8sd2Fybix3YXJuaW5nLGVycm9yLGNyaXRpY2FsLGdsb2JhbCxjb25maWd1cmUsc2NvcGUsdW5jYXVnaHRFcnJvclxcXCIuc3BsaXQoXFxcIixcXFwiKSxqPTA7ajxpLmxlbmd0aDsrK2opYy5wcm90b3R5cGVbaVtqXV09ZShpW2pdKTt2YXIgaz1cXFwiLy9kMzdndnJ2YzB3dDRzMS5jbG91ZGZyb250Lm5ldC9qcy92MS4xL3JvbGxiYXIubWluLmpzXFxcIjtfcm9sbGJhckNvbmZpZy5yb2xsYmFySnNVcmw9X3JvbGxiYXJDb25maWcucm9sbGJhckpzVXJsfHxrO3ZhciBsPWMuaW5pdChhLF9yb2xsYmFyQ29uZmlnKTtsLmxvYWRGdWxsKGEsYiwhMSxfcm9sbGJhckNvbmZpZyl9KHdpbmRvdyxkb2N1bWVudCk7PC9zY3JpcHQ+XCIpO1xufVxuYnVmLnB1c2goXCI8c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgc3JjPVxcXCIvL3VzZS50eXBla2l0Lm5ldC9xcW01YWFnLmpzXFxcIj48L3NjcmlwdD48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+dHJ5e1R5cGVraXQubG9hZCgpO31jYXRjaChlKXt9XFxuPC9zY3JpcHQ+PGxpbmtcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdyZWwnOignc3R5bGVzaGVldCcpLCAnaHJlZic6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2Nzcy9jaGVja291dC1oZWFsdGh5LWVzc2VudGlhbHMuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBuZy1jb250cm9sbGVyPVxcXCJNYWluQ3RybFxcXCIgc3R5bGU9XFxcIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBuZy1pbml0PVxcXCJsb2FkVGhlbWUoJ2hlYWx0aHktZXNzZW50aWFscycpXFxcIiBjbGFzcz1cXFwiYm9vdHN0cmFwLWJ1dHRvbi1vdmVycmlkZVxcXCI+PGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLWZsdWlkXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc3NsLXNlY3VyZWQtY29ubmVjdGlvbiB6MlxcXCI+PGg0PjxkaXYgY2xhc3M9XFxcImljb24tbG9ja2VkXFxcIj48L2Rpdj5TU0wgU2VjdXJlZCBDb25uZWN0aW9uPC9oND48aDQgbmctY2xpY2s9XFxcImdvVG9SZWZlcnJlcigpXFxcIiBjbGFzcz1cXFwiY2xvc2UtY2hlY2tvdXQgcHVsbC1yaWdodFxcXCI+PCEtLXwgQ2xvc2UtLT48ZGl2IGNsYXNzPVxcXCJpY29uLWNsb3NlXFxcIj48L2Rpdj48L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBoZWFkZXIgc2Nyb2xsLWhlYWRlciB6MVxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyXFxcIj48aDIgY2xhc3M9XFxcInRleHQtY2VudGVyIHVwcGVyY2FzZVxcXCI+Q2hlY2tvdXQ8L2gyPjwvZGl2PjwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OywgJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgbWluLWhlaWdodC1jb250YWluZXIgejBcXFwiPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OywgJnF1b3Q7c3BhbjEyJnF1b3Q7LCAmcXVvdDtzcGFuOCBsZWZ0JnF1b3Q7KSArICZxdW90OyAmcXVvdDsgKyBnZXRTdGVwKClcXFwiIGNsYXNzPVxcXCJtYWluXFxcIj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJzdGVwcyBzZWN0aW9uIHoxIHRleHQtY2VudGVyXFxcIj48ZGl2IHNiLWNoZWNrb3V0LXN0ZXBzLWFycm93PVxcXCJnZXRTdGVwKClcXFwiIGNsYXNzPVxcXCJkb3duLWFycm93XFxcIj48L2Rpdj48YSBuZy1jbGljaz1cXFwiZ29Ub1N0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPjxoMz48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7YmFkZ2UtaW5mbyZxdW90OylcXFwiIGNsYXNzPVxcXCJiYWRnZVxcXCI+MTwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+UmV2aWV3PGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PjwvZGl2PjwvZGl2PjwvaDM+PC9hPjxhIG5nLWNsaWNrPVxcXCJnb1RvU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj48aDM+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7LCAmcXVvdDtiYWRnZS1pbmZvJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJhZGdlXFxcIj4yPC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+U2hpcHBpbmcgJiBQYXltZW50PGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PjwvZGl2PjwvZGl2PjwvaDM+PC9hPjxhIG5nLWNsaWNrPVxcXCJnb1RvU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj48aDM+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtiYWRnZS1pbmZvJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJhZGdlXFxcIj4zPC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+T3JkZXIgU3VtbWFyeTwvZGl2PjwvaDM+PC9hPjwvZGl2PjxkaXYgc2ItY3VzdG9tLXNjcm9sbGJhciBzY3JvbGwtc2hhZG93IGNsYXNzPVxcXCJzY3JvbGxhYmxlLWNvbnRlbnRcXFwiPjxkaXYgbmctc2hvdz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb24gejEgaGlkZGVuLXBob25lXFxcIj48aDMgdG9vbHRpcD1cXFwiSGVyZSdzIGhvdyBzaGlwcGluZyBjYWxjdWxhdGlvbnMgd29yay4uLlxcXCIgcGxhY2VtZW50PVxcXCJib3R0b21cXFwiIGNsYXNzPVxcXCJzcGFuMTIgbGFiZWwxXFxcIj5Fc3RpbWF0ZWQgVGF4ICYgU2hpcHBpbmc8IS0tLmljb24taW5mby0yLS0+PC9oMz48L2Rpdj48ZGl2IG5nLXNob3c9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBzdGF0ZSBzZWN0aW9uIHoyXFxcIj48ZGl2IGNsYXNzPVxcXCJzcGFuMiB0ZXh0LWxlZnRcXFwiPjxoND5Qcm92aW5jZTwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwic3BhbjVcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PHNlbGVjdCBpZD1cXFwic2hpcHBpbmctc3RhdGVcXFwiIG5nLWlmPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIG5nLW1vZGVsPVxcXCJ1c2VyLnNoaXBwaW5nLnN0YXRlXFxcIiBuZy1vcHRpb25zPVxcXCJzdGF0ZS5uYW1lIGZvciBzdGF0ZSBpbiBzdGF0ZXMgdHJhY2sgYnkgc3RhdGUuYWJicmV2aWF0aW9uXFxcIiBuZy1jaGFuZ2U9XFxcInNoaXBwaW5nU3RhdGVDaGFuZ2VkKCcjc2hpcHBpbmctc3RhdGUnKVxcXCIgY2xhc3M9XFxcInNwYW4xMiBzb2xvIHNlbGVjdHBpY2tlclxcXCI+PG9wdGlvbiB2YWx1ZT1cXFwiXFxcIiBkaXNhYmxlZCBzZWxlY3RlZD4oc2VsZWN0KTwvb3B0aW9uPjwvc2VsZWN0PjwvZGl2PjwvZGl2PjxoNSBjbGFzcz1cXFwic3BhbjVcXFwiPkl0ZW1zIGluIHlvdXIgc2hvcHBpbmcgYmFnIGFyZSBub3QgcmVzZXJ2ZWQgYW5kIG1heSBzZWxsIG91dC48L2g1PjwvZGl2PjxkaXYgbmctdmlldyBjbGFzcz1cXFwiejAgc2Nyb2xsLXNoYWRvdy1vdXRlclxcXCI+PC9kaXY+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIGRlc2t0b3AtZm9vdGVyIGhpZGRlbi1waG9uZSB6MVxcXCI+ICAgICAgIDxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0ZXh0LWNlbnRlclxcXCI+PGRpdiBjbGFzcz1cXFwibm9ydG9uXFxcIj48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgc3JjPVxcXCJodHRwczovL3NlYWwudmVyaXNpZ24uY29tL2dldHNlYWw/aG9zdF9uYW1lPXd3dy5zaG9wYmVhbS5jb20mYW1wO2FtcDtzaXplPVhTJmFtcDthbXA7dXNlX2ZsYXNoPU5PJmFtcDthbXA7dXNlX3RyYW5zcGFyZW50PVlFUyZhbXA7YW1wO2xhbmc9ZW5cXFwiPi8vLnRlc3QtdmVyaXNpZ24oc3R5bGU9XFxcIndpZHRoOiA4MHB4OyBoZWlnaHQ6IDQwcHg7IGJhY2tncm91bmQtY29sb3I6ICNGREJCMzA7XFxcIik8L3NjcmlwdD48L2Rpdj48ZGl2IGNsYXNzPVxcXCJmb290ZXItbWFpbi1idXR0b25cXFwiPjxidXR0b24gbmctY2xpY2s9XFxcInByZXZpb3VzU3RlcCgpXFxcIiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm18cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGFyZ2UgYnRuLXNlY29uZGFyeSBiYWNrXFxcIj57e2FjdGl2ZVN0ZXAoJ3JldmlldycsICdDbG9zZScsICdCYWNrJyl9fTwvYnV0dG9uPjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0aXRsZS1iYXIgcHVsbC1sZWZ0XFxcIj48aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+U29sZCBhbmQgU2hpcHBlZCB0byB5b3UgYnk8L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJsYWJlbDFcXFwiPldlbGwuY2E8L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3ByaXZhY3kuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgUHJpdmFjeSBOb3RpY2U8L2E+PC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS90ZXJtcy5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBUZXJtcyAmIENvbmRpdGlvbnM8L2E+PC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9zaGlwcGluZy1hbmQtcmV0dXJuc1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgU2hpcHBpbmcgJiBSZXR1cm5zPC9hPjwvaDU+PC9kaXY+PGRpdiBzdHlsZT1cXFwicGFkZGluZy1ib3R0b206IDEwcHhcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mb1xcXCI+V2VsbC5jYSBpcyBhIHJlZ2lzdGVyZWQgdHJhZGVtYXJrIG93bmVkIGJ5IFdlbGwuY2EgSW5jLiBUaGUgV2VsbC5jYSBlY29tbWVyY2Ugc2VydmljZXMgYXJlIHN1YmplY3QgdG8gdGhlIMKgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlIG9mIFdlbGwuY2EgSW5jLiBhbmQgY2FuIGJlIHJldmlld2VkIDxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS90ZXJtcy5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+aGVyZTwvYT48c3Bhbj4uIEpvaG5zb24gJiBKb2huc29uIEluYy4gKEpKSSkgaXMgcHJvdmlkaW5nIGluZm9ybWF0aW9uIGZyb20geW91ciBwcm9kdWN0IHB1cmNoYXNlIHJlcXVlc3QgdG8gdGhlIFdlbGwuY2Egc2l0ZSBmb3IgdGhlIHB1cmNoYXNlIG9mIEpKSSBwcm9kdWN0cyBhbmQgaXMgbm90IGFmZmlsaWF0ZWQgd2l0aCBXZWxsLmNhIEluYy47IG5vciBpcyBKSkkgcmVzcG9uc2libGUgZm9yIHRoZSBzYWxlIG9yIGRlbGl2ZXJ5IG9mIMKgSkpJIHByb2R1Y3RzIHRoYXQgeW91IHNlbGVjdCBmb3IgcHVyY2hhc2UgZnJvbSB0aGUgV2VsbC5jYSBzaXRlLjwvc3Bhbj48L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvIHB1bGwtbGVmdFxcXCI+V2VsbC5jYSBQaGFybWFjeSBBY2NyZWRpdGF0aW9uIGFzIG9mIE5vdmVtYmVyIDExdGggMjAxNTwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm8gcHVsbC1sZWZ0XFxcIj5PUEMgQ2VydGlmaWNhdGUgQWNjcmVkaXRhdGlvbiAjMzA0MjIyPC9oNT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPllvdXIgUGhhcm1hY2lzdCBpcyBQaGlsaXAgUm9zZW5iZXJnPC9oNT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPkNlbnRyYWwgRmlsbCBTb2x1dGlvbnMgSW5jLiAzNDYgTWlsbHdheSBBdmUuIFZhdWdoYW4sIE9OwqBMNEsgM1cxPC9oNT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPkNhbGwgV2VsbC5jYSBUb2xsIEZyZWU6IDEtODY2LTY0MC0zODAwPC9oNT48L2Rpdj48ZGl2IHN0eWxlPVxcXCJwYWRkaW5nOiAxMHB4IDBweFxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvIHB1bGwtbGVmdFxcXCI+KiogRnJlZSBFY29ub215IFNoaXBwaW5nIG9mZmVyZWQgYnkgV2VsbC5jYSBhcyBvZiBOb3ZlbWJlciAxMXRoIDIwMTUgb24gb3JkZXJzIG9mICQyOSBvciBtb3JlIChiZWZvcmUgdGF4ZXMgYW5kIHNoaXBwaW5nKSBpbiBDYW5hZGEgZXhjbHVkaW5nIHJlbW90ZSBhbmQgZGlmZmljdWx0IHRvIHNlcnZlIGxvY2F0aW9ucy4gU3ViamVjdCB0byBjaGFuZ2UgYXQgdGhlIGRpc2NyZXRpb24gb2YgV2VsbC5jYS4gQmFzZWQgb248YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2Evc2hpcHBpbmctYW5kLXJldHVybnNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFNoaXBwaW5nIGFuZCBSZXR1cm5zIHBvbGljeS48L2E+PC9oNT48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdmlzaWJsZS1waG9uZVxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+U29sZCBhbmQgU2hpcHBlZCB0byB5b3UgYnk8L2g1PjxoNSBjbGFzcz1cXFwibGFiZWwxXFxcIj5XZWxsLmNhPC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9wcml2YWN5Lmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFByaXZhY3kgTm90aWNlPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvdGVybXMuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgVGVybXMgJiBDb25kaXRpb25zPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2Evc2hpcHBpbmctYW5kLXJldHVybnNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFNoaXBwaW5nICYgUmV0dXJuczwvYT48L2g1PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OywgJnF1b3Q7Y29uZmlybSZxdW90OywgJnF1b3Q7JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInNwYW40IHN1bW1hcnlcXFwiPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDsmcXVvdDssICZxdW90O2Z1bGwtaGVpZ2h0JnF1b3Q7KVxcXCIgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInN1bW1hcnktY29udGFpbmVyXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc2VjdGlvblxcXCI+PGgzIGNsYXNzPVxcXCJsYWJlbDEgbGFyZ2UgaW5saW5lLWJsb2NrXFxcIj5TdW1tYXJ5PC9oMz48aDQgbmctcGx1cmFsaXplIGNvdW50PVxcXCJjYXJ0Lml0ZW1Db3VudFxcXCIgd2hlbj1cXFwieyZxdW90O29uZSZxdW90OzogJnF1b3Q7KHt9IEl0ZW0pJnF1b3Q7LCAmcXVvdDtvdGhlciZxdW90OzogJnF1b3Q7KHt9IEl0ZW1zKSZxdW90O31cXFwiPjwvaDQ+PC9kaXY+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIGNsYXNzPVxcXCJzcGFuMTIgY2FydC1pdGVtcy1jb250YWluZXIgaGlkZGVuLXBob25lXFxcIj48ZGl2IGNhcnQtaXRlbXMtaGUgc2lkZWJhciBjbGFzcz1cXFwiY2FydC1pdGVtcyBzY3JvbGwtc2hhZG93LW91dGVyIHNlY3Rpb24gbm8tcGFkIGZ1bGwtaGVpZ2h0XFxcIj48L2Rpdj48L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7JnF1b3Q7LCAmcXVvdDtzY3JvbGwtZm9vdGVyJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2Ugc3VidG90YWxcXFwiPlN1YnRvdGFsPC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57e2NhcnQuc3VidG90YWwgLyAxMDAgfCBjdXJyZW5jeX19PC9oND48aDMgY2xhc3M9XFxcImxhYmVsMSBsYXJnZSBmbG9hdC1wYWRcXFwiPlRheCAmIFNoaXBwaW5nICo8IS0tLmljb24taW5mby0yLmhpZGRlbi1waG9uZS0tPjwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cXFwiY2xlYXItbGFyZ2VcXFwiPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPlRheDwvaDQ+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBtb25leVxcXCI+e3t7bnVsbDogJy0tJ31bdGF4XSB8fCAodGF4IC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZVxcXCI+U2hpcHBpbmc8L2g0PjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2UgbW9uZXlcXFwiPnt7ezA6J0ZSRUUgKionLCBudWxsOiAnLS0nfVtzaGlwcGluZ10gfHwgKHNoaXBwaW5nIC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjxkaXYgbmctc2hvdz1cXFwiZGlzY291bnRcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPkRpc2NvdW50PC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57eyhkaXNjb3VudCAvIDEwMCB8IGN1cnJlbmN5KX19PC9oND48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc2VjdGlvbiB0b3RhbFxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDMgY2xhc3M9XFxcInNwYW42IGxhYmVsMSBsYXJnZVxcXCI+VG90YWw8L2gzPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFiZWwxIGxhcmdlIG1vbmV5XFxcIj57e3RvdGFsIC8gMTAwIHwgY3VycmVuY3l9fTwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImVzdGltYXRlZC1jb3N0c1xcXCI+KiBFc3RpbWF0ZWQgdGF4ZXMgJiBzaGlwcGluZzwvaDU+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIGZvb3RlclxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHZpc2libGUtcGhvbmVcXFwiPjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcIm5vcnRvbiBwdWxsLWxlZnRcXFwiPjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcImh0dHBzOi8vc2VhbC52ZXJpc2lnbi5jb20vZ2V0c2VhbD9ob3N0X25hbWU9d3d3LnNob3BiZWFtLmNvbSZhbXA7YW1wO3NpemU9WFMmYW1wO2FtcDt1c2VfZmxhc2g9Tk8mYW1wO2FtcDt1c2VfdHJhbnNwYXJlbnQ9WUVTJmFtcDthbXA7bGFuZz1lblxcXCI+PC9zY3JpcHQ+PCEtLS50ZXN0LXZlcmlzaWduKHN0eWxlPVxcXCJ3aWR0aDogODBweDsgaGVpZ2h0OiA0MHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjRkRCQjMwO1xcXCIpLS0+PC9kaXY+PGJ1dHRvbiBuZy1jbGljaz1cXFwicHJldmlvdXNTdGVwKClcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIGJ0bi1zZWNvbmRhcnkgYmFja1xcXCI+e3thY3RpdmVTdGVwKCdyZXZpZXcnLCAnQ2xvc2UnLCAnQmFjaycpfX08L2J1dHRvbj48YnV0dG9uIG5nLWNsaWNrPVxcXCJuZXh0U3RlcCgpXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtjaGVja291dCBidG4tc3VjY2VzcyZxdW90OywgJnF1b3Q7bmV4dCBidG4tcHJpbWFyeSZxdW90OylcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIHB1bGwtcmlnaHRcXFwiPnt7Zm9ybVN1Ym1pdFZhbHVlKCl9fSA+PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj5Qb3dlcmVkIGJ5XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnICcpID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnNob3BiZWFtLmNvbVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIGNsYXNzPVxcXCJib2xkXFxcIj5TaG9wYmVhbTwvYT48L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0YWdsaW5lIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcIml0YWxpYyB1cHBlcmNhc2VcXFwiPnNob3Agc2VhbWxlc3NseTwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48aDYgY2xhc3M9XFxcInVwcGVyY2FzZVxcXCI+PGEgaHJlZj1cXFwibWFpbHRvOmN1c3RvbWVyY2FyZUBzaG9wYmVhbS5jb21cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBuZy1jbGljaz1cXFwidHJhY2tOZWVkQXNzaXN0YW5jZUNsaWNrKClcXFwiPmN1c3RvbWVyY2FyZUBzaG9wYmVhbS5jb208L2E+PC9oNj5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNiBjbGFzcz1cXFwidXBwZXJjYXNlXFxcIj4gPGEgaHJlZj1cXFwidGVsOjgwMDQ5MDMyMTZcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5QaG9uZTogKDgwMCkgNDkwLTMyMTY8L2E+PC9oNj48L2Rpdj48ZGl2IHN0eWxlPVxcXCJtYXJnaW4tdG9wOiAxMHB4XFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48YnV0dG9uIG5nLWNsaWNrPVxcXCJuZXh0U3RlcCgpXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtjaGVja291dCBidG4tc3VjY2VzcyZxdW90OywgJnF1b3Q7bmV4dCBidG4tcHJpbWFyeSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlXFxcIj57e2Zvcm1TdWJtaXRWYWx1ZSgpfX08L2J1dHRvbj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdmlzaWJsZS1waG9uZVxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+U29sZCBhbmQgU2hpcHBlZCB0byB5b3UgYnk8L2g1PjxoNSBjbGFzcz1cXFwibGFiZWwxXFxcIj5XZWxsLmNhPC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9wcml2YWN5Lmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFByaXZhY3kgTm90aWNlPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvdGVybXMuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgVGVybXMgJiBDb25kaXRpb25zPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2Evc2hpcHBpbmctYW5kLXJldHVybnNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFNoaXBwaW5nICYgUmV0dXJuczwvYT48L2g1PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvYm9keT48ZGl2IGlkPVxcXCJlcnJvci1tb2RhbFxcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1tb2RhbC1vdmVycmlkZSBtb2RhbCBmYWRlIGhpZGVcXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+PGgzPk9oIE5vZXMhITwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+PHA+U29tZXRoaW5nIHdlbnQgd3JvbmcuIFdlJ3JlIHRyYWNraW5nIHRoaXMgaXNzdWUgd2l0aCB0aGUgSUQgc2hvd24gYmVsb3cgYW5kIG91ciB0ZWFtIGhhcyBiZWVuIG5vdGlmaWVkLiBXZSdyZSB2ZXJ5IHNvcnJ5IGZvciB0aGUgaW5jb252ZW5pZW5jZS48L3A+PHByZSBpZD1cXFwiZXJyb3ItbW9kYWwtZXJyb3JJZFxcXCI+PC9wcmU+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtZm9vdGVyXFxcIj48YnV0dG9uIGRhdGEtZGlzbWlzcz1cXFwibW9kYWxcXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPkRpc21pc3M8L2J1dHRvbj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJib290c3RyYXAtbW9kYWwtb3ZlcnJpZGUgbW9kYWwgaGlkZSBmYWRlIHJlbW92ZS1kaWFsb2dcXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGRhdGEtZGlzbWlzcz1cXFwibW9kYWxcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiY2xvc2VcXFwiPiZ0aW1lczs8L2J1dHRvbj48aDI+UmVtb3ZlIEl0ZW1zPC9oMj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1ib2R5XFxcIj48cCBuZy1wbHVyYWxpemUgY291bnQ9XFxcInNlbGVjdGVkSXRlbS5xdWFudGl0eVxcXCIgd2hlbj1cXFwieyZxdW90OzEmcXVvdDs6ICZxdW90O0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZW1vdmUge3tzZWxlY3RlZEl0ZW0ubmFtZX19PyZxdW90OywgJnF1b3Q7MiZxdW90OzogJnF1b3Q7WW91IGhhdmUgMiBvZiB7e3NlbGVjdGVkSXRlbS5uYW1lfX0gaW4geW91ciBjYXJ0LiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZW0gYm90aD8mcXVvdDssICZxdW90O290aGVyJnF1b3Q7OiAmcXVvdDtZb3UgaGF2ZSB7fSBvZiB7e3NlbGVjdGVkSXRlbS5uYW1lfX0gaW4geW91ciBjYXJ0LiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIGFsbCB7fT8mcXVvdDt9XFxcIiBjbGFzcz1cXFwibGVhZFxcXCI+PC9wPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWZvb3RlclxcXCI+PGEgbmctY2xpY2s9XFxcInJlbW92ZUNhbmNlbCgpXFxcIiBjbGFzcz1cXFwiYnRuXFxcIj5Obywga2VlcCBpdDwvYT48YSBuZy1jbGljaz1cXFwicmVtb3ZlQ29uZmlybSgpXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zdWNjZXNzXFxcIj5ZZXMsIHJlbW92ZSBpdDwvYT48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJwbGVhc2Utd2FpdFxcXCI+PGRpdiBjbGFzcz1cXFwiYm94XFxcIj48ZGl2IGNsYXNzPVxcXCJpbWctY29udGFpbmVyXFxcIj48L2Rpdj48cD5QbGVhc2UgV2FpdC4uLjwvcD48L2Rpdj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2Jvb3RzdHJhcC9ib290c3RyYXAuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9jaGVja291dC5idW5kbGUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwvaHRtbD5cIik7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn0pKGxvY2Fscylcbn0sJ2NoZWNrb3V0L2luZGV4JzogZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgbG9jYWxzID0gbG9jYWxzIHx8IHt9O1xuICAgIGxvY2Fsc1snYXNzZXRzJ10gPSBhc3NldHM7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgbG9jYWxzXyA9IChsb2NhbHMgfHwge30pLHJvbGxiYXJFbmFibGVkID0gbG9jYWxzXy5yb2xsYmFyRW5hYmxlZCxyb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4gPSBsb2NhbHNfLnJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbixhc3NldHMgPSBsb2NhbHNfLmFzc2V0cyx0aGVtZSA9IGxvY2Fsc18udGhlbWUsSE9TVCA9IGxvY2Fsc18uSE9TVDtidWYucHVzaChcIjwhRE9DVFlQRSBodG1sPjxodG1sIGxhbmc9XFxcImVuXFxcIj48aGVhZD48dGl0bGU+U2hvcGJlYW0gQ2hlY2tvdXQ8L3RpdGxlPjxtZXRhIGh0dHAtZXF1aXY9XFxcIkNvbnRlbnQtVHlwZVxcXCIgY29udGVudD1cXFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XFxcIj48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAgdXNlci1zY2FsYWJsZT1ub1xcXCI+XCIpO1xuaWYgKCByb2xsYmFyRW5hYmxlZClcbntcbmJ1Zi5wdXNoKFwiPCEtLSBSb2xsYmFyIC0tPjxzY3JpcHQ+dmFyIF9yb2xsYmFyQ29uZmlnID0ge1xcbiAgYWNjZXNzVG9rZW46ICdcIiArIChqYWRlLmVzY2FwZSgoamFkZS5pbnRlcnAgPSByb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4pID09IG51bGwgPyAnJyA6IGphZGUuaW50ZXJwKSkgKyBcIicsXFxuICBjYXB0dXJlVW5jYXVnaHQ6IHRydWUsXFxuICBwYXlsb2FkOiB7XFxuICAgIGVudmlyb25tZW50OiBcXFwicHJvZHVjdGlvblxcXCJcXG4gIH1cXG59O1xcbiFmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYil7dGhpcy5zaGltSWQ9KytoLHRoaXMubm90aWZpZXI9bnVsbCx0aGlzLnBhcmVudFNoaW09Yix0aGlzLmxvZ2dlcj1mdW5jdGlvbigpe30sYS5jb25zb2xlJiZ2b2lkIDA9PT1hLmNvbnNvbGUuc2hpbUlkJiYodGhpcy5sb2dnZXI9YS5jb25zb2xlLmxvZyl9ZnVuY3Rpb24gZChiLGMsZCl7IWRbNF0mJmEuX3JvbGxiYXJXcmFwcGVkRXJyb3ImJihkWzRdPWEuX3JvbGxiYXJXcmFwcGVkRXJyb3IsYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1udWxsKSxiLnVuY2F1Z2h0RXJyb3IuYXBwbHkoYixkKSxjJiZjLmFwcGx5KGEsZCl9ZnVuY3Rpb24gZShiKXt2YXIgZD1jO3JldHVybiBnKGZ1bmN0aW9uKCl7aWYodGhpcy5ub3RpZmllcilyZXR1cm4gdGhpcy5ub3RpZmllcltiXS5hcHBseSh0aGlzLm5vdGlmaWVyLGFyZ3VtZW50cyk7dmFyIGM9dGhpcyxlPVxcXCJzY29wZVxcXCI9PT1iO2UmJihjPW5ldyBkKHRoaXMpKTt2YXIgZj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCksZz17c2hpbTpjLG1ldGhvZDpiLGFyZ3M6Zix0czpuZXcgRGF0ZX07cmV0dXJuIGEuX3JvbGxiYXJTaGltUXVldWUucHVzaChnKSxlP2M6dm9pZCAwfSl9ZnVuY3Rpb24gZihhLGIpe2lmKGIuaGFzT3duUHJvcGVydHkmJmIuaGFzT3duUHJvcGVydHkoXFxcImFkZEV2ZW50TGlzdGVuZXJcXFwiKSl7dmFyIGM9Yi5hZGRFdmVudExpc3RlbmVyO2IuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihiLGQsZSl7Yy5jYWxsKHRoaXMsYixhLndyYXAoZCksZSl9O3ZhciBkPWIucmVtb3ZlRXZlbnRMaXN0ZW5lcjtiLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMpe2QuY2FsbCh0aGlzLGEsYiYmYi5fd3JhcHBlZD9iLl93cmFwcGVkOmIsYyl9fX1mdW5jdGlvbiBnKGEsYil7cmV0dXJuIGI9Ynx8dGhpcy5sb2dnZXIsZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGMpe2IoXFxcIlJvbGxiYXIgaW50ZXJuYWwgZXJyb3I6XFxcIixjKX19fXZhciBoPTA7Yy5pbml0PWZ1bmN0aW9uKGEsYil7dmFyIGU9Yi5nbG9iYWxBbGlhc3x8XFxcIlJvbGxiYXJcXFwiO2lmKFxcXCJvYmplY3RcXFwiPT10eXBlb2YgYVtlXSlyZXR1cm4gYVtlXTthLl9yb2xsYmFyU2hpbVF1ZXVlPVtdLGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9bnVsbCxiPWJ8fHt9O3ZhciBoPW5ldyBjO3JldHVybiBnKGZ1bmN0aW9uKCl7aWYoaC5jb25maWd1cmUoYiksYi5jYXB0dXJlVW5jYXVnaHQpe3ZhciBjPWEub25lcnJvcjthLm9uZXJyb3I9ZnVuY3Rpb24oKXt2YXIgYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7ZChoLGMsYSl9O3ZhciBnLGksaj1bXFxcIkV2ZW50VGFyZ2V0XFxcIixcXFwiV2luZG93XFxcIixcXFwiTm9kZVxcXCIsXFxcIkFwcGxpY2F0aW9uQ2FjaGVcXFwiLFxcXCJBdWRpb1RyYWNrTGlzdFxcXCIsXFxcIkNoYW5uZWxNZXJnZXJOb2RlXFxcIixcXFwiQ3J5cHRvT3BlcmF0aW9uXFxcIixcXFwiRXZlbnRTb3VyY2VcXFwiLFxcXCJGaWxlUmVhZGVyXFxcIixcXFwiSFRNTFVua25vd25FbGVtZW50XFxcIixcXFwiSURCRGF0YWJhc2VcXFwiLFxcXCJJREJSZXF1ZXN0XFxcIixcXFwiSURCVHJhbnNhY3Rpb25cXFwiLFxcXCJLZXlPcGVyYXRpb25cXFwiLFxcXCJNZWRpYUNvbnRyb2xsZXJcXFwiLFxcXCJNZXNzYWdlUG9ydFxcXCIsXFxcIk1vZGFsV2luZG93XFxcIixcXFwiTm90aWZpY2F0aW9uXFxcIixcXFwiU1ZHRWxlbWVudEluc3RhbmNlXFxcIixcXFwiU2NyZWVuXFxcIixcXFwiVGV4dFRyYWNrXFxcIixcXFwiVGV4dFRyYWNrQ3VlXFxcIixcXFwiVGV4dFRyYWNrTGlzdFxcXCIsXFxcIldlYlNvY2tldFxcXCIsXFxcIldlYlNvY2tldFdvcmtlclxcXCIsXFxcIldvcmtlclxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0XFxcIixcXFwiWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldFxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0VXBsb2FkXFxcIl07Zm9yKGc9MDtnPGoubGVuZ3RoOysrZylpPWpbZ10sYVtpXSYmYVtpXS5wcm90b3R5cGUmJmYoaCxhW2ldLnByb3RvdHlwZSl9cmV0dXJuIGFbZV09aCxofSxoLmxvZ2dlcikoKX0sYy5wcm90b3R5cGUubG9hZEZ1bGw9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZyhmdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcXFwic2NyaXB0XFxcIiksZT1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJzY3JpcHRcXFwiKVswXTthLnNyYz1kLnJvbGxiYXJKc1VybCxhLmFzeW5jPSFjLGEub25sb2FkPWYsZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGUpfSx0aGlzLmxvZ2dlciksZj1nKGZ1bmN0aW9uKCl7aWYodm9pZCAwPT09YS5fcm9sbGJhclBheWxvYWRRdWV1ZSlmb3IodmFyIGIsYyxkLGUsZj1uZXcgRXJyb3IoXFxcInJvbGxiYXIuanMgZGlkIG5vdCBsb2FkXFxcIik7Yj1hLl9yb2xsYmFyU2hpbVF1ZXVlLnNoaWZ0KCk7KWZvcihkPWIuYXJncyxlPTA7ZTxkLmxlbmd0aDsrK2UpaWYoYz1kW2VdLFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBjKXtjKGYpO2JyZWFrfX0sdGhpcy5sb2dnZXIpO2coZnVuY3Rpb24oKXtjP2UoKTphLmFkZEV2ZW50TGlzdGVuZXI/YS5hZGRFdmVudExpc3RlbmVyKFxcXCJsb2FkXFxcIixlLCExKTphLmF0dGFjaEV2ZW50KFxcXCJvbmxvYWRcXFwiLGUpfSx0aGlzLmxvZ2dlcikoKX0sYy5wcm90b3R5cGUud3JhcD1mdW5jdGlvbihiKXt0cnl7aWYoXFxcImZ1bmN0aW9uXFxcIiE9dHlwZW9mIGIpcmV0dXJuIGI7aWYoYi5faXNXcmFwKXJldHVybiBiO2lmKCFiLl93cmFwcGVkKXtiLl93cmFwcGVkPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChjKXt0aHJvdyBhLl9yb2xsYmFyV3JhcHBlZEVycm9yPWMsY319LGIuX3dyYXBwZWQuX2lzV3JhcD0hMDtmb3IodmFyIGMgaW4gYiliLmhhc093blByb3BlcnR5KGMpJiYoYi5fd3JhcHBlZFtjXT1iW2NdKX1yZXR1cm4gYi5fd3JhcHBlZH1jYXRjaChkKXtyZXR1cm4gYn19O2Zvcih2YXIgaT1cXFwibG9nLGRlYnVnLGluZm8sd2Fybix3YXJuaW5nLGVycm9yLGNyaXRpY2FsLGdsb2JhbCxjb25maWd1cmUsc2NvcGUsdW5jYXVnaHRFcnJvclxcXCIuc3BsaXQoXFxcIixcXFwiKSxqPTA7ajxpLmxlbmd0aDsrK2opYy5wcm90b3R5cGVbaVtqXV09ZShpW2pdKTt2YXIgaz1cXFwiLy9kMzdndnJ2YzB3dDRzMS5jbG91ZGZyb250Lm5ldC9qcy92MS4xL3JvbGxiYXIubWluLmpzXFxcIjtfcm9sbGJhckNvbmZpZy5yb2xsYmFySnNVcmw9X3JvbGxiYXJDb25maWcucm9sbGJhckpzVXJsfHxrO3ZhciBsPWMuaW5pdChhLF9yb2xsYmFyQ29uZmlnKTtsLmxvYWRGdWxsKGEsYiwhMSxfcm9sbGJhckNvbmZpZyl9KHdpbmRvdyxkb2N1bWVudCk7PC9zY3JpcHQ+XCIpO1xufVxuYnVmLnB1c2goXCI8c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgc3JjPVxcXCIvL3VzZS50eXBla2l0Lm5ldC9xcW01YWFnLmpzXFxcIj48L3NjcmlwdD48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+dHJ5e1R5cGVraXQubG9hZCgpO31jYXRjaChlKXt9XFxuPC9zY3JpcHQ+PGxpbmtcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdyZWwnOignc3R5bGVzaGVldCcpLCAnaHJlZic6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2Nzcy9jaGVja291dC1kZWZhdWx0LmNzcycpKSArIFwiXCIpIH0sIHtcInJlbFwiOnRydWUsXCJocmVmXCI6dHJ1ZX0pKSArIFwiPlwiKTtcbmlmIChhc3NldHMudXJsKCcvY3NzL2NhcnQtJyArIHRoZW1lICsgJy5jc3MnKSlcbntcbmJ1Zi5wdXNoKFwiPGxpbmtcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdyZWwnOignc3R5bGVzaGVldCcpLCAnaHJlZic6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2Nzcy9jaGVja291dC0nICsgdGhlbWUgKyAnLmNzcycpKSArIFwiXCIpIH0sIHtcInJlbFwiOnRydWUsXCJocmVmXCI6dHJ1ZX0pKSArIFwiPlwiKTtcbn1cbmJ1Zi5wdXNoKFwiPCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBuZy1jb250cm9sbGVyPVxcXCJNYWluQ3RybFxcXCIgc3R5bGU9XFxcIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBjbGFzcz1cXFwiYm9vdHN0cmFwLWJ1dHRvbi1vdmVycmlkZVxcXCI+PGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLWZsdWlkXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc3NsLXNlY3VyZWQtY29ubmVjdGlvbiB6MlxcXCI+PGg0PjxkaXYgY2xhc3M9XFxcImljb24tbG9ja2VkXFxcIj48L2Rpdj5TU0wgU2VjdXJlZCBDb25uZWN0aW9uPC9oND48aDQgbmctY2xpY2s9XFxcImdvVG9SZWZlcnJlcigpXFxcIiBjbGFzcz1cXFwiY2xvc2UtY2hlY2tvdXQgcHVsbC1yaWdodFxcXCI+PCEtLXwgQ2xvc2UtLT48ZGl2IGNsYXNzPVxcXCJpY29uLWNsb3NlXFxcIj48L2Rpdj48L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBoZWFkZXIgc2Nyb2xsLWhlYWRlciB6MVxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyXFxcIj48aDIgY2xhc3M9XFxcInRleHQtY2VudGVyIHVwcGVyY2FzZVxcXCI+Q2hlY2tvdXQ8L2gyPjwvZGl2PjwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OywgJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgbWluLWhlaWdodC1jb250YWluZXIgejBcXFwiPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OywgJnF1b3Q7c3BhbjEyJnF1b3Q7LCAmcXVvdDtzcGFuOCBsZWZ0JnF1b3Q7KSArICZxdW90OyAmcXVvdDsgKyBnZXRTdGVwKClcXFwiIGNsYXNzPVxcXCJtYWluXFxcIj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJzdGVwcyBzZWN0aW9uIHoxIHRleHQtY2VudGVyXFxcIj48ZGl2IHNiLWNoZWNrb3V0LXN0ZXBzLWFycm93PVxcXCJnZXRTdGVwKClcXFwiIGNsYXNzPVxcXCJkb3duLWFycm93XFxcIj48L2Rpdj48YSBuZy1jbGljaz1cXFwiZ29Ub1N0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPjxoMz48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7YmFkZ2UtaW5mbyZxdW90OylcXFwiIGNsYXNzPVxcXCJiYWRnZVxcXCI+MTwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+UmV2aWV3PGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PjwvZGl2PjwvZGl2PjwvaDM+PC9hPjxhIG5nLWNsaWNrPVxcXCJnb1RvU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj48aDM+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7LCAmcXVvdDtiYWRnZS1pbmZvJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJhZGdlXFxcIj4yPC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+U2hpcHBpbmcgJiBQYXltZW50PGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PjwvZGl2PjwvZGl2PjwvaDM+PC9hPjxhIG5nLWNsaWNrPVxcXCJnb1RvU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj48aDM+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtiYWRnZS1pbmZvJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJhZGdlXFxcIj4zPC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+T3JkZXIgU3VtbWFyeTwvZGl2PjwvaDM+PC9hPjwvZGl2PjxkaXYgbmctc2hvdz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb24gejEgaGlkZGVuLXBob25lXFxcIj48aDMgdG9vbHRpcD1cXFwiSGVyZSdzIGhvdyBzaGlwcGluZyBjYWxjdWxhdGlvbnMgd29yay4uLlxcXCIgcGxhY2VtZW50PVxcXCJib3R0b21cXFwiIGNsYXNzPVxcXCJzcGFuMTIgbGFiZWwxXFxcIj5Fc3RpbWF0ZWQgVGF4ICYgU2hpcHBpbmc8IS0tLmljb24taW5mby0yLS0+PC9oMz48L2Rpdj48ZGl2IG5nLXNob3c9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBzdGF0ZSBzZWN0aW9uIHoyXFxcIj48ZGl2IGNsYXNzPVxcXCJzcGFuMiB0ZXh0LWxlZnRcXFwiPjxoND5TdGF0ZTwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwic3BhbjVcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PHNlbGVjdCBpZD1cXFwic2hpcHBpbmctc3RhdGVcXFwiIG5nLWlmPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIG5nLW1vZGVsPVxcXCJ1c2VyLnNoaXBwaW5nLnN0YXRlXFxcIiBuZy1vcHRpb25zPVxcXCJzdGF0ZS5uYW1lIGZvciBzdGF0ZSBpbiBzdGF0ZXMgdHJhY2sgYnkgc3RhdGUuYWJicmV2aWF0aW9uXFxcIiBuZy1jaGFuZ2U9XFxcInNoaXBwaW5nU3RhdGVDaGFuZ2VkKCcjc2hpcHBpbmctc3RhdGUnKVxcXCIgY2xhc3M9XFxcInNwYW4xMiBzb2xvIHNlbGVjdHBpY2tlclxcXCI+PG9wdGlvbiB2YWx1ZT1cXFwiXFxcIiBkaXNhYmxlZCBzZWxlY3RlZD4oc2VsZWN0KTwvb3B0aW9uPjwvc2VsZWN0PjwvZGl2PjwvZGl2PjxoNSBjbGFzcz1cXFwic3BhbjVcXFwiPkl0ZW1zIGluIHlvdXIgc2hvcHBpbmcgYmFnIGFyZSBub3QgcmVzZXJ2ZWQgYW5kIG1heSBzZWxsIG91dC48L2g1PjwvZGl2PjxkaXYgbmctdmlldyBjbGFzcz1cXFwiejAgc2Nyb2xsLXNoYWRvdy1vdXRlclxcXCI+PC9kaXY+PC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7LCAmcXVvdDtjb25maXJtJnF1b3Q7LCAmcXVvdDsmcXVvdDspXFxcIiBjbGFzcz1cXFwic3BhbjQgc3VtbWFyeVxcXCI+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDssICZxdW90OyZxdW90OywgJnF1b3Q7ZnVsbC1oZWlnaHQmcXVvdDspXFxcIiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwic3VtbWFyeS1jb250YWluZXJcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48aDMgY2xhc3M9XFxcImxhYmVsMSBsYXJnZSBpbmxpbmUtYmxvY2tcXFwiPlN1bW1hcnk8L2gzPjxoNCBuZy1wbHVyYWxpemUgY291bnQ9XFxcImNhcnQuaXRlbUNvdW50XFxcIiB3aGVuPVxcXCJ7JnF1b3Q7b25lJnF1b3Q7OiAmcXVvdDsoe30gSXRlbSkmcXVvdDssICZxdW90O290aGVyJnF1b3Q7OiAmcXVvdDsoe30gSXRlbXMpJnF1b3Q7fVxcXCI+PC9oND48L2Rpdj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInNwYW4xMiBjYXJ0LWl0ZW1zLWNvbnRhaW5lciBoaWRkZW4tcGhvbmVcXFwiPjxkaXYgY2FydC1pdGVtcyBzaWRlYmFyIGNsYXNzPVxcXCJjYXJ0LWl0ZW1zIHNjcm9sbC1zaGFkb3ctb3V0ZXIgc2VjdGlvbiBuby1wYWQgZnVsbC1oZWlnaHRcXFwiPjwvZGl2PjwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDsmcXVvdDssICZxdW90O3Njcm9sbC1mb290ZXImcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb25cXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBzdWJ0b3RhbFxcXCI+U3VidG90YWw8L2g0PjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2UgbW9uZXlcXFwiPnt7Y2FydC5zdWJ0b3RhbCAvIDEwMCB8IGN1cnJlbmN5fX08L2g0PjxoMyBjbGFzcz1cXFwibGFiZWwxIGxhcmdlIGZsb2F0LXBhZFxcXCI+VGF4ICYgU2hpcHBpbmc8IS0tLmljb24taW5mby0yLmhpZGRlbi1waG9uZS0tPjwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cXFwiY2xlYXItbGFyZ2VcXFwiPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPlRheDwvaDQ+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBtb25leVxcXCI+e3t7bnVsbDogJy0tJ31bdGF4XSB8fCAodGF4IC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZVxcXCI+U2hpcHBpbmc8L2g0PjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2UgbW9uZXlcXFwiPnt7ezA6J0ZSRUUnLCBudWxsOiAnLS0nfVtzaGlwcGluZ10gfHwgKHNoaXBwaW5nIC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjxkaXYgbmctc2hvdz1cXFwiZGlzY291bnRcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPkRpc2NvdW50PC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57eyhkaXNjb3VudCAvIDEwMCB8IGN1cnJlbmN5KX19PC9oND48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc2VjdGlvbiB0b3RhbFxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDMgY2xhc3M9XFxcInNwYW42IGxhYmVsMSBsYXJnZVxcXCI+VG90YWw8L2gzPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFiZWwxIGxhcmdlIG1vbmV5XFxcIj57e3RvdGFsIC8gMTAwIHwgY3VycmVuY3l9fTwvaDQ+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIGZvb3RlclxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHZpc2libGUtcGhvbmVcXFwiPjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcIm5vcnRvbiBwdWxsLWxlZnRcXFwiPjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcImh0dHBzOi8vc2VhbC52ZXJpc2lnbi5jb20vZ2V0c2VhbD9ob3N0X25hbWU9d3d3LnNob3BiZWFtLmNvbSZhbXA7YW1wO3NpemU9WFMmYW1wO2FtcDt1c2VfZmxhc2g9Tk8mYW1wO2FtcDt1c2VfdHJhbnNwYXJlbnQ9WUVTJmFtcDthbXA7bGFuZz1lblxcXCI+PC9zY3JpcHQ+PCEtLS50ZXN0LXZlcmlzaWduKHN0eWxlPVxcXCJ3aWR0aDogODBweDsgaGVpZ2h0OiA0MHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjRkRCQjMwO1xcXCIpLS0+PC9kaXY+PGJ1dHRvbiBuZy1jbGljaz1cXFwicHJldmlvdXNTdGVwKClcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIGJ0bi1zZWNvbmRhcnkgYmFjayBwdWxsLWxlZnRcXFwiPnt7YWN0aXZlU3RlcCgncmV2aWV3JywgJ0Nsb3NlJywgJ0JhY2snKX19PC9idXR0b24+PGJ1dHRvbiBuZy1jbGljaz1cXFwibmV4dFN0ZXAoKVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7Y2hlY2tvdXQgYnRuLXN1Y2Nlc3MmcXVvdDssICZxdW90O25leHQgYnRuLXByaW1hcnkmcXVvdDspXFxcIiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XFxcIj57e2Zvcm1TdWJtaXRWYWx1ZSgpfX0gPjwvYnV0dG9uPjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0ZXh0LXJpZ2h0XFxcIj48aDQgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj5Qb3dlcmVkIGJ5XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnICcpID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnNob3BiZWFtLmNvbVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIGNsYXNzPVxcXCJib2xkXFxcIj5TaG9wYmVhbTwvYT48L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0YWdsaW5lIHRleHQtcmlnaHRcXFwiPjxoNCBjbGFzcz1cXFwiaXRhbGljIHVwcGVyY2FzZVxcXCI+c2hvcCBzZWFtbGVzc2x5PC9oND48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdmlzaWJsZS1waG9uZVxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyXFxcIj48aDUgY2xhc3M9XFxcImJsb2NrIGxhcmdlIGxhYmVsMSB0ZXh0LWNlbnRlclxcXCI+TmVlZCBhc3Npc3RhbmNlPzwvaDU+PGg1IGNsYXNzPVxcXCJibG9jayBsYXJnZSB0ZXh0LWNlbnRlclxcXCI+RW1haWwgY3VzdG9tZXIgY2FyZSBhdCZuYnNwOzxhIGhyZWY9XFxcIm1haWx0bzpjdXN0b21lcmNhcmVAc2hvcGJlYW0uY29tP1N1YmplY3Q9T3JkZXIlMjBDaGVja291dFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIG5nLWNsaWNrPVxcXCJ0cmFja05lZWRBc3Npc3RhbmNlQ2xpY2soKVxcXCI+Y3VzdG9tZXJjYXJlQHNob3BiZWFtLmNvbTwvYT48L2g1PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBkZXNrdG9wLWZvb3RlciBoaWRkZW4tcGhvbmUgejFcXFwiPjxkaXYgY2xhc3M9XFxcInNwYW44IHRleHQtY2VudGVyXFxcIj48ZGl2IGNsYXNzPVxcXCJub3J0b24gcHVsbC1sZWZ0XFxcIj48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgc3JjPVxcXCJodHRwczovL3NlYWwudmVyaXNpZ24uY29tL2dldHNlYWw/aG9zdF9uYW1lPXd3dy5zaG9wYmVhbS5jb20mYW1wO2FtcDtzaXplPVhTJmFtcDthbXA7dXNlX2ZsYXNoPU5PJmFtcDthbXA7dXNlX3RyYW5zcGFyZW50PVlFUyZhbXA7YW1wO2xhbmc9ZW5cXFwiPjwvc2NyaXB0PjwhLS0udGVzdC12ZXJpc2lnbihzdHlsZT1cXFwid2lkdGg6IDgwcHg7IGhlaWdodDogNDBweDsgYmFja2dyb3VuZC1jb2xvcjogI0ZEQkIzMDtcXFwiKS0tPjwvZGl2PjxkaXYgY2xhc3M9XFxcImZvb3Rlci1tYWluLWJ1dHRvblxcXCI+PGJ1dHRvbiBuZy1jbGljaz1cXFwicHJldmlvdXNTdGVwKClcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybXxyZXZpZXcmcXVvdDspXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1sYXJnZSBidG4tc2Vjb25kYXJ5IGJhY2tcXFwiPnt7YWN0aXZlU3RlcCgncmV2aWV3JywgJ0Nsb3NlJywgJ0JhY2snKX19PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRpdGxlLWJhclxcXCI+PGg1IGNsYXNzPVxcXCJsYXJnZSBsYWJlbDFcXFwiPk5lZWQgYXNzaXN0YW5jZT88L2g1PjxoNSBjbGFzcz1cXFwibGFyZ2VcXFwiPjxhIGhyZWY9XFxcIm1haWx0bzpjdXN0b21lcmNhcmVAc2hvcGJlYW0uY29tP1N1YmplY3Q9T3JkZXIlMjBDaGVja291dFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIG5nLWNsaWNrPVxcXCJ0cmFja05lZWRBc3Npc3RhbmNlQ2xpY2soKVxcXCI+Y3VzdG9tZXJjYXJlQHNob3BiZWFtLmNvbTwvYT48c3Bhbj4gb3I8L3NwYW4+PGEgaHJlZj1cXFwidGVsOjgwMDQ5MDMyMTZcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj4gKDgwMCkgNDkwLTMyMTY8L2E+PC9oNT48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJzcGFuNCB0ZXh0LWNlbnRlciBzdW1tYXJ5XFxcIj48YnV0dG9uIG5nLWNsaWNrPVxcXCJuZXh0U3RlcCgpXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtjaGVja291dCBidG4tc3VjY2VzcyZxdW90OywgJnF1b3Q7bmV4dCBidG4tcHJpbWFyeSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlXFxcIj57e2Zvcm1TdWJtaXRWYWx1ZSgpfX08L2J1dHRvbj48L2Rpdj48L2Rpdj48L2Rpdj48L2JvZHk+PGRpdiBpZD1cXFwiZXJyb3ItbW9kYWxcXFwiIGNsYXNzPVxcXCJib290c3RyYXAtbW9kYWwtb3ZlcnJpZGUgbW9kYWwgZmFkZSBoaWRlXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPjxoMz5PaCBOb2VzISE8L2gzPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPjxwPlNvbWV0aGluZyB3ZW50IHdyb25nLiBXZSdyZSB0cmFja2luZyB0aGlzIGlzc3VlIHdpdGggdGhlIElEIHNob3duIGJlbG93IGFuZCBvdXIgdGVhbSBoYXMgYmVlbiBub3RpZmllZC4gV2UncmUgdmVyeSBzb3JyeSBmb3IgdGhlIGluY29udmVuaWVuY2UuPC9wPjxwcmUgaWQ9XFxcImVycm9yLW1vZGFsLWVycm9ySWRcXFwiPjwvcHJlPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWZvb3RlclxcXCI+PGJ1dHRvbiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5EaXNtaXNzPC9idXR0b24+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwiYm9vdHN0cmFwLW1vZGFsLW92ZXJyaWRlIG1vZGFsIGhpZGUgZmFkZSByZW1vdmUtZGlhbG9nXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIj4mdGltZXM7PC9idXR0b24+PGgyPlJlbW92ZSBJdGVtczwvaDI+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+PHAgbmctcGx1cmFsaXplIGNvdW50PVxcXCJzZWxlY3RlZEl0ZW0ucXVhbnRpdHlcXFwiIHdoZW49XFxcInsmcXVvdDsxJnF1b3Q7OiAmcXVvdDtBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHt7c2VsZWN0ZWRJdGVtLm5hbWV9fT8mcXVvdDssICZxdW90OzImcXVvdDs6ICZxdW90O1lvdSBoYXZlIDIgb2Yge3tzZWxlY3RlZEl0ZW0ubmFtZX19IGluIHlvdXIgY2FydC4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGVtIGJvdGg/JnF1b3Q7LCAmcXVvdDtvdGhlciZxdW90OzogJnF1b3Q7WW91IGhhdmUge30gb2Yge3tzZWxlY3RlZEl0ZW0ubmFtZX19IGluIHlvdXIgY2FydC4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSBhbGwge30/JnF1b3Q7fVxcXCIgY2xhc3M9XFxcImxlYWRcXFwiPjwvcD48L2Rpdj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1mb290ZXJcXFwiPjxhIG5nLWNsaWNrPVxcXCJyZW1vdmVDYW5jZWwoKVxcXCIgY2xhc3M9XFxcImJ0blxcXCI+Tm8sIGtlZXAgaXQ8L2E+PGEgbmctY2xpY2s9XFxcInJlbW92ZUNvbmZpcm0oKVxcXCIgY2xhc3M9XFxcImJ0biBidG4tc3VjY2Vzc1xcXCI+WWVzLCByZW1vdmUgaXQ8L2E+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwicGxlYXNlLXdhaXRcXFwiPjxkaXYgY2xhc3M9XFxcImJveFxcXCI+PGRpdiBjbGFzcz1cXFwiaW1nLWNvbnRhaW5lclxcXCI+PC9kaXY+PHA+UGxlYXNlIFdhaXQuLi48L3A+PC9kaXY+PC9kaXY+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9ib290c3RyYXAvYm9vdHN0cmFwLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvY2hlY2tvdXQuYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2h0bWw+XCIpOztyZXR1cm4gYnVmLmpvaW4oXCJcIik7XG59KShsb2NhbHMpXG59LCdjaGVja291dC9sYWNvc3RlJzogZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgbG9jYWxzID0gbG9jYWxzIHx8IHt9O1xuICAgIGxvY2Fsc1snYXNzZXRzJ10gPSBhc3NldHM7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgbG9jYWxzXyA9IChsb2NhbHMgfHwge30pLHJvbGxiYXJFbmFibGVkID0gbG9jYWxzXy5yb2xsYmFyRW5hYmxlZCxyb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4gPSBsb2NhbHNfLnJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbixhc3NldHMgPSBsb2NhbHNfLmFzc2V0cyxIT1NUID0gbG9jYWxzXy5IT1NUO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBDaGVja291dDwvdGl0bGU+PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcXFwiPjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCB1c2VyLXNjYWxhYmxlPW5vXFxcIj5cIik7XG5pZiAoIHJvbGxiYXJFbmFibGVkKVxue1xuYnVmLnB1c2goXCI8IS0tIFJvbGxiYXIgLS0+PHNjcmlwdD52YXIgX3JvbGxiYXJDb25maWcgPSB7XFxuICBhY2Nlc3NUb2tlbjogJ1wiICsgKGphZGUuZXNjYXBlKChqYWRlLmludGVycCA9IHJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbikgPT0gbnVsbCA/ICcnIDogamFkZS5pbnRlcnApKSArIFwiJyxcXG4gIGNhcHR1cmVVbmNhdWdodDogdHJ1ZSxcXG4gIHBheWxvYWQ6IHtcXG4gICAgZW52aXJvbm1lbnQ6IFxcXCJwcm9kdWN0aW9uXFxcIlxcbiAgfVxcbn07XFxuIWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhiKXt0aGlzLnNoaW1JZD0rK2gsdGhpcy5ub3RpZmllcj1udWxsLHRoaXMucGFyZW50U2hpbT1iLHRoaXMubG9nZ2VyPWZ1bmN0aW9uKCl7fSxhLmNvbnNvbGUmJnZvaWQgMD09PWEuY29uc29sZS5zaGltSWQmJih0aGlzLmxvZ2dlcj1hLmNvbnNvbGUubG9nKX1mdW5jdGlvbiBkKGIsYyxkKXshZFs0XSYmYS5fcm9sbGJhcldyYXBwZWRFcnJvciYmKGRbNF09YS5fcm9sbGJhcldyYXBwZWRFcnJvcixhLl9yb2xsYmFyV3JhcHBlZEVycm9yPW51bGwpLGIudW5jYXVnaHRFcnJvci5hcHBseShiLGQpLGMmJmMuYXBwbHkoYSxkKX1mdW5jdGlvbiBlKGIpe3ZhciBkPWM7cmV0dXJuIGcoZnVuY3Rpb24oKXtpZih0aGlzLm5vdGlmaWVyKXJldHVybiB0aGlzLm5vdGlmaWVyW2JdLmFwcGx5KHRoaXMubm90aWZpZXIsYXJndW1lbnRzKTt2YXIgYz10aGlzLGU9XFxcInNjb3BlXFxcIj09PWI7ZSYmKGM9bmV3IGQodGhpcykpO3ZhciBmPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSxnPXtzaGltOmMsbWV0aG9kOmIsYXJnczpmLHRzOm5ldyBEYXRlfTtyZXR1cm4gYS5fcm9sbGJhclNoaW1RdWV1ZS5wdXNoKGcpLGU/Yzp2b2lkIDB9KX1mdW5jdGlvbiBmKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eSYmYi5oYXNPd25Qcm9wZXJ0eShcXFwiYWRkRXZlbnRMaXN0ZW5lclxcXCIpKXt2YXIgYz1iLmFkZEV2ZW50TGlzdGVuZXI7Yi5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGIsZCxlKXtjLmNhbGwodGhpcyxiLGEud3JhcChkKSxlKX07dmFyIGQ9Yi5yZW1vdmVFdmVudExpc3RlbmVyO2IucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyl7ZC5jYWxsKHRoaXMsYSxiJiZiLl93cmFwcGVkP2IuX3dyYXBwZWQ6YixjKX19fWZ1bmN0aW9uIGcoYSxiKXtyZXR1cm4gYj1ifHx0aGlzLmxvZ2dlcixmdW5jdGlvbigpe3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goYyl7YihcXFwiUm9sbGJhciBpbnRlcm5hbCBlcnJvcjpcXFwiLGMpfX19dmFyIGg9MDtjLmluaXQ9ZnVuY3Rpb24oYSxiKXt2YXIgZT1iLmdsb2JhbEFsaWFzfHxcXFwiUm9sbGJhclxcXCI7aWYoXFxcIm9iamVjdFxcXCI9PXR5cGVvZiBhW2VdKXJldHVybiBhW2VdO2EuX3JvbGxiYXJTaGltUXVldWU9W10sYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1udWxsLGI9Ynx8e307dmFyIGg9bmV3IGM7cmV0dXJuIGcoZnVuY3Rpb24oKXtpZihoLmNvbmZpZ3VyZShiKSxiLmNhcHR1cmVVbmNhdWdodCl7dmFyIGM9YS5vbmVycm9yO2Eub25lcnJvcj1mdW5jdGlvbigpe3ZhciBhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtkKGgsYyxhKX07dmFyIGcsaSxqPVtcXFwiRXZlbnRUYXJnZXRcXFwiLFxcXCJXaW5kb3dcXFwiLFxcXCJOb2RlXFxcIixcXFwiQXBwbGljYXRpb25DYWNoZVxcXCIsXFxcIkF1ZGlvVHJhY2tMaXN0XFxcIixcXFwiQ2hhbm5lbE1lcmdlck5vZGVcXFwiLFxcXCJDcnlwdG9PcGVyYXRpb25cXFwiLFxcXCJFdmVudFNvdXJjZVxcXCIsXFxcIkZpbGVSZWFkZXJcXFwiLFxcXCJIVE1MVW5rbm93bkVsZW1lbnRcXFwiLFxcXCJJREJEYXRhYmFzZVxcXCIsXFxcIklEQlJlcXVlc3RcXFwiLFxcXCJJREJUcmFuc2FjdGlvblxcXCIsXFxcIktleU9wZXJhdGlvblxcXCIsXFxcIk1lZGlhQ29udHJvbGxlclxcXCIsXFxcIk1lc3NhZ2VQb3J0XFxcIixcXFwiTW9kYWxXaW5kb3dcXFwiLFxcXCJOb3RpZmljYXRpb25cXFwiLFxcXCJTVkdFbGVtZW50SW5zdGFuY2VcXFwiLFxcXCJTY3JlZW5cXFwiLFxcXCJUZXh0VHJhY2tcXFwiLFxcXCJUZXh0VHJhY2tDdWVcXFwiLFxcXCJUZXh0VHJhY2tMaXN0XFxcIixcXFwiV2ViU29ja2V0XFxcIixcXFwiV2ViU29ja2V0V29ya2VyXFxcIixcXFwiV29ya2VyXFxcIixcXFwiWE1MSHR0cFJlcXVlc3RcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0XFxcIixcXFwiWE1MSHR0cFJlcXVlc3RVcGxvYWRcXFwiXTtmb3IoZz0wO2c8ai5sZW5ndGg7KytnKWk9altnXSxhW2ldJiZhW2ldLnByb3RvdHlwZSYmZihoLGFbaV0ucHJvdG90eXBlKX1yZXR1cm4gYVtlXT1oLGh9LGgubG9nZ2VyKSgpfSxjLnByb3RvdHlwZS5sb2FkRnVsbD1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1nKGZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFxcXCJzY3JpcHRcXFwiKSxlPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInNjcmlwdFxcXCIpWzBdO2Euc3JjPWQucm9sbGJhckpzVXJsLGEuYXN5bmM9IWMsYS5vbmxvYWQ9ZixlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsZSl9LHRoaXMubG9nZ2VyKSxmPWcoZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1hLl9yb2xsYmFyUGF5bG9hZFF1ZXVlKWZvcih2YXIgYixjLGQsZSxmPW5ldyBFcnJvcihcXFwicm9sbGJhci5qcyBkaWQgbm90IGxvYWRcXFwiKTtiPWEuX3JvbGxiYXJTaGltUXVldWUuc2hpZnQoKTspZm9yKGQ9Yi5hcmdzLGU9MDtlPGQubGVuZ3RoOysrZSlpZihjPWRbZV0sXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGMpe2MoZik7YnJlYWt9fSx0aGlzLmxvZ2dlcik7ZyhmdW5jdGlvbigpe2M/ZSgpOmEuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoXFxcImxvYWRcXFwiLGUsITEpOmEuYXR0YWNoRXZlbnQoXFxcIm9ubG9hZFxcXCIsZSl9LHRoaXMubG9nZ2VyKSgpfSxjLnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGIpe3RyeXtpZihcXFwiZnVuY3Rpb25cXFwiIT10eXBlb2YgYilyZXR1cm4gYjtpZihiLl9pc1dyYXApcmV0dXJuIGI7aWYoIWIuX3dyYXBwZWQpe2IuX3dyYXBwZWQ9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGIuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGMpe3Rocm93IGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9YyxjfX0sYi5fd3JhcHBlZC5faXNXcmFwPSEwO2Zvcih2YXIgYyBpbiBiKWIuaGFzT3duUHJvcGVydHkoYykmJihiLl93cmFwcGVkW2NdPWJbY10pfXJldHVybiBiLl93cmFwcGVkfWNhdGNoKGQpe3JldHVybiBifX07Zm9yKHZhciBpPVxcXCJsb2csZGVidWcsaW5mbyx3YXJuLHdhcm5pbmcsZXJyb3IsY3JpdGljYWwsZ2xvYmFsLGNvbmZpZ3VyZSxzY29wZSx1bmNhdWdodEVycm9yXFxcIi5zcGxpdChcXFwiLFxcXCIpLGo9MDtqPGkubGVuZ3RoOysrailjLnByb3RvdHlwZVtpW2pdXT1lKGlbal0pO3ZhciBrPVxcXCIvL2QzN2d2cnZjMHd0NHMxLmNsb3VkZnJvbnQubmV0L2pzL3YxLjEvcm9sbGJhci5taW4uanNcXFwiO19yb2xsYmFyQ29uZmlnLnJvbGxiYXJKc1VybD1fcm9sbGJhckNvbmZpZy5yb2xsYmFySnNVcmx8fGs7dmFyIGw9Yy5pbml0KGEsX3JvbGxiYXJDb25maWcpO2wubG9hZEZ1bGwoYSxiLCExLF9yb2xsYmFyQ29uZmlnKX0od2luZG93LGRvY3VtZW50KTs8L3NjcmlwdD5cIik7XG59XG5idWYucHVzaChcIjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcIi8vdXNlLnR5cGVraXQubmV0L3FxbTVhYWcuanNcXFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj50cnl7VHlwZWtpdC5sb2FkKCk7fWNhdGNoKGUpe31cXG48L3NjcmlwdD48bGlua1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3JlbCc6KCdzdHlsZXNoZWV0JyksICdocmVmJzooXCJcIiArIChhc3NldHMudXJsKCcvY3NzL2NoZWNrb3V0LWxhY29zdGUuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBuZy1jb250cm9sbGVyPVxcXCJNYWluQ3RybFxcXCIgc3R5bGU9XFxcIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBjbGFzcz1cXFwiYm9vdHN0cmFwLWJ1dHRvbi1vdmVycmlkZVxcXCI+PGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLWZsdWlkXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc3NsLXNlY3VyZWQtY29ubmVjdGlvbiB6MlxcXCI+PGg0PjxkaXYgY2xhc3M9XFxcImljb24tbG9ja2VkXFxcIj48L2Rpdj5TU0wgU2VjdXJlZCBDb25uZWN0aW9uPC9oND48aDQgbmctY2xpY2s9XFxcImdvVG9SZWZlcnJlcigpXFxcIiBjbGFzcz1cXFwiY2xvc2UtY2hlY2tvdXQgcHVsbC1yaWdodFxcXCI+PCEtLXwgQ2xvc2UtLT48ZGl2IGNsYXNzPVxcXCJpY29uLWNsb3NlXFxcIj48L2Rpdj48L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBoZWFkZXIgc2Nyb2xsLWhlYWRlciB6MVxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyXFxcIj48aDIgY2xhc3M9XFxcInRleHQtY2VudGVyIHVwcGVyY2FzZVxcXCI+Q2hlY2tvdXQ8L2gyPjwvZGl2PjwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OywgJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgbWluLWhlaWdodC1jb250YWluZXIgejBcXFwiPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OywgJnF1b3Q7c3BhbjEyJnF1b3Q7LCAmcXVvdDtzcGFuOCBsZWZ0JnF1b3Q7KSArICZxdW90OyAmcXVvdDsgKyBnZXRTdGVwKClcXFwiIGNsYXNzPVxcXCJtYWluXFxcIj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJzdGVwcyBzZWN0aW9uIHoxIHRleHQtY2VudGVyXFxcIj48ZGl2IHNiLWNoZWNrb3V0LXN0ZXBzLWFycm93PVxcXCJnZXRTdGVwKClcXFwiIGNsYXNzPVxcXCJkb3duLWFycm93XFxcIj48L2Rpdj48YSBuZy1jbGljaz1cXFwiZ29Ub1N0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPjxoMz48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7YmFkZ2UtaW5mbyZxdW90OylcXFwiIGNsYXNzPVxcXCJiYWRnZVxcXCI+MTwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+UmV2aWV3PGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PjwvZGl2PjwvZGl2PjwvaDM+PC9hPjxhIG5nLWNsaWNrPVxcXCJnb1RvU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj48aDM+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7LCAmcXVvdDtiYWRnZS1pbmZvJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJhZGdlXFxcIj4yPC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+U2hpcHBpbmcgJiBQYXltZW50PGRpdiBjbGFzcz1cXFwiZGl2aWRlclxcXCI+PjwvZGl2PjwvZGl2PjwvaDM+PC9hPjxhIG5nLWNsaWNrPVxcXCJnb1RvU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7KVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj48aDM+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtiYWRnZS1pbmZvJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJhZGdlXFxcIj4zPC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcFxcXCI+T3JkZXIgU3VtbWFyeTwvZGl2PjwvaDM+PC9hPjwvZGl2PjxkaXYgbmctc2hvdz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb24gejEgaGlkZGVuLXBob25lXFxcIj48aDMgdG9vbHRpcD1cXFwiSGVyZSdzIGhvdyBzaGlwcGluZyBjYWxjdWxhdGlvbnMgd29yay4uLlxcXCIgcGxhY2VtZW50PVxcXCJib3R0b21cXFwiIGNsYXNzPVxcXCJzcGFuMTIgbGFiZWwxXFxcIj5Fc3RpbWF0ZWQgVGF4ICYgU2hpcHBpbmc8IS0tLmljb24taW5mby0yLS0+PC9oMz48L2Rpdj48ZGl2IG5nLXNob3c9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBzdGF0ZSBzZWN0aW9uIHoyXFxcIj48ZGl2IGNsYXNzPVxcXCJzcGFuMiB0ZXh0LWxlZnRcXFwiPjxoND5TdGF0ZTwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwic3BhbjVcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PHNlbGVjdCBpZD1cXFwic2hpcHBpbmctc3RhdGVcXFwiIG5nLWlmPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIG5nLW1vZGVsPVxcXCJ1c2VyLnNoaXBwaW5nLnN0YXRlXFxcIiBuZy1vcHRpb25zPVxcXCJzdGF0ZS5uYW1lIGZvciBzdGF0ZSBpbiBzdGF0ZXMgdHJhY2sgYnkgc3RhdGUuYWJicmV2aWF0aW9uXFxcIiBuZy1jaGFuZ2U9XFxcInNoaXBwaW5nU3RhdGVDaGFuZ2VkKCcjc2hpcHBpbmctc3RhdGUnKVxcXCIgY2xhc3M9XFxcInNwYW4xMiBzb2xvIHNlbGVjdHBpY2tlclxcXCI+PG9wdGlvbiB2YWx1ZT1cXFwiXFxcIiBkaXNhYmxlZCBzZWxlY3RlZD4oc2VsZWN0KTwvb3B0aW9uPjwvc2VsZWN0PjwvZGl2PjwvZGl2PjxoNSBjbGFzcz1cXFwic3BhbjVcXFwiPkl0ZW1zIGluIHlvdXIgc2hvcHBpbmcgYmFnIGFyZSBub3QgcmVzZXJ2ZWQgYW5kIG1heSBzZWxsIG91dC48L2g1PjwvZGl2PjxkaXYgbmctdmlldyBjbGFzcz1cXFwiejAgc2Nyb2xsLXNoYWRvdy1vdXRlclxcXCI+PC9kaXY+PC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7LCAmcXVvdDtjb25maXJtJnF1b3Q7LCAmcXVvdDsmcXVvdDspXFxcIiBjbGFzcz1cXFwic3BhbjQgc3VtbWFyeVxcXCI+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDssICZxdW90OyZxdW90OywgJnF1b3Q7ZnVsbC1oZWlnaHQmcXVvdDspXFxcIiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwic3VtbWFyeS1jb250YWluZXJcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48aDMgY2xhc3M9XFxcImxhYmVsMSBsYXJnZSBpbmxpbmUtYmxvY2tcXFwiPlN1bW1hcnk8L2gzPjxoNCBuZy1wbHVyYWxpemUgY291bnQ9XFxcImNhcnQuaXRlbUNvdW50XFxcIiB3aGVuPVxcXCJ7JnF1b3Q7b25lJnF1b3Q7OiAmcXVvdDsoe30gSXRlbSkmcXVvdDssICZxdW90O290aGVyJnF1b3Q7OiAmcXVvdDsoe30gSXRlbXMpJnF1b3Q7fVxcXCI+PC9oND48L2Rpdj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInNwYW4xMiBjYXJ0LWl0ZW1zLWNvbnRhaW5lciBoaWRkZW4tcGhvbmVcXFwiPjxkaXYgY2FydC1pdGVtcyBzaWRlYmFyIGNsYXNzPVxcXCJjYXJ0LWl0ZW1zIHNjcm9sbC1zaGFkb3ctb3V0ZXIgc2VjdGlvbiBuby1wYWQgZnVsbC1oZWlnaHRcXFwiPjwvZGl2PjwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDsmcXVvdDssICZxdW90O3Njcm9sbC1mb290ZXImcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb25cXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBzdWJ0b3RhbFxcXCI+U3VidG90YWw8L2g0PjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2UgbW9uZXlcXFwiPnt7Y2FydC5zdWJ0b3RhbCAvIDEwMCB8IGN1cnJlbmN5fX08L2g0PjxoMyBjbGFzcz1cXFwibGFiZWwxIGxhcmdlIGZsb2F0LXBhZFxcXCI+VGF4ICYgU2hpcHBpbmcgKjwhLS0uaWNvbi1pbmZvLTIuaGlkZGVuLXBob25lLS0+PC9oMz48L2Rpdj48ZGl2IGNsYXNzPVxcXCJjbGVhci1sYXJnZVxcXCI+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb25cXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZVxcXCI+VGF4PC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57e3tudWxsOiAnLS0nfVt0YXhdIHx8ICh0YXggLyAxMDAgfCBjdXJyZW5jeSl9fTwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlXFxcIj5TaGlwcGluZzwvaDQ+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBtb25leVxcXCI+e3t7MDonRlJFRScsIG51bGw6ICctLSd9W3NoaXBwaW5nXSB8fCAoc2hpcHBpbmcgLyAxMDAgfCBjdXJyZW5jeSl9fTwvaDQ+PC9kaXY+PGRpdiBuZy1zaG93PVxcXCJkaXNjb3VudFxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZVxcXCI+RGlzY291bnQ8L2g0PjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2UgbW9uZXlcXFwiPnt7KGRpc2NvdW50IC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uIHRvdGFsXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoMyBjbGFzcz1cXFwic3BhbjYgbGFiZWwxIGxhcmdlXFxcIj5Ub3RhbDwvaDM+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYWJlbDEgbGFyZ2UgbW9uZXlcXFwiPnt7dG90YWwgLyAxMDAgfCBjdXJyZW5jeX19PC9oND48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwiZXN0aW1hdGVkLWNvc3RzXFxcIj4qIEVzdGltYXRlZCB0YXhlcyAmIHNoaXBwaW5nPC9oNT48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgZm9vdGVyXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdmlzaWJsZS1waG9uZVxcXCI+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwibm9ydG9uIHB1bGwtbGVmdFxcXCI+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIHNyYz1cXFwiaHR0cHM6Ly9zZWFsLnZlcmlzaWduLmNvbS9nZXRzZWFsP2hvc3RfbmFtZT13d3cuc2hvcGJlYW0uY29tJmFtcDthbXA7c2l6ZT1YUyZhbXA7YW1wO3VzZV9mbGFzaD1OTyZhbXA7YW1wO3VzZV90cmFuc3BhcmVudD1ZRVMmYW1wO2FtcDtsYW5nPWVuXFxcIj48L3NjcmlwdD48IS0tLnRlc3QtdmVyaXNpZ24oc3R5bGU9XFxcIndpZHRoOiA4MHB4OyBoZWlnaHQ6IDQwcHg7IGJhY2tncm91bmQtY29sb3I6ICNGREJCMzA7XFxcIiktLT48L2Rpdj48YnV0dG9uIG5nLWNsaWNrPVxcXCJwcmV2aW91c1N0ZXAoKVxcXCIgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGFyZ2UgYnRuLXNlY29uZGFyeSBiYWNrXFxcIj57e2FjdGl2ZVN0ZXAoJ3JldmlldycsICdDbG9zZScsICdCYWNrJyl9fTwvYnV0dG9uPjxidXR0b24gbmctY2xpY2s9XFxcIm5leHRTdGVwKClcXFwiIG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O29yZGVyLXN1bW1hcnkmcXVvdDssICZxdW90O2NoZWNrb3V0IGJ0bi1zdWNjZXNzJnF1b3Q7LCAmcXVvdDtuZXh0IGJ0bi1wcmltYXJ5JnF1b3Q7KVxcXCIgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGFyZ2UgcHVsbC1yaWdodFxcXCI+e3tmb3JtU3VibWl0VmFsdWUoKX19ID48L2J1dHRvbj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdGV4dC1yaWdodFxcXCI+PGg0IGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+UG93ZXJlZCBieVwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyAnKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8YSBocmVmPVxcXCJodHRwczovL3d3dy5zaG9wYmVhbS5jb21cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBjbGFzcz1cXFwiYm9sZFxcXCI+U2hvcGJlYW08L2E+PC9oND48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdGFnbGluZSB0ZXh0LXJpZ2h0XFxcIj48aDQgY2xhc3M9XFxcIml0YWxpYyB1cHBlcmNhc2VcXFwiPnNob3Agc2VhbWxlc3NseTwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHZpc2libGUtcGhvbmVcXFwiPjxkaXYgY2xhc3M9XFxcInRpdGxlLWJhclxcXCI+PGg1IGNsYXNzPVxcXCJibG9jayBsYXJnZSBsYWJlbDEgdGV4dC1jZW50ZXJcXFwiPk5lZWQgYXNzaXN0YW5jZT88L2g1PjxoNSBjbGFzcz1cXFwiYmxvY2sgbGFyZ2UgdGV4dC1jZW50ZXJcXFwiPkVtYWlsIGN1c3RvbWVyIGNhcmUgYXQmbmJzcDs8YSBocmVmPVxcXCJtYWlsdG86Y3VzdG9tZXJjYXJlQHNob3BiZWFtLmNvbT9TdWJqZWN0PU9yZGVyJTIwQ2hlY2tvdXRcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBuZy1jbGljaz1cXFwidHJhY2tOZWVkQXNzaXN0YW5jZUNsaWNrKClcXFwiPmN1c3RvbWVyY2FyZUBzaG9wYmVhbS5jb208L2E+PC9oNT48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgZGVza3RvcC1mb290ZXIgaGlkZGVuLXBob25lIHoxXFxcIj48ZGl2IGNsYXNzPVxcXCJzcGFuMlxcXCI+PGRpdiBjbGFzcz1cXFwibm9ydG9uIHB1bGwtbGVmdFxcXCI+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIHNyYz1cXFwiaHR0cHM6Ly9zZWFsLnZlcmlzaWduLmNvbS9nZXRzZWFsP2hvc3RfbmFtZT13d3cuc2hvcGJlYW0uY29tJmFtcDthbXA7c2l6ZT1YUyZhbXA7YW1wO3VzZV9mbGFzaD1OTyZhbXA7YW1wO3VzZV90cmFuc3BhcmVudD1ZRVMmYW1wO2FtcDtsYW5nPWVuXFxcIj48L3NjcmlwdD48IS0tLnRlc3QtdmVyaXNpZ24oc3R5bGU9XFxcIndpZHRoOiA4MHB4OyBoZWlnaHQ6IDQwcHg7IGJhY2tncm91bmQtY29sb3I6ICNGREJCMzA7XFxcIiktLT48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJzcGFuMTBcXFwiPjxidXR0b24gbmctY2xpY2s9XFxcInByZXZpb3VzU3RlcCgpXFxcIiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm18cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGFyZ2UgYnRuLXNlY29uZGFyeSBiYWNrXFxcIj57e2FjdGl2ZVN0ZXAoJ3JldmlldycsICdDbG9zZScsICdCYWNrJyl9fTwvYnV0dG9uPjxidXR0b24gbmctY2xpY2s9XFxcIm5leHRTdGVwKClcXFwiIG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O29yZGVyLXN1bW1hcnkmcXVvdDssICZxdW90O2NoZWNrb3V0IGJ0bi1zdWNjZXNzJnF1b3Q7LCAmcXVvdDtuZXh0IGJ0bi1wcmltYXJ5JnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGFyZ2UgcHVsbC1yaWdodFxcXCI+e3tmb3JtU3VibWl0VmFsdWUoKX19PC9idXR0b24+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRpdGxlLWJhclxcXCI+PGg1IGNsYXNzPVxcXCJsYXJnZSBsYWJlbDFcXFwiPk5lZWQgYXNzaXN0YW5jZT88L2g1PjxoNSBjbGFzcz1cXFwibGFyZ2VcXFwiPjxhIGhyZWY9XFxcIm1haWx0bzpjdXN0b21lcmNhcmVAc2hvcGJlYW0uY29tP1N1YmplY3Q9T3JkZXIlMjBDaGVja291dFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIG5nLWNsaWNrPVxcXCJ0cmFja05lZWRBc3Npc3RhbmNlQ2xpY2soKVxcXCI+Y3VzdG9tZXJjYXJlQHNob3BiZWFtLmNvbTwvYT48c3Bhbj4gb3I8L3NwYW4+PGEgaHJlZj1cXFwidGVsOjgwMDQ5MDMyMTZcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj4gKDgwMCkgNDkwLTMyMTY8L2E+PC9oNT48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48L2JvZHk+PGRpdiBpZD1cXFwiZXJyb3ItbW9kYWxcXFwiIGNsYXNzPVxcXCJib290c3RyYXAtbW9kYWwtb3ZlcnJpZGUgbW9kYWwgZmFkZSBoaWRlXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPjxoMz5PaCBOb2VzISE8L2gzPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPjxwPlNvbWV0aGluZyB3ZW50IHdyb25nLiBXZSdyZSB0cmFja2luZyB0aGlzIGlzc3VlIHdpdGggdGhlIElEIHNob3duIGJlbG93IGFuZCBvdXIgdGVhbSBoYXMgYmVlbiBub3RpZmllZC4gV2UncmUgdmVyeSBzb3JyeSBmb3IgdGhlIGluY29udmVuaWVuY2UuPC9wPjxwcmUgaWQ9XFxcImVycm9yLW1vZGFsLWVycm9ySWRcXFwiPjwvcHJlPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWZvb3RlclxcXCI+PGJ1dHRvbiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5EaXNtaXNzPC9idXR0b24+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwiYm9vdHN0cmFwLW1vZGFsLW92ZXJyaWRlIG1vZGFsIGhpZGUgZmFkZSByZW1vdmUtZGlhbG9nXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIj4mdGltZXM7PC9idXR0b24+PGgyPlJlbW92ZSBJdGVtczwvaDI+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+PHAgbmctcGx1cmFsaXplIGNvdW50PVxcXCJzZWxlY3RlZEl0ZW0ucXVhbnRpdHlcXFwiIHdoZW49XFxcInsmcXVvdDsxJnF1b3Q7OiAmcXVvdDtBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHt7c2VsZWN0ZWRJdGVtLm5hbWV9fT8mcXVvdDssICZxdW90OzImcXVvdDs6ICZxdW90O1lvdSBoYXZlIDIgb2Yge3tzZWxlY3RlZEl0ZW0ubmFtZX19IGluIHlvdXIgY2FydC4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGVtIGJvdGg/JnF1b3Q7LCAmcXVvdDtvdGhlciZxdW90OzogJnF1b3Q7WW91IGhhdmUge30gb2Yge3tzZWxlY3RlZEl0ZW0ubmFtZX19IGluIHlvdXIgY2FydC4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSBhbGwge30/JnF1b3Q7fVxcXCIgY2xhc3M9XFxcImxlYWRcXFwiPjwvcD48L2Rpdj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1mb290ZXJcXFwiPjxhIG5nLWNsaWNrPVxcXCJyZW1vdmVDYW5jZWwoKVxcXCIgY2xhc3M9XFxcImJ0blxcXCI+Tm8sIGtlZXAgaXQ8L2E+PGEgbmctY2xpY2s9XFxcInJlbW92ZUNvbmZpcm0oKVxcXCIgY2xhc3M9XFxcImJ0biBidG4tc3VjY2Vzc1xcXCI+WWVzLCByZW1vdmUgaXQ8L2E+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwicGxlYXNlLXdhaXRcXFwiPjxkaXYgY2xhc3M9XFxcImJveFxcXCI+PGRpdiBjbGFzcz1cXFwiaW1nLWNvbnRhaW5lclxcXCI+PGltZ1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2ltZy9hamF4LWxvYWRlcjIuZ2lmJykpICsgXCJcIikgfSwge1wic3JjXCI6dHJ1ZX0pKSArIFwiPjwvZGl2PjxwPlBsZWFzZSBXYWl0Li4uPC9wPjwvZGl2PjwvZGl2PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYm9vdHN0cmFwL2Jvb3RzdHJhcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2NoZWNrb3V0LmJ1bmRsZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PC9odG1sPlwiKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufSkobG9jYWxzKVxufSwnY2hlY2tvdXQvcm9nYWluZS1hZC1tZW4nOiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICBsb2NhbHMgPSBsb2NhbHMgfHwge307XG4gICAgbG9jYWxzWydhc3NldHMnXSA9IGFzc2V0cztcbiAgICByZXR1cm4gKGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMpIHtcbnZhciBidWYgPSBbXTtcbnZhciBsb2NhbHNfID0gKGxvY2FscyB8fCB7fSkscm9sbGJhckVuYWJsZWQgPSBsb2NhbHNfLnJvbGxiYXJFbmFibGVkLHJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbiA9IGxvY2Fsc18ucm9sbGJhckNsaWVudEFjY2Vzc1Rva2VuLGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzLEhPU1QgPSBsb2NhbHNfLkhPU1Q7YnVmLnB1c2goXCI8IURPQ1RZUEUgaHRtbD48aHRtbCBsYW5nPVxcXCJlblxcXCI+PGhlYWQ+PHRpdGxlPlNob3BiZWFtIENoZWNrb3V0PC90aXRsZT48bWV0YSBodHRwLWVxdWl2PVxcXCJDb250ZW50LVR5cGVcXFwiIGNvbnRlbnQ9XFxcInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxcXCI+PG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wIHVzZXItc2NhbGFibGU9bm9cXFwiPlwiKTtcbmlmICggcm9sbGJhckVuYWJsZWQpXG57XG5idWYucHVzaChcIjwhLS0gUm9sbGJhciAtLT48c2NyaXB0PnZhciBfcm9sbGJhckNvbmZpZyA9IHtcXG4gIGFjY2Vzc1Rva2VuOiAnXCIgKyAoamFkZS5lc2NhcGUoKGphZGUuaW50ZXJwID0gcm9sbGJhckNsaWVudEFjY2Vzc1Rva2VuKSA9PSBudWxsID8gJycgOiBqYWRlLmludGVycCkpICsgXCInLFxcbiAgY2FwdHVyZVVuY2F1Z2h0OiB0cnVlLFxcbiAgcGF5bG9hZDoge1xcbiAgICBlbnZpcm9ubWVudDogXFxcInByb2R1Y3Rpb25cXFwiXFxuICB9XFxufTtcXG4hZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGIpe3RoaXMuc2hpbUlkPSsraCx0aGlzLm5vdGlmaWVyPW51bGwsdGhpcy5wYXJlbnRTaGltPWIsdGhpcy5sb2dnZXI9ZnVuY3Rpb24oKXt9LGEuY29uc29sZSYmdm9pZCAwPT09YS5jb25zb2xlLnNoaW1JZCYmKHRoaXMubG9nZ2VyPWEuY29uc29sZS5sb2cpfWZ1bmN0aW9uIGQoYixjLGQpeyFkWzRdJiZhLl9yb2xsYmFyV3JhcHBlZEVycm9yJiYoZFs0XT1hLl9yb2xsYmFyV3JhcHBlZEVycm9yLGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9bnVsbCksYi51bmNhdWdodEVycm9yLmFwcGx5KGIsZCksYyYmYy5hcHBseShhLGQpfWZ1bmN0aW9uIGUoYil7dmFyIGQ9YztyZXR1cm4gZyhmdW5jdGlvbigpe2lmKHRoaXMubm90aWZpZXIpcmV0dXJuIHRoaXMubm90aWZpZXJbYl0uYXBwbHkodGhpcy5ub3RpZmllcixhcmd1bWVudHMpO3ZhciBjPXRoaXMsZT1cXFwic2NvcGVcXFwiPT09YjtlJiYoYz1uZXcgZCh0aGlzKSk7dmFyIGY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApLGc9e3NoaW06YyxtZXRob2Q6YixhcmdzOmYsdHM6bmV3IERhdGV9O3JldHVybiBhLl9yb2xsYmFyU2hpbVF1ZXVlLnB1c2goZyksZT9jOnZvaWQgMH0pfWZ1bmN0aW9uIGYoYSxiKXtpZihiLmhhc093blByb3BlcnR5JiZiLmhhc093blByb3BlcnR5KFxcXCJhZGRFdmVudExpc3RlbmVyXFxcIikpe3ZhciBjPWIuYWRkRXZlbnRMaXN0ZW5lcjtiLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYixkLGUpe2MuY2FsbCh0aGlzLGIsYS53cmFwKGQpLGUpfTt2YXIgZD1iLnJlbW92ZUV2ZW50TGlzdGVuZXI7Yi5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjKXtkLmNhbGwodGhpcyxhLGImJmIuX3dyYXBwZWQ/Yi5fd3JhcHBlZDpiLGMpfX19ZnVuY3Rpb24gZyhhLGIpe3JldHVybiBiPWJ8fHRoaXMubG9nZ2VyLGZ1bmN0aW9uKCl7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChjKXtiKFxcXCJSb2xsYmFyIGludGVybmFsIGVycm9yOlxcXCIsYyl9fX12YXIgaD0wO2MuaW5pdD1mdW5jdGlvbihhLGIpe3ZhciBlPWIuZ2xvYmFsQWxpYXN8fFxcXCJSb2xsYmFyXFxcIjtpZihcXFwib2JqZWN0XFxcIj09dHlwZW9mIGFbZV0pcmV0dXJuIGFbZV07YS5fcm9sbGJhclNoaW1RdWV1ZT1bXSxhLl9yb2xsYmFyV3JhcHBlZEVycm9yPW51bGwsYj1ifHx7fTt2YXIgaD1uZXcgYztyZXR1cm4gZyhmdW5jdGlvbigpe2lmKGguY29uZmlndXJlKGIpLGIuY2FwdHVyZVVuY2F1Z2h0KXt2YXIgYz1hLm9uZXJyb3I7YS5vbmVycm9yPWZ1bmN0aW9uKCl7dmFyIGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApO2QoaCxjLGEpfTt2YXIgZyxpLGo9W1xcXCJFdmVudFRhcmdldFxcXCIsXFxcIldpbmRvd1xcXCIsXFxcIk5vZGVcXFwiLFxcXCJBcHBsaWNhdGlvbkNhY2hlXFxcIixcXFwiQXVkaW9UcmFja0xpc3RcXFwiLFxcXCJDaGFubmVsTWVyZ2VyTm9kZVxcXCIsXFxcIkNyeXB0b09wZXJhdGlvblxcXCIsXFxcIkV2ZW50U291cmNlXFxcIixcXFwiRmlsZVJlYWRlclxcXCIsXFxcIkhUTUxVbmtub3duRWxlbWVudFxcXCIsXFxcIklEQkRhdGFiYXNlXFxcIixcXFwiSURCUmVxdWVzdFxcXCIsXFxcIklEQlRyYW5zYWN0aW9uXFxcIixcXFwiS2V5T3BlcmF0aW9uXFxcIixcXFwiTWVkaWFDb250cm9sbGVyXFxcIixcXFwiTWVzc2FnZVBvcnRcXFwiLFxcXCJNb2RhbFdpbmRvd1xcXCIsXFxcIk5vdGlmaWNhdGlvblxcXCIsXFxcIlNWR0VsZW1lbnRJbnN0YW5jZVxcXCIsXFxcIlNjcmVlblxcXCIsXFxcIlRleHRUcmFja1xcXCIsXFxcIlRleHRUcmFja0N1ZVxcXCIsXFxcIlRleHRUcmFja0xpc3RcXFwiLFxcXCJXZWJTb2NrZXRcXFwiLFxcXCJXZWJTb2NrZXRXb3JrZXJcXFwiLFxcXCJXb3JrZXJcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdFxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXRcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdFVwbG9hZFxcXCJdO2ZvcihnPTA7ZzxqLmxlbmd0aDsrK2cpaT1qW2ddLGFbaV0mJmFbaV0ucHJvdG90eXBlJiZmKGgsYVtpXS5wcm90b3R5cGUpfXJldHVybiBhW2VdPWgsaH0saC5sb2dnZXIpKCl9LGMucHJvdG90eXBlLmxvYWRGdWxsPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWcoZnVuY3Rpb24oKXt2YXIgYT1iLmNyZWF0ZUVsZW1lbnQoXFxcInNjcmlwdFxcXCIpLGU9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwic2NyaXB0XFxcIilbMF07YS5zcmM9ZC5yb2xsYmFySnNVcmwsYS5hc3luYz0hYyxhLm9ubG9hZD1mLGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxlKX0sdGhpcy5sb2dnZXIpLGY9ZyhmdW5jdGlvbigpe2lmKHZvaWQgMD09PWEuX3JvbGxiYXJQYXlsb2FkUXVldWUpZm9yKHZhciBiLGMsZCxlLGY9bmV3IEVycm9yKFxcXCJyb2xsYmFyLmpzIGRpZCBub3QgbG9hZFxcXCIpO2I9YS5fcm9sbGJhclNoaW1RdWV1ZS5zaGlmdCgpOylmb3IoZD1iLmFyZ3MsZT0wO2U8ZC5sZW5ndGg7KytlKWlmKGM9ZFtlXSxcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgYyl7YyhmKTticmVha319LHRoaXMubG9nZ2VyKTtnKGZ1bmN0aW9uKCl7Yz9lKCk6YS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihcXFwibG9hZFxcXCIsZSwhMSk6YS5hdHRhY2hFdmVudChcXFwib25sb2FkXFxcIixlKX0sdGhpcy5sb2dnZXIpKCl9LGMucHJvdG90eXBlLndyYXA9ZnVuY3Rpb24oYil7dHJ5e2lmKFxcXCJmdW5jdGlvblxcXCIhPXR5cGVvZiBiKXJldHVybiBiO2lmKGIuX2lzV3JhcClyZXR1cm4gYjtpZighYi5fd3JhcHBlZCl7Yi5fd3JhcHBlZD1mdW5jdGlvbigpe3RyeXtyZXR1cm4gYi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goYyl7dGhyb3cgYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1jLGN9fSxiLl93cmFwcGVkLl9pc1dyYXA9ITA7Zm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmKGIuX3dyYXBwZWRbY109YltjXSl9cmV0dXJuIGIuX3dyYXBwZWR9Y2F0Y2goZCl7cmV0dXJuIGJ9fTtmb3IodmFyIGk9XFxcImxvZyxkZWJ1ZyxpbmZvLHdhcm4sd2FybmluZyxlcnJvcixjcml0aWNhbCxnbG9iYWwsY29uZmlndXJlLHNjb3BlLHVuY2F1Z2h0RXJyb3JcXFwiLnNwbGl0KFxcXCIsXFxcIiksaj0wO2o8aS5sZW5ndGg7KytqKWMucHJvdG90eXBlW2lbal1dPWUoaVtqXSk7dmFyIGs9XFxcIi8vZDM3Z3ZydmMwd3Q0czEuY2xvdWRmcm9udC5uZXQvanMvdjEuMS9yb2xsYmFyLm1pbi5qc1xcXCI7X3JvbGxiYXJDb25maWcucm9sbGJhckpzVXJsPV9yb2xsYmFyQ29uZmlnLnJvbGxiYXJKc1VybHx8azt2YXIgbD1jLmluaXQoYSxfcm9sbGJhckNvbmZpZyk7bC5sb2FkRnVsbChhLGIsITEsX3JvbGxiYXJDb25maWcpfSh3aW5kb3csZG9jdW1lbnQpOzwvc2NyaXB0PlwiKTtcbn1cbmJ1Zi5wdXNoKFwiPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIHNyYz1cXFwiLy91c2UudHlwZWtpdC5uZXQvcXFtNWFhZy5qc1xcXCI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPnRyeXtUeXBla2l0LmxvYWQoKTt9Y2F0Y2goZSl7fVxcbjwvc2NyaXB0PjxsaW5rXCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAncmVsJzooJ3N0eWxlc2hlZXQnKSwgJ2hyZWYnOihcIlwiICsgKGFzc2V0cy51cmwoJy9jc3MvY2hlY2tvdXQtcm9nYWluZS5jc3MnKSkgKyBcIlwiKSB9LCB7XCJyZWxcIjp0cnVlLFwiaHJlZlwiOnRydWV9KSkgKyBcIj48IS0tW2lmIGx0IElFIDEwXT5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvY3VzdG9tRXZlbnRzLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvZmlsdGVyLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvbWFwLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc29tZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3N0cmluZy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9qcXVlcnkvanF1ZXJ5LTEuMTAuMi5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLTEuMi4zLWN1c3RvbS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLXJvdXRlLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPihmdW5jdGlvbigpIHtcXG4gIGZ1bmN0aW9uIFF1ZXVlRmFjYWRlKG1lbWJlcnMpIHtcXG4gICAgdGhpcy5fcXVldWUgPSBbXTtcXG4gICAgdGhpcy5fZGVmaW5lKG1lbWJlcnMpO1xcbiAgfVxcbiAgdmFyIHByb3RvID0gUXVldWVGYWNhZGUucHJvdG90eXBlO1xcbiAgXFxuICBwcm90by5fZGVmaW5lID0gZnVuY3Rpb24obWVtYmVycykge1xcbiAgICBpZiAoIW1lbWJlcnMpIHsgcmV0dXJuIHRoaXM7IH1cXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcbiAgICBmdW5jdGlvbiBhZGRNZW1iZXIobmFtZSkge1xcbiAgICAgIGlmICghbmFtZSkgeyByZXR1cm47IH1cXG4gICAgICBzZWxmW25hbWVdID0gZnVuY3Rpb24oKSB7XFxuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKFsgbmFtZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykgXSk7XFxuICAgICAgfTtcXG4gICAgfVxcbiAgICB2YXIgbmFtZXMgPSBtZW1iZXJzIGluc3RhbmNlb2YgQXJyYXkgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkobWVtYmVycykgOiBtZW1iZXJzLnNwbGl0KC8gKiwgKi9nKTtcXG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCkge1xcbiAgICAgIGFkZE1lbWJlcihuYW1lcy5zaGlmdCgpKTtcXG4gICAgfVxcbiAgICByZXR1cm4gdGhpcztcXG4gIH07XFxuICBcXG4gIHByb3RvLnB1c2ggPSBmdW5jdGlvbigpIHtcXG4gICAgdGhpcy5fcXVldWUucHVzaChBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJncykpO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8uX2RlcXVldWUgPSBmdW5jdGlvbih0YXJnZXQpIHtcXG4gICAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCkge1xcbiAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcXG4gICAgICB0cnkge1xcbiAgICAgICAgdGFyZ2V0W21lc3NhZ2VbMF1dLmFwcGx5KHRhcmdldCwgbWVzc2FnZVsxXSk7XFxuICAgICAgfSBjYXRjaChlcnIpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHRhcmdldDtcXG4gIH07XFxuICBcXG4gIC8vIHF1ZXVlIGZhY2FkZXNcXG4gIHdpbmRvdy5hbmFseXRpY3MgPSBuZXcgUXVldWVGYWNhZGUoJ2lkZW50aWZ5LHRyYWNrLHBhZ2UsYWxpYXMsb24sb25jZSxyZW1vdmVMaXN0ZW5lcixlbWl0LHJlYWR5LHNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZScpO1xcbn0pKCk7PC9zY3JpcHQ+PC9oZWFkPjxib2R5IG5nLWNvbnRyb2xsZXI9XFxcIk1haW5DdHJsXFxcIiBzdHlsZT1cXFwid2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IG1hcmdpbjogMDsgcGFkZGluZzogMDtcXFwiIG5nLWluaXQ9XFxcImxvYWRUaGVtZSgncm9nYWluZS1tZW4nKVxcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1idXR0b24tb3ZlcnJpZGVcXFwiPjxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci1mbHVpZFxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHNzbC1zZWN1cmVkLWNvbm5lY3Rpb24gejJcXFwiPjxoND48ZGl2IGNsYXNzPVxcXCJpY29uLWxvY2tlZFxcXCI+PC9kaXY+U1NMIFNlY3VyZWQgQ29ubmVjdGlvbjwvaDQ+PGg0IG5nLWNsaWNrPVxcXCJnb1RvUmVmZXJyZXIoKVxcXCIgY2xhc3M9XFxcImNsb3NlLWNoZWNrb3V0IHB1bGwtcmlnaHRcXFwiPjwhLS18IENsb3NlLS0+PGRpdiBjbGFzcz1cXFwiaWNvbi1jbG9zZVxcXCI+PC9kaXY+PC9oND48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgaGVhZGVyIHNjcm9sbC1oZWFkZXIgejFcXFwiPjxkaXYgY2xhc3M9XFxcInRpdGxlLWJhclxcXCI+PGgyIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlciB1cHBlcmNhc2VcXFwiPkNoZWNrb3V0PC9oMj48L2Rpdj48L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDssICZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIG1pbi1oZWlnaHQtY29udGFpbmVyIHowXFxcIj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDssICZxdW90O3NwYW4xMiZxdW90OywgJnF1b3Q7c3BhbjggbGVmdCZxdW90OykgKyAmcXVvdDsgJnF1b3Q7ICsgZ2V0U3RlcCgpXFxcIiBjbGFzcz1cXFwibWFpblxcXCI+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcHMgc2VjdGlvbiB6MSB0ZXh0LWNlbnRlclxcXCI+PGRpdiBzYi1jaGVja291dC1zdGVwcy1hcnJvdz1cXFwiZ2V0U3RlcCgpXFxcIiBjbGFzcz1cXFwiZG93bi1hcnJvd1xcXCI+PC9kaXY+PGEgbmctY2xpY2s9XFxcImdvVG9TdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj48aDM+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDssICZxdW90O2JhZGdlLWluZm8mcXVvdDspXFxcIiBjbGFzcz1cXFwiYmFkZ2VcXFwiPjE8L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInN0ZXBcXFwiPlJldmlldzxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPj48L2Rpdj48L2Rpdj48L2gzPjwvYT48YSBuZy1jbGljaz1cXFwiZ29Ub1N0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OylcXFwiIG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3NoaXBwaW5nLWJpbGxpbmcmcXVvdDssICZxdW90O2FjdGl2ZSZxdW90OylcXFwiIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+PGgzPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OywgJnF1b3Q7YmFkZ2UtaW5mbyZxdW90OylcXFwiIGNsYXNzPVxcXCJiYWRnZVxcXCI+MjwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInN0ZXBcXFwiPlNoaXBwaW5nICYgUGF5bWVudDxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPj48L2Rpdj48L2Rpdj48L2gzPjwvYT48YSBuZy1jbGljaz1cXFwiZ29Ub1N0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OylcXFwiIG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O29yZGVyLXN1bW1hcnkmcXVvdDssICZxdW90O2FjdGl2ZSZxdW90OylcXFwiIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+PGgzPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7YmFkZ2UtaW5mbyZxdW90OylcXFwiIGNsYXNzPVxcXCJiYWRnZVxcXCI+MzwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInN0ZXBcXFwiPk9yZGVyIFN1bW1hcnk8L2Rpdj48L2gzPjwvYT48L2Rpdj48ZGl2IHNiLWN1c3RvbS1zY3JvbGxiYXIgc2Nyb2xsLXNoYWRvdyBjbGFzcz1cXFwic2Nyb2xsYWJsZS1jb250ZW50XFxcIj48ZGl2IG5nLXNob3c9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uIHoxIGhpZGRlbi1waG9uZVxcXCI+PGgzIHRvb2x0aXA9XFxcIkhlcmUncyBob3cgc2hpcHBpbmcgY2FsY3VsYXRpb25zIHdvcmsuLi5cXFwiIHBsYWNlbWVudD1cXFwiYm90dG9tXFxcIiBjbGFzcz1cXFwic3BhbjEyIGxhYmVsMVxcXCI+RXN0aW1hdGVkIFRheCAmIFNoaXBwaW5nPCEtLS5pY29uLWluZm8tMi0tPjwvaDM+PC9kaXY+PGRpdiBuZy1zaG93PVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgc3RhdGUgc2VjdGlvbiB6MlxcXCI+PGRpdiBjbGFzcz1cXFwic3BhbjIgdGV4dC1sZWZ0XFxcIj48aDQ+UHJvdmluY2U8L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInNwYW41XFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxzZWxlY3QgaWQ9XFxcInNoaXBwaW5nLXN0YXRlXFxcIiBuZy1pZj1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBuZy1tb2RlbD1cXFwidXNlci5zaGlwcGluZy5zdGF0ZVxcXCIgbmctb3B0aW9ucz1cXFwic3RhdGUubmFtZSBmb3Igc3RhdGUgaW4gc3RhdGVzIHRyYWNrIGJ5IHN0YXRlLmFiYnJldmlhdGlvblxcXCIgbmctY2hhbmdlPVxcXCJzaGlwcGluZ1N0YXRlQ2hhbmdlZCgnI3NoaXBwaW5nLXN0YXRlJylcXFwiIGNsYXNzPVxcXCJzcGFuMTIgc29sbyBzZWxlY3RwaWNrZXJcXFwiPjxvcHRpb24gdmFsdWU9XFxcIlxcXCIgZGlzYWJsZWQgc2VsZWN0ZWQ+KHNlbGVjdCk8L29wdGlvbj48L3NlbGVjdD48L2Rpdj48L2Rpdj48aDUgY2xhc3M9XFxcInNwYW41XFxcIj5JdGVtcyBpbiB5b3VyIHNob3BwaW5nIGJhZyBhcmUgbm90IHJlc2VydmVkIGFuZCBtYXkgc2VsbCBvdXQuPC9oNT48L2Rpdj48ZGl2IG5nLXZpZXcgY2xhc3M9XFxcInowIHNjcm9sbC1zaGFkb3ctb3V0ZXJcXFwiPjwvZGl2PjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBkZXNrdG9wLWZvb3RlciBoaWRkZW4tcGhvbmUgejFcXFwiPiAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdGV4dC1jZW50ZXJcXFwiPjxkaXYgY2xhc3M9XFxcIm5vcnRvblxcXCI+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIHNyYz1cXFwiaHR0cHM6Ly9zZWFsLnZlcmlzaWduLmNvbS9nZXRzZWFsP2hvc3RfbmFtZT13d3cuc2hvcGJlYW0uY29tJmFtcDthbXA7c2l6ZT1YUyZhbXA7YW1wO3VzZV9mbGFzaD1OTyZhbXA7YW1wO3VzZV90cmFuc3BhcmVudD1ZRVMmYW1wO2FtcDtsYW5nPWVuXFxcIj4vLy50ZXN0LXZlcmlzaWduKHN0eWxlPVxcXCJ3aWR0aDogODBweDsgaGVpZ2h0OiA0MHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjRkRCQjMwO1xcXCIpPC9zY3JpcHQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwiZm9vdGVyLW1haW4tYnV0dG9uXFxcIj48YnV0dG9uIG5nLWNsaWNrPVxcXCJwcmV2aW91c1N0ZXAoKVxcXCIgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtfHJldmlldyZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIGJ0bi1zZWNvbmRhcnkgYmFja1xcXCI+e3thY3RpdmVTdGVwKCdyZXZpZXcnLCAnQ2xvc2UnLCAnQmFjaycpfX08L2J1dHRvbj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdGl0bGUtYmFyIHB1bGwtbGVmdFxcXCI+PGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPlNvbGQgYW5kIFNoaXBwZWQgdG8geW91IGJ5PC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwibGFiZWwxXFxcIj5XZWxsLmNhPC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9wcml2YWN5Lmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFByaXZhY3kgTm90aWNlPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvdGVybXMuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgVGVybXMgJiBDb25kaXRpb25zPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2Evc2hpcHBpbmctYW5kLXJldHVybnNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFNoaXBwaW5nICYgUmV0dXJuczwvYT48L2g1PjwvZGl2PjxkaXYgc3R5bGU9XFxcInBhZGRpbmctYm90dG9tOiAxMHB4XFxcIiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm9cXFwiPldlbGwuY2EgaXMgYSByZWdpc3RlcmVkIHRyYWRlbWFyayBvd25lZCBieSBXZWxsLmNhIEluYy4gVGhlIFdlbGwuY2EgZWNvbW1lcmNlIHNlcnZpY2VzIGFyZSBzdWJqZWN0IHRvIHRoZSAgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlIG9mIFdlbGwuY2EgSW5jLiBhbmQgY2FuIGJlIHJldmlld2VkIDxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS90ZXJtcy5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+aGVyZTwvYT48c3Bhbj4uIEpvaG5zb24gJiBKb2huc29uIEluYy4gKEpKSSkgaXMgcHJvdmlkaW5nIGluZm9ybWF0aW9uIGZyb20geW91ciBwcm9kdWN0IHB1cmNoYXNlIHJlcXVlc3QgdG8gdGhlIFdlbGwuY2Egc2l0ZSBmb3IgdGhlIHB1cmNoYXNlIG9mIEpKSSBwcm9kdWN0cyBhbmQgaXMgbm90IGFmZmlsaWF0ZWQgd2l0aCBXZWxsLmNhIEluYy47IG5vciBpcyBKSkkgcmVzcG9uc2libGUgZm9yIHRoZSBzYWxlIG9yIGRlbGl2ZXJ5IG9mICBKSkkgcHJvZHVjdHMgdGhhdCB5b3Ugc2VsZWN0IGZvciBwdXJjaGFzZSBmcm9tIHRoZSBXZWxsLmNhIHNpdGUuPC9zcGFuPjwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm8gcHVsbC1sZWZ0XFxcIj5XZWxsLmNhIFBoYXJtYWN5IEFjY3JlZGl0YXRpb24gYXMgb2YgTm92ZW1iZXIgMTF0aCAyMDE1PC9oNT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPk9QQyBDZXJ0aWZpY2F0ZSBBY2NyZWRpdGF0aW9uICMzMDQyMjI8L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvIHB1bGwtbGVmdFxcXCI+WW91ciBQaGFybWFjaXN0IGlzIFBoaWxpcCBSb3NlbmJlcmc8L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvIHB1bGwtbGVmdFxcXCI+Q2VudHJhbCBGaWxsIFNvbHV0aW9ucyBJbmMuIDM0NiBNaWxsd2F5IEF2ZS4gVmF1Z2hhbiwgT04gTDRLIDNXMTwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm8gcHVsbC1sZWZ0XFxcIj5DYWxsIFdlbGwuY2EgVG9sbCBGcmVlOiAxLTg2Ni02NDAtMzgwMDwvaDU+PC9kaXY+PGRpdiBzdHlsZT1cXFwicGFkZGluZzogMTBweCAwcHhcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPioqIEZyZWUgRWNvbm9teSBTaGlwcGluZyBvZmZlcmVkIGJ5IFdlbGwuY2EgYXMgb2YgTm92ZW1iZXIgMTF0aCAyMDE1IG9uIG9yZGVycyBvZiAkMjkgb3IgbW9yZSAoYmVmb3JlIHRheGVzIGFuZCBzaGlwcGluZykgaW4gQ2FuYWRhIGV4Y2x1ZGluZyByZW1vdGUgYW5kIGRpZmZpY3VsdCB0byBzZXJ2ZSBsb2NhdGlvbnMuIFN1YmplY3QgdG8gY2hhbmdlIGF0IHRoZSBkaXNjcmV0aW9uIG9mIFdlbGwuY2EuIEJhc2VkIG9uPGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3NoaXBwaW5nLWFuZC1yZXR1cm5zXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBTaGlwcGluZyBhbmQgUmV0dXJucyBwb2xpY3kuPC9hPjwvaDU+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHZpc2libGUtcGhvbmVcXFwiPjxkaXYgY2xhc3M9XFxcInRpdGxlLWJhciB0ZXh0LWNlbnRlclxcXCI+PGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPlNvbGQgYW5kIFNoaXBwZWQgdG8geW91IGJ5PC9oNT48aDUgY2xhc3M9XFxcImxhYmVsMVxcXCI+V2VsbC5jYTwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvcHJpdmFjeS5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBQcml2YWN5IE5vdGljZTwvYT48L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3Rlcm1zLmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFRlcm1zICYgQ29uZGl0aW9uczwvYT48L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3NoaXBwaW5nLWFuZC1yZXR1cm5zXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBTaGlwcGluZyAmIFJldHVybnM8L2E+PC9oNT48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDssICZxdW90O2NvbmZpcm0mcXVvdDssICZxdW90OyZxdW90OylcXFwiIGNsYXNzPVxcXCJzcGFuNCBzdW1tYXJ5XFxcIj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7JnF1b3Q7LCAmcXVvdDtmdWxsLWhlaWdodCZxdW90OylcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJzdW1tYXJ5LWNvbnRhaW5lclxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb25cXFwiPjxoMyBjbGFzcz1cXFwibGFiZWwxIGxhcmdlIGlubGluZS1ibG9ja1xcXCI+U3VtbWFyeTwvaDM+PGg0IG5nLXBsdXJhbGl6ZSBjb3VudD1cXFwiY2FydC5pdGVtQ291bnRcXFwiIHdoZW49XFxcInsmcXVvdDtvbmUmcXVvdDs6ICZxdW90Oyh7fSBJdGVtKSZxdW90OywgJnF1b3Q7b3RoZXImcXVvdDs6ICZxdW90Oyh7fSBJdGVtcykmcXVvdDt9XFxcIj48L2g0PjwvZGl2PjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBjbGFzcz1cXFwic3BhbjEyIGNhcnQtaXRlbXMtY29udGFpbmVyIGhpZGRlbi1waG9uZVxcXCI+PGRpdiBjYXJ0LWl0ZW1zLXJvZ2FpbmUgc2lkZWJhciBjbGFzcz1cXFwiY2FydC1pdGVtcyBzY3JvbGwtc2hhZG93LW91dGVyIHNlY3Rpb24gbm8tcGFkIGZ1bGwtaGVpZ2h0XFxcIj48L2Rpdj48L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7JnF1b3Q7LCAmcXVvdDtzY3JvbGwtZm9vdGVyJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2Ugc3VidG90YWxcXFwiPlN1YnRvdGFsPC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57e2NhcnQuc3VidG90YWwgLyAxMDAgfCBjdXJyZW5jeX19PC9oND48aDMgY2xhc3M9XFxcImxhYmVsMSBsYXJnZSBmbG9hdC1wYWRcXFwiPlRheCAmIFNoaXBwaW5nICo8IS0tLmljb24taW5mby0yLmhpZGRlbi1waG9uZS0tPjwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cXFwiY2xlYXItbGFyZ2VcXFwiPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPlRheDwvaDQ+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBtb25leVxcXCI+e3t7bnVsbDogJy0tJ31bdGF4XSB8fCAodGF4IC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZVxcXCI+U2hpcHBpbmc8L2g0PjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2UgbW9uZXlcXFwiPnt7ezA6J0ZSRUUgKionLCBudWxsOiAnLS0nfVtzaGlwcGluZ10gfHwgKHNoaXBwaW5nIC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjxkaXYgbmctc2hvdz1cXFwiZGlzY291bnRcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPkRpc2NvdW50PC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57eyhkaXNjb3VudCAvIDEwMCB8IGN1cnJlbmN5KX19PC9oND48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc2VjdGlvbiB0b3RhbFxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDMgY2xhc3M9XFxcInNwYW42IGxhYmVsMSBsYXJnZVxcXCI+VG90YWw8L2gzPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFiZWwxIGxhcmdlIG1vbmV5XFxcIj57e3RvdGFsIC8gMTAwIHwgY3VycmVuY3l9fTwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImVzdGltYXRlZC1jb3N0c1xcXCI+KiBFc3RpbWF0ZWQgdGF4ZXMgJiBzaGlwcGluZzwvaDU+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIGZvb3RlclxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHZpc2libGUtcGhvbmVcXFwiPjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcIm5vcnRvbiBwdWxsLWxlZnRcXFwiPjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcImh0dHBzOi8vc2VhbC52ZXJpc2lnbi5jb20vZ2V0c2VhbD9ob3N0X25hbWU9d3d3LnNob3BiZWFtLmNvbSZhbXA7YW1wO3NpemU9WFMmYW1wO2FtcDt1c2VfZmxhc2g9Tk8mYW1wO2FtcDt1c2VfdHJhbnNwYXJlbnQ9WUVTJmFtcDthbXA7bGFuZz1lblxcXCI+PC9zY3JpcHQ+PCEtLS50ZXN0LXZlcmlzaWduKHN0eWxlPVxcXCJ3aWR0aDogODBweDsgaGVpZ2h0OiA0MHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjRkRCQjMwO1xcXCIpLS0+PC9kaXY+PGJ1dHRvbiBuZy1jbGljaz1cXFwicHJldmlvdXNTdGVwKClcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIGJ0bi1zZWNvbmRhcnkgYmFja1xcXCI+e3thY3RpdmVTdGVwKCdyZXZpZXcnLCAnQ2xvc2UnLCAnQmFjaycpfX08L2J1dHRvbj48YnV0dG9uIG5nLWNsaWNrPVxcXCJuZXh0U3RlcCgpXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtjaGVja291dCBidG4tc3VjY2VzcyZxdW90OywgJnF1b3Q7bmV4dCBidG4tcHJpbWFyeSZxdW90OylcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIHB1bGwtcmlnaHRcXFwiPnt7Zm9ybVN1Ym1pdFZhbHVlKCl9fSA+PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj5Qb3dlcmVkIGJ5XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnICcpID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnNob3BiZWFtLmNvbVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIGNsYXNzPVxcXCJib2xkXFxcIj5TaG9wYmVhbTwvYT48L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0YWdsaW5lIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcIml0YWxpYyB1cHBlcmNhc2VcXFwiPnNob3Agc2VhbWxlc3NseTwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48aDYgY2xhc3M9XFxcInVwcGVyY2FzZVxcXCI+PGEgaHJlZj1cXFwibWFpbHRvOmN1c3RvbWVyY2FyZUBzaG9wYmVhbS5jb21cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBuZy1jbGljaz1cXFwidHJhY2tOZWVkQXNzaXN0YW5jZUNsaWNrKClcXFwiPmN1c3RvbWVyY2FyZUBzaG9wYmVhbS5jb208L2E+PC9oNj5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNiBjbGFzcz1cXFwidXBwZXJjYXNlXFxcIj4gPGEgaHJlZj1cXFwidGVsOjgwMDQ5MDMyMTZcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5QaG9uZTogKDgwMCkgNDkwLTMyMTY8L2E+PC9oNj48L2Rpdj48ZGl2IHN0eWxlPVxcXCJtYXJnaW4tdG9wOiAxMHB4XFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48YnV0dG9uIG5nLWNsaWNrPVxcXCJuZXh0U3RlcCgpXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtjaGVja291dCBidG4tc3VjY2VzcyZxdW90OywgJnF1b3Q7bmV4dCBidG4tcHJpbWFyeSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlXFxcIj57e2Zvcm1TdWJtaXRWYWx1ZSgpfX08L2J1dHRvbj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdmlzaWJsZS1waG9uZVxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+U29sZCBhbmQgU2hpcHBlZCB0byB5b3UgYnk8L2g1PjxoNSBjbGFzcz1cXFwibGFiZWwxXFxcIj5XZWxsLmNhPC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9wcml2YWN5Lmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFByaXZhY3kgTm90aWNlPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvdGVybXMuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgVGVybXMgJiBDb25kaXRpb25zPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2Evc2hpcHBpbmctYW5kLXJldHVybnNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFNoaXBwaW5nICYgUmV0dXJuczwvYT48L2g1PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvYm9keT48ZGl2IGlkPVxcXCJlcnJvci1tb2RhbFxcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1tb2RhbC1vdmVycmlkZSBtb2RhbCBmYWRlIGhpZGVcXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+PGgzPk9oIE5vZXMhITwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+PHA+U29tZXRoaW5nIHdlbnQgd3JvbmcuIFdlJ3JlIHRyYWNraW5nIHRoaXMgaXNzdWUgd2l0aCB0aGUgSUQgc2hvd24gYmVsb3cgYW5kIG91ciB0ZWFtIGhhcyBiZWVuIG5vdGlmaWVkLiBXZSdyZSB2ZXJ5IHNvcnJ5IGZvciB0aGUgaW5jb252ZW5pZW5jZS48L3A+PHByZSBpZD1cXFwiZXJyb3ItbW9kYWwtZXJyb3JJZFxcXCI+PC9wcmU+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtZm9vdGVyXFxcIj48YnV0dG9uIGRhdGEtZGlzbWlzcz1cXFwibW9kYWxcXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPkRpc21pc3M8L2J1dHRvbj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJib290c3RyYXAtbW9kYWwtb3ZlcnJpZGUgbW9kYWwgaGlkZSBmYWRlIHJlbW92ZS1kaWFsb2dcXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGRhdGEtZGlzbWlzcz1cXFwibW9kYWxcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiY2xvc2VcXFwiPiZ0aW1lczs8L2J1dHRvbj48aDI+UmVtb3ZlIEl0ZW1zPC9oMj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1ib2R5XFxcIj48cCBuZy1wbHVyYWxpemUgY291bnQ9XFxcInNlbGVjdGVkSXRlbS5xdWFudGl0eVxcXCIgd2hlbj1cXFwieyZxdW90OzEmcXVvdDs6ICZxdW90O0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZW1vdmUge3tzZWxlY3RlZEl0ZW0ubmFtZX19PyZxdW90OywgJnF1b3Q7MiZxdW90OzogJnF1b3Q7WW91IGhhdmUgMiBvZiB7e3NlbGVjdGVkSXRlbS5uYW1lfX0gaW4geW91ciBjYXJ0LiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZW0gYm90aD8mcXVvdDssICZxdW90O290aGVyJnF1b3Q7OiAmcXVvdDtZb3UgaGF2ZSB7fSBvZiB7e3NlbGVjdGVkSXRlbS5uYW1lfX0gaW4geW91ciBjYXJ0LiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIGFsbCB7fT8mcXVvdDt9XFxcIiBjbGFzcz1cXFwibGVhZFxcXCI+PC9wPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWZvb3RlclxcXCI+PGEgbmctY2xpY2s9XFxcInJlbW92ZUNhbmNlbCgpXFxcIiBjbGFzcz1cXFwiYnRuXFxcIj5Obywga2VlcCBpdDwvYT48YSBuZy1jbGljaz1cXFwicmVtb3ZlQ29uZmlybSgpXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zdWNjZXNzXFxcIj5ZZXMsIHJlbW92ZSBpdDwvYT48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJwbGVhc2Utd2FpdFxcXCI+PGRpdiBjbGFzcz1cXFwiYm94XFxcIj48ZGl2IGNsYXNzPVxcXCJpbWctY29udGFpbmVyXFxcIj48L2Rpdj48cD5QbGVhc2UgV2FpdC4uLjwvcD48L2Rpdj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2Jvb3RzdHJhcC9ib290c3RyYXAuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9jaGVja291dC5idW5kbGUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwvaHRtbD5cIik7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn0pKGxvY2Fscylcbn0sJ2NoZWNrb3V0L3JvZ2FpbmUtbWVuJzogZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgbG9jYWxzID0gbG9jYWxzIHx8IHt9O1xuICAgIGxvY2Fsc1snYXNzZXRzJ10gPSBhc3NldHM7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgbG9jYWxzXyA9IChsb2NhbHMgfHwge30pLHJvbGxiYXJFbmFibGVkID0gbG9jYWxzXy5yb2xsYmFyRW5hYmxlZCxyb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4gPSBsb2NhbHNfLnJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbixhc3NldHMgPSBsb2NhbHNfLmFzc2V0cyxIT1NUID0gbG9jYWxzXy5IT1NUO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBDaGVja291dDwvdGl0bGU+PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcXFwiPjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCB1c2VyLXNjYWxhYmxlPW5vXFxcIj5cIik7XG5pZiAoIHJvbGxiYXJFbmFibGVkKVxue1xuYnVmLnB1c2goXCI8IS0tIFJvbGxiYXIgLS0+PHNjcmlwdD52YXIgX3JvbGxiYXJDb25maWcgPSB7XFxuICBhY2Nlc3NUb2tlbjogJ1wiICsgKGphZGUuZXNjYXBlKChqYWRlLmludGVycCA9IHJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbikgPT0gbnVsbCA/ICcnIDogamFkZS5pbnRlcnApKSArIFwiJyxcXG4gIGNhcHR1cmVVbmNhdWdodDogdHJ1ZSxcXG4gIHBheWxvYWQ6IHtcXG4gICAgZW52aXJvbm1lbnQ6IFxcXCJwcm9kdWN0aW9uXFxcIlxcbiAgfVxcbn07XFxuIWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhiKXt0aGlzLnNoaW1JZD0rK2gsdGhpcy5ub3RpZmllcj1udWxsLHRoaXMucGFyZW50U2hpbT1iLHRoaXMubG9nZ2VyPWZ1bmN0aW9uKCl7fSxhLmNvbnNvbGUmJnZvaWQgMD09PWEuY29uc29sZS5zaGltSWQmJih0aGlzLmxvZ2dlcj1hLmNvbnNvbGUubG9nKX1mdW5jdGlvbiBkKGIsYyxkKXshZFs0XSYmYS5fcm9sbGJhcldyYXBwZWRFcnJvciYmKGRbNF09YS5fcm9sbGJhcldyYXBwZWRFcnJvcixhLl9yb2xsYmFyV3JhcHBlZEVycm9yPW51bGwpLGIudW5jYXVnaHRFcnJvci5hcHBseShiLGQpLGMmJmMuYXBwbHkoYSxkKX1mdW5jdGlvbiBlKGIpe3ZhciBkPWM7cmV0dXJuIGcoZnVuY3Rpb24oKXtpZih0aGlzLm5vdGlmaWVyKXJldHVybiB0aGlzLm5vdGlmaWVyW2JdLmFwcGx5KHRoaXMubm90aWZpZXIsYXJndW1lbnRzKTt2YXIgYz10aGlzLGU9XFxcInNjb3BlXFxcIj09PWI7ZSYmKGM9bmV3IGQodGhpcykpO3ZhciBmPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSxnPXtzaGltOmMsbWV0aG9kOmIsYXJnczpmLHRzOm5ldyBEYXRlfTtyZXR1cm4gYS5fcm9sbGJhclNoaW1RdWV1ZS5wdXNoKGcpLGU/Yzp2b2lkIDB9KX1mdW5jdGlvbiBmKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eSYmYi5oYXNPd25Qcm9wZXJ0eShcXFwiYWRkRXZlbnRMaXN0ZW5lclxcXCIpKXt2YXIgYz1iLmFkZEV2ZW50TGlzdGVuZXI7Yi5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGIsZCxlKXtjLmNhbGwodGhpcyxiLGEud3JhcChkKSxlKX07dmFyIGQ9Yi5yZW1vdmVFdmVudExpc3RlbmVyO2IucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyl7ZC5jYWxsKHRoaXMsYSxiJiZiLl93cmFwcGVkP2IuX3dyYXBwZWQ6YixjKX19fWZ1bmN0aW9uIGcoYSxiKXtyZXR1cm4gYj1ifHx0aGlzLmxvZ2dlcixmdW5jdGlvbigpe3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goYyl7YihcXFwiUm9sbGJhciBpbnRlcm5hbCBlcnJvcjpcXFwiLGMpfX19dmFyIGg9MDtjLmluaXQ9ZnVuY3Rpb24oYSxiKXt2YXIgZT1iLmdsb2JhbEFsaWFzfHxcXFwiUm9sbGJhclxcXCI7aWYoXFxcIm9iamVjdFxcXCI9PXR5cGVvZiBhW2VdKXJldHVybiBhW2VdO2EuX3JvbGxiYXJTaGltUXVldWU9W10sYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1udWxsLGI9Ynx8e307dmFyIGg9bmV3IGM7cmV0dXJuIGcoZnVuY3Rpb24oKXtpZihoLmNvbmZpZ3VyZShiKSxiLmNhcHR1cmVVbmNhdWdodCl7dmFyIGM9YS5vbmVycm9yO2Eub25lcnJvcj1mdW5jdGlvbigpe3ZhciBhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtkKGgsYyxhKX07dmFyIGcsaSxqPVtcXFwiRXZlbnRUYXJnZXRcXFwiLFxcXCJXaW5kb3dcXFwiLFxcXCJOb2RlXFxcIixcXFwiQXBwbGljYXRpb25DYWNoZVxcXCIsXFxcIkF1ZGlvVHJhY2tMaXN0XFxcIixcXFwiQ2hhbm5lbE1lcmdlck5vZGVcXFwiLFxcXCJDcnlwdG9PcGVyYXRpb25cXFwiLFxcXCJFdmVudFNvdXJjZVxcXCIsXFxcIkZpbGVSZWFkZXJcXFwiLFxcXCJIVE1MVW5rbm93bkVsZW1lbnRcXFwiLFxcXCJJREJEYXRhYmFzZVxcXCIsXFxcIklEQlJlcXVlc3RcXFwiLFxcXCJJREJUcmFuc2FjdGlvblxcXCIsXFxcIktleU9wZXJhdGlvblxcXCIsXFxcIk1lZGlhQ29udHJvbGxlclxcXCIsXFxcIk1lc3NhZ2VQb3J0XFxcIixcXFwiTW9kYWxXaW5kb3dcXFwiLFxcXCJOb3RpZmljYXRpb25cXFwiLFxcXCJTVkdFbGVtZW50SW5zdGFuY2VcXFwiLFxcXCJTY3JlZW5cXFwiLFxcXCJUZXh0VHJhY2tcXFwiLFxcXCJUZXh0VHJhY2tDdWVcXFwiLFxcXCJUZXh0VHJhY2tMaXN0XFxcIixcXFwiV2ViU29ja2V0XFxcIixcXFwiV2ViU29ja2V0V29ya2VyXFxcIixcXFwiV29ya2VyXFxcIixcXFwiWE1MSHR0cFJlcXVlc3RcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0XFxcIixcXFwiWE1MSHR0cFJlcXVlc3RVcGxvYWRcXFwiXTtmb3IoZz0wO2c8ai5sZW5ndGg7KytnKWk9altnXSxhW2ldJiZhW2ldLnByb3RvdHlwZSYmZihoLGFbaV0ucHJvdG90eXBlKX1yZXR1cm4gYVtlXT1oLGh9LGgubG9nZ2VyKSgpfSxjLnByb3RvdHlwZS5sb2FkRnVsbD1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1nKGZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFxcXCJzY3JpcHRcXFwiKSxlPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInNjcmlwdFxcXCIpWzBdO2Euc3JjPWQucm9sbGJhckpzVXJsLGEuYXN5bmM9IWMsYS5vbmxvYWQ9ZixlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsZSl9LHRoaXMubG9nZ2VyKSxmPWcoZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1hLl9yb2xsYmFyUGF5bG9hZFF1ZXVlKWZvcih2YXIgYixjLGQsZSxmPW5ldyBFcnJvcihcXFwicm9sbGJhci5qcyBkaWQgbm90IGxvYWRcXFwiKTtiPWEuX3JvbGxiYXJTaGltUXVldWUuc2hpZnQoKTspZm9yKGQ9Yi5hcmdzLGU9MDtlPGQubGVuZ3RoOysrZSlpZihjPWRbZV0sXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGMpe2MoZik7YnJlYWt9fSx0aGlzLmxvZ2dlcik7ZyhmdW5jdGlvbigpe2M/ZSgpOmEuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoXFxcImxvYWRcXFwiLGUsITEpOmEuYXR0YWNoRXZlbnQoXFxcIm9ubG9hZFxcXCIsZSl9LHRoaXMubG9nZ2VyKSgpfSxjLnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGIpe3RyeXtpZihcXFwiZnVuY3Rpb25cXFwiIT10eXBlb2YgYilyZXR1cm4gYjtpZihiLl9pc1dyYXApcmV0dXJuIGI7aWYoIWIuX3dyYXBwZWQpe2IuX3dyYXBwZWQ9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGIuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGMpe3Rocm93IGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9YyxjfX0sYi5fd3JhcHBlZC5faXNXcmFwPSEwO2Zvcih2YXIgYyBpbiBiKWIuaGFzT3duUHJvcGVydHkoYykmJihiLl93cmFwcGVkW2NdPWJbY10pfXJldHVybiBiLl93cmFwcGVkfWNhdGNoKGQpe3JldHVybiBifX07Zm9yKHZhciBpPVxcXCJsb2csZGVidWcsaW5mbyx3YXJuLHdhcm5pbmcsZXJyb3IsY3JpdGljYWwsZ2xvYmFsLGNvbmZpZ3VyZSxzY29wZSx1bmNhdWdodEVycm9yXFxcIi5zcGxpdChcXFwiLFxcXCIpLGo9MDtqPGkubGVuZ3RoOysrailjLnByb3RvdHlwZVtpW2pdXT1lKGlbal0pO3ZhciBrPVxcXCIvL2QzN2d2cnZjMHd0NHMxLmNsb3VkZnJvbnQubmV0L2pzL3YxLjEvcm9sbGJhci5taW4uanNcXFwiO19yb2xsYmFyQ29uZmlnLnJvbGxiYXJKc1VybD1fcm9sbGJhckNvbmZpZy5yb2xsYmFySnNVcmx8fGs7dmFyIGw9Yy5pbml0KGEsX3JvbGxiYXJDb25maWcpO2wubG9hZEZ1bGwoYSxiLCExLF9yb2xsYmFyQ29uZmlnKX0od2luZG93LGRvY3VtZW50KTs8L3NjcmlwdD5cIik7XG59XG5idWYucHVzaChcIjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcIi8vdXNlLnR5cGVraXQubmV0L3FxbTVhYWcuanNcXFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj50cnl7VHlwZWtpdC5sb2FkKCk7fWNhdGNoKGUpe31cXG48L3NjcmlwdD48bGlua1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3JlbCc6KCdzdHlsZXNoZWV0JyksICdocmVmJzooXCJcIiArIChhc3NldHMudXJsKCcvY3NzL2NoZWNrb3V0LXJvZ2FpbmUuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBuZy1jb250cm9sbGVyPVxcXCJNYWluQ3RybFxcXCIgc3R5bGU9XFxcIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBuZy1pbml0PVxcXCJsb2FkVGhlbWUoJ3JvZ2FpbmUtbWVuJylcXFwiIGNsYXNzPVxcXCJib290c3RyYXAtYnV0dG9uLW92ZXJyaWRlXFxcIj48ZGl2IGNsYXNzPVxcXCJjb250YWluZXItZmx1aWRcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzc2wtc2VjdXJlZC1jb25uZWN0aW9uIHoyXFxcIj48aDQ+PGRpdiBjbGFzcz1cXFwiaWNvbi1sb2NrZWRcXFwiPjwvZGl2PlNTTCBTZWN1cmVkIENvbm5lY3Rpb248L2g0PjxoNCBuZy1jbGljaz1cXFwiZ29Ub1JlZmVycmVyKClcXFwiIGNsYXNzPVxcXCJjbG9zZS1jaGVja291dCBwdWxsLXJpZ2h0XFxcIj48IS0tfCBDbG9zZS0tPjxkaXYgY2xhc3M9XFxcImljb24tY2xvc2VcXFwiPjwvZGl2PjwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIGhlYWRlciBzY3JvbGwtaGVhZGVyIHoxXFxcIj48ZGl2IGNsYXNzPVxcXCJ0aXRsZS1iYXJcXFwiPjxoMiBjbGFzcz1cXFwidGV4dC1jZW50ZXIgdXBwZXJjYXNlXFxcIj5DaGVja291dDwvaDI+PC9kaXY+PC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7LCAmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBtaW4taGVpZ2h0LWNvbnRhaW5lciB6MFxcXCI+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7LCAmcXVvdDtzcGFuMTImcXVvdDssICZxdW90O3NwYW44IGxlZnQmcXVvdDspICsgJnF1b3Q7ICZxdW90OyArIGdldFN0ZXAoKVxcXCIgY2xhc3M9XFxcIm1haW5cXFwiPjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInN0ZXBzIHNlY3Rpb24gejEgdGV4dC1jZW50ZXJcXFwiPjxkaXYgc2ItY2hlY2tvdXQtc3RlcHMtYXJyb3c9XFxcImdldFN0ZXAoKVxcXCIgY2xhc3M9XFxcImRvd24tYXJyb3dcXFwiPjwvZGl2PjxhIG5nLWNsaWNrPVxcXCJnb1RvU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDssICZxdW90O2FjdGl2ZSZxdW90OylcXFwiIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+PGgzPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7LCAmcXVvdDtiYWRnZS1pbmZvJnF1b3Q7KVxcXCIgY2xhc3M9XFxcImJhZGdlXFxcIj4xPC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDssICZxdW90O2FjdGl2ZSZxdW90OylcXFwiIGNsYXNzPVxcXCJzdGVwXFxcIj5SZXZpZXc8ZGl2IGNsYXNzPVxcXCJkaXZpZGVyXFxcIj4+PC9kaXY+PC9kaXY+PC9oMz48L2E+PGEgbmctY2xpY2s9XFxcImdvVG9TdGVwKCZxdW90O3NoaXBwaW5nLWJpbGxpbmcmcXVvdDspXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtzaGlwcGluZy1iaWxsaW5nJnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPjxoMz48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3NoaXBwaW5nLWJpbGxpbmcmcXVvdDssICZxdW90O2JhZGdlLWluZm8mcXVvdDspXFxcIiBjbGFzcz1cXFwiYmFkZ2VcXFwiPjI8L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3NoaXBwaW5nLWJpbGxpbmcmcXVvdDssICZxdW90O2FjdGl2ZSZxdW90OylcXFwiIGNsYXNzPVxcXCJzdGVwXFxcIj5TaGlwcGluZyAmIFBheW1lbnQ8ZGl2IGNsYXNzPVxcXCJkaXZpZGVyXFxcIj4+PC9kaXY+PC9kaXY+PC9oMz48L2E+PGEgbmctY2xpY2s9XFxcImdvVG9TdGVwKCZxdW90O29yZGVyLXN1bW1hcnkmcXVvdDspXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDthY3RpdmUmcXVvdDspXFxcIiBocmVmPVxcXCJqYXZhc2NyaXB0OnZvaWQoMClcXFwiPjxoMz48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O29yZGVyLXN1bW1hcnkmcXVvdDssICZxdW90O2JhZGdlLWluZm8mcXVvdDspXFxcIiBjbGFzcz1cXFwiYmFkZ2VcXFwiPjM8L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O29yZGVyLXN1bW1hcnkmcXVvdDssICZxdW90O2FjdGl2ZSZxdW90OylcXFwiIGNsYXNzPVxcXCJzdGVwXFxcIj5PcmRlciBTdW1tYXJ5PC9kaXY+PC9oMz48L2E+PC9kaXY+PGRpdiBzYi1jdXN0b20tc2Nyb2xsYmFyIHNjcm9sbC1zaGFkb3cgY2xhc3M9XFxcInNjcm9sbGFibGUtY29udGVudFxcXCI+PGRpdiBuZy1zaG93PVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgc2VjdGlvbiB6MSBoaWRkZW4tcGhvbmVcXFwiPjxoMyB0b29sdGlwPVxcXCJIZXJlJ3MgaG93IHNoaXBwaW5nIGNhbGN1bGF0aW9ucyB3b3JrLi4uXFxcIiBwbGFjZW1lbnQ9XFxcImJvdHRvbVxcXCIgY2xhc3M9XFxcInNwYW4xMiBsYWJlbDFcXFwiPkVzdGltYXRlZCBUYXggJiBTaGlwcGluZzwhLS0uaWNvbi1pbmZvLTItLT48L2gzPjwvZGl2PjxkaXYgbmctc2hvdz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHN0YXRlIHNlY3Rpb24gejJcXFwiPjxkaXYgY2xhc3M9XFxcInNwYW4yIHRleHQtbGVmdFxcXCI+PGg0PlByb3ZpbmNlPC9oND48L2Rpdj48ZGl2IGNsYXNzPVxcXCJzcGFuNVxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48c2VsZWN0IGlkPVxcXCJzaGlwcGluZy1zdGF0ZVxcXCIgbmctaWY9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgbmctbW9kZWw9XFxcInVzZXIuc2hpcHBpbmcuc3RhdGVcXFwiIG5nLW9wdGlvbnM9XFxcInN0YXRlLm5hbWUgZm9yIHN0YXRlIGluIHN0YXRlcyB0cmFjayBieSBzdGF0ZS5hYmJyZXZpYXRpb25cXFwiIG5nLWNoYW5nZT1cXFwic2hpcHBpbmdTdGF0ZUNoYW5nZWQoJyNzaGlwcGluZy1zdGF0ZScpXFxcIiBjbGFzcz1cXFwic3BhbjEyIHNvbG8gc2VsZWN0cGlja2VyXFxcIj48b3B0aW9uIHZhbHVlPVxcXCJcXFwiIGRpc2FibGVkIHNlbGVjdGVkPihzZWxlY3QpPC9vcHRpb24+PC9zZWxlY3Q+PC9kaXY+PC9kaXY+PGg1IGNsYXNzPVxcXCJzcGFuNVxcXCI+SXRlbXMgaW4geW91ciBzaG9wcGluZyBiYWcgYXJlIG5vdCByZXNlcnZlZCBhbmQgbWF5IHNlbGwgb3V0LjwvaDU+PC9kaXY+PGRpdiBuZy12aWV3IGNsYXNzPVxcXCJ6MCBzY3JvbGwtc2hhZG93LW91dGVyXFxcIj48L2Rpdj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgZGVza3RvcC1mb290ZXIgaGlkZGVuLXBob25lIHoxXFxcIj4gICAgICAgPGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48ZGl2IGNsYXNzPVxcXCJub3J0b25cXFwiPjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcImh0dHBzOi8vc2VhbC52ZXJpc2lnbi5jb20vZ2V0c2VhbD9ob3N0X25hbWU9d3d3LnNob3BiZWFtLmNvbSZhbXA7YW1wO3NpemU9WFMmYW1wO2FtcDt1c2VfZmxhc2g9Tk8mYW1wO2FtcDt1c2VfdHJhbnNwYXJlbnQ9WUVTJmFtcDthbXA7bGFuZz1lblxcXCI+Ly8udGVzdC12ZXJpc2lnbihzdHlsZT1cXFwid2lkdGg6IDgwcHg7IGhlaWdodDogNDBweDsgYmFja2dyb3VuZC1jb2xvcjogI0ZEQkIzMDtcXFwiKTwvc2NyaXB0PjwvZGl2PjxkaXYgY2xhc3M9XFxcImZvb3Rlci1tYWluLWJ1dHRvblxcXCI+PGJ1dHRvbiBuZy1jbGljaz1cXFwicHJldmlvdXNTdGVwKClcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybXxyZXZpZXcmcXVvdDspXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1sYXJnZSBidG4tc2Vjb25kYXJ5IGJhY2tcXFwiPnt7YWN0aXZlU3RlcCgncmV2aWV3JywgJ0Nsb3NlJywgJ0JhY2snKX19PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRpdGxlLWJhciBwdWxsLWxlZnRcXFwiPjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj5Tb2xkIGFuZCBTaGlwcGVkIHRvIHlvdSBieTwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImxhYmVsMVxcXCI+V2VsbC5jYTwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvcHJpdmFjeS5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBQcml2YWN5IE5vdGljZTwvYT48L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3Rlcm1zLmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFRlcm1zICYgQ29uZGl0aW9uczwvYT48L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3NoaXBwaW5nLWFuZC1yZXR1cm5zXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBTaGlwcGluZyAmIFJldHVybnM8L2E+PC9oNT48L2Rpdj48ZGl2IHN0eWxlPVxcXCJwYWRkaW5nLWJvdHRvbTogMTBweFxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvXFxcIj5XZWxsLmNhIGlzIGEgcmVnaXN0ZXJlZCB0cmFkZW1hcmsgb3duZWQgYnkgV2VsbC5jYSBJbmMuIFRoZSBXZWxsLmNhIGVjb21tZXJjZSBzZXJ2aWNlcyBhcmUgc3ViamVjdCB0byB0aGUgIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHVzZSBvZiBXZWxsLmNhIEluYy4gYW5kIGNhbiBiZSByZXZpZXdlZCA8YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvdGVybXMuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmhlcmU8L2E+PHNwYW4+LiBKb2huc29uICYgSm9obnNvbiBJbmMuIChKSkkpIGlzIHByb3ZpZGluZyBpbmZvcm1hdGlvbiBmcm9tIHlvdXIgcHJvZHVjdCBwdXJjaGFzZSByZXF1ZXN0IHRvIHRoZSBXZWxsLmNhIHNpdGUgZm9yIHRoZSBwdXJjaGFzZSBvZiBKSkkgcHJvZHVjdHMgYW5kIGlzIG5vdCBhZmZpbGlhdGVkIHdpdGggV2VsbC5jYSBJbmMuOyBub3IgaXMgSkpJIHJlc3BvbnNpYmxlIGZvciB0aGUgc2FsZSBvciBkZWxpdmVyeSBvZiAgSkpJIHByb2R1Y3RzIHRoYXQgeW91IHNlbGVjdCBmb3IgcHVyY2hhc2UgZnJvbSB0aGUgV2VsbC5jYSBzaXRlLjwvc3Bhbj48L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvIHB1bGwtbGVmdFxcXCI+V2VsbC5jYSBQaGFybWFjeSBBY2NyZWRpdGF0aW9uIGFzIG9mIE5vdmVtYmVyIDExdGggMjAxNTwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm8gcHVsbC1sZWZ0XFxcIj5PUEMgQ2VydGlmaWNhdGUgQWNjcmVkaXRhdGlvbiAjMzA0MjIyPC9oNT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPllvdXIgUGhhcm1hY2lzdCBpcyBQaGlsaXAgUm9zZW5iZXJnPC9oNT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPkNlbnRyYWwgRmlsbCBTb2x1dGlvbnMgSW5jLiAzNDYgTWlsbHdheSBBdmUuIFZhdWdoYW4sIE9OIEw0SyAzVzE8L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvIHB1bGwtbGVmdFxcXCI+Q2FsbCBXZWxsLmNhIFRvbGwgRnJlZTogMS04NjYtNjQwLTM4MDA8L2g1PjwvZGl2PjxkaXYgc3R5bGU9XFxcInBhZGRpbmc6IDEwcHggMHB4XFxcIiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm8gcHVsbC1sZWZ0XFxcIj4qKiBGcmVlIEVjb25vbXkgU2hpcHBpbmcgb2ZmZXJlZCBieSBXZWxsLmNhIGFzIG9mIE5vdmVtYmVyIDExdGggMjAxNSBvbiBvcmRlcnMgb2YgJDI5IG9yIG1vcmUgKGJlZm9yZSB0YXhlcyBhbmQgc2hpcHBpbmcpIGluIENhbmFkYSBleGNsdWRpbmcgcmVtb3RlIGFuZCBkaWZmaWN1bHQgdG8gc2VydmUgbG9jYXRpb25zLiBTdWJqZWN0IHRvIGNoYW5nZSBhdCB0aGUgZGlzY3JldGlvbiBvZiBXZWxsLmNhLiBCYXNlZCBvbjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9zaGlwcGluZy1hbmQtcmV0dXJuc1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgU2hpcHBpbmcgYW5kIFJldHVybnMgcG9saWN5LjwvYT48L2g1PjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB2aXNpYmxlLXBob25lXFxcIj48ZGl2IGNsYXNzPVxcXCJ0aXRsZS1iYXIgdGV4dC1jZW50ZXJcXFwiPjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj5Tb2xkIGFuZCBTaGlwcGVkIHRvIHlvdSBieTwvaDU+PGg1IGNsYXNzPVxcXCJsYWJlbDFcXFwiPldlbGwuY2E8L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3ByaXZhY3kuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgUHJpdmFjeSBOb3RpY2U8L2E+PC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS90ZXJtcy5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBUZXJtcyAmIENvbmRpdGlvbnM8L2E+PC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9zaGlwcGluZy1hbmQtcmV0dXJuc1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgU2hpcHBpbmcgJiBSZXR1cm5zPC9hPjwvaDU+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7LCAmcXVvdDtjb25maXJtJnF1b3Q7LCAmcXVvdDsmcXVvdDspXFxcIiBjbGFzcz1cXFwic3BhbjQgc3VtbWFyeVxcXCI+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDssICZxdW90OyZxdW90OywgJnF1b3Q7ZnVsbC1oZWlnaHQmcXVvdDspXFxcIiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwic3VtbWFyeS1jb250YWluZXJcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48aDMgY2xhc3M9XFxcImxhYmVsMSBsYXJnZSBpbmxpbmUtYmxvY2tcXFwiPlN1bW1hcnk8L2gzPjxoNCBuZy1wbHVyYWxpemUgY291bnQ9XFxcImNhcnQuaXRlbUNvdW50XFxcIiB3aGVuPVxcXCJ7JnF1b3Q7b25lJnF1b3Q7OiAmcXVvdDsoe30gSXRlbSkmcXVvdDssICZxdW90O290aGVyJnF1b3Q7OiAmcXVvdDsoe30gSXRlbXMpJnF1b3Q7fVxcXCI+PC9oND48L2Rpdj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInNwYW4xMiBjYXJ0LWl0ZW1zLWNvbnRhaW5lciBoaWRkZW4tcGhvbmVcXFwiPjxkaXYgY2FydC1pdGVtcy1yb2dhaW5lIHNpZGViYXIgY2xhc3M9XFxcImNhcnQtaXRlbXMgc2Nyb2xsLXNoYWRvdy1vdXRlciBzZWN0aW9uIG5vLXBhZCBmdWxsLWhlaWdodFxcXCI+PC9kaXY+PC9kaXY+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDssICZxdW90OyZxdW90OywgJnF1b3Q7c2Nyb2xsLWZvb3RlciZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgc2VjdGlvblxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIHN1YnRvdGFsXFxcIj5TdWJ0b3RhbDwvaDQ+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBtb25leVxcXCI+e3tjYXJ0LnN1YnRvdGFsIC8gMTAwIHwgY3VycmVuY3l9fTwvaDQ+PGgzIGNsYXNzPVxcXCJsYWJlbDEgbGFyZ2UgZmxvYXQtcGFkXFxcIj5UYXggJiBTaGlwcGluZyAqPCEtLS5pY29uLWluZm8tMi5oaWRkZW4tcGhvbmUtLT48L2gzPjwvZGl2PjxkaXYgY2xhc3M9XFxcImNsZWFyLWxhcmdlXFxcIj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc2VjdGlvblxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlXFxcIj5UYXg8L2g0PjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2UgbW9uZXlcXFwiPnt7e251bGw6ICctLSd9W3RheF0gfHwgKHRheCAvIDEwMCB8IGN1cnJlbmN5KX19PC9oND48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPlNoaXBwaW5nPC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57e3swOidGUkVFICoqJywgbnVsbDogJy0tJ31bc2hpcHBpbmddIHx8IChzaGlwcGluZyAvIDEwMCB8IGN1cnJlbmN5KX19PC9oND48L2Rpdj48ZGl2IG5nLXNob3c9XFxcImRpc2NvdW50XFxcIiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlXFxcIj5EaXNjb3VudDwvaDQ+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBtb25leVxcXCI+e3soZGlzY291bnQgLyAxMDAgfCBjdXJyZW5jeSl9fTwvaDQ+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb24gdG90YWxcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGgzIGNsYXNzPVxcXCJzcGFuNiBsYWJlbDEgbGFyZ2VcXFwiPlRvdGFsPC9oMz48aDQgY2xhc3M9XFxcInNwYW42IGxhYmVsMSBsYXJnZSBtb25leVxcXCI+e3t0b3RhbCAvIDEwMCB8IGN1cnJlbmN5fX08L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJlc3RpbWF0ZWQtY29zdHNcXFwiPiogRXN0aW1hdGVkIHRheGVzICYgc2hpcHBpbmc8L2g1PjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBmb290ZXJcXFwiPjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB2aXNpYmxlLXBob25lXFxcIj48ZGl2IG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJub3J0b24gcHVsbC1sZWZ0XFxcIj48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgc3JjPVxcXCJodHRwczovL3NlYWwudmVyaXNpZ24uY29tL2dldHNlYWw/aG9zdF9uYW1lPXd3dy5zaG9wYmVhbS5jb20mYW1wO2FtcDtzaXplPVhTJmFtcDthbXA7dXNlX2ZsYXNoPU5PJmFtcDthbXA7dXNlX3RyYW5zcGFyZW50PVlFUyZhbXA7YW1wO2xhbmc9ZW5cXFwiPjwvc2NyaXB0PjwhLS0udGVzdC12ZXJpc2lnbihzdHlsZT1cXFwid2lkdGg6IDgwcHg7IGhlaWdodDogNDBweDsgYmFja2dyb3VuZC1jb2xvcjogI0ZEQkIzMDtcXFwiKS0tPjwvZGl2PjxidXR0b24gbmctY2xpY2s9XFxcInByZXZpb3VzU3RlcCgpXFxcIiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1sYXJnZSBidG4tc2Vjb25kYXJ5IGJhY2tcXFwiPnt7YWN0aXZlU3RlcCgncmV2aWV3JywgJ0Nsb3NlJywgJ0JhY2snKX19PC9idXR0b24+PGJ1dHRvbiBuZy1jbGljaz1cXFwibmV4dFN0ZXAoKVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7Y2hlY2tvdXQgYnRuLXN1Y2Nlc3MmcXVvdDssICZxdW90O25leHQgYnRuLXByaW1hcnkmcXVvdDspXFxcIiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XFxcIj57e2Zvcm1TdWJtaXRWYWx1ZSgpfX0gPjwvYnV0dG9uPjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0ZXh0LWNlbnRlclxcXCI+PGg1IGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+UG93ZXJlZCBieVwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyAnKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8YSBocmVmPVxcXCJodHRwczovL3d3dy5zaG9wYmVhbS5jb21cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBjbGFzcz1cXFwiYm9sZFxcXCI+U2hvcGJlYW08L2E+PC9oNT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdGFnbGluZSB0ZXh0LWNlbnRlclxcXCI+PGg1IGNsYXNzPVxcXCJpdGFsaWMgdXBwZXJjYXNlXFxcIj5zaG9wIHNlYW1sZXNzbHk8L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0ZXh0LWNlbnRlclxcXCI+PGg2IGNsYXNzPVxcXCJ1cHBlcmNhc2VcXFwiPjxhIGhyZWY9XFxcIm1haWx0bzpjdXN0b21lcmNhcmVAc2hvcGJlYW0uY29tXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgbmctY2xpY2s9XFxcInRyYWNrTmVlZEFzc2lzdGFuY2VDbGljaygpXFxcIj5jdXN0b21lcmNhcmVAc2hvcGJlYW0uY29tPC9hPjwvaDY+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyAgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDYgY2xhc3M9XFxcInVwcGVyY2FzZVxcXCI+IDxhIGhyZWY9XFxcInRlbDo4MDA0OTAzMjE2XFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+UGhvbmU6ICg4MDApIDQ5MC0zMjE2PC9hPjwvaDY+PC9kaXY+PGRpdiBzdHlsZT1cXFwibWFyZ2luLXRvcDogMTBweFxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCB0ZXh0LWNlbnRlclxcXCI+PGJ1dHRvbiBuZy1jbGljaz1cXFwibmV4dFN0ZXAoKVxcXCIgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7Y2hlY2tvdXQgYnRuLXN1Y2Nlc3MmcXVvdDssICZxdW90O25leHQgYnRuLXByaW1hcnkmcXVvdDspXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1sYXJnZVxcXCI+e3tmb3JtU3VibWl0VmFsdWUoKX19PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHZpc2libGUtcGhvbmVcXFwiPjxkaXYgY2xhc3M9XFxcInRpdGxlLWJhciB0ZXh0LWNlbnRlclxcXCI+PGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPlNvbGQgYW5kIFNoaXBwZWQgdG8geW91IGJ5PC9oNT48aDUgY2xhc3M9XFxcImxhYmVsMVxcXCI+V2VsbC5jYTwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvcHJpdmFjeS5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBQcml2YWN5IE5vdGljZTwvYT48L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3Rlcm1zLmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFRlcm1zICYgQ29uZGl0aW9uczwvYT48L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3NoaXBwaW5nLWFuZC1yZXR1cm5zXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBTaGlwcGluZyAmIFJldHVybnM8L2E+PC9oNT48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48L2JvZHk+PGRpdiBpZD1cXFwiZXJyb3ItbW9kYWxcXFwiIGNsYXNzPVxcXCJib290c3RyYXAtbW9kYWwtb3ZlcnJpZGUgbW9kYWwgZmFkZSBoaWRlXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPjxoMz5PaCBOb2VzISE8L2gzPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPjxwPlNvbWV0aGluZyB3ZW50IHdyb25nLiBXZSdyZSB0cmFja2luZyB0aGlzIGlzc3VlIHdpdGggdGhlIElEIHNob3duIGJlbG93IGFuZCBvdXIgdGVhbSBoYXMgYmVlbiBub3RpZmllZC4gV2UncmUgdmVyeSBzb3JyeSBmb3IgdGhlIGluY29udmVuaWVuY2UuPC9wPjxwcmUgaWQ9XFxcImVycm9yLW1vZGFsLWVycm9ySWRcXFwiPjwvcHJlPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWZvb3RlclxcXCI+PGJ1dHRvbiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5EaXNtaXNzPC9idXR0b24+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwiYm9vdHN0cmFwLW1vZGFsLW92ZXJyaWRlIG1vZGFsIGhpZGUgZmFkZSByZW1vdmUtZGlhbG9nXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIj4mdGltZXM7PC9idXR0b24+PGgyPlJlbW92ZSBJdGVtczwvaDI+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+PHAgbmctcGx1cmFsaXplIGNvdW50PVxcXCJzZWxlY3RlZEl0ZW0ucXVhbnRpdHlcXFwiIHdoZW49XFxcInsmcXVvdDsxJnF1b3Q7OiAmcXVvdDtBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHt7c2VsZWN0ZWRJdGVtLm5hbWV9fT8mcXVvdDssICZxdW90OzImcXVvdDs6ICZxdW90O1lvdSBoYXZlIDIgb2Yge3tzZWxlY3RlZEl0ZW0ubmFtZX19IGluIHlvdXIgY2FydC4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGVtIGJvdGg/JnF1b3Q7LCAmcXVvdDtvdGhlciZxdW90OzogJnF1b3Q7WW91IGhhdmUge30gb2Yge3tzZWxlY3RlZEl0ZW0ubmFtZX19IGluIHlvdXIgY2FydC4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSBhbGwge30/JnF1b3Q7fVxcXCIgY2xhc3M9XFxcImxlYWRcXFwiPjwvcD48L2Rpdj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1mb290ZXJcXFwiPjxhIG5nLWNsaWNrPVxcXCJyZW1vdmVDYW5jZWwoKVxcXCIgY2xhc3M9XFxcImJ0blxcXCI+Tm8sIGtlZXAgaXQ8L2E+PGEgbmctY2xpY2s9XFxcInJlbW92ZUNvbmZpcm0oKVxcXCIgY2xhc3M9XFxcImJ0biBidG4tc3VjY2Vzc1xcXCI+WWVzLCByZW1vdmUgaXQ8L2E+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwicGxlYXNlLXdhaXRcXFwiPjxkaXYgY2xhc3M9XFxcImJveFxcXCI+PGRpdiBjbGFzcz1cXFwiaW1nLWNvbnRhaW5lclxcXCI+PC9kaXY+PHA+UGxlYXNlIFdhaXQuLi48L3A+PC9kaXY+PC9kaXY+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9ib290c3RyYXAvYm9vdHN0cmFwLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvY2hlY2tvdXQuYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2h0bWw+XCIpOztyZXR1cm4gYnVmLmpvaW4oXCJcIik7XG59KShsb2NhbHMpXG59LCdjaGVja291dC9yb2dhaW5lLXdvbWVuJzogZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgbG9jYWxzID0gbG9jYWxzIHx8IHt9O1xuICAgIGxvY2Fsc1snYXNzZXRzJ10gPSBhc3NldHM7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgbG9jYWxzXyA9IChsb2NhbHMgfHwge30pLHJvbGxiYXJFbmFibGVkID0gbG9jYWxzXy5yb2xsYmFyRW5hYmxlZCxyb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4gPSBsb2NhbHNfLnJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbixhc3NldHMgPSBsb2NhbHNfLmFzc2V0cyxIT1NUID0gbG9jYWxzXy5IT1NUO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBDaGVja291dDwvdGl0bGU+PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcXFwiPjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCB1c2VyLXNjYWxhYmxlPW5vXFxcIj5cIik7XG5pZiAoIHJvbGxiYXJFbmFibGVkKVxue1xuYnVmLnB1c2goXCI8IS0tIFJvbGxiYXIgLS0+PHNjcmlwdD52YXIgX3JvbGxiYXJDb25maWcgPSB7XFxuICBhY2Nlc3NUb2tlbjogJ1wiICsgKGphZGUuZXNjYXBlKChqYWRlLmludGVycCA9IHJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbikgPT0gbnVsbCA/ICcnIDogamFkZS5pbnRlcnApKSArIFwiJyxcXG4gIGNhcHR1cmVVbmNhdWdodDogdHJ1ZSxcXG4gIHBheWxvYWQ6IHtcXG4gICAgZW52aXJvbm1lbnQ6IFxcXCJwcm9kdWN0aW9uXFxcIlxcbiAgfVxcbn07XFxuIWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhiKXt0aGlzLnNoaW1JZD0rK2gsdGhpcy5ub3RpZmllcj1udWxsLHRoaXMucGFyZW50U2hpbT1iLHRoaXMubG9nZ2VyPWZ1bmN0aW9uKCl7fSxhLmNvbnNvbGUmJnZvaWQgMD09PWEuY29uc29sZS5zaGltSWQmJih0aGlzLmxvZ2dlcj1hLmNvbnNvbGUubG9nKX1mdW5jdGlvbiBkKGIsYyxkKXshZFs0XSYmYS5fcm9sbGJhcldyYXBwZWRFcnJvciYmKGRbNF09YS5fcm9sbGJhcldyYXBwZWRFcnJvcixhLl9yb2xsYmFyV3JhcHBlZEVycm9yPW51bGwpLGIudW5jYXVnaHRFcnJvci5hcHBseShiLGQpLGMmJmMuYXBwbHkoYSxkKX1mdW5jdGlvbiBlKGIpe3ZhciBkPWM7cmV0dXJuIGcoZnVuY3Rpb24oKXtpZih0aGlzLm5vdGlmaWVyKXJldHVybiB0aGlzLm5vdGlmaWVyW2JdLmFwcGx5KHRoaXMubm90aWZpZXIsYXJndW1lbnRzKTt2YXIgYz10aGlzLGU9XFxcInNjb3BlXFxcIj09PWI7ZSYmKGM9bmV3IGQodGhpcykpO3ZhciBmPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSxnPXtzaGltOmMsbWV0aG9kOmIsYXJnczpmLHRzOm5ldyBEYXRlfTtyZXR1cm4gYS5fcm9sbGJhclNoaW1RdWV1ZS5wdXNoKGcpLGU/Yzp2b2lkIDB9KX1mdW5jdGlvbiBmKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eSYmYi5oYXNPd25Qcm9wZXJ0eShcXFwiYWRkRXZlbnRMaXN0ZW5lclxcXCIpKXt2YXIgYz1iLmFkZEV2ZW50TGlzdGVuZXI7Yi5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGIsZCxlKXtjLmNhbGwodGhpcyxiLGEud3JhcChkKSxlKX07dmFyIGQ9Yi5yZW1vdmVFdmVudExpc3RlbmVyO2IucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyl7ZC5jYWxsKHRoaXMsYSxiJiZiLl93cmFwcGVkP2IuX3dyYXBwZWQ6YixjKX19fWZ1bmN0aW9uIGcoYSxiKXtyZXR1cm4gYj1ifHx0aGlzLmxvZ2dlcixmdW5jdGlvbigpe3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goYyl7YihcXFwiUm9sbGJhciBpbnRlcm5hbCBlcnJvcjpcXFwiLGMpfX19dmFyIGg9MDtjLmluaXQ9ZnVuY3Rpb24oYSxiKXt2YXIgZT1iLmdsb2JhbEFsaWFzfHxcXFwiUm9sbGJhclxcXCI7aWYoXFxcIm9iamVjdFxcXCI9PXR5cGVvZiBhW2VdKXJldHVybiBhW2VdO2EuX3JvbGxiYXJTaGltUXVldWU9W10sYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1udWxsLGI9Ynx8e307dmFyIGg9bmV3IGM7cmV0dXJuIGcoZnVuY3Rpb24oKXtpZihoLmNvbmZpZ3VyZShiKSxiLmNhcHR1cmVVbmNhdWdodCl7dmFyIGM9YS5vbmVycm9yO2Eub25lcnJvcj1mdW5jdGlvbigpe3ZhciBhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtkKGgsYyxhKX07dmFyIGcsaSxqPVtcXFwiRXZlbnRUYXJnZXRcXFwiLFxcXCJXaW5kb3dcXFwiLFxcXCJOb2RlXFxcIixcXFwiQXBwbGljYXRpb25DYWNoZVxcXCIsXFxcIkF1ZGlvVHJhY2tMaXN0XFxcIixcXFwiQ2hhbm5lbE1lcmdlck5vZGVcXFwiLFxcXCJDcnlwdG9PcGVyYXRpb25cXFwiLFxcXCJFdmVudFNvdXJjZVxcXCIsXFxcIkZpbGVSZWFkZXJcXFwiLFxcXCJIVE1MVW5rbm93bkVsZW1lbnRcXFwiLFxcXCJJREJEYXRhYmFzZVxcXCIsXFxcIklEQlJlcXVlc3RcXFwiLFxcXCJJREJUcmFuc2FjdGlvblxcXCIsXFxcIktleU9wZXJhdGlvblxcXCIsXFxcIk1lZGlhQ29udHJvbGxlclxcXCIsXFxcIk1lc3NhZ2VQb3J0XFxcIixcXFwiTW9kYWxXaW5kb3dcXFwiLFxcXCJOb3RpZmljYXRpb25cXFwiLFxcXCJTVkdFbGVtZW50SW5zdGFuY2VcXFwiLFxcXCJTY3JlZW5cXFwiLFxcXCJUZXh0VHJhY2tcXFwiLFxcXCJUZXh0VHJhY2tDdWVcXFwiLFxcXCJUZXh0VHJhY2tMaXN0XFxcIixcXFwiV2ViU29ja2V0XFxcIixcXFwiV2ViU29ja2V0V29ya2VyXFxcIixcXFwiV29ya2VyXFxcIixcXFwiWE1MSHR0cFJlcXVlc3RcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0XFxcIixcXFwiWE1MSHR0cFJlcXVlc3RVcGxvYWRcXFwiXTtmb3IoZz0wO2c8ai5sZW5ndGg7KytnKWk9altnXSxhW2ldJiZhW2ldLnByb3RvdHlwZSYmZihoLGFbaV0ucHJvdG90eXBlKX1yZXR1cm4gYVtlXT1oLGh9LGgubG9nZ2VyKSgpfSxjLnByb3RvdHlwZS5sb2FkRnVsbD1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1nKGZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFxcXCJzY3JpcHRcXFwiKSxlPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInNjcmlwdFxcXCIpWzBdO2Euc3JjPWQucm9sbGJhckpzVXJsLGEuYXN5bmM9IWMsYS5vbmxvYWQ9ZixlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsZSl9LHRoaXMubG9nZ2VyKSxmPWcoZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1hLl9yb2xsYmFyUGF5bG9hZFF1ZXVlKWZvcih2YXIgYixjLGQsZSxmPW5ldyBFcnJvcihcXFwicm9sbGJhci5qcyBkaWQgbm90IGxvYWRcXFwiKTtiPWEuX3JvbGxiYXJTaGltUXVldWUuc2hpZnQoKTspZm9yKGQ9Yi5hcmdzLGU9MDtlPGQubGVuZ3RoOysrZSlpZihjPWRbZV0sXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGMpe2MoZik7YnJlYWt9fSx0aGlzLmxvZ2dlcik7ZyhmdW5jdGlvbigpe2M/ZSgpOmEuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoXFxcImxvYWRcXFwiLGUsITEpOmEuYXR0YWNoRXZlbnQoXFxcIm9ubG9hZFxcXCIsZSl9LHRoaXMubG9nZ2VyKSgpfSxjLnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGIpe3RyeXtpZihcXFwiZnVuY3Rpb25cXFwiIT10eXBlb2YgYilyZXR1cm4gYjtpZihiLl9pc1dyYXApcmV0dXJuIGI7aWYoIWIuX3dyYXBwZWQpe2IuX3dyYXBwZWQ9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGIuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGMpe3Rocm93IGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9YyxjfX0sYi5fd3JhcHBlZC5faXNXcmFwPSEwO2Zvcih2YXIgYyBpbiBiKWIuaGFzT3duUHJvcGVydHkoYykmJihiLl93cmFwcGVkW2NdPWJbY10pfXJldHVybiBiLl93cmFwcGVkfWNhdGNoKGQpe3JldHVybiBifX07Zm9yKHZhciBpPVxcXCJsb2csZGVidWcsaW5mbyx3YXJuLHdhcm5pbmcsZXJyb3IsY3JpdGljYWwsZ2xvYmFsLGNvbmZpZ3VyZSxzY29wZSx1bmNhdWdodEVycm9yXFxcIi5zcGxpdChcXFwiLFxcXCIpLGo9MDtqPGkubGVuZ3RoOysrailjLnByb3RvdHlwZVtpW2pdXT1lKGlbal0pO3ZhciBrPVxcXCIvL2QzN2d2cnZjMHd0NHMxLmNsb3VkZnJvbnQubmV0L2pzL3YxLjEvcm9sbGJhci5taW4uanNcXFwiO19yb2xsYmFyQ29uZmlnLnJvbGxiYXJKc1VybD1fcm9sbGJhckNvbmZpZy5yb2xsYmFySnNVcmx8fGs7dmFyIGw9Yy5pbml0KGEsX3JvbGxiYXJDb25maWcpO2wubG9hZEZ1bGwoYSxiLCExLF9yb2xsYmFyQ29uZmlnKX0od2luZG93LGRvY3VtZW50KTs8L3NjcmlwdD5cIik7XG59XG5idWYucHVzaChcIjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcIi8vdXNlLnR5cGVraXQubmV0L3FxbTVhYWcuanNcXFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj50cnl7VHlwZWtpdC5sb2FkKCk7fWNhdGNoKGUpe31cXG48L3NjcmlwdD48bGlua1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3JlbCc6KCdzdHlsZXNoZWV0JyksICdocmVmJzooXCJcIiArIChhc3NldHMudXJsKCcvY3NzL2NoZWNrb3V0LXJvZ2FpbmUuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBuZy1jb250cm9sbGVyPVxcXCJNYWluQ3RybFxcXCIgc3R5bGU9XFxcIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBuZy1pbml0PVxcXCJsb2FkVGhlbWUoJ3JvZ2FpbmUtd29tZW4nKVxcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1idXR0b24tb3ZlcnJpZGVcXFwiPjxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci1mbHVpZFxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHNzbC1zZWN1cmVkLWNvbm5lY3Rpb24gejJcXFwiPjxoND48ZGl2IGNsYXNzPVxcXCJpY29uLWxvY2tlZFxcXCI+PC9kaXY+U1NMIFNlY3VyZWQgQ29ubmVjdGlvbjwvaDQ+PGg0IG5nLWNsaWNrPVxcXCJnb1RvUmVmZXJyZXIoKVxcXCIgY2xhc3M9XFxcImNsb3NlLWNoZWNrb3V0IHB1bGwtcmlnaHRcXFwiPjwhLS18IENsb3NlLS0+PGRpdiBjbGFzcz1cXFwiaWNvbi1jbG9zZVxcXCI+PC9kaXY+PC9oND48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgaGVhZGVyIHNjcm9sbC1oZWFkZXIgejFcXFwiPjxkaXYgY2xhc3M9XFxcInRpdGxlLWJhclxcXCI+PGgyIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlciB1cHBlcmNhc2VcXFwiPkNoZWNrb3V0PC9oMj48L2Rpdj48L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDssICZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIG1pbi1oZWlnaHQtY29udGFpbmVyIHowXFxcIj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDssICZxdW90O3NwYW4xMiZxdW90OywgJnF1b3Q7c3BhbjggbGVmdCZxdW90OykgKyAmcXVvdDsgJnF1b3Q7ICsgZ2V0U3RlcCgpXFxcIiBjbGFzcz1cXFwibWFpblxcXCI+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwic3RlcHMgc2VjdGlvbiB6MSB0ZXh0LWNlbnRlclxcXCI+PGRpdiBzYi1jaGVja291dC1zdGVwcy1hcnJvdz1cXFwiZ2V0U3RlcCgpXFxcIiBjbGFzcz1cXFwiZG93bi1hcnJvd1xcXCI+PC9kaXY+PGEgbmctY2xpY2s9XFxcImdvVG9TdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgaHJlZj1cXFwiamF2YXNjcmlwdDp2b2lkKDApXFxcIj48aDM+PGRpdiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDssICZxdW90O2JhZGdlLWluZm8mcXVvdDspXFxcIiBjbGFzcz1cXFwiYmFkZ2VcXFwiPjE8L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInN0ZXBcXFwiPlJldmlldzxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPj48L2Rpdj48L2Rpdj48L2gzPjwvYT48YSBuZy1jbGljaz1cXFwiZ29Ub1N0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OylcXFwiIG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3NoaXBwaW5nLWJpbGxpbmcmcXVvdDssICZxdW90O2FjdGl2ZSZxdW90OylcXFwiIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+PGgzPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OywgJnF1b3Q7YmFkZ2UtaW5mbyZxdW90OylcXFwiIGNsYXNzPVxcXCJiYWRnZVxcXCI+MjwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7c2hpcHBpbmctYmlsbGluZyZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInN0ZXBcXFwiPlNoaXBwaW5nICYgUGF5bWVudDxkaXYgY2xhc3M9XFxcImRpdmlkZXJcXFwiPj48L2Rpdj48L2Rpdj48L2gzPjwvYT48YSBuZy1jbGljaz1cXFwiZ29Ub1N0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OylcXFwiIG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O29yZGVyLXN1bW1hcnkmcXVvdDssICZxdW90O2FjdGl2ZSZxdW90OylcXFwiIGhyZWY9XFxcImphdmFzY3JpcHQ6dm9pZCgwKVxcXCI+PGgzPjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7YmFkZ2UtaW5mbyZxdW90OylcXFwiIGNsYXNzPVxcXCJiYWRnZVxcXCI+MzwvZGl2PjxkaXYgbmctY2xhc3M9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7b3JkZXItc3VtbWFyeSZxdW90OywgJnF1b3Q7YWN0aXZlJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInN0ZXBcXFwiPk9yZGVyIFN1bW1hcnk8L2Rpdj48L2gzPjwvYT48L2Rpdj48ZGl2IHNiLWN1c3RvbS1zY3JvbGxiYXIgc2Nyb2xsLXNoYWRvdyBjbGFzcz1cXFwic2Nyb2xsYWJsZS1jb250ZW50XFxcIj48ZGl2IG5nLXNob3c9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7cmV2aWV3JnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uIHoxIGhpZGRlbi1waG9uZVxcXCI+PGgzIHRvb2x0aXA9XFxcIkhlcmUncyBob3cgc2hpcHBpbmcgY2FsY3VsYXRpb25zIHdvcmsuLi5cXFwiIHBsYWNlbWVudD1cXFwiYm90dG9tXFxcIiBjbGFzcz1cXFwic3BhbjEyIGxhYmVsMVxcXCI+RXN0aW1hdGVkIFRheCAmIFNoaXBwaW5nPCEtLS5pY29uLWluZm8tMi0tPjwvaDM+PC9kaXY+PGRpdiBuZy1zaG93PVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OylcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWQgc3RhdGUgc2VjdGlvbiB6MlxcXCI+PGRpdiBjbGFzcz1cXFwic3BhbjIgdGV4dC1sZWZ0XFxcIj48aDQ+UHJvdmluY2U8L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInNwYW41XFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxzZWxlY3QgaWQ9XFxcInNoaXBwaW5nLXN0YXRlXFxcIiBuZy1pZj1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBuZy1tb2RlbD1cXFwidXNlci5zaGlwcGluZy5zdGF0ZVxcXCIgbmctb3B0aW9ucz1cXFwic3RhdGUubmFtZSBmb3Igc3RhdGUgaW4gc3RhdGVzIHRyYWNrIGJ5IHN0YXRlLmFiYnJldmlhdGlvblxcXCIgbmctY2hhbmdlPVxcXCJzaGlwcGluZ1N0YXRlQ2hhbmdlZCgnI3NoaXBwaW5nLXN0YXRlJylcXFwiIGNsYXNzPVxcXCJzcGFuMTIgc29sbyBzZWxlY3RwaWNrZXJcXFwiPjxvcHRpb24gdmFsdWU9XFxcIlxcXCIgZGlzYWJsZWQgc2VsZWN0ZWQ+KHNlbGVjdCk8L29wdGlvbj48L3NlbGVjdD48L2Rpdj48L2Rpdj48aDUgY2xhc3M9XFxcInNwYW41XFxcIj5JdGVtcyBpbiB5b3VyIHNob3BwaW5nIGJhZyBhcmUgbm90IHJlc2VydmVkIGFuZCBtYXkgc2VsbCBvdXQuPC9oNT48L2Rpdj48ZGl2IG5nLXZpZXcgY2xhc3M9XFxcInowIHNjcm9sbC1zaGFkb3ctb3V0ZXJcXFwiPjwvZGl2PjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBkZXNrdG9wLWZvb3RlciBoaWRkZW4tcGhvbmUgejFcXFwiPiAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdGV4dC1jZW50ZXJcXFwiPjxkaXYgY2xhc3M9XFxcIm5vcnRvblxcXCI+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIHNyYz1cXFwiaHR0cHM6Ly9zZWFsLnZlcmlzaWduLmNvbS9nZXRzZWFsP2hvc3RfbmFtZT13d3cuc2hvcGJlYW0uY29tJmFtcDthbXA7c2l6ZT1YUyZhbXA7YW1wO3VzZV9mbGFzaD1OTyZhbXA7YW1wO3VzZV90cmFuc3BhcmVudD1ZRVMmYW1wO2FtcDtsYW5nPWVuXFxcIj4vLy50ZXN0LXZlcmlzaWduKHN0eWxlPVxcXCJ3aWR0aDogODBweDsgaGVpZ2h0OiA0MHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjRkRCQjMwO1xcXCIpPC9zY3JpcHQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwiZm9vdGVyLW1haW4tYnV0dG9uXFxcIj48YnV0dG9uIG5nLWNsaWNrPVxcXCJwcmV2aW91c1N0ZXAoKVxcXCIgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtfHJldmlldyZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIGJ0bi1zZWNvbmRhcnkgYmFja1xcXCI+e3thY3RpdmVTdGVwKCdyZXZpZXcnLCAnQ2xvc2UnLCAnQmFjaycpfX08L2J1dHRvbj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdGl0bGUtYmFyIHB1bGwtbGVmdFxcXCI+PGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPlNvbGQgYW5kIFNoaXBwZWQgdG8geW91IGJ5PC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwibGFiZWwxXFxcIj5XZWxsLmNhPC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9wcml2YWN5Lmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFByaXZhY3kgTm90aWNlPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvdGVybXMuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgVGVybXMgJiBDb25kaXRpb25zPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2Evc2hpcHBpbmctYW5kLXJldHVybnNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFNoaXBwaW5nICYgUmV0dXJuczwvYT48L2g1PjwvZGl2PjxkaXYgc3R5bGU9XFxcInBhZGRpbmctYm90dG9tOiAxMHB4XFxcIiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm9cXFwiPldlbGwuY2EgaXMgYSByZWdpc3RlcmVkIHRyYWRlbWFyayBvd25lZCBieSBXZWxsLmNhIEluYy4gVGhlIFdlbGwuY2EgZWNvbW1lcmNlIHNlcnZpY2VzIGFyZSBzdWJqZWN0IHRvIHRoZSAgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlIG9mIFdlbGwuY2EgSW5jLiBhbmQgY2FuIGJlIHJldmlld2VkIDxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS90ZXJtcy5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+aGVyZTwvYT48c3Bhbj4uIEpvaG5zb24gJiBKb2huc29uIEluYy4gKEpKSSkgaXMgcHJvdmlkaW5nIGluZm9ybWF0aW9uIGZyb20geW91ciBwcm9kdWN0IHB1cmNoYXNlIHJlcXVlc3QgdG8gdGhlIFdlbGwuY2Egc2l0ZSBmb3IgdGhlIHB1cmNoYXNlIG9mIEpKSSBwcm9kdWN0cyBhbmQgaXMgbm90IGFmZmlsaWF0ZWQgd2l0aCBXZWxsLmNhIEluYy47IG5vciBpcyBKSkkgcmVzcG9uc2libGUgZm9yIHRoZSBzYWxlIG9yIGRlbGl2ZXJ5IG9mICBKSkkgcHJvZHVjdHMgdGhhdCB5b3Ugc2VsZWN0IGZvciBwdXJjaGFzZSBmcm9tIHRoZSBXZWxsLmNhIHNpdGUuPC9zcGFuPjwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm8gcHVsbC1sZWZ0XFxcIj5XZWxsLmNhIFBoYXJtYWN5IEFjY3JlZGl0YXRpb24gYXMgb2YgTm92ZW1iZXIgMTF0aCAyMDE1PC9oNT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPk9QQyBDZXJ0aWZpY2F0ZSBBY2NyZWRpdGF0aW9uICMzMDQyMjI8L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvIHB1bGwtbGVmdFxcXCI+WW91ciBQaGFybWFjaXN0IGlzIFBoaWxpcCBSb3NlbmJlcmc8L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg1IGNsYXNzPVxcXCJsZWdhbC1pbmZvIHB1bGwtbGVmdFxcXCI+Q2VudHJhbCBGaWxsIFNvbHV0aW9ucyBJbmMuIDM0NiBNaWxsd2F5IEF2ZS4gVmF1Z2hhbiwgT04gTDRLIDNXMTwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImxlZ2FsLWluZm8gcHVsbC1sZWZ0XFxcIj5DYWxsIFdlbGwuY2EgVG9sbCBGcmVlOiAxLTg2Ni02NDAtMzgwMDwvaDU+PC9kaXY+PGRpdiBzdHlsZT1cXFwicGFkZGluZzogMTBweCAwcHhcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNSBjbGFzcz1cXFwibGVnYWwtaW5mbyBwdWxsLWxlZnRcXFwiPioqIEZyZWUgRWNvbm9teSBTaGlwcGluZyBvZmZlcmVkIGJ5IFdlbGwuY2EgYXMgb2YgTm92ZW1iZXIgMTF0aCAyMDE1IG9uIG9yZGVycyBvZiAkMjkgb3IgbW9yZSAoYmVmb3JlIHRheGVzIGFuZCBzaGlwcGluZykgaW4gQ2FuYWRhIGV4Y2x1ZGluZyByZW1vdGUgYW5kIGRpZmZpY3VsdCB0byBzZXJ2ZSBsb2NhdGlvbnMuIFN1YmplY3QgdG8gY2hhbmdlIGF0IHRoZSBkaXNjcmV0aW9uIG9mIFdlbGwuY2EuIEJhc2VkIG9uPGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3NoaXBwaW5nLWFuZC1yZXR1cm5zXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBTaGlwcGluZyBhbmQgUmV0dXJucyBwb2xpY3kuPC9hPjwvaDU+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHZpc2libGUtcGhvbmVcXFwiPjxkaXYgY2xhc3M9XFxcInRpdGxlLWJhciB0ZXh0LWNlbnRlclxcXCI+PGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPlNvbGQgYW5kIFNoaXBwZWQgdG8geW91IGJ5PC9oNT48aDUgY2xhc3M9XFxcImxhYmVsMVxcXCI+V2VsbC5jYTwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvcHJpdmFjeS5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBQcml2YWN5IE5vdGljZTwvYT48L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3Rlcm1zLmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFRlcm1zICYgQ29uZGl0aW9uczwvYT48L2g1PlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGUuaW50ZXJwID0gJyB8ICcgKSA/IFwiXCIgOiBqYWRlLmludGVycCkpICsgXCI8aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly93ZWxsLmNhL3NoaXBwaW5nLWFuZC1yZXR1cm5zXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VsbC5jYSBTaGlwcGluZyAmIFJldHVybnM8L2E+PC9oNT48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDssICZxdW90O2NvbmZpcm0mcXVvdDssICZxdW90OyZxdW90OylcXFwiIGNsYXNzPVxcXCJzcGFuNCBzdW1tYXJ5XFxcIj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7JnF1b3Q7LCAmcXVvdDtmdWxsLWhlaWdodCZxdW90OylcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJzdW1tYXJ5LWNvbnRhaW5lclxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHNlY3Rpb25cXFwiPjxoMyBjbGFzcz1cXFwibGFiZWwxIGxhcmdlIGlubGluZS1ibG9ja1xcXCI+U3VtbWFyeTwvaDM+PGg0IG5nLXBsdXJhbGl6ZSBjb3VudD1cXFwiY2FydC5pdGVtQ291bnRcXFwiIHdoZW49XFxcInsmcXVvdDtvbmUmcXVvdDs6ICZxdW90Oyh7fSBJdGVtKSZxdW90OywgJnF1b3Q7b3RoZXImcXVvdDs6ICZxdW90Oyh7fSBJdGVtcykmcXVvdDt9XFxcIj48L2g0PjwvZGl2PjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtyZXZpZXcmcXVvdDspXFxcIiBjbGFzcz1cXFwic3BhbjEyIGNhcnQtaXRlbXMtY29udGFpbmVyIGhpZGRlbi1waG9uZVxcXCI+PGRpdiBjYXJ0LWl0ZW1zLXJvZ2FpbmUgc2lkZWJhciBjbGFzcz1cXFwiY2FydC1pdGVtcyBzY3JvbGwtc2hhZG93LW91dGVyIHNlY3Rpb24gbm8tcGFkIGZ1bGwtaGVpZ2h0XFxcIj48L2Rpdj48L2Rpdj48ZGl2IG5nLWNsYXNzPVxcXCJhY3RpdmVTdGVwKCZxdW90O3JldmlldyZxdW90OywgJnF1b3Q7JnF1b3Q7LCAmcXVvdDtzY3JvbGwtZm9vdGVyJnF1b3Q7KVxcXCIgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2Ugc3VidG90YWxcXFwiPlN1YnRvdGFsPC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57e2NhcnQuc3VidG90YWwgLyAxMDAgfCBjdXJyZW5jeX19PC9oND48aDMgY2xhc3M9XFxcImxhYmVsMSBsYXJnZSBmbG9hdC1wYWRcXFwiPlRheCAmIFNoaXBwaW5nICo8IS0tLmljb24taW5mby0yLmhpZGRlbi1waG9uZS0tPjwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cXFwiY2xlYXItbGFyZ2VcXFwiPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCBzZWN0aW9uXFxcIj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPlRheDwvaDQ+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZSBtb25leVxcXCI+e3t7bnVsbDogJy0tJ31bdGF4XSB8fCAodGF4IC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+PGg0IGNsYXNzPVxcXCJzcGFuNiBsYXJnZVxcXCI+U2hpcHBpbmc8L2g0PjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2UgbW9uZXlcXFwiPnt7ezA6J0ZSRUUgKionLCBudWxsOiAnLS0nfVtzaGlwcGluZ10gfHwgKHNoaXBwaW5nIC8gMTAwIHwgY3VycmVuY3kpfX08L2g0PjwvZGl2PjxkaXYgbmctc2hvdz1cXFwiZGlzY291bnRcXFwiIGNsYXNzPVxcXCJyb3ctZmx1aWRcXFwiPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFyZ2VcXFwiPkRpc2NvdW50PC9oND48aDQgY2xhc3M9XFxcInNwYW42IGxhcmdlIG1vbmV5XFxcIj57eyhkaXNjb3VudCAvIDEwMCB8IGN1cnJlbmN5KX19PC9oND48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgc2VjdGlvbiB0b3RhbFxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDMgY2xhc3M9XFxcInNwYW42IGxhYmVsMSBsYXJnZVxcXCI+VG90YWw8L2gzPjxoNCBjbGFzcz1cXFwic3BhbjYgbGFiZWwxIGxhcmdlIG1vbmV5XFxcIj57e3RvdGFsIC8gMTAwIHwgY3VycmVuY3l9fTwvaDQ+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj48aDUgY2xhc3M9XFxcImVzdGltYXRlZC1jb3N0c1xcXCI+KiBFc3RpbWF0ZWQgdGF4ZXMgJiBzaGlwcGluZzwvaDU+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBuZy1oaWRlPVxcXCJhY3RpdmVTdGVwKCZxdW90O2NvbmZpcm0mcXVvdDspXFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIGZvb3RlclxcXCI+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHZpc2libGUtcGhvbmVcXFwiPjxkaXYgbmctaGlkZT1cXFwiYWN0aXZlU3RlcCgmcXVvdDtjb25maXJtJnF1b3Q7KVxcXCIgY2xhc3M9XFxcIm5vcnRvbiBwdWxsLWxlZnRcXFwiPjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcImh0dHBzOi8vc2VhbC52ZXJpc2lnbi5jb20vZ2V0c2VhbD9ob3N0X25hbWU9d3d3LnNob3BiZWFtLmNvbSZhbXA7YW1wO3NpemU9WFMmYW1wO2FtcDt1c2VfZmxhc2g9Tk8mYW1wO2FtcDt1c2VfdHJhbnNwYXJlbnQ9WUVTJmFtcDthbXA7bGFuZz1lblxcXCI+PC9zY3JpcHQ+PCEtLS50ZXN0LXZlcmlzaWduKHN0eWxlPVxcXCJ3aWR0aDogODBweDsgaGVpZ2h0OiA0MHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjRkRCQjMwO1xcXCIpLS0+PC9kaXY+PGJ1dHRvbiBuZy1jbGljaz1cXFwicHJldmlvdXNTdGVwKClcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIGJ0bi1zZWNvbmRhcnkgYmFja1xcXCI+e3thY3RpdmVTdGVwKCdyZXZpZXcnLCAnQ2xvc2UnLCAnQmFjaycpfX08L2J1dHRvbj48YnV0dG9uIG5nLWNsaWNrPVxcXCJuZXh0U3RlcCgpXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtjaGVja291dCBidG4tc3VjY2VzcyZxdW90OywgJnF1b3Q7bmV4dCBidG4tcHJpbWFyeSZxdW90OylcXFwiIG5nLWhpZGU9XFxcImFjdGl2ZVN0ZXAoJnF1b3Q7Y29uZmlybSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlIHB1bGwtcmlnaHRcXFwiPnt7Zm9ybVN1Ym1pdFZhbHVlKCl9fSA+PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj5Qb3dlcmVkIGJ5XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnICcpID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnNob3BiZWFtLmNvbVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIGNsYXNzPVxcXCJib2xkXFxcIj5TaG9wYmVhbTwvYT48L2g1PjwvZGl2PjxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZCB0YWdsaW5lIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcIml0YWxpYyB1cHBlcmNhc2VcXFwiPnNob3Agc2VhbWxlc3NseTwvaDU+PC9kaXY+PGRpdiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48aDYgY2xhc3M9XFxcInVwcGVyY2FzZVxcXCI+PGEgaHJlZj1cXFwibWFpbHRvOmN1c3RvbWVyY2FyZUBzaG9wYmVhbS5jb21cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBuZy1jbGljaz1cXFwidHJhY2tOZWVkQXNzaXN0YW5jZUNsaWNrKClcXFwiPmN1c3RvbWVyY2FyZUBzaG9wYmVhbS5jb208L2E+PC9oNj5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNiBjbGFzcz1cXFwidXBwZXJjYXNlXFxcIj4gPGEgaHJlZj1cXFwidGVsOjgwMDQ5MDMyMTZcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5QaG9uZTogKDgwMCkgNDkwLTMyMTY8L2E+PC9oNj48L2Rpdj48ZGl2IHN0eWxlPVxcXCJtYXJnaW4tdG9wOiAxMHB4XFxcIiBjbGFzcz1cXFwicm93LWZsdWlkIHRleHQtY2VudGVyXFxcIj48YnV0dG9uIG5nLWNsaWNrPVxcXCJuZXh0U3RlcCgpXFxcIiBuZy1jbGFzcz1cXFwiYWN0aXZlU3RlcCgmcXVvdDtvcmRlci1zdW1tYXJ5JnF1b3Q7LCAmcXVvdDtjaGVja291dCBidG4tc3VjY2VzcyZxdW90OywgJnF1b3Q7bmV4dCBidG4tcHJpbWFyeSZxdW90OylcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxhcmdlXFxcIj57e2Zvcm1TdWJtaXRWYWx1ZSgpfX08L2J1dHRvbj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJyb3ctZmx1aWQgdmlzaWJsZS1waG9uZVxcXCI+PGRpdiBjbGFzcz1cXFwidGl0bGUtYmFyIHRleHQtY2VudGVyXFxcIj48aDUgY2xhc3M9XFxcImZvb3Rlci10aXRsZVxcXCI+U29sZCBhbmQgU2hpcHBlZCB0byB5b3UgYnk8L2g1PjxoNSBjbGFzcz1cXFwibGFiZWwxXFxcIj5XZWxsLmNhPC9oNT5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlLmludGVycCA9ICcgfCAnICkgPyBcIlwiIDogamFkZS5pbnRlcnApKSArIFwiPGg1IGNsYXNzPVxcXCJmb290ZXItdGl0bGVcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vd2VsbC5jYS9wcml2YWN5Lmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFByaXZhY3kgTm90aWNlPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2EvdGVybXMuaHRtbFxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPldlbGwuY2EgVGVybXMgJiBDb25kaXRpb25zPC9hPjwvaDU+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZS5pbnRlcnAgPSAnIHwgJyApID8gXCJcIiA6IGphZGUuaW50ZXJwKSkgKyBcIjxoNSBjbGFzcz1cXFwiZm9vdGVyLXRpdGxlXFxcIj48YSBocmVmPVxcXCJodHRwczovL3dlbGwuY2Evc2hpcHBpbmctYW5kLXJldHVybnNcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWxsLmNhIFNoaXBwaW5nICYgUmV0dXJuczwvYT48L2g1PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvYm9keT48ZGl2IGlkPVxcXCJlcnJvci1tb2RhbFxcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1tb2RhbC1vdmVycmlkZSBtb2RhbCBmYWRlIGhpZGVcXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+PGgzPk9oIE5vZXMhITwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+PHA+U29tZXRoaW5nIHdlbnQgd3JvbmcuIFdlJ3JlIHRyYWNraW5nIHRoaXMgaXNzdWUgd2l0aCB0aGUgSUQgc2hvd24gYmVsb3cgYW5kIG91ciB0ZWFtIGhhcyBiZWVuIG5vdGlmaWVkLiBXZSdyZSB2ZXJ5IHNvcnJ5IGZvciB0aGUgaW5jb252ZW5pZW5jZS48L3A+PHByZSBpZD1cXFwiZXJyb3ItbW9kYWwtZXJyb3JJZFxcXCI+PC9wcmU+PC9kaXY+PGRpdiBjbGFzcz1cXFwibW9kYWwtZm9vdGVyXFxcIj48YnV0dG9uIGRhdGEtZGlzbWlzcz1cXFwibW9kYWxcXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPkRpc21pc3M8L2J1dHRvbj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJib290c3RyYXAtbW9kYWwtb3ZlcnJpZGUgbW9kYWwgaGlkZSBmYWRlIHJlbW92ZS1kaWFsb2dcXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGRhdGEtZGlzbWlzcz1cXFwibW9kYWxcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiY2xvc2VcXFwiPiZ0aW1lczs8L2J1dHRvbj48aDI+UmVtb3ZlIEl0ZW1zPC9oMj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1ib2R5XFxcIj48cCBuZy1wbHVyYWxpemUgY291bnQ9XFxcInNlbGVjdGVkSXRlbS5xdWFudGl0eVxcXCIgd2hlbj1cXFwieyZxdW90OzEmcXVvdDs6ICZxdW90O0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZW1vdmUge3tzZWxlY3RlZEl0ZW0ubmFtZX19PyZxdW90OywgJnF1b3Q7MiZxdW90OzogJnF1b3Q7WW91IGhhdmUgMiBvZiB7e3NlbGVjdGVkSXRlbS5uYW1lfX0gaW4geW91ciBjYXJ0LiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZW0gYm90aD8mcXVvdDssICZxdW90O290aGVyJnF1b3Q7OiAmcXVvdDtZb3UgaGF2ZSB7fSBvZiB7e3NlbGVjdGVkSXRlbS5uYW1lfX0gaW4geW91ciBjYXJ0LiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIGFsbCB7fT8mcXVvdDt9XFxcIiBjbGFzcz1cXFwibGVhZFxcXCI+PC9wPjwvZGl2PjxkaXYgY2xhc3M9XFxcIm1vZGFsLWZvb3RlclxcXCI+PGEgbmctY2xpY2s9XFxcInJlbW92ZUNhbmNlbCgpXFxcIiBjbGFzcz1cXFwiYnRuXFxcIj5Obywga2VlcCBpdDwvYT48YSBuZy1jbGljaz1cXFwicmVtb3ZlQ29uZmlybSgpXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zdWNjZXNzXFxcIj5ZZXMsIHJlbW92ZSBpdDwvYT48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJwbGVhc2Utd2FpdFxcXCI+PGRpdiBjbGFzcz1cXFwiYm94XFxcIj48ZGl2IGNsYXNzPVxcXCJpbWctY29udGFpbmVyXFxcIj48L2Rpdj48cD5QbGVhc2UgV2FpdC4uLjwvcD48L2Rpdj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2Jvb3RzdHJhcC9ib290c3RyYXAuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9jaGVja291dC5idW5kbGUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwvaHRtbD5cIik7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn0pKGxvY2Fscylcbn0sJ2luRnJhbWVXaWRnZXQvaW5kZXgnOiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICBsb2NhbHMgPSBsb2NhbHMgfHwge307XG4gICAgbG9jYWxzWydhc3NldHMnXSA9IGFzc2V0cztcbiAgICByZXR1cm4gKGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMpIHtcbnZhciBidWYgPSBbXTtcbnZhciBsb2NhbHNfID0gKGxvY2FscyB8fCB7fSkscm9sbGJhckVuYWJsZWQgPSBsb2NhbHNfLnJvbGxiYXJFbmFibGVkLHJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbiA9IGxvY2Fsc18ucm9sbGJhckNsaWVudEFjY2Vzc1Rva2VuLEhPU1QgPSBsb2NhbHNfLkhPU1QsYXNzZXRzID0gbG9jYWxzXy5hc3NldHM7YnVmLnB1c2goXCI8IURPQ1RZUEUgaHRtbD48aHRtbCBsYW5nPVxcXCJlblxcXCI+PGhlYWQ+PHRpdGxlPlNob3BiZWFtIFdpZGdldDwvdGl0bGU+PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcXFwiPjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIj5cIik7XG5pZiAoIHJvbGxiYXJFbmFibGVkKVxue1xuYnVmLnB1c2goXCI8IS0tIFJvbGxiYXIgLS0+PHNjcmlwdD52YXIgX3JvbGxiYXJDb25maWcgPSB7XFxuICBhY2Nlc3NUb2tlbjogJ1wiICsgKGphZGUuZXNjYXBlKChqYWRlLmludGVycCA9IHJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbikgPT0gbnVsbCA/ICcnIDogamFkZS5pbnRlcnApKSArIFwiJyxcXG4gIGNhcHR1cmVVbmNhdWdodDogdHJ1ZSxcXG4gIHBheWxvYWQ6IHtcXG4gICAgZW52aXJvbm1lbnQ6IFxcXCJwcm9kdWN0aW9uXFxcIlxcbiAgfVxcbn07XFxuIWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhiKXt0aGlzLnNoaW1JZD0rK2gsdGhpcy5ub3RpZmllcj1udWxsLHRoaXMucGFyZW50U2hpbT1iLHRoaXMubG9nZ2VyPWZ1bmN0aW9uKCl7fSxhLmNvbnNvbGUmJnZvaWQgMD09PWEuY29uc29sZS5zaGltSWQmJih0aGlzLmxvZ2dlcj1hLmNvbnNvbGUubG9nKX1mdW5jdGlvbiBkKGIsYyxkKXshZFs0XSYmYS5fcm9sbGJhcldyYXBwZWRFcnJvciYmKGRbNF09YS5fcm9sbGJhcldyYXBwZWRFcnJvcixhLl9yb2xsYmFyV3JhcHBlZEVycm9yPW51bGwpLGIudW5jYXVnaHRFcnJvci5hcHBseShiLGQpLGMmJmMuYXBwbHkoYSxkKX1mdW5jdGlvbiBlKGIpe3ZhciBkPWM7cmV0dXJuIGcoZnVuY3Rpb24oKXtpZih0aGlzLm5vdGlmaWVyKXJldHVybiB0aGlzLm5vdGlmaWVyW2JdLmFwcGx5KHRoaXMubm90aWZpZXIsYXJndW1lbnRzKTt2YXIgYz10aGlzLGU9XFxcInNjb3BlXFxcIj09PWI7ZSYmKGM9bmV3IGQodGhpcykpO3ZhciBmPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSxnPXtzaGltOmMsbWV0aG9kOmIsYXJnczpmLHRzOm5ldyBEYXRlfTtyZXR1cm4gYS5fcm9sbGJhclNoaW1RdWV1ZS5wdXNoKGcpLGU/Yzp2b2lkIDB9KX1mdW5jdGlvbiBmKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eSYmYi5oYXNPd25Qcm9wZXJ0eShcXFwiYWRkRXZlbnRMaXN0ZW5lclxcXCIpKXt2YXIgYz1iLmFkZEV2ZW50TGlzdGVuZXI7Yi5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGIsZCxlKXtjLmNhbGwodGhpcyxiLGEud3JhcChkKSxlKX07dmFyIGQ9Yi5yZW1vdmVFdmVudExpc3RlbmVyO2IucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyl7ZC5jYWxsKHRoaXMsYSxiJiZiLl93cmFwcGVkP2IuX3dyYXBwZWQ6YixjKX19fWZ1bmN0aW9uIGcoYSxiKXtyZXR1cm4gYj1ifHx0aGlzLmxvZ2dlcixmdW5jdGlvbigpe3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goYyl7YihcXFwiUm9sbGJhciBpbnRlcm5hbCBlcnJvcjpcXFwiLGMpfX19dmFyIGg9MDtjLmluaXQ9ZnVuY3Rpb24oYSxiKXt2YXIgZT1iLmdsb2JhbEFsaWFzfHxcXFwiUm9sbGJhclxcXCI7aWYoXFxcIm9iamVjdFxcXCI9PXR5cGVvZiBhW2VdKXJldHVybiBhW2VdO2EuX3JvbGxiYXJTaGltUXVldWU9W10sYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1udWxsLGI9Ynx8e307dmFyIGg9bmV3IGM7cmV0dXJuIGcoZnVuY3Rpb24oKXtpZihoLmNvbmZpZ3VyZShiKSxiLmNhcHR1cmVVbmNhdWdodCl7dmFyIGM9YS5vbmVycm9yO2Eub25lcnJvcj1mdW5jdGlvbigpe3ZhciBhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtkKGgsYyxhKX07dmFyIGcsaSxqPVtcXFwiRXZlbnRUYXJnZXRcXFwiLFxcXCJXaW5kb3dcXFwiLFxcXCJOb2RlXFxcIixcXFwiQXBwbGljYXRpb25DYWNoZVxcXCIsXFxcIkF1ZGlvVHJhY2tMaXN0XFxcIixcXFwiQ2hhbm5lbE1lcmdlck5vZGVcXFwiLFxcXCJDcnlwdG9PcGVyYXRpb25cXFwiLFxcXCJFdmVudFNvdXJjZVxcXCIsXFxcIkZpbGVSZWFkZXJcXFwiLFxcXCJIVE1MVW5rbm93bkVsZW1lbnRcXFwiLFxcXCJJREJEYXRhYmFzZVxcXCIsXFxcIklEQlJlcXVlc3RcXFwiLFxcXCJJREJUcmFuc2FjdGlvblxcXCIsXFxcIktleU9wZXJhdGlvblxcXCIsXFxcIk1lZGlhQ29udHJvbGxlclxcXCIsXFxcIk1lc3NhZ2VQb3J0XFxcIixcXFwiTW9kYWxXaW5kb3dcXFwiLFxcXCJOb3RpZmljYXRpb25cXFwiLFxcXCJTVkdFbGVtZW50SW5zdGFuY2VcXFwiLFxcXCJTY3JlZW5cXFwiLFxcXCJUZXh0VHJhY2tcXFwiLFxcXCJUZXh0VHJhY2tDdWVcXFwiLFxcXCJUZXh0VHJhY2tMaXN0XFxcIixcXFwiV2ViU29ja2V0XFxcIixcXFwiV2ViU29ja2V0V29ya2VyXFxcIixcXFwiV29ya2VyXFxcIixcXFwiWE1MSHR0cFJlcXVlc3RcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0XFxcIixcXFwiWE1MSHR0cFJlcXVlc3RVcGxvYWRcXFwiXTtmb3IoZz0wO2c8ai5sZW5ndGg7KytnKWk9altnXSxhW2ldJiZhW2ldLnByb3RvdHlwZSYmZihoLGFbaV0ucHJvdG90eXBlKX1yZXR1cm4gYVtlXT1oLGh9LGgubG9nZ2VyKSgpfSxjLnByb3RvdHlwZS5sb2FkRnVsbD1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1nKGZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFxcXCJzY3JpcHRcXFwiKSxlPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInNjcmlwdFxcXCIpWzBdO2Euc3JjPWQucm9sbGJhckpzVXJsLGEuYXN5bmM9IWMsYS5vbmxvYWQ9ZixlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsZSl9LHRoaXMubG9nZ2VyKSxmPWcoZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1hLl9yb2xsYmFyUGF5bG9hZFF1ZXVlKWZvcih2YXIgYixjLGQsZSxmPW5ldyBFcnJvcihcXFwicm9sbGJhci5qcyBkaWQgbm90IGxvYWRcXFwiKTtiPWEuX3JvbGxiYXJTaGltUXVldWUuc2hpZnQoKTspZm9yKGQ9Yi5hcmdzLGU9MDtlPGQubGVuZ3RoOysrZSlpZihjPWRbZV0sXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGMpe2MoZik7YnJlYWt9fSx0aGlzLmxvZ2dlcik7ZyhmdW5jdGlvbigpe2M/ZSgpOmEuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoXFxcImxvYWRcXFwiLGUsITEpOmEuYXR0YWNoRXZlbnQoXFxcIm9ubG9hZFxcXCIsZSl9LHRoaXMubG9nZ2VyKSgpfSxjLnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGIpe3RyeXtpZihcXFwiZnVuY3Rpb25cXFwiIT10eXBlb2YgYilyZXR1cm4gYjtpZihiLl9pc1dyYXApcmV0dXJuIGI7aWYoIWIuX3dyYXBwZWQpe2IuX3dyYXBwZWQ9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGIuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGMpe3Rocm93IGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9YyxjfX0sYi5fd3JhcHBlZC5faXNXcmFwPSEwO2Zvcih2YXIgYyBpbiBiKWIuaGFzT3duUHJvcGVydHkoYykmJihiLl93cmFwcGVkW2NdPWJbY10pfXJldHVybiBiLl93cmFwcGVkfWNhdGNoKGQpe3JldHVybiBifX07Zm9yKHZhciBpPVxcXCJsb2csZGVidWcsaW5mbyx3YXJuLHdhcm5pbmcsZXJyb3IsY3JpdGljYWwsZ2xvYmFsLGNvbmZpZ3VyZSxzY29wZSx1bmNhdWdodEVycm9yXFxcIi5zcGxpdChcXFwiLFxcXCIpLGo9MDtqPGkubGVuZ3RoOysrailjLnByb3RvdHlwZVtpW2pdXT1lKGlbal0pO3ZhciBrPVxcXCIvL2QzN2d2cnZjMHd0NHMxLmNsb3VkZnJvbnQubmV0L2pzL3YxLjEvcm9sbGJhci5taW4uanNcXFwiO19yb2xsYmFyQ29uZmlnLnJvbGxiYXJKc1VybD1fcm9sbGJhckNvbmZpZy5yb2xsYmFySnNVcmx8fGs7dmFyIGw9Yy5pbml0KGEsX3JvbGxiYXJDb25maWcpO2wubG9hZEZ1bGwoYSxiLCExLF9yb2xsYmFyQ29uZmlnKX0od2luZG93LGRvY3VtZW50KTs8L3NjcmlwdD5cIik7XG59XG5idWYucHVzaChcIjxtZXRhIHByb3BlcnR5PVxcXCJvZzp0aXRsZVxcXCIgY29udGVudD1cXFwie3tzZWxlY3RlZFByb2R1Y3QuYnJhbmROYW1lfX0gLSB7e3NlbGVjdGVkUHJvZHVjdC5uYW1lfX1cXFwiPjxtZXRhIHByb3BlcnR5PVxcXCJvZzppbWFnZVxcXCIgY29udGVudD1cXFwie3tpbml0aWFsSW1hZ2UudXJsfX1cXFwiPjxtZXRhIHByb3BlcnR5PVxcXCJvZzpkZXNjcmlwdGlvblxcXCIgY29udGVudD1cXFwie3tzZWxlY3RlZFByb2R1Y3QuZGVzY3JpcHRpb259fVxcXCI+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPGxpbmtcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdyZWwnOihcInN0eWxlc2hlZXRcIiksICdocmVmJzooXCJcIiArIChhc3NldHMudXJsKCcvY3NzL2luRnJhbWVXaWRnZXQuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjMuMTMubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhLS1UT0RPOiByZW1vdmUhISEtLT48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1tb2Nrcy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPihmdW5jdGlvbigpIHtcXG4gIGZ1bmN0aW9uIFF1ZXVlRmFjYWRlKG1lbWJlcnMpIHtcXG4gICAgdGhpcy5fcXVldWUgPSBbXTtcXG4gICAgdGhpcy5fZGVmaW5lKG1lbWJlcnMpO1xcbiAgfVxcbiAgdmFyIHByb3RvID0gUXVldWVGYWNhZGUucHJvdG90eXBlO1xcbiAgXFxuICBwcm90by5fZGVmaW5lID0gZnVuY3Rpb24obWVtYmVycykge1xcbiAgICBpZiAoIW1lbWJlcnMpIHsgcmV0dXJuIHRoaXM7IH1cXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcbiAgICBmdW5jdGlvbiBhZGRNZW1iZXIobmFtZSkge1xcbiAgICAgIGlmICghbmFtZSkgeyByZXR1cm47IH1cXG4gICAgICBzZWxmW25hbWVdID0gZnVuY3Rpb24oKSB7XFxuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKFsgbmFtZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykgXSk7XFxuICAgICAgfTtcXG4gICAgfVxcbiAgICB2YXIgbmFtZXMgPSBtZW1iZXJzIGluc3RhbmNlb2YgQXJyYXkgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkobWVtYmVycykgOiBtZW1iZXJzLnNwbGl0KC8gKiwgKi9nKTtcXG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCkge1xcbiAgICAgIGFkZE1lbWJlcihuYW1lcy5zaGlmdCgpKTtcXG4gICAgfVxcbiAgICByZXR1cm4gdGhpcztcXG4gIH07XFxuICBcXG4gIHByb3RvLnB1c2ggPSBmdW5jdGlvbigpIHtcXG4gICAgdGhpcy5fcXVldWUucHVzaChBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJncykpO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8uX2RlcXVldWUgPSBmdW5jdGlvbih0YXJnZXQpIHtcXG4gICAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCkge1xcbiAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcXG4gICAgICB0cnkge1xcbiAgICAgICAgdGFyZ2V0W21lc3NhZ2VbMF1dLmFwcGx5KHRhcmdldCwgbWVzc2FnZVsxXSk7XFxuICAgICAgfSBjYXRjaChlcnIpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHRhcmdldDtcXG4gIH07XFxuICBcXG4gIC8vIHF1ZXVlIGZhY2FkZXNcXG4gIHdpbmRvdy5hbmFseXRpY3MgPSBuZXcgUXVldWVGYWNhZGUoJ2lkZW50aWZ5LHRyYWNrLHBhZ2UsYWxpYXMsb24sb25jZSxyZW1vdmVMaXN0ZW5lcixlbWl0LHJlYWR5LHNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZScpO1xcbn0pKCk7PC9zY3JpcHQ+PC9oZWFkPjxib2R5IHN0eWxlPVxcXCJoZWlnaHQ6IDEwMCU7IG92ZXJmbG93OiBoaWRkZW47IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBjbGFzcz1cXFwiYm9vdHN0cmFwLWJ1dHRvbi1vdmVycmlkZVxcXCI+PGRpdiBuZy1pbmNsdWRlPVxcXCImcXVvdDsvd2lkZ2V0L3ZpZXdzL21haW4tZGVmYXVsdC5odG1sJnF1b3Q7XFxcIj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvaW5GcmFtZVdpZGdldC5idW5kbGUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwvYm9keT48L2h0bWw+XCIpOztyZXR1cm4gYnVmLmpvaW4oXCJcIik7XG59KShsb2NhbHMpXG59LCdpbkZyYW1lV2lkZ2V0L3JvZ2FpbmUtYWQtbWVuJzogZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgbG9jYWxzID0gbG9jYWxzIHx8IHt9O1xuICAgIGxvY2Fsc1snYXNzZXRzJ10gPSBhc3NldHM7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgbG9jYWxzXyA9IChsb2NhbHMgfHwge30pLHJvbGxiYXJFbmFibGVkID0gbG9jYWxzXy5yb2xsYmFyRW5hYmxlZCxyb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4gPSBsb2NhbHNfLnJvbGxiYXJDbGllbnRBY2Nlc3NUb2tlbixIT1NUID0gbG9jYWxzXy5IT1NULGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBXaWRnZXQ8L3RpdGxlPjxtZXRhIGh0dHAtZXF1aXY9XFxcIkNvbnRlbnQtVHlwZVxcXCIgY29udGVudD1cXFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XFxcIj48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFxcXCI+XCIpO1xuaWYgKCByb2xsYmFyRW5hYmxlZClcbntcbmJ1Zi5wdXNoKFwiPCEtLSBSb2xsYmFyIC0tPjxzY3JpcHQ+dmFyIF9yb2xsYmFyQ29uZmlnID0ge1xcbiAgYWNjZXNzVG9rZW46ICdcIiArIChqYWRlLmVzY2FwZSgoamFkZS5pbnRlcnAgPSByb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4pID09IG51bGwgPyAnJyA6IGphZGUuaW50ZXJwKSkgKyBcIicsXFxuICBjYXB0dXJlVW5jYXVnaHQ6IHRydWUsXFxuICBwYXlsb2FkOiB7XFxuICAgIGVudmlyb25tZW50OiBcXFwicHJvZHVjdGlvblxcXCJcXG4gIH1cXG59O1xcbiFmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYil7dGhpcy5zaGltSWQ9KytoLHRoaXMubm90aWZpZXI9bnVsbCx0aGlzLnBhcmVudFNoaW09Yix0aGlzLmxvZ2dlcj1mdW5jdGlvbigpe30sYS5jb25zb2xlJiZ2b2lkIDA9PT1hLmNvbnNvbGUuc2hpbUlkJiYodGhpcy5sb2dnZXI9YS5jb25zb2xlLmxvZyl9ZnVuY3Rpb24gZChiLGMsZCl7IWRbNF0mJmEuX3JvbGxiYXJXcmFwcGVkRXJyb3ImJihkWzRdPWEuX3JvbGxiYXJXcmFwcGVkRXJyb3IsYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1udWxsKSxiLnVuY2F1Z2h0RXJyb3IuYXBwbHkoYixkKSxjJiZjLmFwcGx5KGEsZCl9ZnVuY3Rpb24gZShiKXt2YXIgZD1jO3JldHVybiBnKGZ1bmN0aW9uKCl7aWYodGhpcy5ub3RpZmllcilyZXR1cm4gdGhpcy5ub3RpZmllcltiXS5hcHBseSh0aGlzLm5vdGlmaWVyLGFyZ3VtZW50cyk7dmFyIGM9dGhpcyxlPVxcXCJzY29wZVxcXCI9PT1iO2UmJihjPW5ldyBkKHRoaXMpKTt2YXIgZj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCksZz17c2hpbTpjLG1ldGhvZDpiLGFyZ3M6Zix0czpuZXcgRGF0ZX07cmV0dXJuIGEuX3JvbGxiYXJTaGltUXVldWUucHVzaChnKSxlP2M6dm9pZCAwfSl9ZnVuY3Rpb24gZihhLGIpe2lmKGIuaGFzT3duUHJvcGVydHkmJmIuaGFzT3duUHJvcGVydHkoXFxcImFkZEV2ZW50TGlzdGVuZXJcXFwiKSl7dmFyIGM9Yi5hZGRFdmVudExpc3RlbmVyO2IuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihiLGQsZSl7Yy5jYWxsKHRoaXMsYixhLndyYXAoZCksZSl9O3ZhciBkPWIucmVtb3ZlRXZlbnRMaXN0ZW5lcjtiLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMpe2QuY2FsbCh0aGlzLGEsYiYmYi5fd3JhcHBlZD9iLl93cmFwcGVkOmIsYyl9fX1mdW5jdGlvbiBnKGEsYil7cmV0dXJuIGI9Ynx8dGhpcy5sb2dnZXIsZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKGMpe2IoXFxcIlJvbGxiYXIgaW50ZXJuYWwgZXJyb3I6XFxcIixjKX19fXZhciBoPTA7Yy5pbml0PWZ1bmN0aW9uKGEsYil7dmFyIGU9Yi5nbG9iYWxBbGlhc3x8XFxcIlJvbGxiYXJcXFwiO2lmKFxcXCJvYmplY3RcXFwiPT10eXBlb2YgYVtlXSlyZXR1cm4gYVtlXTthLl9yb2xsYmFyU2hpbVF1ZXVlPVtdLGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9bnVsbCxiPWJ8fHt9O3ZhciBoPW5ldyBjO3JldHVybiBnKGZ1bmN0aW9uKCl7aWYoaC5jb25maWd1cmUoYiksYi5jYXB0dXJlVW5jYXVnaHQpe3ZhciBjPWEub25lcnJvcjthLm9uZXJyb3I9ZnVuY3Rpb24oKXt2YXIgYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7ZChoLGMsYSl9O3ZhciBnLGksaj1bXFxcIkV2ZW50VGFyZ2V0XFxcIixcXFwiV2luZG93XFxcIixcXFwiTm9kZVxcXCIsXFxcIkFwcGxpY2F0aW9uQ2FjaGVcXFwiLFxcXCJBdWRpb1RyYWNrTGlzdFxcXCIsXFxcIkNoYW5uZWxNZXJnZXJOb2RlXFxcIixcXFwiQ3J5cHRvT3BlcmF0aW9uXFxcIixcXFwiRXZlbnRTb3VyY2VcXFwiLFxcXCJGaWxlUmVhZGVyXFxcIixcXFwiSFRNTFVua25vd25FbGVtZW50XFxcIixcXFwiSURCRGF0YWJhc2VcXFwiLFxcXCJJREJSZXF1ZXN0XFxcIixcXFwiSURCVHJhbnNhY3Rpb25cXFwiLFxcXCJLZXlPcGVyYXRpb25cXFwiLFxcXCJNZWRpYUNvbnRyb2xsZXJcXFwiLFxcXCJNZXNzYWdlUG9ydFxcXCIsXFxcIk1vZGFsV2luZG93XFxcIixcXFwiTm90aWZpY2F0aW9uXFxcIixcXFwiU1ZHRWxlbWVudEluc3RhbmNlXFxcIixcXFwiU2NyZWVuXFxcIixcXFwiVGV4dFRyYWNrXFxcIixcXFwiVGV4dFRyYWNrQ3VlXFxcIixcXFwiVGV4dFRyYWNrTGlzdFxcXCIsXFxcIldlYlNvY2tldFxcXCIsXFxcIldlYlNvY2tldFdvcmtlclxcXCIsXFxcIldvcmtlclxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0XFxcIixcXFwiWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldFxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0VXBsb2FkXFxcIl07Zm9yKGc9MDtnPGoubGVuZ3RoOysrZylpPWpbZ10sYVtpXSYmYVtpXS5wcm90b3R5cGUmJmYoaCxhW2ldLnByb3RvdHlwZSl9cmV0dXJuIGFbZV09aCxofSxoLmxvZ2dlcikoKX0sYy5wcm90b3R5cGUubG9hZEZ1bGw9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZyhmdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcXFwic2NyaXB0XFxcIiksZT1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJzY3JpcHRcXFwiKVswXTthLnNyYz1kLnJvbGxiYXJKc1VybCxhLmFzeW5jPSFjLGEub25sb2FkPWYsZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGUpfSx0aGlzLmxvZ2dlciksZj1nKGZ1bmN0aW9uKCl7aWYodm9pZCAwPT09YS5fcm9sbGJhclBheWxvYWRRdWV1ZSlmb3IodmFyIGIsYyxkLGUsZj1uZXcgRXJyb3IoXFxcInJvbGxiYXIuanMgZGlkIG5vdCBsb2FkXFxcIik7Yj1hLl9yb2xsYmFyU2hpbVF1ZXVlLnNoaWZ0KCk7KWZvcihkPWIuYXJncyxlPTA7ZTxkLmxlbmd0aDsrK2UpaWYoYz1kW2VdLFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBjKXtjKGYpO2JyZWFrfX0sdGhpcy5sb2dnZXIpO2coZnVuY3Rpb24oKXtjP2UoKTphLmFkZEV2ZW50TGlzdGVuZXI/YS5hZGRFdmVudExpc3RlbmVyKFxcXCJsb2FkXFxcIixlLCExKTphLmF0dGFjaEV2ZW50KFxcXCJvbmxvYWRcXFwiLGUpfSx0aGlzLmxvZ2dlcikoKX0sYy5wcm90b3R5cGUud3JhcD1mdW5jdGlvbihiKXt0cnl7aWYoXFxcImZ1bmN0aW9uXFxcIiE9dHlwZW9mIGIpcmV0dXJuIGI7aWYoYi5faXNXcmFwKXJldHVybiBiO2lmKCFiLl93cmFwcGVkKXtiLl93cmFwcGVkPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChjKXt0aHJvdyBhLl9yb2xsYmFyV3JhcHBlZEVycm9yPWMsY319LGIuX3dyYXBwZWQuX2lzV3JhcD0hMDtmb3IodmFyIGMgaW4gYiliLmhhc093blByb3BlcnR5KGMpJiYoYi5fd3JhcHBlZFtjXT1iW2NdKX1yZXR1cm4gYi5fd3JhcHBlZH1jYXRjaChkKXtyZXR1cm4gYn19O2Zvcih2YXIgaT1cXFwibG9nLGRlYnVnLGluZm8sd2Fybix3YXJuaW5nLGVycm9yLGNyaXRpY2FsLGdsb2JhbCxjb25maWd1cmUsc2NvcGUsdW5jYXVnaHRFcnJvclxcXCIuc3BsaXQoXFxcIixcXFwiKSxqPTA7ajxpLmxlbmd0aDsrK2opYy5wcm90b3R5cGVbaVtqXV09ZShpW2pdKTt2YXIgaz1cXFwiLy9kMzdndnJ2YzB3dDRzMS5jbG91ZGZyb250Lm5ldC9qcy92MS4xL3JvbGxiYXIubWluLmpzXFxcIjtfcm9sbGJhckNvbmZpZy5yb2xsYmFySnNVcmw9X3JvbGxiYXJDb25maWcucm9sbGJhckpzVXJsfHxrO3ZhciBsPWMuaW5pdChhLF9yb2xsYmFyQ29uZmlnKTtsLmxvYWRGdWxsKGEsYiwhMSxfcm9sbGJhckNvbmZpZyl9KHdpbmRvdyxkb2N1bWVudCk7PC9zY3JpcHQ+XCIpO1xufVxuYnVmLnB1c2goXCI8bWV0YSBwcm9wZXJ0eT1cXFwib2c6dGl0bGVcXFwiIGNvbnRlbnQ9XFxcInt7c2VsZWN0ZWRQcm9kdWN0LmJyYW5kTmFtZX19IC0ge3tzZWxlY3RlZFByb2R1Y3QubmFtZX19XFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6aW1hZ2VcXFwiIGNvbnRlbnQ9XFxcInt7aW5pdGlhbEltYWdlLnVybH19XFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6ZGVzY3JpcHRpb25cXFwiIGNvbnRlbnQ9XFxcInt7c2VsZWN0ZWRQcm9kdWN0LmRlc2NyaXB0aW9ufX1cXFwiPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxsaW5rXCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAncmVsJzooXCJzdHlsZXNoZWV0XCIpLCAnaHJlZic6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2Nzcy9pbkZyYW1lV2lkZ2V0LXJvZ2FpbmUuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjMuMTMubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhLS1UT0RPOiByZW1vdmUhISEtLT48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1tb2Nrcy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPihmdW5jdGlvbigpIHtcXG4gIGZ1bmN0aW9uIFF1ZXVlRmFjYWRlKG1lbWJlcnMpIHtcXG4gICAgdGhpcy5fcXVldWUgPSBbXTtcXG4gICAgdGhpcy5fZGVmaW5lKG1lbWJlcnMpO1xcbiAgfVxcbiAgdmFyIHByb3RvID0gUXVldWVGYWNhZGUucHJvdG90eXBlO1xcbiAgXFxuICBwcm90by5fZGVmaW5lID0gZnVuY3Rpb24obWVtYmVycykge1xcbiAgICBpZiAoIW1lbWJlcnMpIHsgcmV0dXJuIHRoaXM7IH1cXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcbiAgICBmdW5jdGlvbiBhZGRNZW1iZXIobmFtZSkge1xcbiAgICAgIGlmICghbmFtZSkgeyByZXR1cm47IH1cXG4gICAgICBzZWxmW25hbWVdID0gZnVuY3Rpb24oKSB7XFxuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKFsgbmFtZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykgXSk7XFxuICAgICAgfTtcXG4gICAgfVxcbiAgICB2YXIgbmFtZXMgPSBtZW1iZXJzIGluc3RhbmNlb2YgQXJyYXkgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkobWVtYmVycykgOiBtZW1iZXJzLnNwbGl0KC8gKiwgKi9nKTtcXG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCkge1xcbiAgICAgIGFkZE1lbWJlcihuYW1lcy5zaGlmdCgpKTtcXG4gICAgfVxcbiAgICByZXR1cm4gdGhpcztcXG4gIH07XFxuICBcXG4gIHByb3RvLnB1c2ggPSBmdW5jdGlvbigpIHtcXG4gICAgdGhpcy5fcXVldWUucHVzaChBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJncykpO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8uX2RlcXVldWUgPSBmdW5jdGlvbih0YXJnZXQpIHtcXG4gICAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCkge1xcbiAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcXG4gICAgICB0cnkge1xcbiAgICAgICAgdGFyZ2V0W21lc3NhZ2VbMF1dLmFwcGx5KHRhcmdldCwgbWVzc2FnZVsxXSk7XFxuICAgICAgfSBjYXRjaChlcnIpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHRhcmdldDtcXG4gIH07XFxuICBcXG4gIC8vIHF1ZXVlIGZhY2FkZXNcXG4gIHdpbmRvdy5hbmFseXRpY3MgPSBuZXcgUXVldWVGYWNhZGUoJ2lkZW50aWZ5LHRyYWNrLHBhZ2UsYWxpYXMsb24sb25jZSxyZW1vdmVMaXN0ZW5lcixlbWl0LHJlYWR5LHNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZScpO1xcbn0pKCk7PC9zY3JpcHQ+PC9oZWFkPjxib2R5IHN0eWxlPVxcXCJoZWlnaHQ6IDEwMCU7IG92ZXJmbG93OiBoaWRkZW47IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBjbGFzcz1cXFwiYm9vdHN0cmFwLWJ1dHRvbi1vdmVycmlkZVxcXCI+PGRpdiBuZy1pbmNsdWRlPVxcXCImcXVvdDsvd2lkZ2V0L3ZpZXdzL21haW4tcm9nYWluZS1tZW4uaHRtbCZxdW90O1xcXCI+PC9kaXY+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2luRnJhbWVXaWRnZXQuYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2JvZHk+PC9odG1sPlwiKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufSkobG9jYWxzKVxufSwnaW5GcmFtZVdpZGdldC9yb2dhaW5lLW1lbic6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxyb2xsYmFyRW5hYmxlZCA9IGxvY2Fsc18ucm9sbGJhckVuYWJsZWQscm9sbGJhckNsaWVudEFjY2Vzc1Rva2VuID0gbG9jYWxzXy5yb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4sSE9TVCA9IGxvY2Fsc18uSE9TVCxhc3NldHMgPSBsb2NhbHNfLmFzc2V0cztidWYucHVzaChcIjwhRE9DVFlQRSBodG1sPjxodG1sIGxhbmc9XFxcImVuXFxcIj48aGVhZD48dGl0bGU+U2hvcGJlYW0gV2lkZ2V0PC90aXRsZT48bWV0YSBodHRwLWVxdWl2PVxcXCJDb250ZW50LVR5cGVcXFwiIGNvbnRlbnQ9XFxcInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxcXCI+PG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiPlwiKTtcbmlmICggcm9sbGJhckVuYWJsZWQpXG57XG5idWYucHVzaChcIjwhLS0gUm9sbGJhciAtLT48c2NyaXB0PnZhciBfcm9sbGJhckNvbmZpZyA9IHtcXG4gIGFjY2Vzc1Rva2VuOiAnXCIgKyAoamFkZS5lc2NhcGUoKGphZGUuaW50ZXJwID0gcm9sbGJhckNsaWVudEFjY2Vzc1Rva2VuKSA9PSBudWxsID8gJycgOiBqYWRlLmludGVycCkpICsgXCInLFxcbiAgY2FwdHVyZVVuY2F1Z2h0OiB0cnVlLFxcbiAgcGF5bG9hZDoge1xcbiAgICBlbnZpcm9ubWVudDogXFxcInByb2R1Y3Rpb25cXFwiXFxuICB9XFxufTtcXG4hZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGIpe3RoaXMuc2hpbUlkPSsraCx0aGlzLm5vdGlmaWVyPW51bGwsdGhpcy5wYXJlbnRTaGltPWIsdGhpcy5sb2dnZXI9ZnVuY3Rpb24oKXt9LGEuY29uc29sZSYmdm9pZCAwPT09YS5jb25zb2xlLnNoaW1JZCYmKHRoaXMubG9nZ2VyPWEuY29uc29sZS5sb2cpfWZ1bmN0aW9uIGQoYixjLGQpeyFkWzRdJiZhLl9yb2xsYmFyV3JhcHBlZEVycm9yJiYoZFs0XT1hLl9yb2xsYmFyV3JhcHBlZEVycm9yLGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9bnVsbCksYi51bmNhdWdodEVycm9yLmFwcGx5KGIsZCksYyYmYy5hcHBseShhLGQpfWZ1bmN0aW9uIGUoYil7dmFyIGQ9YztyZXR1cm4gZyhmdW5jdGlvbigpe2lmKHRoaXMubm90aWZpZXIpcmV0dXJuIHRoaXMubm90aWZpZXJbYl0uYXBwbHkodGhpcy5ub3RpZmllcixhcmd1bWVudHMpO3ZhciBjPXRoaXMsZT1cXFwic2NvcGVcXFwiPT09YjtlJiYoYz1uZXcgZCh0aGlzKSk7dmFyIGY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApLGc9e3NoaW06YyxtZXRob2Q6YixhcmdzOmYsdHM6bmV3IERhdGV9O3JldHVybiBhLl9yb2xsYmFyU2hpbVF1ZXVlLnB1c2goZyksZT9jOnZvaWQgMH0pfWZ1bmN0aW9uIGYoYSxiKXtpZihiLmhhc093blByb3BlcnR5JiZiLmhhc093blByb3BlcnR5KFxcXCJhZGRFdmVudExpc3RlbmVyXFxcIikpe3ZhciBjPWIuYWRkRXZlbnRMaXN0ZW5lcjtiLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYixkLGUpe2MuY2FsbCh0aGlzLGIsYS53cmFwKGQpLGUpfTt2YXIgZD1iLnJlbW92ZUV2ZW50TGlzdGVuZXI7Yi5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjKXtkLmNhbGwodGhpcyxhLGImJmIuX3dyYXBwZWQ/Yi5fd3JhcHBlZDpiLGMpfX19ZnVuY3Rpb24gZyhhLGIpe3JldHVybiBiPWJ8fHRoaXMubG9nZ2VyLGZ1bmN0aW9uKCl7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChjKXtiKFxcXCJSb2xsYmFyIGludGVybmFsIGVycm9yOlxcXCIsYyl9fX12YXIgaD0wO2MuaW5pdD1mdW5jdGlvbihhLGIpe3ZhciBlPWIuZ2xvYmFsQWxpYXN8fFxcXCJSb2xsYmFyXFxcIjtpZihcXFwib2JqZWN0XFxcIj09dHlwZW9mIGFbZV0pcmV0dXJuIGFbZV07YS5fcm9sbGJhclNoaW1RdWV1ZT1bXSxhLl9yb2xsYmFyV3JhcHBlZEVycm9yPW51bGwsYj1ifHx7fTt2YXIgaD1uZXcgYztyZXR1cm4gZyhmdW5jdGlvbigpe2lmKGguY29uZmlndXJlKGIpLGIuY2FwdHVyZVVuY2F1Z2h0KXt2YXIgYz1hLm9uZXJyb3I7YS5vbmVycm9yPWZ1bmN0aW9uKCl7dmFyIGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApO2QoaCxjLGEpfTt2YXIgZyxpLGo9W1xcXCJFdmVudFRhcmdldFxcXCIsXFxcIldpbmRvd1xcXCIsXFxcIk5vZGVcXFwiLFxcXCJBcHBsaWNhdGlvbkNhY2hlXFxcIixcXFwiQXVkaW9UcmFja0xpc3RcXFwiLFxcXCJDaGFubmVsTWVyZ2VyTm9kZVxcXCIsXFxcIkNyeXB0b09wZXJhdGlvblxcXCIsXFxcIkV2ZW50U291cmNlXFxcIixcXFwiRmlsZVJlYWRlclxcXCIsXFxcIkhUTUxVbmtub3duRWxlbWVudFxcXCIsXFxcIklEQkRhdGFiYXNlXFxcIixcXFwiSURCUmVxdWVzdFxcXCIsXFxcIklEQlRyYW5zYWN0aW9uXFxcIixcXFwiS2V5T3BlcmF0aW9uXFxcIixcXFwiTWVkaWFDb250cm9sbGVyXFxcIixcXFwiTWVzc2FnZVBvcnRcXFwiLFxcXCJNb2RhbFdpbmRvd1xcXCIsXFxcIk5vdGlmaWNhdGlvblxcXCIsXFxcIlNWR0VsZW1lbnRJbnN0YW5jZVxcXCIsXFxcIlNjcmVlblxcXCIsXFxcIlRleHRUcmFja1xcXCIsXFxcIlRleHRUcmFja0N1ZVxcXCIsXFxcIlRleHRUcmFja0xpc3RcXFwiLFxcXCJXZWJTb2NrZXRcXFwiLFxcXCJXZWJTb2NrZXRXb3JrZXJcXFwiLFxcXCJXb3JrZXJcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdFxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXRcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdFVwbG9hZFxcXCJdO2ZvcihnPTA7ZzxqLmxlbmd0aDsrK2cpaT1qW2ddLGFbaV0mJmFbaV0ucHJvdG90eXBlJiZmKGgsYVtpXS5wcm90b3R5cGUpfXJldHVybiBhW2VdPWgsaH0saC5sb2dnZXIpKCl9LGMucHJvdG90eXBlLmxvYWRGdWxsPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWcoZnVuY3Rpb24oKXt2YXIgYT1iLmNyZWF0ZUVsZW1lbnQoXFxcInNjcmlwdFxcXCIpLGU9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwic2NyaXB0XFxcIilbMF07YS5zcmM9ZC5yb2xsYmFySnNVcmwsYS5hc3luYz0hYyxhLm9ubG9hZD1mLGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxlKX0sdGhpcy5sb2dnZXIpLGY9ZyhmdW5jdGlvbigpe2lmKHZvaWQgMD09PWEuX3JvbGxiYXJQYXlsb2FkUXVldWUpZm9yKHZhciBiLGMsZCxlLGY9bmV3IEVycm9yKFxcXCJyb2xsYmFyLmpzIGRpZCBub3QgbG9hZFxcXCIpO2I9YS5fcm9sbGJhclNoaW1RdWV1ZS5zaGlmdCgpOylmb3IoZD1iLmFyZ3MsZT0wO2U8ZC5sZW5ndGg7KytlKWlmKGM9ZFtlXSxcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgYyl7YyhmKTticmVha319LHRoaXMubG9nZ2VyKTtnKGZ1bmN0aW9uKCl7Yz9lKCk6YS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihcXFwibG9hZFxcXCIsZSwhMSk6YS5hdHRhY2hFdmVudChcXFwib25sb2FkXFxcIixlKX0sdGhpcy5sb2dnZXIpKCl9LGMucHJvdG90eXBlLndyYXA9ZnVuY3Rpb24oYil7dHJ5e2lmKFxcXCJmdW5jdGlvblxcXCIhPXR5cGVvZiBiKXJldHVybiBiO2lmKGIuX2lzV3JhcClyZXR1cm4gYjtpZighYi5fd3JhcHBlZCl7Yi5fd3JhcHBlZD1mdW5jdGlvbigpe3RyeXtyZXR1cm4gYi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goYyl7dGhyb3cgYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1jLGN9fSxiLl93cmFwcGVkLl9pc1dyYXA9ITA7Zm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmKGIuX3dyYXBwZWRbY109YltjXSl9cmV0dXJuIGIuX3dyYXBwZWR9Y2F0Y2goZCl7cmV0dXJuIGJ9fTtmb3IodmFyIGk9XFxcImxvZyxkZWJ1ZyxpbmZvLHdhcm4sd2FybmluZyxlcnJvcixjcml0aWNhbCxnbG9iYWwsY29uZmlndXJlLHNjb3BlLHVuY2F1Z2h0RXJyb3JcXFwiLnNwbGl0KFxcXCIsXFxcIiksaj0wO2o8aS5sZW5ndGg7KytqKWMucHJvdG90eXBlW2lbal1dPWUoaVtqXSk7dmFyIGs9XFxcIi8vZDM3Z3ZydmMwd3Q0czEuY2xvdWRmcm9udC5uZXQvanMvdjEuMS9yb2xsYmFyLm1pbi5qc1xcXCI7X3JvbGxiYXJDb25maWcucm9sbGJhckpzVXJsPV9yb2xsYmFyQ29uZmlnLnJvbGxiYXJKc1VybHx8azt2YXIgbD1jLmluaXQoYSxfcm9sbGJhckNvbmZpZyk7bC5sb2FkRnVsbChhLGIsITEsX3JvbGxiYXJDb25maWcpfSh3aW5kb3csZG9jdW1lbnQpOzwvc2NyaXB0PlwiKTtcbn1cbmJ1Zi5wdXNoKFwiPG1ldGEgcHJvcGVydHk9XFxcIm9nOnRpdGxlXFxcIiBjb250ZW50PVxcXCJ7e3NlbGVjdGVkUHJvZHVjdC5icmFuZE5hbWV9fSAtIHt7c2VsZWN0ZWRQcm9kdWN0Lm5hbWV9fVxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOmltYWdlXFxcIiBjb250ZW50PVxcXCJ7e2luaXRpYWxJbWFnZS51cmx9fVxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOmRlc2NyaXB0aW9uXFxcIiBjb250ZW50PVxcXCJ7e3NlbGVjdGVkUHJvZHVjdC5kZXNjcmlwdGlvbn19XFxcIj5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8bGlua1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3JlbCc6KFwic3R5bGVzaGVldFwiKSwgJ2hyZWYnOihcIlwiICsgKGFzc2V0cy51cmwoJy9jc3MvaW5GcmFtZVdpZGdldC1yb2dhaW5lLmNzcycpKSArIFwiXCIpIH0sIHtcInJlbFwiOnRydWUsXCJocmVmXCI6dHJ1ZX0pKSArIFwiPjwhLS1baWYgbHQgSUUgMTBdPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9jdXN0b21FdmVudHMuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9maWx0ZXIuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9tYXAuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zb21lLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc3RyaW5nLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48IVtlbmRpZl0tLT48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2pxdWVyeS9qcXVlcnktMS4xMC4yLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4zLjEzLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItcm91dGUubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48IS0tVE9ETzogcmVtb3ZlISEhLS0+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItbW9ja3MuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBzdHlsZT1cXFwiaGVpZ2h0OiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuOyBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwO1xcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1idXR0b24tb3ZlcnJpZGVcXFwiPjxkaXYgbmctaW5jbHVkZT1cXFwiJnF1b3Q7L3dpZGdldC92aWV3cy9tYWluLXJvZ2FpbmUtbWVuLmh0bWwmcXVvdDtcXFwiPjwvZGl2PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9pbkZyYW1lV2lkZ2V0LmJ1bmRsZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PC9ib2R5PjwvaHRtbD5cIik7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn0pKGxvY2Fscylcbn0sJ2luRnJhbWVXaWRnZXQvcm9nYWluZS13b21lbic6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxyb2xsYmFyRW5hYmxlZCA9IGxvY2Fsc18ucm9sbGJhckVuYWJsZWQscm9sbGJhckNsaWVudEFjY2Vzc1Rva2VuID0gbG9jYWxzXy5yb2xsYmFyQ2xpZW50QWNjZXNzVG9rZW4sSE9TVCA9IGxvY2Fsc18uSE9TVCxhc3NldHMgPSBsb2NhbHNfLmFzc2V0cztidWYucHVzaChcIjwhRE9DVFlQRSBodG1sPjxodG1sIGxhbmc9XFxcImVuXFxcIj48aGVhZD48dGl0bGU+U2hvcGJlYW0gV2lkZ2V0PC90aXRsZT48bWV0YSBodHRwLWVxdWl2PVxcXCJDb250ZW50LVR5cGVcXFwiIGNvbnRlbnQ9XFxcInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxcXCI+PG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiPlwiKTtcbmlmICggcm9sbGJhckVuYWJsZWQpXG57XG5idWYucHVzaChcIjwhLS0gUm9sbGJhciAtLT48c2NyaXB0PnZhciBfcm9sbGJhckNvbmZpZyA9IHtcXG4gIGFjY2Vzc1Rva2VuOiAnXCIgKyAoamFkZS5lc2NhcGUoKGphZGUuaW50ZXJwID0gcm9sbGJhckNsaWVudEFjY2Vzc1Rva2VuKSA9PSBudWxsID8gJycgOiBqYWRlLmludGVycCkpICsgXCInLFxcbiAgY2FwdHVyZVVuY2F1Z2h0OiB0cnVlLFxcbiAgcGF5bG9hZDoge1xcbiAgICBlbnZpcm9ubWVudDogXFxcInByb2R1Y3Rpb25cXFwiXFxuICB9XFxufTtcXG4hZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGIpe3RoaXMuc2hpbUlkPSsraCx0aGlzLm5vdGlmaWVyPW51bGwsdGhpcy5wYXJlbnRTaGltPWIsdGhpcy5sb2dnZXI9ZnVuY3Rpb24oKXt9LGEuY29uc29sZSYmdm9pZCAwPT09YS5jb25zb2xlLnNoaW1JZCYmKHRoaXMubG9nZ2VyPWEuY29uc29sZS5sb2cpfWZ1bmN0aW9uIGQoYixjLGQpeyFkWzRdJiZhLl9yb2xsYmFyV3JhcHBlZEVycm9yJiYoZFs0XT1hLl9yb2xsYmFyV3JhcHBlZEVycm9yLGEuX3JvbGxiYXJXcmFwcGVkRXJyb3I9bnVsbCksYi51bmNhdWdodEVycm9yLmFwcGx5KGIsZCksYyYmYy5hcHBseShhLGQpfWZ1bmN0aW9uIGUoYil7dmFyIGQ9YztyZXR1cm4gZyhmdW5jdGlvbigpe2lmKHRoaXMubm90aWZpZXIpcmV0dXJuIHRoaXMubm90aWZpZXJbYl0uYXBwbHkodGhpcy5ub3RpZmllcixhcmd1bWVudHMpO3ZhciBjPXRoaXMsZT1cXFwic2NvcGVcXFwiPT09YjtlJiYoYz1uZXcgZCh0aGlzKSk7dmFyIGY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApLGc9e3NoaW06YyxtZXRob2Q6YixhcmdzOmYsdHM6bmV3IERhdGV9O3JldHVybiBhLl9yb2xsYmFyU2hpbVF1ZXVlLnB1c2goZyksZT9jOnZvaWQgMH0pfWZ1bmN0aW9uIGYoYSxiKXtpZihiLmhhc093blByb3BlcnR5JiZiLmhhc093blByb3BlcnR5KFxcXCJhZGRFdmVudExpc3RlbmVyXFxcIikpe3ZhciBjPWIuYWRkRXZlbnRMaXN0ZW5lcjtiLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYixkLGUpe2MuY2FsbCh0aGlzLGIsYS53cmFwKGQpLGUpfTt2YXIgZD1iLnJlbW92ZUV2ZW50TGlzdGVuZXI7Yi5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjKXtkLmNhbGwodGhpcyxhLGImJmIuX3dyYXBwZWQ/Yi5fd3JhcHBlZDpiLGMpfX19ZnVuY3Rpb24gZyhhLGIpe3JldHVybiBiPWJ8fHRoaXMubG9nZ2VyLGZ1bmN0aW9uKCl7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChjKXtiKFxcXCJSb2xsYmFyIGludGVybmFsIGVycm9yOlxcXCIsYyl9fX12YXIgaD0wO2MuaW5pdD1mdW5jdGlvbihhLGIpe3ZhciBlPWIuZ2xvYmFsQWxpYXN8fFxcXCJSb2xsYmFyXFxcIjtpZihcXFwib2JqZWN0XFxcIj09dHlwZW9mIGFbZV0pcmV0dXJuIGFbZV07YS5fcm9sbGJhclNoaW1RdWV1ZT1bXSxhLl9yb2xsYmFyV3JhcHBlZEVycm9yPW51bGwsYj1ifHx7fTt2YXIgaD1uZXcgYztyZXR1cm4gZyhmdW5jdGlvbigpe2lmKGguY29uZmlndXJlKGIpLGIuY2FwdHVyZVVuY2F1Z2h0KXt2YXIgYz1hLm9uZXJyb3I7YS5vbmVycm9yPWZ1bmN0aW9uKCl7dmFyIGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApO2QoaCxjLGEpfTt2YXIgZyxpLGo9W1xcXCJFdmVudFRhcmdldFxcXCIsXFxcIldpbmRvd1xcXCIsXFxcIk5vZGVcXFwiLFxcXCJBcHBsaWNhdGlvbkNhY2hlXFxcIixcXFwiQXVkaW9UcmFja0xpc3RcXFwiLFxcXCJDaGFubmVsTWVyZ2VyTm9kZVxcXCIsXFxcIkNyeXB0b09wZXJhdGlvblxcXCIsXFxcIkV2ZW50U291cmNlXFxcIixcXFwiRmlsZVJlYWRlclxcXCIsXFxcIkhUTUxVbmtub3duRWxlbWVudFxcXCIsXFxcIklEQkRhdGFiYXNlXFxcIixcXFwiSURCUmVxdWVzdFxcXCIsXFxcIklEQlRyYW5zYWN0aW9uXFxcIixcXFwiS2V5T3BlcmF0aW9uXFxcIixcXFwiTWVkaWFDb250cm9sbGVyXFxcIixcXFwiTWVzc2FnZVBvcnRcXFwiLFxcXCJNb2RhbFdpbmRvd1xcXCIsXFxcIk5vdGlmaWNhdGlvblxcXCIsXFxcIlNWR0VsZW1lbnRJbnN0YW5jZVxcXCIsXFxcIlNjcmVlblxcXCIsXFxcIlRleHRUcmFja1xcXCIsXFxcIlRleHRUcmFja0N1ZVxcXCIsXFxcIlRleHRUcmFja0xpc3RcXFwiLFxcXCJXZWJTb2NrZXRcXFwiLFxcXCJXZWJTb2NrZXRXb3JrZXJcXFwiLFxcXCJXb3JrZXJcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdFxcXCIsXFxcIlhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXRcXFwiLFxcXCJYTUxIdHRwUmVxdWVzdFVwbG9hZFxcXCJdO2ZvcihnPTA7ZzxqLmxlbmd0aDsrK2cpaT1qW2ddLGFbaV0mJmFbaV0ucHJvdG90eXBlJiZmKGgsYVtpXS5wcm90b3R5cGUpfXJldHVybiBhW2VdPWgsaH0saC5sb2dnZXIpKCl9LGMucHJvdG90eXBlLmxvYWRGdWxsPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWcoZnVuY3Rpb24oKXt2YXIgYT1iLmNyZWF0ZUVsZW1lbnQoXFxcInNjcmlwdFxcXCIpLGU9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwic2NyaXB0XFxcIilbMF07YS5zcmM9ZC5yb2xsYmFySnNVcmwsYS5hc3luYz0hYyxhLm9ubG9hZD1mLGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxlKX0sdGhpcy5sb2dnZXIpLGY9ZyhmdW5jdGlvbigpe2lmKHZvaWQgMD09PWEuX3JvbGxiYXJQYXlsb2FkUXVldWUpZm9yKHZhciBiLGMsZCxlLGY9bmV3IEVycm9yKFxcXCJyb2xsYmFyLmpzIGRpZCBub3QgbG9hZFxcXCIpO2I9YS5fcm9sbGJhclNoaW1RdWV1ZS5zaGlmdCgpOylmb3IoZD1iLmFyZ3MsZT0wO2U8ZC5sZW5ndGg7KytlKWlmKGM9ZFtlXSxcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgYyl7YyhmKTticmVha319LHRoaXMubG9nZ2VyKTtnKGZ1bmN0aW9uKCl7Yz9lKCk6YS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihcXFwibG9hZFxcXCIsZSwhMSk6YS5hdHRhY2hFdmVudChcXFwib25sb2FkXFxcIixlKX0sdGhpcy5sb2dnZXIpKCl9LGMucHJvdG90eXBlLndyYXA9ZnVuY3Rpb24oYil7dHJ5e2lmKFxcXCJmdW5jdGlvblxcXCIhPXR5cGVvZiBiKXJldHVybiBiO2lmKGIuX2lzV3JhcClyZXR1cm4gYjtpZighYi5fd3JhcHBlZCl7Yi5fd3JhcHBlZD1mdW5jdGlvbigpe3RyeXtyZXR1cm4gYi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goYyl7dGhyb3cgYS5fcm9sbGJhcldyYXBwZWRFcnJvcj1jLGN9fSxiLl93cmFwcGVkLl9pc1dyYXA9ITA7Zm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmKGIuX3dyYXBwZWRbY109YltjXSl9cmV0dXJuIGIuX3dyYXBwZWR9Y2F0Y2goZCl7cmV0dXJuIGJ9fTtmb3IodmFyIGk9XFxcImxvZyxkZWJ1ZyxpbmZvLHdhcm4sd2FybmluZyxlcnJvcixjcml0aWNhbCxnbG9iYWwsY29uZmlndXJlLHNjb3BlLHVuY2F1Z2h0RXJyb3JcXFwiLnNwbGl0KFxcXCIsXFxcIiksaj0wO2o8aS5sZW5ndGg7KytqKWMucHJvdG90eXBlW2lbal1dPWUoaVtqXSk7dmFyIGs9XFxcIi8vZDM3Z3ZydmMwd3Q0czEuY2xvdWRmcm9udC5uZXQvanMvdjEuMS9yb2xsYmFyLm1pbi5qc1xcXCI7X3JvbGxiYXJDb25maWcucm9sbGJhckpzVXJsPV9yb2xsYmFyQ29uZmlnLnJvbGxiYXJKc1VybHx8azt2YXIgbD1jLmluaXQoYSxfcm9sbGJhckNvbmZpZyk7bC5sb2FkRnVsbChhLGIsITEsX3JvbGxiYXJDb25maWcpfSh3aW5kb3csZG9jdW1lbnQpOzwvc2NyaXB0PlwiKTtcbn1cbmJ1Zi5wdXNoKFwiPG1ldGEgcHJvcGVydHk9XFxcIm9nOnRpdGxlXFxcIiBjb250ZW50PVxcXCJ7e3NlbGVjdGVkUHJvZHVjdC5icmFuZE5hbWV9fSAtIHt7c2VsZWN0ZWRQcm9kdWN0Lm5hbWV9fVxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOmltYWdlXFxcIiBjb250ZW50PVxcXCJ7e2luaXRpYWxJbWFnZS51cmx9fVxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOmRlc2NyaXB0aW9uXFxcIiBjb250ZW50PVxcXCJ7e3NlbGVjdGVkUHJvZHVjdC5kZXNjcmlwdGlvbn19XFxcIj5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8bGlua1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3JlbCc6KFwic3R5bGVzaGVldFwiKSwgJ2hyZWYnOihcIlwiICsgKGFzc2V0cy51cmwoJy9jc3MvaW5GcmFtZVdpZGdldC1yb2dhaW5lLmNzcycpKSArIFwiXCIpIH0sIHtcInJlbFwiOnRydWUsXCJocmVmXCI6dHJ1ZX0pKSArIFwiPjwhLS1baWYgbHQgSUUgMTBdPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9jdXN0b21FdmVudHMuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9maWx0ZXIuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9tYXAuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zb21lLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc3RyaW5nLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48IVtlbmRpZl0tLT48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2pxdWVyeS9qcXVlcnktMS4xMC4yLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4zLjEzLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItcm91dGUubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48IS0tVE9ETzogcmVtb3ZlISEhLS0+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItbW9ja3MuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBzdHlsZT1cXFwiaGVpZ2h0OiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuOyBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwO1xcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1idXR0b24tb3ZlcnJpZGVcXFwiPjxkaXYgbmctaW5jbHVkZT1cXFwiJnF1b3Q7L3dpZGdldC92aWV3cy9tYWluLXJvZ2FpbmUtd29tZW4uaHRtbCZxdW90O1xcXCI+PC9kaXY+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2luRnJhbWVXaWRnZXQuYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2JvZHk+PC9odG1sPlwiKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufSkobG9jYWxzKVxufSwnbGlnaHRib3gvaGVhbHRoeS1lc3NlbnRpYWxzJzogZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgbG9jYWxzID0gbG9jYWxzIHx8IHt9O1xuICAgIGxvY2Fsc1snYXNzZXRzJ10gPSBhc3NldHM7XG4gICAgcmV0dXJuIChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgbG9jYWxzXyA9IChsb2NhbHMgfHwge30pLEhPU1QgPSBsb2NhbHNfLkhPU1QsYXNzZXRzID0gbG9jYWxzXy5hc3NldHM7YnVmLnB1c2goXCI8IURPQ1RZUEUgaHRtbD48aHRtbCBsYW5nPVxcXCJlblxcXCI+PGhlYWQ+PHRpdGxlPlNob3BiZWFtIExpZ2h0Ym94PC90aXRsZT48bWV0YSBodHRwLWVxdWl2PVxcXCJDb250ZW50LVR5cGVcXFwiIGNvbnRlbnQ9XFxcInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxcXCI+PG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcXFwiPjxtZXRhIHByb3BlcnR5PVxcXCJvZzp0aXRsZVxcXCIgY29udGVudD1cXFwie3tzZWxlY3RlZFByb2R1Y3QuYnJhbmROYW1lfX0gLSB7e3NlbGVjdGVkUHJvZHVjdC5uYW1lfX1cXFwiPjxtZXRhIHByb3BlcnR5PVxcXCJvZzppbWFnZVxcXCIgY29udGVudD1cXFwie3tpbml0aWFsSW1hZ2UudXJsfX1cXFwiPjxtZXRhIHByb3BlcnR5PVxcXCJvZzpkZXNjcmlwdGlvblxcXCIgY29udGVudD1cXFwie3tzZWxlY3RlZFByb2R1Y3QuZGVzY3JpcHRpb259fVxcXCI+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPGxpbmtcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdyZWwnOignc3R5bGVzaGVldCcpLCAnaHJlZic6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2Nzcy9saWdodGJveC1oZWFsdGh5LWVzc2VudGlhbHMuY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBzdHlsZT1cXFwiaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJTsgb3ZlcmZsb3c6IGhpZGRlbjsgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IG1hcmdpbjogMDsgcGFkZGluZzogMDtcXFwiIGNsYXNzPVxcXCJib290c3RyYXAtYnV0dG9uLW92ZXJyaWRlXFxcIj48ZGl2IG5nLWluY2x1ZGU9XFxcIiZxdW90Oy9saWdodGJveC92aWV3cy9tYWluLWhlYWx0aHktZXNzZW50aWFscy5odG1sJnF1b3Q7XFxcIj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGlnaHRib3guYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2JvZHk+PC9odG1sPlwiKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufSkobG9jYWxzKVxufSwnbGlnaHRib3gvaW5kZXgnOiBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICBsb2NhbHMgPSBsb2NhbHMgfHwge307XG4gICAgbG9jYWxzWydhc3NldHMnXSA9IGFzc2V0cztcbiAgICByZXR1cm4gKGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMpIHtcbnZhciBidWYgPSBbXTtcbnZhciBsb2NhbHNfID0gKGxvY2FscyB8fCB7fSksSE9TVCA9IGxvY2Fsc18uSE9TVCxhc3NldHMgPSBsb2NhbHNfLmFzc2V0cztidWYucHVzaChcIjwhRE9DVFlQRSBodG1sPjxodG1sIGxhbmc9XFxcImVuXFxcIj48aGVhZD48dGl0bGU+U2hvcGJlYW0gTGlnaHRib3g8L3RpdGxlPjxtZXRhIGh0dHAtZXF1aXY9XFxcIkNvbnRlbnQtVHlwZVxcXCIgY29udGVudD1cXFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XFxcIj48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOnRpdGxlXFxcIiBjb250ZW50PVxcXCJ7e3NlbGVjdGVkUHJvZHVjdC5icmFuZE5hbWV9fSAtIHt7c2VsZWN0ZWRQcm9kdWN0Lm5hbWV9fVxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOmltYWdlXFxcIiBjb250ZW50PVxcXCJ7e2luaXRpYWxJbWFnZS51cmx9fVxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOmRlc2NyaXB0aW9uXFxcIiBjb250ZW50PVxcXCJ7e3NlbGVjdGVkUHJvZHVjdC5kZXNjcmlwdGlvbn19XFxcIj5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8bGlua1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3JlbCc6KCdzdHlsZXNoZWV0JyksICdocmVmJzooXCJcIiArIChhc3NldHMudXJsKCcvY3NzL2xpZ2h0Ym94LmNzcycpKSArIFwiXCIpIH0sIHtcInJlbFwiOnRydWUsXCJocmVmXCI6dHJ1ZX0pKSArIFwiPjwhLS1baWYgbHQgSUUgMTBdPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9jdXN0b21FdmVudHMuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9maWx0ZXIuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9tYXAuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zb21lLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc3RyaW5nLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48IVtlbmRpZl0tLT48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2pxdWVyeS9qcXVlcnktMS4xMC4yLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4yLjMtY3VzdG9tLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItcm91dGUubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+KGZ1bmN0aW9uKCkge1xcbiAgZnVuY3Rpb24gUXVldWVGYWNhZGUobWVtYmVycykge1xcbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xcbiAgICB0aGlzLl9kZWZpbmUobWVtYmVycyk7XFxuICB9XFxuICB2YXIgcHJvdG8gPSBRdWV1ZUZhY2FkZS5wcm90b3R5cGU7XFxuICBcXG4gIHByb3RvLl9kZWZpbmUgPSBmdW5jdGlvbihtZW1iZXJzKSB7XFxuICAgIGlmICghbWVtYmVycykgeyByZXR1cm4gdGhpczsgfVxcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuICAgIGZ1bmN0aW9uIGFkZE1lbWJlcihuYW1lKSB7XFxuICAgICAgaWYgKCFuYW1lKSB7IHJldHVybjsgfVxcbiAgICAgIHNlbGZbbmFtZV0gPSBmdW5jdGlvbigpIHtcXG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goWyBuYW1lLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKSBdKTtcXG4gICAgICB9O1xcbiAgICB9XFxuICAgIHZhciBuYW1lcyA9IG1lbWJlcnMgaW5zdGFuY2VvZiBBcnJheSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShtZW1iZXJzKSA6IG1lbWJlcnMuc3BsaXQoLyAqLCAqL2cpO1xcbiAgICB3aGlsZSAobmFtZXMubGVuZ3RoKSB7XFxuICAgICAgYWRkTWVtYmVyKG5hbWVzLnNoaWZ0KCkpO1xcbiAgICB9XFxuICAgIHJldHVybiB0aGlzO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8ucHVzaCA9IGZ1bmN0aW9uKCkge1xcbiAgICB0aGlzLl9xdWV1ZS5wdXNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmdzKSk7XFxuICB9O1xcbiAgXFxuICBwcm90by5fZGVxdWV1ZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xcbiAgICB3aGlsZSAodGhpcy5fcXVldWUubGVuZ3RoKSB7XFxuICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xcbiAgICAgIHRyeSB7XFxuICAgICAgICB0YXJnZXRbbWVzc2FnZVswXV0uYXBwbHkodGFyZ2V0LCBtZXNzYWdlWzFdKTtcXG4gICAgICB9IGNhdGNoKGVycikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gdGFyZ2V0O1xcbiAgfTtcXG4gIFxcbiAgLy8gcXVldWUgZmFjYWRlc1xcbiAgd2luZG93LmFuYWx5dGljcyA9IG5ldyBRdWV1ZUZhY2FkZSgnaWRlbnRpZnksdHJhY2sscGFnZSxhbGlhcyxvbixvbmNlLHJlbW92ZUxpc3RlbmVyLGVtaXQscmVhZHksc2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlJyk7XFxufSkoKTs8L3NjcmlwdD48L2hlYWQ+PGJvZHkgc3R5bGU9XFxcImhlaWdodDogMTAwJTsgd2lkdGg6IDEwMCU7IG92ZXJmbG93OiBoaWRkZW47IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XFxcIiBjbGFzcz1cXFwiYm9vdHN0cmFwLWJ1dHRvbi1vdmVycmlkZVxcXCI+PGRpdiBuZy1pbmNsdWRlPVxcXCImcXVvdDsvbGlnaHRib3gvdmlld3MvbWFpbi1kZWZhdWx0Lmh0bWwmcXVvdDtcXFwiPjwvZGl2PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWdodGJveC5idW5kbGUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwvYm9keT48L2h0bWw+XCIpOztyZXR1cm4gYnVmLmpvaW4oXCJcIik7XG59KShsb2NhbHMpXG59LCdsaWdodGJveC9yb2dhaW5lLWFkLW1lbic6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxIT1NUID0gbG9jYWxzXy5IT1NULGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBMaWdodGJveDwvdGl0bGU+PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcXFwiPjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6dGl0bGVcXFwiIGNvbnRlbnQ9XFxcInt7c2VsZWN0ZWRQcm9kdWN0LmJyYW5kTmFtZX19IC0ge3tzZWxlY3RlZFByb2R1Y3QubmFtZX19XFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6aW1hZ2VcXFwiIGNvbnRlbnQ9XFxcInt7aW5pdGlhbEltYWdlLnVybH19XFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6ZGVzY3JpcHRpb25cXFwiIGNvbnRlbnQ9XFxcInt7c2VsZWN0ZWRQcm9kdWN0LmRlc2NyaXB0aW9ufX1cXFwiPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxsaW5rXCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAncmVsJzooJ3N0eWxlc2hlZXQnKSwgJ2hyZWYnOihcIlwiICsgKGFzc2V0cy51cmwoJy9jc3MvbGlnaHRib3gtcm9nYWluZS1hZC1tZW4uY3NzJykpICsgXCJcIikgfSwge1wicmVsXCI6dHJ1ZSxcImhyZWZcIjp0cnVlfSkpICsgXCI+PCEtLVtpZiBsdCBJRSAxMF0+XCIpO1xuaWYgKHR5cGVvZihIT1NUKSA9PT0gJ3VuZGVmaW5lZCcpIHsgSE9TVCA9ICcnIH1cbmJ1Zi5wdXNoKFwiPHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2N1c3RvbUV2ZW50cy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L2ZpbHRlci5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L21hcC5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3NvbWUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zdHJpbmcuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvanF1ZXJ5L2pxdWVyeS0xLjEwLjIubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci0xLjIuMy1jdXN0b20ubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2FuZ3VsYXIvYW5ndWxhci1yb3V0ZS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4oZnVuY3Rpb24oKSB7XFxuICBmdW5jdGlvbiBRdWV1ZUZhY2FkZShtZW1iZXJzKSB7XFxuICAgIHRoaXMuX3F1ZXVlID0gW107XFxuICAgIHRoaXMuX2RlZmluZShtZW1iZXJzKTtcXG4gIH1cXG4gIHZhciBwcm90byA9IFF1ZXVlRmFjYWRlLnByb3RvdHlwZTtcXG4gIFxcbiAgcHJvdG8uX2RlZmluZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcXG4gICAgaWYgKCFtZW1iZXJzKSB7IHJldHVybiB0aGlzOyB9XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG4gICAgZnVuY3Rpb24gYWRkTWVtYmVyKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHsgcmV0dXJuOyB9XFxuICAgICAgc2VsZltuYW1lXSA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgdGhpcy5fcXVldWUucHVzaChbIG5hbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpIF0pO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgdmFyIG5hbWVzID0gbWVtYmVycyBpbnN0YW5jZW9mIEFycmF5ID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG1lbWJlcnMpIDogbWVtYmVycy5zcGxpdCgvICosICovZyk7XFxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcXG4gICAgICBhZGRNZW1iZXIobmFtZXMuc2hpZnQoKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHRoaXM7XFxuICB9O1xcbiAgXFxuICBwcm90by5wdXNoID0gZnVuY3Rpb24oKSB7XFxuICAgIHRoaXMuX3F1ZXVlLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3MpKTtcXG4gIH07XFxuICBcXG4gIHByb3RvLl9kZXF1ZXVlID0gZnVuY3Rpb24odGFyZ2V0KSB7XFxuICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcXG4gICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XFxuICAgICAgdHJ5IHtcXG4gICAgICAgIHRhcmdldFttZXNzYWdlWzBdXS5hcHBseSh0YXJnZXQsIG1lc3NhZ2VbMV0pO1xcbiAgICAgIH0gY2F0Y2goZXJyKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0YXJnZXQ7XFxuICB9O1xcbiAgXFxuICAvLyBxdWV1ZSBmYWNhZGVzXFxuICB3aW5kb3cuYW5hbHl0aWNzID0gbmV3IFF1ZXVlRmFjYWRlKCdpZGVudGlmeSx0cmFjayxwYWdlLGFsaWFzLG9uLG9uY2UscmVtb3ZlTGlzdGVuZXIsZW1pdCxyZWFkeSxzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWUnKTtcXG59KSgpOzwvc2NyaXB0PjwvaGVhZD48Ym9keSBzdHlsZT1cXFwiaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJTsgb3ZlcmZsb3c6IGhpZGRlbjsgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IG1hcmdpbjogMDsgcGFkZGluZzogMDtcXFwiIGNsYXNzPVxcXCJib290c3RyYXAtYnV0dG9uLW92ZXJyaWRlXFxcIj48ZGl2IG5nLWluY2x1ZGU9XFxcIiZxdW90Oy9saWdodGJveC92aWV3cy9tYWluLXJvZ2FpbmUtYWQtbWVuLmh0bWwmcXVvdDtcXFwiPjwvZGl2PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWdodGJveC5idW5kbGUuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjwvYm9keT48L2h0bWw+XCIpOztyZXR1cm4gYnVmLmpvaW4oXCJcIik7XG59KShsb2NhbHMpXG59LCdsaWdodGJveC9yb2dhaW5lLW1lbic6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxIT1NUID0gbG9jYWxzXy5IT1NULGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBMaWdodGJveDwvdGl0bGU+PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcXFwiPjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6dGl0bGVcXFwiIGNvbnRlbnQ9XFxcInt7c2VsZWN0ZWRQcm9kdWN0LmJyYW5kTmFtZX19IC0ge3tzZWxlY3RlZFByb2R1Y3QubmFtZX19XFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6aW1hZ2VcXFwiIGNvbnRlbnQ9XFxcInt7aW5pdGlhbEltYWdlLnVybH19XFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6ZGVzY3JpcHRpb25cXFwiIGNvbnRlbnQ9XFxcInt7c2VsZWN0ZWRQcm9kdWN0LmRlc2NyaXB0aW9ufX1cXFwiPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxsaW5rXCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAncmVsJzooJ3N0eWxlc2hlZXQnKSwgJ2hyZWYnOihcIlwiICsgKGFzc2V0cy51cmwoJy9jc3MvbGlnaHRib3gtcm9nYWluZS5jc3MnKSkgKyBcIlwiKSB9LCB7XCJyZWxcIjp0cnVlLFwiaHJlZlwiOnRydWV9KSkgKyBcIj48IS0tW2lmIGx0IElFIDEwXT5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvY3VzdG9tRXZlbnRzLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvZmlsdGVyLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvbWFwLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc29tZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3N0cmluZy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9qcXVlcnkvanF1ZXJ5LTEuMTAuMi5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLTEuMi4zLWN1c3RvbS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLXJvdXRlLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPihmdW5jdGlvbigpIHtcXG4gIGZ1bmN0aW9uIFF1ZXVlRmFjYWRlKG1lbWJlcnMpIHtcXG4gICAgdGhpcy5fcXVldWUgPSBbXTtcXG4gICAgdGhpcy5fZGVmaW5lKG1lbWJlcnMpO1xcbiAgfVxcbiAgdmFyIHByb3RvID0gUXVldWVGYWNhZGUucHJvdG90eXBlO1xcbiAgXFxuICBwcm90by5fZGVmaW5lID0gZnVuY3Rpb24obWVtYmVycykge1xcbiAgICBpZiAoIW1lbWJlcnMpIHsgcmV0dXJuIHRoaXM7IH1cXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcbiAgICBmdW5jdGlvbiBhZGRNZW1iZXIobmFtZSkge1xcbiAgICAgIGlmICghbmFtZSkgeyByZXR1cm47IH1cXG4gICAgICBzZWxmW25hbWVdID0gZnVuY3Rpb24oKSB7XFxuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKFsgbmFtZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykgXSk7XFxuICAgICAgfTtcXG4gICAgfVxcbiAgICB2YXIgbmFtZXMgPSBtZW1iZXJzIGluc3RhbmNlb2YgQXJyYXkgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkobWVtYmVycykgOiBtZW1iZXJzLnNwbGl0KC8gKiwgKi9nKTtcXG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCkge1xcbiAgICAgIGFkZE1lbWJlcihuYW1lcy5zaGlmdCgpKTtcXG4gICAgfVxcbiAgICByZXR1cm4gdGhpcztcXG4gIH07XFxuICBcXG4gIHByb3RvLnB1c2ggPSBmdW5jdGlvbigpIHtcXG4gICAgdGhpcy5fcXVldWUucHVzaChBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJncykpO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8uX2RlcXVldWUgPSBmdW5jdGlvbih0YXJnZXQpIHtcXG4gICAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCkge1xcbiAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcXG4gICAgICB0cnkge1xcbiAgICAgICAgdGFyZ2V0W21lc3NhZ2VbMF1dLmFwcGx5KHRhcmdldCwgbWVzc2FnZVsxXSk7XFxuICAgICAgfSBjYXRjaChlcnIpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHRhcmdldDtcXG4gIH07XFxuICBcXG4gIC8vIHF1ZXVlIGZhY2FkZXNcXG4gIHdpbmRvdy5hbmFseXRpY3MgPSBuZXcgUXVldWVGYWNhZGUoJ2lkZW50aWZ5LHRyYWNrLHBhZ2UsYWxpYXMsb24sb25jZSxyZW1vdmVMaXN0ZW5lcixlbWl0LHJlYWR5LHNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZScpO1xcbn0pKCk7PC9zY3JpcHQ+PC9oZWFkPjxib2R5IHN0eWxlPVxcXCJoZWlnaHQ6IDEwMCU7IHdpZHRoOiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuOyBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwO1xcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1idXR0b24tb3ZlcnJpZGVcXFwiPjxkaXYgbmctaW5jbHVkZT1cXFwiJnF1b3Q7L2xpZ2h0Ym94L3ZpZXdzL21haW4tcm9nYWluZS5odG1sJnF1b3Q7XFxcIj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGlnaHRib3guYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2JvZHk+PC9odG1sPlwiKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufSkobG9jYWxzKVxufSwnbGlnaHRib3gvcm9nYWluZS13b21lbic6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxIT1NUID0gbG9jYWxzXy5IT1NULGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBMaWdodGJveDwvdGl0bGU+PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcXFwiPjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6dGl0bGVcXFwiIGNvbnRlbnQ9XFxcInt7c2VsZWN0ZWRQcm9kdWN0LmJyYW5kTmFtZX19IC0ge3tzZWxlY3RlZFByb2R1Y3QubmFtZX19XFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6aW1hZ2VcXFwiIGNvbnRlbnQ9XFxcInt7aW5pdGlhbEltYWdlLnVybH19XFxcIj48bWV0YSBwcm9wZXJ0eT1cXFwib2c6ZGVzY3JpcHRpb25cXFwiIGNvbnRlbnQ9XFxcInt7c2VsZWN0ZWRQcm9kdWN0LmRlc2NyaXB0aW9ufX1cXFwiPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxsaW5rXCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAncmVsJzooJ3N0eWxlc2hlZXQnKSwgJ2hyZWYnOihcIlwiICsgKGFzc2V0cy51cmwoJy9jc3MvbGlnaHRib3gtcm9nYWluZS5jc3MnKSkgKyBcIlwiKSB9LCB7XCJyZWxcIjp0cnVlLFwiaHJlZlwiOnRydWV9KSkgKyBcIj48IS0tW2lmIGx0IElFIDEwXT5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvY3VzdG9tRXZlbnRzLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvZmlsdGVyLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvbWFwLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc29tZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9zaGl2L3N0cmluZy5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PCFbZW5kaWZdLS0+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9qcXVlcnkvanF1ZXJ5LTEuMTAuMi5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLTEuMi4zLWN1c3RvbS5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLXJvdXRlLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPihmdW5jdGlvbigpIHtcXG4gIGZ1bmN0aW9uIFF1ZXVlRmFjYWRlKG1lbWJlcnMpIHtcXG4gICAgdGhpcy5fcXVldWUgPSBbXTtcXG4gICAgdGhpcy5fZGVmaW5lKG1lbWJlcnMpO1xcbiAgfVxcbiAgdmFyIHByb3RvID0gUXVldWVGYWNhZGUucHJvdG90eXBlO1xcbiAgXFxuICBwcm90by5fZGVmaW5lID0gZnVuY3Rpb24obWVtYmVycykge1xcbiAgICBpZiAoIW1lbWJlcnMpIHsgcmV0dXJuIHRoaXM7IH1cXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcbiAgICBmdW5jdGlvbiBhZGRNZW1iZXIobmFtZSkge1xcbiAgICAgIGlmICghbmFtZSkgeyByZXR1cm47IH1cXG4gICAgICBzZWxmW25hbWVdID0gZnVuY3Rpb24oKSB7XFxuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKFsgbmFtZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykgXSk7XFxuICAgICAgfTtcXG4gICAgfVxcbiAgICB2YXIgbmFtZXMgPSBtZW1iZXJzIGluc3RhbmNlb2YgQXJyYXkgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkobWVtYmVycykgOiBtZW1iZXJzLnNwbGl0KC8gKiwgKi9nKTtcXG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCkge1xcbiAgICAgIGFkZE1lbWJlcihuYW1lcy5zaGlmdCgpKTtcXG4gICAgfVxcbiAgICByZXR1cm4gdGhpcztcXG4gIH07XFxuICBcXG4gIHByb3RvLnB1c2ggPSBmdW5jdGlvbigpIHtcXG4gICAgdGhpcy5fcXVldWUucHVzaChBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJncykpO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8uX2RlcXVldWUgPSBmdW5jdGlvbih0YXJnZXQpIHtcXG4gICAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCkge1xcbiAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcXG4gICAgICB0cnkge1xcbiAgICAgICAgdGFyZ2V0W21lc3NhZ2VbMF1dLmFwcGx5KHRhcmdldCwgbWVzc2FnZVsxXSk7XFxuICAgICAgfSBjYXRjaChlcnIpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHRhcmdldDtcXG4gIH07XFxuICBcXG4gIC8vIHF1ZXVlIGZhY2FkZXNcXG4gIHdpbmRvdy5hbmFseXRpY3MgPSBuZXcgUXVldWVGYWNhZGUoJ2lkZW50aWZ5LHRyYWNrLHBhZ2UsYWxpYXMsb24sb25jZSxyZW1vdmVMaXN0ZW5lcixlbWl0LHJlYWR5LHNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZScpO1xcbn0pKCk7PC9zY3JpcHQ+PC9oZWFkPjxib2R5IHN0eWxlPVxcXCJoZWlnaHQ6IDEwMCU7IHdpZHRoOiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuOyBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwO1xcXCIgY2xhc3M9XFxcImJvb3RzdHJhcC1idXR0b24tb3ZlcnJpZGVcXFwiPjxkaXYgbmctaW5jbHVkZT1cXFwiJnF1b3Q7L2xpZ2h0Ym94L3ZpZXdzL21haW4tcm9nYWluZS5odG1sJnF1b3Q7XFxcIj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGlnaHRib3guYnVuZGxlLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2JvZHk+PC9odG1sPlwiKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufSkobG9jYWxzKVxufSwnc2VjdXJlQ2hlY2tvdXRGcmFtZSc6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxhc3NldHMgPSBsb2NhbHNfLmFzc2V0cztidWYucHVzaChcIjwhRE9DVFlQRSBodG1sPjxodG1sIGxhbmc9XFxcImVuXFxcIj48aGVhZD48dGl0bGU+U2hvcGJlYW0gU2VjdXJlIENoZWNrb3V0IEZyYW1lPC90aXRsZT48bWV0YSBodHRwLWVxdWl2PVxcXCJDb250ZW50LVR5cGVcXFwiIGNvbnRlbnQ9XFxcInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFxcXCI+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9qcXVlcnkvanF1ZXJ5LTEuMTAuMi5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLTEuMy4xMy5taW4uanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLXJvdXRlLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PCEtLVRPRE86IHJlbW92ZSEhIS0tPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvYW5ndWxhci9hbmd1bGFyLW1vY2tzLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48L2hlYWQ+PGJvZHkgbmctY29udHJvbGxlcj1cXFwiTWFpbkN0cmxcXFwiIHN0eWxlPVxcXCJ3aWR0aDogMDsgaGVpZ2h0OiAwOyBvcGFjaXR5OiAwOyBkaXNwbGF5OiBibG9jaztcXFwiPjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9zZWN1cmVDaGVja291dEZyYW1lLmJ1bmRsZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PC9ib2R5PjwvaHRtbD5cIik7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn0pKGxvY2Fscylcbn0sJ3dpZGdldCc6IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIGxvY2FscyA9IGxvY2FscyB8fCB7fTtcbiAgICBsb2NhbHNbJ2Fzc2V0cyddID0gYXNzZXRzO1xuICAgIHJldHVybiAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGxvY2Fsc18gPSAobG9jYWxzIHx8IHt9KSxIT1NUID0gbG9jYWxzXy5IT1NULGFzc2V0cyA9IGxvY2Fsc18uYXNzZXRzO2J1Zi5wdXNoKFwiPCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz1cXFwiZW5cXFwiPjxoZWFkPjx0aXRsZT5TaG9wYmVhbSBXaWRnZXQ8L3RpdGxlPjxtZXRhIGh0dHAtZXF1aXY9XFxcIkNvbnRlbnQtVHlwZVxcXCIgY29udGVudD1cXFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XFxcIj48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOnRpdGxlXFxcIiBjb250ZW50PVxcXCJ7e3NlbGVjdGVkUHJvZHVjdC5icmFuZE5hbWV9fSAtIHt7c2VsZWN0ZWRQcm9kdWN0Lm5hbWV9fVxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOmltYWdlXFxcIiBjb250ZW50PVxcXCJ7e2luaXRpYWxJbWFnZS51cmx9fVxcXCI+PG1ldGEgcHJvcGVydHk9XFxcIm9nOmRlc2NyaXB0aW9uXFxcIiBjb250ZW50PVxcXCJ7e3NlbGVjdGVkUHJvZHVjdC5kZXNjcmlwdGlvbn19XFxcIj5cIik7XG5pZiAodHlwZW9mKEhPU1QpID09PSAndW5kZWZpbmVkJykgeyBIT1NUID0gJycgfVxuYnVmLnB1c2goXCI8bGlua1wiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3JlbCc6KFwic3R5bGVzaGVldFwiKSwgJ2hyZWYnOihcIlwiICsgKGFzc2V0cy51cmwoJy9jc3Mvd2lkZ2V0LmNzcycpKSArIFwiXCIpIH0sIHtcInJlbFwiOnRydWUsXCJocmVmXCI6dHJ1ZX0pKSArIFwiPjwhLS1baWYgbHQgSUUgMTBdPlwiKTtcbmlmICh0eXBlb2YoSE9TVCkgPT09ICd1bmRlZmluZWQnKSB7IEhPU1QgPSAnJyB9XG5idWYucHVzaChcIjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9jdXN0b21FdmVudHMuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9maWx0ZXIuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9tYXAuanMnKSkgKyBcIlwiKSwgJ2Nyb3Nzb3JpZ2luJzooXCJhbm9ueW1vdXNcIikgfSwge1wic3JjXCI6dHJ1ZSxcImNyb3Nzb3JpZ2luXCI6dHJ1ZX0pKSArIFwiPjwvc2NyaXB0PjxzY3JpcHRcIiArIChqYWRlLmF0dHJzKHsgdGVyc2U6IHRydWUsICdzcmMnOihcIlwiICsgKGFzc2V0cy51cmwoJy9qcy9saWIvc2hpdi9zb21lLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL3NoaXYvc3RyaW5nLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48IVtlbmRpZl0tLT48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvbGliL2pxdWVyeS9qcXVlcnktMS4xMC4yLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItMS4yLjMtY3VzdG9tLm1pbi5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PHNjcmlwdFwiICsgKGphZGUuYXR0cnMoeyB0ZXJzZTogdHJ1ZSwgJ3NyYyc6KFwiXCIgKyAoYXNzZXRzLnVybCgnL2pzL2xpYi9hbmd1bGFyL2FuZ3VsYXItcm91dGUubWluLmpzJykpICsgXCJcIiksICdjcm9zc29yaWdpbic6KFwiYW5vbnltb3VzXCIpIH0sIHtcInNyY1wiOnRydWUsXCJjcm9zc29yaWdpblwiOnRydWV9KSkgKyBcIj48L3NjcmlwdD48c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+KGZ1bmN0aW9uKCkge1xcbiAgZnVuY3Rpb24gUXVldWVGYWNhZGUobWVtYmVycykge1xcbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xcbiAgICB0aGlzLl9kZWZpbmUobWVtYmVycyk7XFxuICB9XFxuICB2YXIgcHJvdG8gPSBRdWV1ZUZhY2FkZS5wcm90b3R5cGU7XFxuICBcXG4gIHByb3RvLl9kZWZpbmUgPSBmdW5jdGlvbihtZW1iZXJzKSB7XFxuICAgIGlmICghbWVtYmVycykgeyByZXR1cm4gdGhpczsgfVxcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuICAgIGZ1bmN0aW9uIGFkZE1lbWJlcihuYW1lKSB7XFxuICAgICAgaWYgKCFuYW1lKSB7IHJldHVybjsgfVxcbiAgICAgIHNlbGZbbmFtZV0gPSBmdW5jdGlvbigpIHtcXG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goWyBuYW1lLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKSBdKTtcXG4gICAgICB9O1xcbiAgICB9XFxuICAgIHZhciBuYW1lcyA9IG1lbWJlcnMgaW5zdGFuY2VvZiBBcnJheSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShtZW1iZXJzKSA6IG1lbWJlcnMuc3BsaXQoLyAqLCAqL2cpO1xcbiAgICB3aGlsZSAobmFtZXMubGVuZ3RoKSB7XFxuICAgICAgYWRkTWVtYmVyKG5hbWVzLnNoaWZ0KCkpO1xcbiAgICB9XFxuICAgIHJldHVybiB0aGlzO1xcbiAgfTtcXG4gIFxcbiAgcHJvdG8ucHVzaCA9IGZ1bmN0aW9uKCkge1xcbiAgICB0aGlzLl9xdWV1ZS5wdXNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmdzKSk7XFxuICB9O1xcbiAgXFxuICBwcm90by5fZGVxdWV1ZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xcbiAgICB3aGlsZSAodGhpcy5fcXVldWUubGVuZ3RoKSB7XFxuICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xcbiAgICAgIHRyeSB7XFxuICAgICAgICB0YXJnZXRbbWVzc2FnZVswXV0uYXBwbHkodGFyZ2V0LCBtZXNzYWdlWzFdKTtcXG4gICAgICB9IGNhdGNoKGVycikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gdGFyZ2V0O1xcbiAgfTtcXG4gIFxcbiAgLy8gcXVldWUgZmFjYWRlc1xcbiAgd2luZG93LmFuYWx5dGljcyA9IG5ldyBRdWV1ZUZhY2FkZSgnaWRlbnRpZnksdHJhY2sscGFnZSxhbGlhcyxvbixvbmNlLHJlbW92ZUxpc3RlbmVyLGVtaXQscmVhZHksc2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlJyk7XFxufSkoKTs8L3NjcmlwdD48L2hlYWQ+PGJvZHkgc3R5bGU9XFxcImhlaWdodDogMTAwJTsgb3ZlcmZsb3c6IGhpZGRlbjsgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IG1hcmdpbjogMDsgcGFkZGluZzogMFxcXCIgbmctY29udHJvbGxlcj1cXFwiTWFpbkN0cmxcXFwiIGNsYXNzPVxcXCJib290c3RyYXAtYnV0dG9uLW92ZXJyaWRlXFxcIj48ZGl2IG5nLWluY2x1ZGU9XFxcIiZxdW90Oy93aWRnZXQvdmlld3MvbWFpbi5odG1sJnF1b3Q7XFxcIj48L2Rpdj48c2NyaXB0XCIgKyAoamFkZS5hdHRycyh7IHRlcnNlOiB0cnVlLCAnc3JjJzooXCJcIiArIChhc3NldHMudXJsKCcvanMvd2lkZ2V0LmJ1bmRsZS5qcycpKSArIFwiXCIpLCAnY3Jvc3NvcmlnaW4nOihcImFub255bW91c1wiKSB9LCB7XCJzcmNcIjp0cnVlLFwiY3Jvc3NvcmlnaW5cIjp0cnVlfSkpICsgXCI+PC9zY3JpcHQ+PC9ib2R5PjwvaHRtbD5cIik7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn0pKGxvY2Fscylcbn19O30pKCk7XG47XG5cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICh3aW5kb3csIHVuZGVmaW5lZCkge1xuICBpZiAoIXdpbmRvdy5TaG9wYmVhbSkge1xuICAgIHZhclxuICAgIC8vTk9URTogd2UncmUgdXNpbmcgdmFsdWVzIGhpZ2hlciB0aGFuIGFyZSBhbGxvd2VkIGJ5IHRoZSBzcGVjIGJ1dCBvbmx5IGJlY2F1c2Ugb3RoZXIgcHBsIGFyZSB0b28uLi5cbiAgICAvKiogQGNvbnN0ICovIFpfMTAgICAgICAgICAgID0gKzIxNDc0ODM2NDAsXG4gICAgLyoqIEBjb25zdCAqLyBaXzkgICAgICAgICAgICA9ICsyMTQ3NDgzNjMwLFxuICAgIC8qKiBAY29uc3QgKi8gWl84ICAgICAgICAgICAgPSArMjE0NzQ4MzYyMCxcbiAgICAvKiogQGNvbnN0ICovIFpfNyAgICAgICAgICAgID0gKzIxNDc0ODM2MTAsXG4gICAgLyoqIEBjb25zdCAqLyBaXzYgICAgICAgICAgICA9ICsyMTQ3NDgzNjAwLFxuICAgIC8qKiBAY29uc3QgKi8gWl81ICAgICAgICAgICAgPSArMjE0NzQ4MzU5MCxcbiAgICAvKiogQGNvbnN0ICovIEpRVUVSWV9WRVJTSU9OID0gJzEuMTAuMidcbiAgICAgIDtcblxuICAgIHZhciBjb25maWcgPSByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvY29uZmlnJykuY3VycmVudCgpO1xuXG4gICAgdmFyIHEgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4uLy4uLy4uL3NoYXJlZC9saWIva3Jpc2tvd2FsL3EnKVxuICAgICAgLCBwbXJwYyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvbGliL2l6dXphay9wbXJwYycpXG4gICAgICAsICQgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vYnVpbGQnKVxuICAgICAgLCBkZWZlcnJlZEJvZHkgICAgICAgICAgPSBxLmRlZmVyKClcbiAgICAgICwgZGVmZXJyZWRMaWdodGJveFJlYWR5ID0gcS5kZWZlcigpXG4gICAgICAsIGJvZHlQcm9taXNlICAgICAgICAgICA9IGRlZmVycmVkQm9keS5wcm9taXNlXG4gICAgICAsIGJhc2UgICAgICAgICAgICAgICAgICA9IHtcbiAgICAgICAgICB0cmFuc2l0aW9uOiAnd2lkdGggNTAwbXMgZWFzZSwgaGVpZ2h0IDUwMG1zIGVhc2UnLFxuICAgICAgICAgIHBvc2l0aW9uICA6ICdmaXhlZCcsXG4gICAgICAgICAgYm90dG9tICAgIDogMCxcbiAgICAgICAgICByaWdodCAgICAgOiAwLFxuICAgICAgICAgIGJvcmRlciAgICA6IDAsXG4gICAgICAgICAgbWFyZ2luICAgIDogMCxcbiAgICAgICAgICBwYWRkaW5nICAgOiAwLFxuICAgICAgICAgICd6LWluZGV4JyA6IFpfN1xuICAgICAgICB9XG4gICAgICA7XG5cbiAgICB3aW5kb3cuU2hvcGJlYW0gPSB7XG4gICAgICAvKiogQGNvbnN0ICovIHN3Zk9wZW5MaWdodGJveDogZnVuY3Rpb24gKHV1aWQsIHByb2R1Y3RJbmRleCkge1xuICAgICAgICBwbXJwYy5jYWxsKHtcbiAgICAgICAgICBkZXN0aW5hdGlvbiAgICAgICAgOiAncHVibGlzaCcsXG4gICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ3dpZGdldE9wZW5MaWdodGJveCcgKyB1dWlkLFxuICAgICAgICAgIHBhcmFtcyAgICAgICAgICAgICA6IFtwcm9kdWN0SW5kZXhdXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBzd2ZUcmFja01vdXNlT3ZlciAgICAgICAgICAgIDogZnVuY3Rpb24gKHV1aWQsIHByb2R1Y3RJbmRleCkge1xuICAgICAgICBwbXJwYy5jYWxsKHtcbiAgICAgICAgICBkZXN0aW5hdGlvbiAgICAgICAgOiAncHVibGlzaCcsXG4gICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ3dpZGdldFRyYWNrTW91c2VPdmVyJyArIHV1aWQsXG4gICAgICAgICAgcGFyYW1zICAgICAgICAgICAgIDogW3Byb2R1Y3RJbmRleF1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZyAgICAgICAgICAgICAgICAgICAgICAgOiBjb25maWcsXG5cbiAgICAgIC8qKiBAY29uc3QgKi8gSlFVRVJZX1ZFUlNJT04gICAgICAgIDogSlFVRVJZX1ZFUlNJT04sXG4gICAgICAvKiogQGNvbnN0ICovIEpRVUVSWV9IUkVGICAgICAgICAgICA6ICcvL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8nICsgSlFVRVJZX1ZFUlNJT04gKyAnL2pxdWVyeS5taW4uanMnLFxuICAgICAgLyoqIEBjb25zdCAqLyBTV0ZfSUZSQU1FX1NFTEVDVE9SICAgOiAnaWZyYW1lLnNob3BiZWFtLWZsYXNoLWZyYW1lJyxcbiAgICAgIC8qKiBAY29uc3QgKi8gSE9TVCAgICAgICAgICAgICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2NyaXB0LnNob3BiZWFtLXNjcmlwdCcpLnNyYy5tYXRjaCgvKF4uKilcXC9qc1xcL3dpZGdldC5sb2FkZXIuanMkLylbMV0sXG4gICAgICAvKiogQGNvbnN0ICovIERPQ1VNRU5UX1JPT1QgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JyksXG4gICAgICAvKiogQGNvbnN0ICovIERPQ1VNRU5UX0hFQUQgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKSxcbiAgICAgIC8qKiBAY29uc3QgKi8gRE9DVU1FTlRfQk9EWSAgICAgICAgIDogYm9keVByb21pc2UsIC8vZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLFxuICAgICAgLyoqIEBjb25zdCAqLyBMSUdIVEJPWF9JRlJBTUVfQ1NTICAgOiB7XG4gICAgICAgIHBvc2l0aW9uICAgIDogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wICAgICAgICAgOiAwLFxuICAgICAgICBsZWZ0ICAgICAgICA6IDAsXG4gICAgICAgIGJvdHRvbSAgICAgIDogMCxcbiAgICAgICAgcmlnaHQgICAgICAgOiAwLFxuICAgICAgICBib3JkZXIgICAgICA6IDAsXG4gICAgICAgIG1hcmdpbiAgICAgIDogMCxcbiAgICAgICAgcGFkZGluZyAgICAgOiAwLFxuICAgICAgICB3aWR0aCAgICAgICA6ICcxMDAlJyxcbiAgICAgICAgJ21heC13aWR0aCcgOiAnMTAwJScsXG4gICAgICAgIGhlaWdodCAgICAgIDogJzEwMCUnLFxuICAgICAgICAnbWF4LWhlaWdodCc6ICcxMDAlJyxcbiAgICAgICAgJ3otaW5kZXgnICAgOiBaXzhcbiAgICAgIH0sXG4gICAgICAvKiogQGNvbnN0ICovIExJR0hUQk9YX0NPTlRBSU5FUl9DU1M6IHtcbiAgICAgICAgJy13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nJzogJ3RvdWNoJyxcbiAgICAgICAgb3ZlcmZsb3cgICAgICAgICAgICAgICAgICAgIDogJ2hpZGRlbicsXG4gICAgICAgIHBvc2l0aW9uICAgICAgICAgICAgICAgICAgICA6ICdmaXhlZCcsXG4gICAgICAgIHRvcCAgICAgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIGxlZnQgICAgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIGJvdHRvbSAgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIHJpZ2h0ICAgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIGJvcmRlciAgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIG1hcmdpbiAgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIHBhZGRpbmcgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIHdpZHRoICAgICAgICAgICAgICAgICAgICAgICA6ICcxMDAlJyxcbiAgICAgICAgJ21heC13aWR0aCcgICAgICAgICAgICAgICAgIDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQgICAgICAgICAgICAgICAgICAgICAgOiAnMTAwJScsXG4gICAgICAgICdtYXgtaGVpZ2h0JyAgICAgICAgICAgICAgICA6ICcxMDAlJyxcbiAgICAgICAgJ3otaW5kZXgnICAgICAgICAgICAgICAgICAgIDogWl84XG4gICAgICB9LFxuICAgICAgLyoqIEBjb25zdCAqLyBMSUdIVEJPWF9ISURERU5fQ1NTICAgOiB7dmlzaWJpbGl0eTogJ2hpZGRlbicsIG9wYWNpdHk6IDAsIGRpc3BsYXk6ICdub25lJ30sXG4gICAgICAvKiogQGNvbnN0ICovIFdJREdFVF9ERUZBVUxUX0NTUyAgICA6IHtwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiAwLCBsZWZ0OiAwLCBib3JkZXI6IDAsIG1hcmdpbjogMCwgcGFkZGluZzogMCwgJ21pbi13aWR0aCc6ICcxMDAlJywgJ21pbi1oZWlnaHQnOiAnMTAwJSd9LFxuICAgICAgLyoqIEBjb25zdCAqLyBXSURHRVRfSElEREVOX0NTUyAgICAgOiB7dmlzaWJpbGl0eTogJ2hpZGRlbicsIG9wYWNpdHk6IDB9LFxuXG4gICAgICAvKiogQGNvbnN0ICovIENBUlRfREVGQVVMVF9DU1M6IGJhc2UsXG4gICAgICAvKiogQGNvbnN0ICovIENBUlRfVklTSUJMRV9DU1M6IHtoZWlnaHQ6ICc2MDBweCcsIHdpZHRoOiAnMzQwcHgnfSxcbiAgICAgIC8qKiBAY29uc3QgKi8gQ0FSVF9ISURERU5fQ1NTIDoge2hlaWdodDogJzUwcHgnLCB3aWR0aDogJzBweCd9LFxuICAgICAgLyoqIEBjb25zdCAqLyBDQVJUX0NMT1NFRF9DU1MgOiB7aGVpZ2h0OiAnNTBweCcsIHdpZHRoOiAnMTgwcHgnfSxcblxuICAgICAgLyoqIEBjb25zdCAqLyBDSEVDS09VVF9ERUZBVUxUX0NTUyAgICAgICAgIDoge1xuICAgICAgICBwb3NpdGlvbiAgICA6ICdmaXhlZCcsXG4gICAgICAgIGJvdHRvbSAgICAgIDogMCxcbiAgICAgICAgbGVmdCAgICAgICAgOiAwLFxuICAgICAgICByaWdodCAgICAgICA6IDAsXG4gICAgICAgIGJvcmRlciAgICAgIDogMCxcbiAgICAgICAgbWFyZ2luICAgICAgOiAwLFxuICAgICAgICBwYWRkaW5nICAgICA6IDAsXG4gICAgICAgICd6LWluZGV4JyAgIDogWl8xMCxcbiAgICAgICAgaGVpZ2h0ICAgICAgOiAnMTAwJScsXG4gICAgICAgIHdpZHRoICAgICAgIDogJzEwMCUnLFxuICAgICAgICAnbWF4LXdpZHRoJyA6ICcxMDAlJyxcbiAgICAgICAgJ21heC1oZWlnaHQnOiAnMTAwJSdcbiAgICAgIH0sXG4gICAgICAvKiogQGNvbnN0ICovIENIRUNLT1VUX1ZJU0lCTEVfQ1NTICAgICAgICAgOiB7dG9wOiAwLCBvcGFjaXR5OiAxLCB2aXNpYmlsaXR5OiAndmlzaWJsZSd9LC8vLCBoZWlnaHQ6ICcxMDBweCd9LFxuICAgICAgLyoqIEBjb25zdCAqLyBDSEVDS09VVF9ISURERU5fQ1NTICAgICAgICAgIDoge3RvcDogJy0xMDAlJywgb3BhY2l0eTogMCwgdmlzaWJpbGl0eTogJ2hpZGRlbid9LCAvLywgaGVpZ2h0OiAnMTAwcHgnfSxcbiAgICAgIC8qKiBAY29uc3QgKi8gQ0hFQ0tPVVRfQkFDS0RST1BfREVGQVVMVF9DU1M6IHtcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAncmdiKDQ5LCA0OSwgNDkpJyxcbiAgICAgICAgcG9zaXRpb24gICAgICAgICAgOiAnZml4ZWQnLFxuICAgICAgICB0b3AgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgIGJvdHRvbSAgICAgICAgICAgIDogMCxcbiAgICAgICAgbGVmdCAgICAgICAgICAgICAgOiAwLFxuICAgICAgICByaWdodCAgICAgICAgICAgICA6IDAsXG4gICAgICAgIGJvcmRlciAgICAgICAgICAgIDogMCxcbiAgICAgICAgbWFyZ2luICAgICAgICAgICAgOiAwLFxuICAgICAgICBwYWRkaW5nICAgICAgICAgICA6IDAsXG4gICAgICAgICd6LWluZGV4JyAgICAgICAgIDogWl85LFxuICAgICAgICBoZWlnaHQgICAgICAgICAgICA6ICcxMDAlJyxcbiAgICAgICAgd2lkdGggICAgICAgICAgICAgOiAnMTAwJScsXG4gICAgICAgICdtYXgtd2lkdGgnICAgICAgIDogJzEwMCUnLFxuICAgICAgICAnbWF4LWhlaWdodCcgICAgICA6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIC8qKiBAY29uc3QgKi8gQ0hFQ0tPVVRfQkFDS0RST1BfVklTSUJMRV9DU1M6IHtvcGFjaXR5OiAwLjYwLCB2aXNpYmlsaXR5OiAndmlzaWJsZSd9LC8vLCBoZWlnaHQ6ICcxMDBweCd9LFxuICAgICAgLyoqIEBjb25zdCAqLyBDSEVDS09VVF9CQUNLRFJPUF9ISURERU5fQ1NTIDoge29wYWNpdHk6IDAsIHZpc2liaWxpdHk6ICdoaWRkZW4nfSwgLy8sIGhlaWdodDogJzEwMHB4J30sXG4gICAgICAvKiogQGNvbnN0ICovIFdJREdFVF9BVFRSUyAgICAgICAgICAgICAgICAgOiB7YWxsb3d0cmFuc3BhcmVuY3k6ICd0cnVlJ30sXG4gICAgICAvKiogQGNvbnN0ICovIFdJREdFVF9UQUdfSURfRVhDTFVERV9SRUdFWCAgOiAvKD86LXBsYWNlaG9sZGVyfC1saW5rfC11bmJvb3RzdHJhcHBlZCkvLFxuICAgICAgLy8gVE9ETzogZmFjdG9yIHRoaXMgb3V0IHRvIHdvcmsgd2l0aCBXSURHRVRfQ09MTEVDVElPTl9NQVAgcGF0dGVybjsgaS5lLiBidWlsZCBvbi10aGUtZmx5XG4gICAgICAvKiogQGNvbnN0ICovIFdJREdFVF9VVUlEX1JFR0VYICAgICAgICAgICAgOiAvc2hvcGJlYW0tKD86aW4tZnJhbWUtKT93aWRnZXQtKD86aW1hZ2UtfHRleHQtfHN3Zi0pKC4rKSQvLFxuICAgICAgLyoqIEBjb25zdCAqLyBXSURHRVRfSEFTSF9SRUdFWCAgICAgICAgICAgIDogL3Nob3BiZWFtLW9wZW4td2lkZ2V0LSguKykkLyxcbiAgICAgIC8qKiBAY29uc3QgKi8gQ0xPVURJTkFSWV9CQVNFX1VSTCAgICAgICAgICA6ICdodHRwczovL2Nsb3VkaW5hcnktYS5ha2FtYWloZC5uZXQvc2hvcGJlYW0vaW1hZ2UvZmV0Y2gvJyxcbiAgICAgIC8qKiBAY29uc3QgKi8gVE9QX1dJTkRPVyAgICAgICAgICAgICAgICAgICA6IHdpbmRvdyA9PT0gd2luZG93LnRvcCxcblxuICAgICAgLyoqIEBjb25zdCAqLyBsaWdodGJveFJlYWR5UHJvbWlzZTogZGVmZXJyZWRMaWdodGJveFJlYWR5LnByb21pc2UsXG4gICAgICAvKiogQGNvbnN0ICovIEFQSUtFWV9TRUxFQ1RPUiAgICAgOiAvWyY/XWFwaUtleT0oW14mXSspL2lcbiAgICB9O1xuXG4gICAgLy8gQ29tcGlsZSBhbmQgYXBwZW5kIGBnbG9iYWwuc3R5bGAgc3R5bGVzaGVldCB0byBkb2N1bWVudCBib2R5XG4gICAgXG4gICAgdmFyIGdsb2JhbENzcyA9IEJ1ZmZlcihcIlcybGtLajBuYzJodmNHSmxZVzB0ZDJsa1oyVjBMV1JoZEdFdGIzWmxjbkpwWkdVdEoxMGdld29nSUdScGMzQnNZWGs2SUc1dmJtVWdJV2x0Y0c5eWRHRnVkRHNLSUNCM2FXUjBhRG9nTUNBaGFXMXdiM0owWVc1ME93b2dJR2hsYVdkb2REb2dNQ0FoYVcxd2IzSjBZVzUwT3dvZ0lIWnBjMmxpYVd4cGRIazZJR2hwWkdSbGJpQWhhVzF3YjNKMFlXNTBPd3A5Q2c9PVwiLFwiYmFzZTY0XCIpXG4gICAgICAsIGdsb2JhbFN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgZ2xvYmFsU3R5bGVFbGVtZW50LmlubmVyVGV4dCA9IGdsb2JhbENzcztcbiAgICB3aW5kb3cuU2hvcGJlYW0uRE9DVU1FTlRfQk9EWS50aGVuKGZ1bmN0aW9uKGJvZHkpe1xuICAgICAgYm9keS5hcHBlbmRDaGlsZChnbG9iYWxTdHlsZUVsZW1lbnQpO1xuICAgIH0pO1xuXG5cbiAgICByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvYXBwL3NlcnZpY2VzL3RvcFdpbmRvd1NlcnZpY2UnKTtcbiAgICByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvbGliL3Nob3BiZWFtL2NhcnRTeW5jJyk7XG5cbiAgICB2YXIgSW1hZ2VXaWRnZXQgICAgICAgICAgID0gcmVxdWlyZSgnLi9pbWFnZVdpZGdldCcpXG4gICAgICAsIEluRnJhbWVJbWFnZVdpZGdldCAgICA9IHJlcXVpcmUoJy4vaW5GcmFtZUltYWdlV2lkZ2V0JylcbiAgICAgICwgVGV4dFdpZGdldCAgICAgICAgICAgID0gcmVxdWlyZSgnLi90ZXh0V2lkZ2V0JylcbiAgICAgICwgU3dmV2lkZ2V0ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9zd2ZXaWRnZXQnKVxuICAgICAgLCBsaWdodGJveCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2xpZ2h0Ym94JylcbiAgICAgICwgY2FydCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9jYXJ0JylcbiAgICAgICwgY2hlY2tvdXQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9jaGVja291dCcpXG4gICAgICAsIGltYWdlc0xvYWRlZCAgICAgICAgICA9IHJlcXVpcmUoJy4uLy4uLy4uL3NoYXJlZC9saWIvZGVzYW5kcm8vaW1hZ2VzbG9hZGVkJylcbiAgICAgICwgZG9tcmVhZHkgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi4vLi4vLi4vc2hhcmVkL2xpYi9jbXMvZG9tcmVhZHknKVxuICAgICAgLCB3aWRnZXRRdWV1ZSAgICAgICAgICAgPSB7fVxuXG4gICAgICAgIC8vZ2xvYmFsICh3aW5kb3cpIGZ1bmN0aW9uc1xuICAgICAgLCBlbmNvZGVVUklDb21wb25lbnQgICAgPSB3aW5kb3cuZW5jb2RlVVJJQ29tcG9uZW50XG4gICAgICAsIF9mb3JFYWNoICAgICAgICAgICAgICA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoXG4gICAgICAsIGdldERhdGFFbGVtZW50cyA9IGZ1bmN0aW9uICh3aWRnZXRJZCkge1xuICAgICAgICAgIHJldHVybiAkLmNvbXBhY3QoXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh3aWRnZXRRdWV1ZSkubWFwKGZ1bmN0aW9uIChlbGVtZW50SWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChuZXcgUmVnRXhwKCdec2hvcGJlYW0td2lkZ2V0LWRhdGEtb3ZlcnJpZGUtJyArIHdpZGdldElkLnNsaWNlKC0zNikgKyAnJCcpKS50ZXN0KGVsZW1lbnRJZCkgP1xuICAgICAgICAgICAgICAgIHdpZGdldFF1ZXVlW2VsZW1lbnRJZF0ud2lkZ2V0IDogbnVsbFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICwgV0lER0VUX0NPTExFQ1RJT05fTUFQID0gW1xuICAgICAgICAgIC8vTk9URTogd2lkZ2V0LWRhdGEtb3ZlcnJpZGUgbXVzdCBjb21lIGZpcnN0XG4gICAgICAgICAge1xuICAgICAgICAgICAga2xhc3MgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIGlkZW50aWZ5aW5nQXR0cmlidXRlOiAnY2xhc3NOYW1lJyxcbiAgICAgICAgICAgIHNlbGVjdG9yICAgICA6ICdbY2xhc3MqPVwic2hvcGJlYW0td2lkZ2V0LWRhdGEtb3ZlcnJpZGVcIl0nLFxuICAgICAgICAgICAgcXVldWVDYWxsYmFjazogZnVuY3Rpb24gKHF1ZXVlT2JqLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgIHF1ZXVlT2JqLnF1ZXVlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBrbGFzcyAgICAgICAgOiBJbWFnZVdpZGdldCxcbiAgICAgICAgICAgIHNlbGVjdG9yICAgICA6ICdpbWdbaWQqPVwic2hvcGJlYW0td2lkZ2V0LWltYWdlLXBsYWNlaG9sZGVyXCJdJyxcbiAgICAgICAgICAgIHF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChxdWV1ZU9iaiwgd2lkZ2V0KSB7XG4gICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgaW1hZ2VzTG9hZGVkKHdpZGdldCkub24oJ2RvbmUnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZU9iai5xdWV1ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFFbGVtZW50cyAgID0gZ2V0RGF0YUVsZW1lbnRzKHdpZGdldC5pZClcbiAgICAgICAgICAgICAgICAgICwgd2lkZ2V0SW5zdGFuY2UgPSBxdWV1ZU9iai5pbnN0YW5jZSA9IG5ldyBJbWFnZVdpZGdldChpbnN0YW5jZS5pbWFnZXNbMF0uaW1nLCBkYXRhRWxlbWVudHMpO1xuICAgICAgICAgICAgICAgIHdpZGdldEluc3RhbmNlLmJ1aWxkKCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBrbGFzcyAgICAgICAgOiBJbkZyYW1lSW1hZ2VXaWRnZXQsXG4gICAgICAgICAgICBzZWxlY3RvciAgICAgOiAnaW1nW2lkKj1cInNob3BiZWFtLWluLWZyYW1lLXdpZGdldC1pbWFnZS1wbGFjZWhvbGRlclwiXScsXG4gICAgICAgICAgICBxdWV1ZUNhbGxiYWNrOiBmdW5jdGlvbiAocXVldWVPYmosIHdpZGdldCkge1xuICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgIGltYWdlc0xvYWRlZCh3aWRnZXQpLm9uKCdkb25lJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgcXVldWVPYmoucXVldWVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHZhciBkYXRhRWxlbWVudHMgICA9IGdldERhdGFFbGVtZW50cyh3aWRnZXQuaWQpXG4gICAgICAgICAgICAgICAgICAsIHdpZGdldEluc3RhbmNlID0gcXVldWVPYmouaW5zdGFuY2UgPSBuZXcgSW5GcmFtZUltYWdlV2lkZ2V0KGluc3RhbmNlLmltYWdlc1swXS5pbWcsIGRhdGFFbGVtZW50cyk7XG4gICAgICAgICAgICAgICAgd2lkZ2V0SW5zdGFuY2UuYnVpbGQoKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGtsYXNzICAgOiBUZXh0V2lkZ2V0LFxuICAgICAgICAgICAgc2VsZWN0b3I6ICdhW2lkKj1cInNob3BiZWFtLXdpZGdldC10ZXh0LWxpbmtcIl0nLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAga2xhc3MgICA6IFN3ZldpZGdldCxcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnb2JqZWN0W2lkKj1cInNob3BiZWFtLXdpZGdldC1zd2ZcIl0nLFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgO1xuXG5cbiAgICAvKipcbiAgICAgKiBDUkVBVEUgV0lER0VUUyBBTkQgS0lDSy1PRkYgQk9PVFNSVEFQUElOR1xuICAgICAqL1xuICAgIHZhciBjaGVja0ZvckJvZHkgICAgID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgICBpZiAoYm9keSBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChib2R5UmVhZHlJbnRlcnZhbElkKTtcbiAgICAgICAgZGVmZXJyZWRCb2R5LnJlc29sdmUoYm9keSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgICAsIGJvb3RzdHJhcFdpZGdldHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIFdJREdFVF9DT0xMRUNUSU9OX01BUC5mb3JFYWNoKGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciB3aWRnZXRFbGVtZW50cyAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvbGxlY3Rpb24uc2VsZWN0b3IpXG4gICAgICAgICAgLCBpZGVudGlmaWVyID0gY29sbGVjdGlvbi5pZGVudGlmeWluZ0F0dHJpYnV0ZSB8fCAnaWQnXG4gICAgICAgICAgLCBkZWZhdWx0Q2FsbGJhY2sgPSBmdW5jdGlvbiAocXVldWVPYmosIHdpZGdldCkge1xuICAgICAgICAgICAgICBxdWV1ZU9iai5xdWV1ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgIHZhciBkYXRhRWxlbWVudHMgPSBnZXREYXRhRWxlbWVudHMod2lkZ2V0W2lkZW50aWZpZXJdKTtcblxuICAgICAgICAgICAgICBxdWV1ZU9iai5pbnN0YW5jZSA9IG5ldyBjb2xsZWN0aW9uLmtsYXNzKHdpZGdldCwgZGF0YUVsZW1lbnRzKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICwgcXVldWVDYWxsYmFjayAgID0gY29sbGVjdGlvbi5xdWV1ZUNhbGxiYWNrIHx8IGRlZmF1bHRDYWxsYmFjaztcbiAgICAgICAgcXVldWVXaWRnZXRzKHdpZGdldEVsZW1lbnRzLCBxdWV1ZUNhbGxiYWNrLCBpZGVudGlmaWVyKVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHF1ZXVlV2lkZ2V0cyh3aWRnZXRzLCBmbiwgaWRlbnRpZmllcikge1xuICAgICAgICBfZm9yRWFjaC5jYWxsKHdpZGdldHMsIGZ1bmN0aW9uICh3aWRnZXQpIHtcbiAgICAgICAgICBpZiAoIXdpZGdldFF1ZXVlW3dpZGdldC5pZF0pIHtcbiAgICAgICAgICAgIGlmICh3aWRnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNob3BiZWFtLWluaXRpYWxpemVkJykgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgICAvLyB3aWRnZXQgYWxyZWFkeSBib290c3RyYXBwZWRcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2lkZ2V0LnNldEF0dHJpYnV0ZSgnZGF0YS1zaG9wYmVhbS1pbml0aWFsaXplZCcsICd0cnVlJyk7XG4gICAgICAgICAgICB2YXIgcXVldWVPYmogPSB3aWRnZXRRdWV1ZVt3aWRnZXRbaWRlbnRpZmllcl1dID0ge1xuICAgICAgICAgICAgICB3aWRnZXQ6IHdpZGdldCwgcXVldWVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZuKHF1ZXVlT2JqLCB3aWRnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkb21SZWFkeUludGVydmFsSWQgID0gc2V0SW50ZXJ2YWwoYm9vdHN0cmFwV2lkZ2V0cywgMjUwKVxuICAgICAgLCBib2R5UmVhZHlJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoY2hlY2tGb3JCb2R5LCAyNTApO1xuXG4gICAgZG9tcmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgYm9vdHN0cmFwV2lkZ2V0cygpO1xuICAgICAgY2xlYXJJbnRlcnZhbChkb21SZWFkeUludGVydmFsSWQpO1xuICAgIH0pO1xuXG4gICAgLy8gYWxsb3cgc2Nhbm5pbmcgZm9yIG5ldyB3aWRnZXRzIGFkZGVkIGFmdGVyIGRvbSByZWFkeVxuICAgIFNob3BiZWFtLnNjYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBib290c3RyYXBXaWRnZXRzKCk7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGFkZGl0aW9uYWwgcHJvZHVjdHMgaW5zaWRlIGEgc3dmIHdpZGdldCwgcmV0dXJucyB0aGUgbmV3IHByb2R1Y3QgaW5kZXhcbiAgICBTaG9wYmVhbS5zd2ZXaWRnZXRSZWdpc3RlclByb2R1Y3QgPSBmdW5jdGlvbiAod2lkZ2V0VXVpZCwgcHJvZHVjdEluZm8pIHtcbiAgICAgIGZvciAodmFyIGlkIGluIHdpZGdldFF1ZXVlKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHdpZGdldFF1ZXVlW2lkXS5pbnN0YW5jZTtcbiAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLnV1aWQgPT09IHdpZGdldFV1aWQpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2UucmVnaXN0ZXJQcm9kdWN0KHByb2R1Y3RJbmZvKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3aWRnZXQgbm90IGZvdW5kOicsIHdpZGdldFV1aWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDUkVBVEUgTElHSFRCT1hcbiAgICAgKi9cbiAgICBsaWdodGJveC5idWlsZCgpO1xuXG4gICAgLyoqXG4gICAgICogQ1JFQVRFIENBUlRcbiAgICAgKi9cbiAgICBjYXJ0LmJ1aWxkKCk7XG5cbiAgICAvKipcbiAgICAgKiBDUkVBVEUgQ0hFQ0tPVVRcbiAgICAgKi9cbiAgICBjaGVja291dC5idWlsZCgpO1xuXG4gICAgcG1ycGMucmVnaXN0ZXIoe1xuICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ2xpZ2h0Ym94UmVhZHknLFxuICAgICAgcHJvY2VkdXJlICAgICAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGVmZXJyZWRMaWdodGJveFJlYWR5LnJlc29sdmUoKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gIH1cbn0pKHdpbmRvdyk7XG4iLCIvKipcbiAqIExJR0hUQk9YIEJVSUxERVJcbiAqL1xuXG52YXIgJCA9IHJlcXVpcmUoJy4vYnVpbGQnKVxuICAsIHBtcnBjID0gcmVxdWlyZSgnLi4vLi4vLi4vc2hhcmVkL2xpYi9penV6YWsvcG1ycGMnKVxuICAsIHpvb20gPSByZXF1aXJlKCcuL3pvb20nKVxuICAsIGJvZHlTY3JvbGwgPSByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvYXBwL2Jyb3dzZXIvYm9keS1zY3JvbGwnKVxuICAsIF8gPSByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvbGliL2xvZGFzaC9sb2Rhc2gnKTtcblxuZXhwb3J0cy5idWlsZCA9IGZ1bmN0aW9uKCkge1xuXG4gIHZhciB0aGVtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdC5zaG9wYmVhbS1zY3JpcHQnKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2hvcGJlYW0tdGhlbWUnKTtcblxuICBpZiAoU2hvcGJlYW0uVE9QX1dJTkRPVykge1xuICAgIHZhciAkbGlnaHRib3ggPSAkKCdpZnJhbWUnKVxuICAgICAgICAuYXR0cih7XG4gICAgICAgICAgaWQ6ICdzaG9wYmVhbS1saWdodGJveCdcbiAgICAgICAgfSlcbiAgICAgICAgLmNzcyhcbiAgICAgICAgICBTaG9wYmVhbS5MSUdIVEJPWF9JRlJBTUVfQ1NTXG4gICAgICAgIClcbiAgICAgICwgJGxpZ2h0Ym94Q29udGFpbmVyID0gJCgnZGl2JylcbiAgICAgICAgLmNzcygkLmV4dGVuZChbXG4gICAgICAgICAgU2hvcGJlYW0uTElHSFRCT1hfQ09OVEFJTkVSX0NTUyxcbiAgICAgICAgICBTaG9wYmVhbS5MSUdIVEJPWF9ISURERU5fQ1NTXG4gICAgICAgIF0pKVxuICAgICAgICAuYXBwZW5kKCRsaWdodGJveClcbiAgICAgICwgbGlnaHRib3hEb2N1bWVudFxuICAgICAgO1xuXG4gICAgU2hvcGJlYW0uRE9DVU1FTlRfQk9EWS50aGVuKGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICRsaWdodGJveENvbnRhaW5lci5hcHBlbmRUbyhib2R5KTtcbiAgICAgIGxpZ2h0Ym94RG9jdW1lbnQgPSAkbGlnaHRib3guZWxlbWVudC5jb250ZW50V2luZG93LmRvY3VtZW50O1xuXG4gICAgICBsaWdodGJveERvY3VtZW50Lm9wZW4oKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkZWZhdWx0UGF0aCA9ICdsaWdodGJveC9pbmRleCdcbiAgICAgICAgICAsIHRoZW1lZFBhdGggID0gJ2xpZ2h0Ym94LycgKyB0aGVtZVxuICAgICAgICAgICwgbWF0Y2hlZFBhdGggPSAodGhlbWUgIT09IG51bGwgJiYgdHlwZW9mKGFwcEluZGV4ZXNbdGhlbWVkUGF0aF0pICE9PSAndW5kZWZpbmVkJykgP1xuICAgICAgICAgICAgICB0aGVtZWRQYXRoIDogZGVmYXVsdFBhdGg7XG5cbiAgICAgICAgbGlnaHRib3hEb2N1bWVudC53cml0ZShhcHBJbmRleGVzW21hdGNoZWRQYXRoXShTaG9wYmVhbSkpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGxvYWRpbmcgbGlnaHRib3g6ICcgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICAgIGxpZ2h0Ym94RG9jdW1lbnQuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIHBtcnBjLnJlZ2lzdGVyKHtcbiAgICAgIHB1YmxpY1Byb2NlZHVyZU5hbWU6ICdzaG93TGlnaHRib3gnLFxuICAgICAgcHJvY2VkdXJlICAgICAgICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgem9vbS5kaXNhYmxlKCk7XG4gICAgICAgICAgJGxpZ2h0Ym94Q29udGFpbmVyXG4gICAgICAgICAgICAuY3NzKHtkaXNwbGF5OiAnYmxvY2snfSk7XG5cbiAgICAgICAgICBib2R5U2Nyb2xsLmxvY2soKTtcblxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkbGlnaHRib3hDb250YWluZXIuZmFkZUluKCc1MDBtcycpXG4gICAgICAgICAgfSwgMTAwKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHBtcnBjLnJlZ2lzdGVyKHtcbiAgICAgIHB1YmxpY1Byb2NlZHVyZU5hbWU6ICdoaWRlTGlnaHRib3gnLFxuICAgICAgcHJvY2VkdXJlICAgICAgICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgem9vbS5yZXNldCgpO1xuICAgICAgICAgICRsaWdodGJveENvbnRhaW5lci5mYWRlT3V0KCc1MDBtcycpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJGxpZ2h0Ym94Q29udGFpbmVyLmNzcyh7ZGlzcGxheTogJ25vbmUnfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIGJvZHlTY3JvbGwudW5sb2NrKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuIiwiLyoqXG4gKiBTV0YgV0lER0VUIENMQVNTXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTd2ZXaWRnZXQ7XG5cbnZhciAkID0gcmVxdWlyZSgnLi9idWlsZCcpXG4gICwgcSA9IHJlcXVpcmUoJy4uLy4uLy4uL3NoYXJlZC9saWIva3Jpc2tvd2FsL3EnKVxuICAsIHBtcnBjID0gcmVxdWlyZSgnLi4vLi4vLi4vc2hhcmVkL2xpYi9penV6YWsvcG1ycGMnKVxuICAsIFdpZGdldCA9IHJlcXVpcmUoJy4vd2lkZ2V0JylcbiAgO1xuXG5mdW5jdGlvbiBTd2ZXaWRnZXQoZWxlbWVudCkge1xuXG4gIHRoaXMuZWxlbWVudCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG4gIHZhciBzZWxmID0gdGhpcztcbiAgLy90aGUgaWQgYXR0cmlidXRlIHRoYXQgd2lsbCBiZSBzZXQgb24gdGhlICR3aWRnZXQgaWZyYW1lIGVsZW1lbnRcbiAgdmFyIHdpZGdldFRhZ0lkID0gZWxlbWVudC5pZC5yZXBsYWNlKFNob3BiZWFtLldJREdFVF9UQUdfSURfRVhDTFVERV9SRUdFWCwgJycpO1xuICAvL3RoZSB1dWlkLW9ubHkgb2YgdGhpcyB3aWRnZXQ7IHVzZWQgZm9yIHVuaXF1ZW5lc3MgYmV0d2VlbiBtdWx0aXBsZSB3aWRnZXRzXG4gIHZhciB3aWRnZXRVdWlkID0gdGhpcy51dWlkID0gd2lkZ2V0VGFnSWQubWF0Y2goU2hvcGJlYW0uV0lER0VUX1VVSURfUkVHRVgpWzFdO1xuICAvL3Byb2R1Y3RzIHJlc291cmVjZSB1cmwgd2l0aCBxdWVyeS1zdHJpbmcgcGFyYW1zIGZvciB0aGlzIHBhcnRpY3VsYXIgd2lkZ2V0XG4gIHZhciB1cmxzID0gKGVsZW1lbnQuZGF0YXNldCA/IGVsZW1lbnQuZGF0YXNldC5zaG9wYmVhbVVybCA6XG4gICAgZWxlbWVudC5hdHRyaWJ1dGVzWydkYXRhLXNob3BiZWFtLXVybCddLnZhbHVlKTtcblxuICB1cmxzID0gKHVybHMpID8gdXJscy5zcGxpdCgvWyAsXSsvZykgOiBbXTtcblxuICB2YXIgaW1hZ2VVcmxzID0gKGVsZW1lbnQuZGF0YXNldCA/IGVsZW1lbnQuZGF0YXNldC5pbWFnZVNyYyA6XG4gICAgZWxlbWVudC5hdHRyaWJ1dGVzLmltYWdlU3JjLnZhbHVlKTtcblxuICBpbWFnZVVybHMgPSAoaW1hZ2VVcmxzKSA/IGltYWdlVXJscy5zcGxpdCgvWyAsXSsvZykgOiBbXTtcblxuICAkKGVsZW1lbnQpLmF0dHIoe2lkOiB3aWRnZXRUYWdJZH0pO1xuXG4gIHRoaXMuZGF0YVVybCA9IFNob3BiZWFtLkhPU1QgKyB1cmxzWzBdO1xuXG4gIC8vSW5oZXJpdCBmcm9tIFdpZGdldCBDbGFzc1xuICBXaWRnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBpZiAodGhpcy5hcGlLZXkpIHtcbiAgICAvL0ZvciBzdGF0c1xuICAgIHRoaXMudHJhY2tXaWRnZXRMb2FkKFNob3BiZWFtLkhPU1QrJz9hcGlLZXk9Jyt0aGlzLmFwaUtleSwgJ3N3ZicpO1xuICB9XG5cbiAgdGhpcy5wcm9kdWN0cyA9IFtdO1xuICB3aGlsZSAodXJscy5sZW5ndGgpIHtcbiAgICB2YXIgdXJsID0gdXJscy5zaGlmdCgpO1xuICAgIHZhciBpbWFnZVVybCA9IGltYWdlVXJscy5sZW5ndGggPyBpbWFnZVVybHMuc2hpZnQoKSA6ICcnO1xuICAgIGlmICh1cmwpIHtcbiAgICAgIHZhciBwcm9kdWN0ID0ge1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgaW1hZ2VVcmw6IGltYWdlVXJsXG4gICAgICB9O1xuICAgICAgdGhpcy5yZWdpc3RlclByb2R1Y3QocHJvZHVjdCk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy51dWlkID0gd2lkZ2V0VXVpZDtcblxuICBmdW5jdGlvbiBvcGVuTGlnaHRib3gocHJvZHVjdEluZGV4KSB7XG4gICAgdmFyIHByb2R1Y3QgPSBzZWxmLnByb2R1Y3RzW3Byb2R1Y3RJbmRleCB8fCAwXTtcbiAgICBwcm9kdWN0LmdldERhdGEudGhlbihzZWxmLmJ1aWxkQ29uZmlnKGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgaWYgKCFjb25maWcub3V0T2ZTdG9jaykge1xuICAgICAgICBwbXJwYy5jYWxsKHtcbiAgICAgICAgICBkZXN0aW5hdGlvbiAgICAgICAgOiAncHVibGlzaCcsXG4gICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ29wZW5MaWdodGJveCcsXG4gICAgICAgICAgcGFyYW1zICAgICAgICAgICAgIDogW2NvbmZpZywgc2VsZl1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgcG1ycGMucmVnaXN0ZXIoe1xuICAgIHB1YmxpY1Byb2NlZHVyZU5hbWU6ICd3aWRnZXRPcGVuTGlnaHRib3gnICsgU3RyaW5nKHRoaXMudXVpZCksXG4gICAgcHJvY2VkdXJlICAgICAgICAgIDogZnVuY3Rpb24ocHJvZHVjdEluZGV4KSB7XG4gICAgICB0cnkge1xuICAgICAgICBvcGVuTGlnaHRib3gocHJvZHVjdEluZGV4KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuXG4gIGZ1bmN0aW9uIHRyYWNrTW91c2VPdmVyKHByb2R1Y3RJbmRleCkge1xuICAgIHZhciBwcm9kdWN0ID0gc2VsZi5wcm9kdWN0c1twcm9kdWN0SW5kZXggfHwgMF07XG4gICAgcHJvZHVjdC5nZXREYXRhLnRoZW4oc2VsZi5idWlsZENvbmZpZyhmdW5jdGlvbihjb25maWcpIHtcblxuICAgICAgaWYgKCFjb25maWcub3V0T2ZTdG9jaykge1xuICAgICAgICBwbXJwYy5jYWxsKHtcbiAgICAgICAgICBkZXN0aW5hdGlvbiAgICAgICAgOiAncHVibGlzaCcsXG4gICAgICAgICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ3RyYWNrUHJvZHVjdE1vdXNlT3ZlcicsXG4gICAgICAgICAgcGFyYW1zICAgICAgICAgICAgIDogW2NvbmZpZywgc2VsZl1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgcG1ycGMucmVnaXN0ZXIoe1xuICAgIHB1YmxpY1Byb2NlZHVyZU5hbWU6ICd3aWRnZXRUcmFja01vdXNlT3ZlcicgKyBTdHJpbmcodGhpcy51dWlkKSxcbiAgICBwcm9jZWR1cmUgICAgICAgICAgOiBmdW5jdGlvbihwcm9kdWN0SW5kZXgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRyYWNrTW91c2VPdmVyKHByb2R1Y3RJbmRleCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbn1cblxuU3dmV2lkZ2V0LnByb3RvdHlwZS5yZWdpc3RlclByb2R1Y3QgPSBmdW5jdGlvbihwcm9kdWN0SW5mbykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBwcm9kdWN0O1xuICBpZiAodHlwZW9mIHByb2R1Y3RJbmZvID09PSAnc3RyaW5nJykge1xuICAgIHByb2R1Y3QgPSB7XG4gICAgICB1cmw6IHByb2R1Y3RJbmZvXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBwcm9kdWN0ID0gcHJvZHVjdEluZm87XG4gIH1cbiAgaWYgKCFwcm9kdWN0LnVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvZHVjdC51cmwgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICB0aGlzLnByb2R1Y3RzLnB1c2gocHJvZHVjdCk7XG4gIHByb2R1Y3QuaW5kZXggPSB0aGlzLnByb2R1Y3RzLmxlbmd0aCAtIDE7XG4gIHZhciBnZXREYXRhRGVmZXIgPSBxLmRlZmVyKCk7XG4gIHZhciBnZXREYXRhID0gcHJvZHVjdC5nZXREYXRhID0gZ2V0RGF0YURlZmVyLnByb21pc2U7XG5cbiAgdGhpcy5kYXRhQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICB3aWRnZXRJZCAgICAgICAgICA6IHNlbGYudXVpZCxcbiAgICAgIHByb2R1Y3RzVXJsICAgICAgIDogcHJvZHVjdC51cmwsXG4gICAgICBpbml0aWFsSW1hZ2VTb3VyY2U6IHByb2R1Y3QuaW1hZ2VVcmxcbiAgICB9O1xuICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dCk7XG4gICAgZ2V0RGF0YURlZmVyLnJlc29sdmUoe2RhdGE6IGRhdGEsIG9wdGlvbnM6IG9wdGlvbnN9KTtcbiAgfTtcblxuICBnZXREYXRhLnRoZW4oc2VsZi5idWlsZENvbmZpZyhmdW5jdGlvbihjb25maWcpe1xuICAgIHRyeSB7XG4gICAgICAgIHNlbGYuZWxlbWVudCgpLnNldFdpZGdldERhdGEoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSwgSlNPTi5zdHJpbmdpZnkocHJvZHVjdCkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvL2NvbnNvbGUud2FybignZXJyb3Igc2VuZGluZyBwcm9kdWN0IGRhdGEgdG8gc3dmIG9iamVjdCcsIGVycik7XG4gICAgfVxuICB9KSk7XG5cbiAgaWYgKCF0aGlzLmFwaUtleSkge1xuICAgIHRoaXMuYXBpS2V5ID0gKHByb2R1Y3QudXJsLm1hdGNoKFNob3BiZWFtLkFQSUtFWV9TRUxFQ1RPUil8fFtdKVsxXTtcblxuICAgIC8vRm9yIHN0YXRzXG4gICAgdGhpcy50cmFja1dpZGdldExvYWQoU2hvcGJlYW0uSE9TVCsnP2FwaUtleT0nK3RoaXMuYXBpS2V5LCAnc3dmJyk7XG4gIH1cbiAgcmV0dXJuIHByb2R1Y3QuaW5kZXg7XG59O1xuIiwiLyoqXG4gKiBURVhUIFdJREdFVCBDTEFTU1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dFdpZGdldDtcblxudmFyICQgPSByZXF1aXJlKCcuL2J1aWxkJylcbiAgLCBxID0gcmVxdWlyZSgnLi4vLi4vLi4vc2hhcmVkL2xpYi9rcmlza293YWwvcScpXG4gICwgcG1ycGMgPSByZXF1aXJlKCcuLi8uLi8uLi9zaGFyZWQvbGliL2l6dXphay9wbXJwYycpXG4gICwgdG9wV2luZG93U2VydmljZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3NoYXJlZC9hcHAvc2VydmljZXMvdG9wV2luZG93U2VydmljZScpXG4gICwgV2lkZ2V0ID0gcmVxdWlyZSgnLi93aWRnZXQnKVxuICA7XG5cbmZ1bmN0aW9uIFRleHRXaWRnZXQobGluaykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgLy90aGUgaWQgYXR0cmlidXRlIHRoYXQgd2lsbCBiZSBzZXQgb24gdGhlICR3aWRnZXQgaWZyYW1lIGVsZW1lbnRcbiAgICAsIHdpZGdldFRhZ0lkID0gbGluay5pZC5yZXBsYWNlKFNob3BiZWFtLldJREdFVF9UQUdfSURfRVhDTFVERV9SRUdFWCwgJycpXG4gIC8vdGhlIHV1aWQtb25seSBvZiB0aGlzIHdpZGdldDsgdXNlZCBmb3IgdW5pcXVlbmVzcyBiZXR3ZWVuIG11bHRpcGxlIHdpZGdldHNcbiAgICAsIHdpZGdldFV1aWQgPSB3aWRnZXRUYWdJZC5tYXRjaChTaG9wYmVhbS5XSURHRVRfVVVJRF9SRUdFWClbMV1cbiAgLy9wcm9kdWN0cyByZXNvdXJlY2UgdXJsIHdpdGggcXVlcnktc3RyaW5nIHBhcmFtcyBmb3IgdGhpcyBwYXJ0aWN1bGFyIHdpZGdldFxuICAgICwgZGF0YVVybFxuICAgIDtcblxuICBpZiAobGluay5kYXRhc2V0KSB7XG4gICAgZGF0YVVybCA9IFNob3BiZWFtLkhPU1QgKyBsaW5rLmRhdGFzZXQuc2hvcGJlYW1VcmxcbiAgfSBlbHNlIHtcbiAgICBkYXRhVXJsID0gU2hvcGJlYW0uSE9TVCArIGxpbmsuYXR0cmlidXRlc1snZGF0YS1zaG9wYmVhbS11cmwnXS52YWx1ZVxuICB9XG5cbiAgdGhpcy5kYXRhVXJsID0gZGF0YVVybDtcblxuICAvL2NyZWF0ZSBkZWZlcnJlZCBhbmQgcHJvbWlzZSBmb3IgcHJvZHVjdHMgcmVzb3VyY2UgcmVxdWVzdC5cbiAgLy8gIGFueXRoaW5nIHRoYXQgZGVwZW5kcyBvbiBwcm9kdWN0cyBkYXRhIHRvIGJlIGxvYWRlZCB3aWxsIC50aGVuIG9uIEpTT05Qcm9taXNlXG4gIHZhciBkZWZlcnJlZEpTT04gPSBxLmRlZmVyKClcbiAgICAsIEpTT05Qcm9taXNlID0gZGVmZXJyZWRKU09OLnByb21pc2VcbiAgICA7XG5cbiAgdGhpcy5kYXRhQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgd2lkZ2V0SWQgICA6IHdpZGdldFV1aWQsXG4gICAgICAgIHByb2R1Y3RzVXJsOiBkYXRhVXJsXG4gICAgICB9LFxuICAgICAgZGF0YSA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZVRleHQpO1xuICAgIGRlZmVycmVkSlNPTi5yZXNvbHZlKHtkYXRhOiBkYXRhLCBvcHRpb25zOiBvcHRpb25zfSk7XG4gIH07XG5cbiAgJChsaW5rKS5hdHRyKHtpZDogd2lkZ2V0VGFnSWR9KTtcblxuXG4gIHRoaXMudXVpZCA9IHdpZGdldFV1aWQ7XG4gIHRoaXMuSlNPTlByb21pc2UgPSBKU09OUHJvbWlzZTtcblxuICBwbXJwYy5yZWdpc3Rlcih7XG4gICAgcHVibGljUHJvY2VkdXJlTmFtZTogJ3dpZGdldE9wZW5MaWdodGJveCcgKyBTdHJpbmcodGhpcy51dWlkKSxcbiAgICBwcm9jZWR1cmUgICAgICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIEpTT05Qcm9taXNlLnRoZW4oc2VsZi5idWlsZENvbmZpZyhmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICBwbXJwYy5jYWxsKHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uICAgICAgICA6ICdwdWJsaXNoJyxcbiAgICAgICAgICAgIHB1YmxpY1Byb2NlZHVyZU5hbWU6ICdvcGVuTGlnaHRib3gnLFxuICAgICAgICAgICAgcGFyYW1zICAgICAgICAgICAgIDogW2NvbmZpZywgc2VsZl1cbiAgICAgICAgICB9KVxuICAgICAgICB9KSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvL0luaGVyaXQgZnJvbSBXaWRnZXQgQ2xhc3NcbiAgV2lkZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cblxuICAvL0ZvciBzdGF0c1xuICB0aGlzLnRyYWNrV2lkZ2V0TG9hZChkYXRhVXJsLCAndGV4dCcpO1xuXG4gIC8vYCNidWlsZENvbmZpZ2AgaXMgZGVmaW5lZCBieSBzdXBlciBzbyB0aGlzIG11c3QgZm9sbG93IGBXaWRnZXQuYXBwbHkoLi4uKWBcbiAgSlNPTlByb21pc2UudGhlbih0aGlzLmJ1aWxkQ29uZmlnKGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgaWYgKCF3aW5kb3cuYW5hbHl0aWNzKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIHdpbmRvdy5hbmFseXRpY3MudHJhY2soJ1RleHQgV2lkZ2V0IE1vdXNlb3ZlcicsIHtcbiAgICAgICAgd2lkZ2V0VXVpZCAgOiBzZWxmLnV1aWQsXG4gICAgICAgIGFwaUtleSAgICAgIDogc2VsZi5hcGlLZXksXG4gICAgICAgIGRhdGFVcmwgICAgIDogc2VsZi5kYXRhVXJsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICghY29uZmlnLm91dE9mU3RvY2spIHtcbiAgICAgICAgdG9wV2luZG93U2VydmljZS5oYXNoKCdzaG9wYmVhbS1vcGVuLXdpZGdldC0nICsgd2lkZ2V0VXVpZCk7XG4gICAgICAgIHBtcnBjLmNhbGwoe1xuICAgICAgICAgIGRlc3RpbmF0aW9uICAgICAgICA6ICdwdWJsaXNoJyxcbiAgICAgICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnb3BlbkxpZ2h0Ym94JyxcbiAgICAgICAgICBwYXJhbXMgICAgICAgICAgICAgOiBbY29uZmlnLCBzZWxmXVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH0pKTtcbn1cbiIsIiAvKipcbiAqIFdJREdFVCBDTEFTU1xuICovXG5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBXaWRnZXQ7XG5cbiB2YXIgJCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9idWlsZCcpXG4gICAsIHBtcnBjICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4uLy4uLy4uL3NoYXJlZC9saWIvaXp1emFrL3BtcnBjJylcbiAgICwgdG9wV2luZG93U2VydmljZSAgID0gcmVxdWlyZSgnLi4vLi4vLi4vc2hhcmVkL2FwcC9zZXJ2aWNlcy90b3BXaW5kb3dTZXJ2aWNlJylcbiAgICwgZGF0YU92ZXJyaWRlUGFyc2VyID0gcmVxdWlyZSgnLi9kYXRhT3ZlcnJpZGVQYXJzZXInKVxuICAgO1xuXG5mdW5jdGlvbiBXaWRnZXQod2lkZ2V0RWxlbWVudCwgZGF0YU1hcmt1cCkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyByZW1vdmUgaXJyZWxldmFudCBwYXJhbXMgZnJvbSBmcm9tIHByb2R1Y3QgdXJsIHRvIGltcHJvdmUgY2FjaGVhYmlsaXR5XG4gIHZhciBwcm9kdWN0QXBpVXJsID0gdGhpcy5kYXRhVXJsLnJlcGxhY2UoLyYoYXBpS2V5fGltYWdlKT1bYS16MC05XFwtXSsvZ2ksICcnKTtcblxuICAvL3ByZS1sb2FkIHByb2R1Y3RzIHJlc291cmNlIEpTT05cbiAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgcmVxdWVzdC5vbmxvYWQgPSB0aGlzLmRhdGFDYWxsYmFjaztcbiAgcmVxdWVzdC5vcGVuKCdnZXQnLCBwcm9kdWN0QXBpVXJsLCB0cnVlKTtcbiAgcmVxdWVzdC5zZW5kKCk7XG5cbiAgdmFyIHJvdXRlUGFyYW1zID0gbWFwUGFyYW1zKHNlbGYuZGF0YVVybCk7XG4gIC8vTk9URTogb2xkIGVtYmVkcyB1c2UgYGFwaWtleWAgaW5zdGVhZCBvZiBgYXBpS2V5YCAtIHRoaXMgaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IVxuICByb3V0ZVBhcmFtcy5hcGlLZXkgPSByb3V0ZVBhcmFtcy5hcGlLZXkgfHwgcm91dGVQYXJhbXMuYXBpa2V5O1xuXG4gIHRoaXMuYXBpS2V5ID0gcm91dGVQYXJhbXMuYXBpS2V5O1xuXG4gIHRoaXMub3BlbkxpZ2h0Ym94ID0gZnVuY3Rpb24gKHV1aWQpIHtcbiAgICBwbXJwYy5jYWxsKHtcbiAgICAgIGRlc3RpbmF0aW9uOiAncHVibGlzaCcsXG4gICAgICBwdWJsaWNQcm9jZWR1cmVOYW1lOiAnd2lkZ2V0T3BlbkxpZ2h0Ym94JyArIFN0cmluZyh1dWlkKVxuICAgIH0pXG4gIH07XG5cbiAgdG9wV2luZG93U2VydmljZS5oYXNoKCkudGhlbihmdW5jdGlvbiAoaGFzaCkge1xuICAgIGlmIChoYXNoICYmIGhhc2gubWF0Y2goU2hvcGJlYW0uV0lER0VUX0hBU0hfUkVHRVgpWzFdID09PSBzZWxmLnV1aWQpIHtcbiAgICAgIFNob3BiZWFtLmxpZ2h0Ym94UmVhZHlQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9wZW5MaWdodGJveChzZWxmLnV1aWQpO1xuICAgICAgfSlcbiAgICB9XG4gIH0pO1xuICB0aGlzLnRyYWNrV2lkZ2V0TG9hZCA9IGZ1bmN0aW9uIChkYXRhVXJsLCB0eXBlKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIG5vdCB1c2luZyAvZW1wdHkudHh0IHdoaWxlIHdlIHVzZSBnYSdzIGJ1aWx0IGluIHNhbXBsaW5nXG4gICAgdmFyIHVybERhdGEgPSBkYXRhVXJsLnNsaWNlKGRhdGFVcmwuaW5kZXhPZignPycpICsgMSkuc3BsaXQoJyYnKTtcbiAgICB2YXIgdXJsVmFycyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXJsRGF0YS5sZW5ndGg7IGkrKylcbiAgICB7XG4gICAgICBoYXNoID0gdXJsRGF0YVtpXS5zcGxpdCgnPScpO1xuICAgICAgdXJsVmFyc1toYXNoWzBdXSA9IGhhc2hbMV07XG4gICAgfVxuICAgIHZhciByZXF1ZXN0U3RhdHMgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0U3RhdHMub3BlbignZ2V0JywgU2hvcGJlYW0uSE9TVCArIFwiL2VtcHR5LnR4dD9cIiArIHVybFZhcnNbJ2FwaUtleSddLCB0cnVlKTtcbiAgICByZXF1ZXN0U3RhdHMuc2VuZCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICB0aGlzLmJ1aWxkQ29uZmlnID0gZnVuY3Rpb24gKHdpZGdldENvbmZpZ0NhbGxiYWNrKSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVzb2x1dGlvbiBPYmplY3QgcGFzc2VkIHRvIGBkZWZlcnJlZEpTT04ucmVzb2x2ZWBcbiAgICAgKiAgICBpLmUuIHtkYXRhOiA8eGhyIHJlc3BvbnNlIGRhdGE+LCBvcHRpb25zOiA8b3B0aW9ucyBhcyBkZWZpbmVkIGluIGBkYXRhQ2FsbGJhY2tgPn1cbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlc29sdXRpb24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgPSBbZGF0YU92ZXJyaWRlUGFyc2VyLnBhcnNlQW5kTWVyZ2UocmVzb2x1dGlvbi5kYXRhWzBdLCBkYXRhTWFya3VwKV1cbiAgICAgICAgICAsIG9wdGlvbnMgICAgICA9IHJlc29sdXRpb24ub3B0aW9uc1xuICAgICAgICAgIDtcblxuICAgICAgICBpZiAocm91dGVQYXJhbXMuZ29vZ2xlX2NvbnZlcnNpb25faWQpIHtcbiAgICAgICAgICBvcHRpb25zLnJlbWFya2V0aW5nID0ge1xuICAgICAgICAgICAgY29udmVyc2lvbklkOiByb3V0ZVBhcmFtcy5nb29nbGVfY29udmVyc2lvbl9pZCxcbiAgICAgICAgICAgIGNhbXBhaWduOiByb3V0ZVBhcmFtcy5jYW1wYWlnblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vR2V0IGFuIGFuZ3VsYXItJHJvdXRlUGFyYW1zLWxpa2Ugb2JqZWN0IC0gbWFwIG9mIHF1ZXJ5LXN0cmluZ3MgYW5kIHRoZWlyIHZhbHVlc1xuICAgICAgICB2YXIgaW1hZ2VTb3VyY2UgPSBvcHRpb25zLmluaXRpYWxJbWFnZVNvdXJjZVxuICAgICAgICAgICAgICAgICwgaW5pdGlhbFByb2R1Y3QgPSBkYXRhWzBdXG4gICAgICAgICAgICAgICAgLCBpbml0aWFsVmFyaWFudFxuICAgICAgICAgICAgICAgICwgaW5pdGlhbEltYWdlT2JqXG4gICAgICAgICAgICAgICAgLCBlbWJlZEltYWdlXG4gICAgICAgICAgICAgICAgLCBjb2xvcnNcbiAgICAgICAgICAgICAgICA7XG5cbiAgICAgICAgLy9NYWtlIHN1cmUgdGhlcmUncyBhdCBsZWFzdCBvbmUgcHJvZHVjdFxuICAgICAgICBpZiAoaW5pdGlhbFByb2R1Y3QpIHtcbiAgICAgICAgICAvL0lmIHRoZSBlbWJlZGRlZCB2YXJpYW50IGlzIGluIHN0b2NrLCBzZXQgaXQgdG8gaW5pdGlhbFZhcmlhbnQsXG4gICAgICAgICAgLy8gIG90aGVyd2lzZSwgdXNlIHRoZSBmaXJzdCBpbi1zdG9jayB2YXJpYW50LlxuICAgICAgICAgIGluaXRpYWxWYXJpYW50ID0gaW5pdGlhbFByb2R1Y3QudmFyaWFudHMuZmlsdGVyKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LnBhcnNlSW50KHZhcmlhbnQuaWQsIDEwKSA9PT0gd2luZG93LnBhcnNlSW50KHJvdXRlUGFyYW1zLmlkLCAxMClcbiAgICAgICAgICB9KVswXSB8fCBpbml0aWFsUHJvZHVjdC52YXJpYW50c1swXTtcblxuICAgICAgICAgIC8vaW5pdGlhbEltYWdlT2JqIGV4YW1wbGU6XG4gICAgICAgICAgLy8gIHtpZDogPGltYWdlLWlkPiwgdXJsOiAnPGltYWdlLXVybD4nfVxuICAgICAgICAgIGluaXRpYWxJbWFnZU9iaiA9IGluaXRpYWxWYXJpYW50LmltYWdlc1socm91dGVQYXJhbXMuaW1hZ2UgLSAxKSB8fCAwXTtcblxuICAgICAgICAgIC8vQ29sb3JzIGV4YW1wbGU6XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogW1xuICAgICAgICAgICAqICAge1xuICAgICAgICAgICAqICAgICBuYW1lICAgIDogJzx1bmlxdWUtY29sb3ItbmFtZS0xPicsXG4gICAgICAgICAgICogICAgIGltYWdlVXJsOiAnPGZpcnN0LXZhcmlhbnQtaW1hZ2Utb2YtY29sb3ItdXJsPicsXG4gICAgICAgICAgICogICAgIHZhcmlhbnRzOiBbXG4gICAgICAgICAgICogICAgICAgezx2YXJpYW50Pn1bLCAuLi5dXG4gICAgICAgICAgICogICAgIF1cbiAgICAgICAgICAgKiAgIH1bLCAuLi5dXG4gICAgICAgICAgICogXVxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbG9ycyA9ICQuZmlsdGVyKCd1bmlxdWUnKShpbml0aWFsUHJvZHVjdC52YXJpYW50cywgJ2NvbG9yJykubWFwKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgICAgICAgICB2YXIgdW5pcXVlbHlDb2xvcmVkVmFyaWFudHMgPSAkLmZpbHRlcignZmlsdGVyJykoaW5pdGlhbFByb2R1Y3QudmFyaWFudHMsIHtjb2xvcjogdmFyaWFudC5jb2xvcn0pO1xuICAgICAgICAgICAgcmV0dXJuIHtuYW1lOiB2YXJpYW50LmNvbG9yLCBpbWFnZVVybDogdmFyaWFudC5pbWFnZXNbMF0udXJsLCB2YXJpYW50czogdW5pcXVlbHlDb2xvcmVkVmFyaWFudHN9O1xuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9UaGUgYXJyYXkgb2YgcHJvZHVjdHMgaXMgZW1wdHkuIFRoaXMgZWl0aGVyIG1lYW5zIHRoYXQgdGhlIHByb2R1Y3QgaXMgb3V0IG9mXG4gICAgICAgICAgLy8gIHN0b2NrIG9yIGl0IGRvZXMgbm90IGV4aXN0OyB3ZSBhc3N1bWUgaXQncyBvdXQgb2Ygc3RvY2suXG4gICAgICAgICAgLy9UaGUgZm9sbG93aW5nIHNldHMgdXAgc29tZSBzYWZlIHZhbHVlcyB0byBiZSBwYXNzZWQgaW50byB0aGUgd2lkZ2V0IHNvIGl0IHNob3dzXG4gICAgICAgICAgLy8gIGFzIG91dCBvZiBzdG9jayBhbmQgZG9lc24ndCBoYXZlIGFueSBlcnJvcnNcbiAgICAgICAgICBpbml0aWFsUHJvZHVjdCA9IHtcbiAgICAgICAgICAgIGJyYW5kTmFtZTogJ1lvdSBwaWNrZWQgYSBiZXN0IHNlbGxlciEnLFxuICAgICAgICAgICAgbmFtZTogJ1RoaXMgcHJvZHVjdCBpcyBzb2xkIG91dCEnXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpbml0aWFsSW1hZ2VPYmogPSB7fTtcbiAgICAgICAgICBpZiAoaW1hZ2VTb3VyY2UpXG4gICAgICAgICAgICBpbml0aWFsSW1hZ2VPYmoudXJsID0gaW1hZ2VTb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgZW1iZWRJbWFnZSA9IHt1cmw6IGltYWdlU291cmNlfTtcblxuICAgICAgICB2YXIgdGhlbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzY3JpcHQuc2hvcGJlYW0tc2NyaXB0JykuZ2V0QXR0cmlidXRlKCdkYXRhLXNob3BiZWFtLXRoZW1lJyk7XG5cbiAgICAgICAgLy9DYWxsIHdpZGdldCBhcHAncyBjYWxsYmFjaywgcGFzc2luZyBjb25maWcgb2JqZWN0IGludG8gYW5ndWxhciBhcHBcbiAgICAgICAgd2lkZ2V0Q29uZmlnQ2FsbGJhY2soe1xuICAgICAgICAgIG91dE9mU3RvY2s6ICFkYXRhWzBdLFxuICAgICAgICAgIGluaXRpYWxQcm9kdWN0OiBpbml0aWFsUHJvZHVjdCxcbiAgICAgICAgICBpbml0aWFsVmFyaWFudDogaW5pdGlhbFZhcmlhbnQsXG4gICAgICAgICAgaW5pdGlhbEltYWdlOiBpbml0aWFsSW1hZ2VPYmosXG4gICAgICAgICAgZW1iZWRJbWFnZTogZW1iZWRJbWFnZSxcbiAgICAgICAgICBjb2xvcnM6IGNvbG9ycyxcbiAgICAgICAgICBhcGlLZXk6IHJvdXRlUGFyYW1zLmFwaWtleSB8fCByb3V0ZVBhcmFtcy5hcGlLZXksXG4gICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgICAgfSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igd2hpbGUgYnVpbGRpbmcgd2lkZ2V0IGNvbmZpZzogJywgZXJyKTtcbiAgICAgICAgY29uc29sZS5sb2coZXJyLnN0YWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG59XG5cbi8qKlxuICogVHVybiBhIHJlc291cmNlIHVybCdzIHF1ZXJ5IHN0cmluZyBwYXJhbXMgaW50byBhIG1hcCBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVN0cmluZyBUaGUgdXJsL3VybC1wYXJ0IHdoaWNoIGNvbnRhaW5zIHRoZSBxdWVyeSBzdHJpbmdcbiAqIEByZXR1cm4ge29iamVjdH0gR2l2ZW46IGAvdjEvcHJvZHVjdHM/aWQ9MTIzNCZpbWFnZT00JmFwaWtleT1ibGFoYCxcbiAqICAgIHJldHVybnM6IGB7aWQ6IDEyMzQsIGltYWdlOiA0LCBhcGlrZXk6ICdibGFoJ31gXG4gKi9cbmZ1bmN0aW9uIG1hcFBhcmFtcyhxdWVyeVN0cmluZykge1xuICBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nLnNwbGl0KCc/JylbMV07XG4gIHZhciBwYWlycyA9IChxdWVyeVN0cmluZykgPyBxdWVyeVN0cmluZy5zcGxpdCgnJicpIDogW11cbiAgICAgICAgICAsIHBhcmFtcyA9IHt9O1xuXG4gIHBhaXJzLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICBwYWlyID0gcGFpci5zcGxpdCgnPScpO1xuICAgIHBhcmFtc1twYWlyWzBdXSA9IHBhaXJbMV07XG4gIH0pO1xuXG4gIHJldHVybiBwYXJhbXM7XG59XG4iLCIvKlxuICogUFJFVkVOVCBaT09NSU5HIE9OIE1PQklMRVxuICovXG5cblxuKGZ1bmN0aW9uKCkge1xuICAvLy0tIElFMTAgUE9MWUZJTExcbiAgaWYgKCFFbGVtZW50LnByb3RvdHlwZS5yZW1vdmUpIHtcbiAgICBFbGVtZW50LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB9O1xuICB9XG4gIC8vLS0gRU5EIFBPTFlGSUxMXG5cblxuICB2YXIgYnVpbGQgPSByZXF1aXJlKCcuL2J1aWxkJylcbiAgICAsIGJhY2tkcm9wU3R5bGUgPSBcIkBtZWRpYShtYXgtd2lkdGg6IDY0MHB4KSB7XCIgK1xuICAgICAgXCIubW9iaWxlQ2hlY2tvdXRCYWNrZHJvcCB7XCIgK1xuICAgICAgXCJwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTEwMCU7IGxlZnQ6IC0xMDAlOyBoZWlnaHQ6IDMwMCU7IHdpZHRoOiAzMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcIiArXG4gICAgICBcIn1cIiArXG4gICAgICBcIn1cIlxuICAgICwgYmFja2Ryb3BTdHlsZVRhZyA9IGJ1aWxkKCdzdHlsZScpLmF0dHIoe3R5cGU6ICd0ZXh0L2Nzcyd9KS5lbGVtZW50XG4gICAgLCBub1pvb21NZXRhVGFnID0gYnVpbGQoJ21ldGEnKS5hdHRyKHtuYW1lOiAndmlld3BvcnQnLCBjb250ZW50OiAnd2lkdGg9ZGV2aWNlLXdpZHRoLG1heGltdW0tc2NhbGU9MS4wLG1pbmltdW0tc2NhbGU9MS4wLHVzZXItc2NhbGFibGU9bm8nfSkuZWxlbWVudFxuICAgIC8vLCBtb2JpbGVDaGVja291dEJhY2tkcm9wID0gYnVpbGQoJ2RpdicpLmVsZW1lbnRcbiAgICAsIG9yaWdpbmFsTWV0YVRhZ1xuICAgICwgbmV3RGVmYXVsdE1ldGFUYWcgPSBidWlsZCgnbWV0YScpLmF0dHIoe25hbWU6ICd2aWV3cG9ydCcsIGNvbnRlbnQ6ICgnd2lkdGg9JyArIGRvY3VtZW50LndpZHRoICsgJyx1c2VyLXNjYWxhYmxlPXllcycpfSkuZWxlbWVudFxuICAgIDtcblxuICBiYWNrZHJvcFN0eWxlVGFnLmlubmVyVGV4dCA9IGJhY2tkcm9wU3R5bGU7XG4gIC8vU2hvcGJlYW0uRE9DVU1FTlRfSEVBRC5hcHBlbmRDaGlsZChiYWNrZHJvcFN0eWxlVGFnKTtcbiAgLy9tb2JpbGVDaGVja291dEJhY2tkcm9wLmNsYXNzTGlzdC5hZGQoJ21vYmlsZUNoZWNrb3V0QmFja2Ryb3AnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIG5vWm9vbU1ldGFUYWcucmVtb3ZlKCk7XG4gICAgICAvL21vYmlsZUNoZWNrb3V0QmFja2Ryb3AucmVtb3ZlKCk7XG4gICAgICBpZiAob3JpZ2luYWxNZXRhVGFnKSB7XG4gICAgICAgIFNob3BiZWFtLkRPQ1VNRU5UX0hFQUQuYXBwZW5kQ2hpbGQob3JpZ2luYWxNZXRhVGFnKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBvcmlnaW5hbE1ldGFUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJ2aWV3cG9ydFwiXScpIHx8IG5ld0RlZmF1bHRNZXRhVGFnO1xuICAgICAgaWYgKG9yaWdpbmFsTWV0YVRhZykge1xuICAgICAgICBvcmlnaW5hbE1ldGFUYWcucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICBTaG9wYmVhbS5ET0NVTUVOVF9IRUFELmFwcGVuZENoaWxkKG5vWm9vbU1ldGFUYWcpO1xuICAgICAgLy9TaG9wYmVhbS5ET0NVTUVOVF9CT0RZLnRoZW4oZnVuY3Rpb24oYm9keSkge1xuICAgICAgLy8gIGJvZHkuYXBwZW5kQ2hpbGQobW9iaWxlQ2hlY2tvdXRCYWNrZHJvcClcbiAgICAgIC8vfSlcbiAgICB9XG4gIH07XG59KCkpO1xuIl19
;
